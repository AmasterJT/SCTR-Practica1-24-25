
Practica1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012504  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00069460  080126b4  080126b4  000226b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807bb14  0807bb14  000900ec  2**0
                  CONTENTS
  4 .ARM          00000008  0807bb14  0807bb14  0008bb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807bb1c  0807bb1c  000900ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807bb1c  0807bb1c  0008bb1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807bb20  0807bb20  0008bb20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0807bb24  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000900ec  2**0
                  CONTENTS
 10 .bss          00009b14  200000ec  200000ec  000900ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009c00  20009c00  000900ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000900ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0009011c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00035978  00000000  00000000  0009015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007dd6  00000000  00000000  000c5ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002c90  00000000  00000000  000cd8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000021d7  00000000  00000000  000d0540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f9b8  00000000  00000000  000d2717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00039be5  00000000  00000000  001020cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb825  00000000  00000000  0013bcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000beb4  00000000  00000000  002374dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b2  00000000  00000000  00243390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801269c 	.word	0x0801269c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	0801269c 	.word	0x0801269c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <InicializaBarraProgreso>:
//------------------------------------------------------------------------------------------------------
// funciones: inicializacion de los componentes

void InicializaBarraProgreso(BarraProgreso *barraProgreso, int16_t xBarra,
                             uint16_t yBarra, uint16_t ancho, uint16_t alto,  const LCD_JuegoCaracteresAlpha * pJuegoCaracteres, uint8_t separacion,
                             uint32_t color, void (*pFunc)(void)) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4603      	mov	r3, r0
 80005ac:	817b      	strh	r3, [r7, #10]
 80005ae:	460b      	mov	r3, r1
 80005b0:	813b      	strh	r3, [r7, #8]
 80005b2:	4613      	mov	r3, r2
 80005b4:	80fb      	strh	r3, [r7, #6]
  barraProgreso->Posx = xBarra;
 80005b6:	897a      	ldrh	r2, [r7, #10]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	801a      	strh	r2, [r3, #0]
  barraProgreso->Posy = yBarra;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	893a      	ldrh	r2, [r7, #8]
 80005c0:	805a      	strh	r2, [r3, #2]
  barraProgreso->alto = alto;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	8b3a      	ldrh	r2, [r7, #24]
 80005c6:	80da      	strh	r2, [r3, #6]
  barraProgreso->ancho = ancho;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	88fa      	ldrh	r2, [r7, #6]
 80005cc:	809a      	strh	r2, [r3, #4]
  barraProgreso ->pJuegoCaracteres = pJuegoCaracteres;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	69fa      	ldr	r2, [r7, #28]
 80005d2:	60da      	str	r2, [r3, #12]
  barraProgreso->separacion = separacion;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80005da:	741a      	strb	r2, [r3, #16]
  barraProgreso->color = color;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e0:	609a      	str	r2, [r3, #8]
  barraProgreso->finalizacion = 0;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  barraProgreso->pFuncion = pFunc;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005ec:	615a      	str	r2, [r3, #20]

} // InicializaBarraProgreso
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <InicializaPulsador>:

void InicializaPulsador(Pulsador *pulsador, int16_t xPulsador, uint16_t yPulsador,
                        uint16_t ancho, uint16_t alto, uint32_t colorFondo,  uint32_t colorTexto,
                        int activacion, int pulsado, void (*pFuncAct)(void),
                        void (*pFuncDes)(void)) {
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	4608      	mov	r0, r1
 8000604:	4611      	mov	r1, r2
 8000606:	461a      	mov	r2, r3
 8000608:	4603      	mov	r3, r0
 800060a:	817b      	strh	r3, [r7, #10]
 800060c:	460b      	mov	r3, r1
 800060e:	813b      	strh	r3, [r7, #8]
 8000610:	4613      	mov	r3, r2
 8000612:	80fb      	strh	r3, [r7, #6]
  pulsador->Posx = xPulsador;
 8000614:	897a      	ldrh	r2, [r7, #10]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	801a      	strh	r2, [r3, #0]
  pulsador->Posy = yPulsador;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	893a      	ldrh	r2, [r7, #8]
 800061e:	805a      	strh	r2, [r3, #2]
  pulsador->ancho = ancho;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	88fa      	ldrh	r2, [r7, #6]
 8000624:	809a      	strh	r2, [r3, #4]
  pulsador->alto = alto;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	8b3a      	ldrh	r2, [r7, #24]
 800062a:	80da      	strh	r2, [r3, #6]
  pulsador->colorFondo = colorFondo;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	69fa      	ldr	r2, [r7, #28]
 8000630:	609a      	str	r2, [r3, #8]
  pulsador->colorTexto = colorTexto;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	6a3a      	ldr	r2, [r7, #32]
 8000636:	60da      	str	r2, [r3, #12]
  pulsador->pulsado = pulsado;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800063c:	619a      	str	r2, [r3, #24]
  pulsador->activacion = activacion;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000642:	61da      	str	r2, [r3, #28]
  pulsador->pFuncionActivacion = pFuncAct;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000648:	611a      	str	r2, [r3, #16]
  pulsador->pFuncionDesactivacion = pFuncDes;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800064e:	615a      	str	r2, [r3, #20]

} // InicializaBoton
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <inicializaBarraTexto>:
} // InicializaInterruptor

void inicializaBarraTexto(BarraTexto *barraTexto, uint16_t xBarraTexto,
                          uint16_t yBarraTexto, uint16_t ancho, uint16_t alto,
						  const LCD_JuegoCaracteresAlpha * pJuegoCaracteres, uint8_t separacion, uint32_t colorFondo, uint32_t colorTexto,
                          int alineacion, char *texto) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	4608      	mov	r0, r1
 8000666:	4611      	mov	r1, r2
 8000668:	461a      	mov	r2, r3
 800066a:	4603      	mov	r3, r0
 800066c:	817b      	strh	r3, [r7, #10]
 800066e:	460b      	mov	r3, r1
 8000670:	813b      	strh	r3, [r7, #8]
 8000672:	4613      	mov	r3, r2
 8000674:	80fb      	strh	r3, [r7, #6]
  barraTexto->Posx = xBarraTexto;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	897a      	ldrh	r2, [r7, #10]
 800067a:	801a      	strh	r2, [r3, #0]
  barraTexto->Posy = yBarraTexto;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	893a      	ldrh	r2, [r7, #8]
 8000680:	805a      	strh	r2, [r3, #2]
  barraTexto->ancho = ancho;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	88fa      	ldrh	r2, [r7, #6]
 8000686:	809a      	strh	r2, [r3, #4]
  barraTexto->alto = alto;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	8b3a      	ldrh	r2, [r7, #24]
 800068c:	80da      	strh	r2, [r3, #6]
  barraTexto->pJuegoCaracteres = pJuegoCaracteres;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	69fa      	ldr	r2, [r7, #28]
 8000692:	609a      	str	r2, [r3, #8]
  barraTexto->separacion=separacion;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f897 2020 	ldrb.w	r2, [r7, #32]
 800069a:	731a      	strb	r2, [r3, #12]
  barraTexto->colorFondo = colorFondo;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a0:	611a      	str	r2, [r3, #16]
  barraTexto->colorTexto = colorTexto;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006a6:	615a      	str	r2, [r3, #20]
  barraTexto->alineacion = alineacion;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006ac:	619a      	str	r2, [r3, #24]
  strcpy(barraTexto->texto, texto);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	331c      	adds	r3, #28
 80006b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80006b4:	4618      	mov	r0, r3
 80006b6:	f011 fc55 	bl	8011f64 <strcpy>

} // inicializaBarraTexto
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <inicializaEtiqueta>:

void inicializaEtiqueta(Etiqueta *etiqueta, uint16_t xEtiqueta,
                        uint16_t yEtiqueta, uint16_t ancho, uint16_t alto,
                        const uint8_t *imagen, int habilitacion,
                        int visibilidad) {
 80006c2:	b480      	push	{r7}
 80006c4:	b085      	sub	sp, #20
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	4608      	mov	r0, r1
 80006cc:	4611      	mov	r1, r2
 80006ce:	461a      	mov	r2, r3
 80006d0:	4603      	mov	r3, r0
 80006d2:	817b      	strh	r3, [r7, #10]
 80006d4:	460b      	mov	r3, r1
 80006d6:	813b      	strh	r3, [r7, #8]
 80006d8:	4613      	mov	r3, r2
 80006da:	80fb      	strh	r3, [r7, #6]
  etiqueta->Posx = xEtiqueta;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	897a      	ldrh	r2, [r7, #10]
 80006e0:	801a      	strh	r2, [r3, #0]
  etiqueta->Posy = yEtiqueta;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	893a      	ldrh	r2, [r7, #8]
 80006e6:	805a      	strh	r2, [r3, #2]
  etiqueta->ancho = ancho;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	809a      	strh	r2, [r3, #4]
  etiqueta->alto = alto;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	8b3a      	ldrh	r2, [r7, #24]
 80006f2:	80da      	strh	r2, [r3, #6]
  etiqueta->imagen = imagen;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	69fa      	ldr	r2, [r7, #28]
 80006f8:	609a      	str	r2, [r3, #8]
  etiqueta->habilitacion = habilitacion;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	6a3a      	ldr	r2, [r7, #32]
 80006fe:	60da      	str	r2, [r3, #12]
  etiqueta->visibilidad = visibilidad;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000704:	611a      	str	r2, [r3, #16]

} // inicializaEtiqueta
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <inicializaEditorTexto>:
                           uint16_t yEditor, uint16_t anchoBotones,
                           uint16_t anchoVisualizador, uint16_t alto,
						   const LCD_JuegoCaracteresAlpha * pJuegoCaracteres, uint8_t separacion,
                           uint32_t colorFondo, uint32_t colorTexto,
                           uint32_t colorBotones, uint32_t colorTextoBotones,
                           int Cuenta, int incremento) {
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b08d      	sub	sp, #52	; 0x34
 8000718:	af08      	add	r7, sp, #32
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	4608      	mov	r0, r1
 800071e:	4611      	mov	r1, r2
 8000720:	461a      	mov	r2, r3
 8000722:	4603      	mov	r3, r0
 8000724:	817b      	strh	r3, [r7, #10]
 8000726:	460b      	mov	r3, r1
 8000728:	813b      	strh	r3, [r7, #8]
 800072a:	4613      	mov	r3, r2
 800072c:	80fb      	strh	r3, [r7, #6]

  editorTexto->Posx = xEditor;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	897a      	ldrh	r2, [r7, #10]
 8000732:	801a      	strh	r2, [r3, #0]
  editorTexto->Posy = yEditor;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	893a      	ldrh	r2, [r7, #8]
 8000738:	805a      	strh	r2, [r3, #2]
  editorTexto->anchoVisualizador = anchoVisualizador;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	8c3a      	ldrh	r2, [r7, #32]
 800073e:	80da      	strh	r2, [r3, #6]
  editorTexto->anchoBotones = anchoBotones;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	88fa      	ldrh	r2, [r7, #6]
 8000744:	809a      	strh	r2, [r3, #4]
  editorTexto->alto = alto;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800074a:	811a      	strh	r2, [r3, #8]
  editorTexto->pJuegoCaracteres = pJuegoCaracteres;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000750:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  editorTexto ->separacion=separacion;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800075a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
  editorTexto->colorFondo = colorFondo;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000762:	60da      	str	r2, [r3, #12]
  editorTexto->colorTexto = colorTexto;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000768:	611a      	str	r2, [r3, #16]
  editorTexto->colorBotones = colorBotones;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800076e:	615a      	str	r2, [r3, #20]
  editorTexto->colorTextoBotones = colorTextoBotones;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000774:	619a      	str	r2, [r3, #24]
  editorTexto->Cuenta = Cuenta;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800077a:	61da      	str	r2, [r3, #28]
  editorTexto->incremento = incremento;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000780:	621a      	str	r2, [r3, #32]

  editorTexto->pulsacionAnterior = 0;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  InicializaPulsador(&editorTexto->PulResta, xEditor, yEditor, anchoBotones,
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000790:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000794:	88fc      	ldrh	r4, [r7, #6]
 8000796:	893a      	ldrh	r2, [r7, #8]
 8000798:	2300      	movs	r3, #0
 800079a:	9306      	str	r3, [sp, #24]
 800079c:	2300      	movs	r3, #0
 800079e:	9305      	str	r3, [sp, #20]
 80007a0:	2300      	movs	r3, #0
 80007a2:	9304      	str	r3, [sp, #16]
 80007a4:	2301      	movs	r3, #1
 80007a6:	9303      	str	r3, [sp, #12]
 80007a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007aa:	9302      	str	r3, [sp, #8]
 80007ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	4623      	mov	r3, r4
 80007b6:	f7ff ff20 	bl	80005fa <InicializaPulsador>
                     alto, colorBotones, colorTextoBotones, 1, 0, 0, 0);  // no tenemos ninguna funcion de activacion y desacticacion

  inicializaBarraTexto(&editorTexto->barraTexto, xEditor + anchoBotones,
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80007c0:	897a      	ldrh	r2, [r7, #10]
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	4413      	add	r3, r2
 80007c6:	b299      	uxth	r1, r3
 80007c8:	8c3c      	ldrh	r4, [r7, #32]
 80007ca:	893a      	ldrh	r2, [r7, #8]
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <inicializaEditorTexto+0x120>)
 80007ce:	9306      	str	r3, [sp, #24]
 80007d0:	2301      	movs	r3, #1
 80007d2:	9305      	str	r3, [sp, #20]
 80007d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d6:	9304      	str	r3, [sp, #16]
 80007d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007da:	9303      	str	r3, [sp, #12]
 80007dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007e0:	9302      	str	r3, [sp, #8]
 80007e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	4623      	mov	r3, r4
 80007ec:	f7ff ff36 	bl	800065c <inicializaBarraTexto>
                       yEditor, anchoVisualizador, alto, pJuegoCaracteres, separacion, colorFondo, colorTexto,
                       1, "");

  InicializaPulsador(&editorTexto->PulSuma,
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f103 0024 	add.w	r0, r3, #36	; 0x24
                     xEditor + anchoBotones + anchoVisualizador, yEditor,
 80007f6:	897a      	ldrh	r2, [r7, #10]
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	4413      	add	r3, r2
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	8c3b      	ldrh	r3, [r7, #32]
 8000800:	4413      	add	r3, r2
 8000802:	b29b      	uxth	r3, r3
  InicializaPulsador(&editorTexto->PulSuma,
 8000804:	b219      	sxth	r1, r3
 8000806:	88fc      	ldrh	r4, [r7, #6]
 8000808:	893a      	ldrh	r2, [r7, #8]
 800080a:	2300      	movs	r3, #0
 800080c:	9306      	str	r3, [sp, #24]
 800080e:	2300      	movs	r3, #0
 8000810:	9305      	str	r3, [sp, #20]
 8000812:	2300      	movs	r3, #0
 8000814:	9304      	str	r3, [sp, #16]
 8000816:	2301      	movs	r3, #1
 8000818:	9303      	str	r3, [sp, #12]
 800081a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	4623      	mov	r3, r4
 8000828:	f7ff fee7 	bl	80005fa <InicializaPulsador>
                     anchoBotones, alto, colorBotones, colorTextoBotones, 1, 0, 0, 0); // no tenemos ninguna funcion de activacion y desacticacion
} // inicializaEditorTexto
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	080126b4 	.word	0x080126b4

08000838 <dibujaBarraTexto>:
      &juegoAlpha15, enBlancoYNegro, transparencia);

} // DibujaInterruptor

void dibujaBarraTexto(BarraTexto *barraTexto, int enBlancoYNegro,
                      int transparencia) {
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b08f      	sub	sp, #60	; 0x3c
 800083c:	af04      	add	r7, sp, #16
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  uint16_t xBarraTexto = barraTexto->Posx;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t yBarraTexto = barraTexto->Posy;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	885b      	ldrh	r3, [r3, #2]
 800084e:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t ancho = barraTexto->ancho;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	889b      	ldrh	r3, [r3, #4]
 8000854:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t alto = barraTexto->alto;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	88db      	ldrh	r3, [r3, #6]
 800085a:	843b      	strh	r3, [r7, #32]
  uint32_t colorFondo = barraTexto->colorFondo;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	61fb      	str	r3, [r7, #28]
  uint32_t colorTexto = barraTexto->colorTexto;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	61bb      	str	r3, [r7, #24]
  int alineacion = barraTexto->alineacion;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	617b      	str	r3, [r7, #20]

  uint8_t AltoTexto = (barraTexto->pJuegoCaracteres)->alto;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	74fb      	strb	r3, [r7, #19]

  LCD_dibujaRectanguloRelleno(xBarraTexto, yBarraTexto, ancho, alto, colorFondo,
 8000876:	8c3c      	ldrh	r4, [r7, #32]
 8000878:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800087a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800087c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	9302      	str	r3, [sp, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	4623      	mov	r3, r4
 800088c:	f001 fe00 	bl	8002490 <LCD_dibujaRectanguloRelleno>
                              enBlancoYNegro, transparencia);

  if (alineacion == 0)
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d11b      	bne.n	80008ce <dibujaBarraTexto+0x96>
    LCD_dibujaCadenaCaracteresAlpha(
        xBarraTexto, yBarraTexto + alto / 2 - AltoTexto / 2, barraTexto->texto,
 8000896:	8c3b      	ldrh	r3, [r7, #32]
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	b29a      	uxth	r2, r3
 800089c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800089e:	4413      	add	r3, r2
 80008a0:	b29a      	uxth	r2, r3
    LCD_dibujaCadenaCaracteresAlpha(
 80008a2:	7cfb      	ldrb	r3, [r7, #19]
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	b299      	uxth	r1, r3
        xBarraTexto, yBarraTexto + alto / 2 - AltoTexto / 2, barraTexto->texto,
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f103 021c 	add.w	r2, r3, #28
    LCD_dibujaCadenaCaracteresAlpha(
 80008b4:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	9303      	str	r3, [sp, #12]
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	9302      	str	r3, [sp, #8]
 80008be:	4b34      	ldr	r3, [pc, #208]	; (8000990 <dibujaBarraTexto+0x158>)
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2301      	movs	r3, #1
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	f002 f807 	bl	80028da <LCD_dibujaCadenaCaracteresAlpha>
        xBarraTexto + ancho -
            LCD_anchoCadenaCaracteresAlpha(barraTexto->texto, barraTexto->pJuegoCaracteres, 1),
        yBarraTexto + alto / 2 - AltoTexto / 2, barraTexto->texto, colorTexto,
        1, &juegoAlpha15, enBlancoYNegro, transparencia);

} // dibujaBarraTexto
 80008cc:	e05b      	b.n	8000986 <dibujaBarraTexto+0x14e>
  else if (alineacion == 1)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d12e      	bne.n	8000932 <dibujaBarraTexto+0xfa>
        xBarraTexto + ancho / 2 -
 80008d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80008d6:	085b      	lsrs	r3, r3, #1
 80008d8:	b29a      	uxth	r2, r3
 80008da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008dc:	4413      	add	r3, r2
 80008de:	b29c      	uxth	r4, r3
            LCD_anchoCadenaCaracteresAlpha(barraTexto->texto, barraTexto->pJuegoCaracteres,
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f103 001c 	add.w	r0, r3, #28
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	2201      	movs	r2, #1
 80008ec:	4619      	mov	r1, r3
 80008ee:	f001 ffa3 	bl	8002838 <LCD_anchoCadenaCaracteresAlpha>
 80008f2:	4603      	mov	r3, r0
    LCD_dibujaCadenaCaracteresAlpha(
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	1ae3      	subs	r3, r4, r3
 80008fa:	b298      	uxth	r0, r3
        yBarraTexto + alto / 2 - AltoTexto / 2, barraTexto->texto, colorTexto,
 80008fc:	8c3b      	ldrh	r3, [r7, #32]
 80008fe:	085b      	lsrs	r3, r3, #1
 8000900:	b29a      	uxth	r2, r3
 8000902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000904:	4413      	add	r3, r2
 8000906:	b29a      	uxth	r2, r3
    LCD_dibujaCadenaCaracteresAlpha(
 8000908:	7cfb      	ldrb	r3, [r7, #19]
 800090a:	085b      	lsrs	r3, r3, #1
 800090c:	b2db      	uxtb	r3, r3
 800090e:	b29b      	uxth	r3, r3
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	b299      	uxth	r1, r3
        yBarraTexto + alto / 2 - AltoTexto / 2, barraTexto->texto, colorTexto,
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f103 021c 	add.w	r2, r3, #28
    LCD_dibujaCadenaCaracteresAlpha(
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	9303      	str	r3, [sp, #12]
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	9302      	str	r3, [sp, #8]
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <dibujaBarraTexto+0x158>)
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	2301      	movs	r3, #1
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	f001 ffd5 	bl	80028da <LCD_dibujaCadenaCaracteresAlpha>
} // dibujaBarraTexto
 8000930:	e029      	b.n	8000986 <dibujaBarraTexto+0x14e>
        xBarraTexto + ancho -
 8000932:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000934:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000936:	4413      	add	r3, r2
 8000938:	b29c      	uxth	r4, r3
            LCD_anchoCadenaCaracteresAlpha(barraTexto->texto, barraTexto->pJuegoCaracteres, 1),
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f103 001c 	add.w	r0, r3, #28
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	2201      	movs	r2, #1
 8000946:	4619      	mov	r1, r3
 8000948:	f001 ff76 	bl	8002838 <LCD_anchoCadenaCaracteresAlpha>
 800094c:	4603      	mov	r3, r0
    LCD_dibujaCadenaCaracteresAlpha(
 800094e:	1ae3      	subs	r3, r4, r3
 8000950:	b298      	uxth	r0, r3
        yBarraTexto + alto / 2 - AltoTexto / 2, barraTexto->texto, colorTexto,
 8000952:	8c3b      	ldrh	r3, [r7, #32]
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	b29a      	uxth	r2, r3
 8000958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800095a:	4413      	add	r3, r2
 800095c:	b29a      	uxth	r2, r3
    LCD_dibujaCadenaCaracteresAlpha(
 800095e:	7cfb      	ldrb	r3, [r7, #19]
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	b29b      	uxth	r3, r3
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	b299      	uxth	r1, r3
        yBarraTexto + alto / 2 - AltoTexto / 2, barraTexto->texto, colorTexto,
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f103 021c 	add.w	r2, r3, #28
    LCD_dibujaCadenaCaracteresAlpha(
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	9303      	str	r3, [sp, #12]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <dibujaBarraTexto+0x158>)
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	2301      	movs	r3, #1
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	f001 ffaa 	bl	80028da <LCD_dibujaCadenaCaracteresAlpha>
} // dibujaBarraTexto
 8000986:	bf00      	nop
 8000988:	372c      	adds	r7, #44	; 0x2c
 800098a:	46bd      	mov	sp, r7
 800098c:	bd90      	pop	{r4, r7, pc}
 800098e:	bf00      	nop
 8000990:	08067dfc 	.word	0x08067dfc

08000994 <dibujaEtiqueta>:

void dibujaEtiqueta(Etiqueta *etiqueta) {
 8000994:	b5b0      	push	{r4, r5, r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af04      	add	r7, sp, #16
 800099a:	6078      	str	r0, [r7, #4]
  int transparencia = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  int habilitacion = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
  if (etiqueta->habilitacion == 1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d101      	bne.n	80009b0 <dibujaEtiqueta+0x1c>
    habilitacion = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  if (etiqueta->visibilidad == 0)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d101      	bne.n	80009bc <dibujaEtiqueta+0x28>
    transparencia = 100;
 80009b8:	2364      	movs	r3, #100	; 0x64
 80009ba:	60fb      	str	r3, [r7, #12]

  LCD_dibujaImagen(etiqueta->Posx, etiqueta->Posy, etiqueta->ancho,
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	8818      	ldrh	r0, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	8859      	ldrh	r1, [r3, #2]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	889c      	ldrh	r4, [r3, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	88dd      	ldrh	r5, [r3, #6]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	9202      	str	r2, [sp, #8]
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	9201      	str	r2, [sp, #4]
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	462b      	mov	r3, r5
 80009dc:	4622      	mov	r2, r4
 80009de:	f001 fe02 	bl	80025e6 <LCD_dibujaImagen>
                   etiqueta->alto, etiqueta->imagen, habilitacion,
                   transparencia);
} // dibujaEtiqueta
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080009ec <dibujaEditorTexto>:

void dibujaEditorTexto(EditorTexto *editorTexto, int enBlancoYNegro,
                       int transparencia) {
 80009ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ee:	b0b1      	sub	sp, #196	; 0xc4
 80009f0:	af04      	add	r7, sp, #16
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]

  // dibujamos el boton de resta
  Pulsador PulResta = editorTexto->PulResta;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80009fe:	f103 0544 	add.w	r5, r3, #68	; 0x44
 8000a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Pulsador PulSuma = editorTexto->PulSuma;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8000a14:	f103 0524 	add.w	r5, r3, #36	; 0x24
 8000a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  BarraTexto barraTexto = editorTexto->barraTexto;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000a2a:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8000a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  uint16_t AltoTexto = juegoAlpha15.alto;
 8000a42:	4b6a      	ldr	r3, [pc, #424]	; (8000bec <dibujaEditorTexto+0x200>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

  char texto[31];
  sprintf(texto, "%d", editorTexto->Cuenta);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	69da      	ldr	r2, [r3, #28]
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4967      	ldr	r1, [pc, #412]	; (8000bf0 <dibujaEditorTexto+0x204>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f011 fa21 	bl	8011e9c <siprintf>
  uint16_t AnchoTexto =LCD_anchoCadenaCaracteresAlpha(texto, editorTexto->pJuegoCaracteres, editorTexto->separacion);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fee3 	bl	8002838 <LCD_anchoCadenaCaracteresAlpha>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac



  LCD_dibujaCuadrado(PulResta.Posx, PulResta.Posy, PulResta.ancho, PulResta.colorFondo, 0, 0);
 8000a78:	f8b7 008c 	ldrh.w	r0, [r7, #140]	; 0x8c
 8000a7c:	f8b7 108e 	ldrh.w	r1, [r7, #142]	; 0x8e
 8000a80:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8000a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a88:	2400      	movs	r4, #0
 8000a8a:	9401      	str	r4, [sp, #4]
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	9400      	str	r4, [sp, #0]
 8000a90:	f001 fd8e 	bl	80025b0 <LCD_dibujaCuadrado>
  LCD_dibujaCuadrado(PulSuma.Posx, PulSuma.Posy, PulSuma.ancho, PulSuma.colorFondo, 0, 0);
 8000a94:	f8b7 006c 	ldrh.w	r0, [r7, #108]	; 0x6c
 8000a98:	f8b7 106e 	ldrh.w	r1, [r7, #110]	; 0x6e
 8000a9c:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8000aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000aa2:	2400      	movs	r4, #0
 8000aa4:	9401      	str	r4, [sp, #4]
 8000aa6:	2400      	movs	r4, #0
 8000aa8:	9400      	str	r4, [sp, #0]
 8000aaa:	f001 fd81 	bl	80025b0 <LCD_dibujaCuadrado>
  //dibujaBarraTexto(&barraTexto,0,0);

  LCD_dibujaRectanguloRelleno(
 8000aae:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8000ab0:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8000ab2:	8ebc      	ldrh	r4, [r7, #52]	; 0x34
 8000ab4:	8efd      	ldrh	r5, [r7, #54]	; 0x36
 8000ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	9202      	str	r2, [sp, #8]
 8000abc:	68ba      	ldr	r2, [r7, #8]
 8000abe:	9201      	str	r2, [sp, #4]
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	462b      	mov	r3, r5
 8000ac4:	4622      	mov	r2, r4
 8000ac6:	f001 fce3 	bl	8002490 <LCD_dibujaRectanguloRelleno>
      barraTexto.colorFondo, enBlancoYNegro, transparencia);



  LCD_dibujaCaracterAlpha(
      PulResta.Posx +
 8000aca:	f8b7 408c 	ldrh.w	r4, [r7, #140]	; 0x8c
          (PulResta.ancho - LCD_anchoCaracterAlpha('-', editorTexto->pJuegoCaracteres)) / 2,
 8000ace:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8000ad2:	461d      	mov	r5, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000ada:	4619      	mov	r1, r3
 8000adc:	202d      	movs	r0, #45	; 0x2d
 8000ade:	f001 fe91 	bl	8002804 <LCD_anchoCaracterAlpha>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	1aeb      	subs	r3, r5, r3
 8000ae6:	0fda      	lsrs	r2, r3, #31
 8000ae8:	4413      	add	r3, r2
 8000aea:	105b      	asrs	r3, r3, #1
  LCD_dibujaCaracterAlpha(
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	4423      	add	r3, r4
 8000af0:	b298      	uxth	r0, r3
      PulResta.Posy + (PulResta.alto - AltoTexto) / 2, '-', PulResta.colorTexto,
 8000af2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8000af6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8000afa:	4619      	mov	r1, r3
 8000afc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000b00:	1acb      	subs	r3, r1, r3
 8000b02:	0fd9      	lsrs	r1, r3, #31
 8000b04:	440b      	add	r3, r1
 8000b06:	105b      	asrs	r3, r3, #1
  LCD_dibujaCaracterAlpha(
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b299      	uxth	r1, r3
 8000b0e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	9202      	str	r2, [sp, #8]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	9201      	str	r2, [sp, #4]
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	4623      	mov	r3, r4
 8000b24:	222d      	movs	r2, #45	; 0x2d
 8000b26:	f001 fdef 	bl	8002708 <LCD_dibujaCaracterAlpha>
	  editorTexto->pJuegoCaracteres, enBlancoYNegro, transparencia);

  LCD_dibujaCaracterAlpha(
      PulSuma.Posx +
 8000b2a:	f8b7 406c 	ldrh.w	r4, [r7, #108]	; 0x6c
          (PulSuma.ancho - LCD_anchoCaracterAlpha('+', editorTexto->pJuegoCaracteres)) / 2,
 8000b2e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000b32:	461d      	mov	r5, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	202b      	movs	r0, #43	; 0x2b
 8000b3e:	f001 fe61 	bl	8002804 <LCD_anchoCaracterAlpha>
 8000b42:	4603      	mov	r3, r0
 8000b44:	1aeb      	subs	r3, r5, r3
 8000b46:	0fda      	lsrs	r2, r3, #31
 8000b48:	4413      	add	r3, r2
 8000b4a:	105b      	asrs	r3, r3, #1
  LCD_dibujaCaracterAlpha(
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	4423      	add	r3, r4
 8000b50:	b298      	uxth	r0, r3
      PulSuma.Posy + (PulSuma.alto - AltoTexto) / 2, '+', PulSuma.colorTexto,
 8000b52:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000b56:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000b60:	1acb      	subs	r3, r1, r3
 8000b62:	0fd9      	lsrs	r1, r3, #31
 8000b64:	440b      	add	r3, r1
 8000b66:	105b      	asrs	r3, r3, #1
  LCD_dibujaCaracterAlpha(
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b299      	uxth	r1, r3
 8000b6e:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	9202      	str	r2, [sp, #8]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	9201      	str	r2, [sp, #4]
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	4623      	mov	r3, r4
 8000b82:	222b      	movs	r2, #43	; 0x2b
 8000b84:	f001 fdc0 	bl	8002708 <LCD_dibujaCaracterAlpha>
	  editorTexto->pJuegoCaracteres, enBlancoYNegro, transparencia);

  LCD_dibujaCadenaCaracteresAlpha(
      barraTexto.Posx + (barraTexto.ancho -AnchoTexto) / 2,
 8000b88:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b92:	1acb      	subs	r3, r1, r3
 8000b94:	0fd9      	lsrs	r1, r3, #31
 8000b96:	440b      	add	r3, r1
 8000b98:	105b      	asrs	r3, r3, #1
  LCD_dibujaCadenaCaracteresAlpha(
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b298      	uxth	r0, r3
      barraTexto.Posy + (PulSuma.alto - AltoTexto) / 2, texto, barraTexto.colorTexto, editorTexto->separacion,
 8000ba0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8000ba2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000bac:	1acb      	subs	r3, r1, r3
 8000bae:	0fd9      	lsrs	r1, r3, #31
 8000bb0:	440b      	add	r3, r1
 8000bb2:	105b      	asrs	r3, r3, #1
  LCD_dibujaCadenaCaracteresAlpha(
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b29c      	uxth	r4, r3
 8000bba:	6c7e      	ldr	r6, [r7, #68]	; 0x44
      barraTexto.Posy + (PulSuma.alto - AltoTexto) / 2, texto, barraTexto.colorTexto, editorTexto->separacion,
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
  LCD_dibujaCadenaCaracteresAlpha(
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8000bca:	f107 0510 	add.w	r5, r7, #16
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	9103      	str	r1, [sp, #12]
 8000bd2:	68b9      	ldr	r1, [r7, #8]
 8000bd4:	9102      	str	r1, [sp, #8]
 8000bd6:	9201      	str	r2, [sp, #4]
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	4633      	mov	r3, r6
 8000bdc:	462a      	mov	r2, r5
 8000bde:	4621      	mov	r1, r4
 8000be0:	f001 fe7b 	bl	80028da <LCD_dibujaCadenaCaracteresAlpha>
	  editorTexto->pJuegoCaracteres, enBlancoYNegro, transparencia);

} // dibujaEditorTexto
 8000be4:	bf00      	nop
 8000be6:	37b4      	adds	r7, #180	; 0xb4
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bec:	08067dfc 	.word	0x08067dfc
 8000bf0:	080126d8 	.word	0x080126d8

08000bf4 <VerificaBarraProgreso>:

//-------------------------------------------------------------------------------------------------------
// funciones: comportamiento de los componentes

void VerificaBarraProgreso(uint16_t Variable, BarraProgreso *barraProgreso,
                           int enBlancoYNegro, int transparencia) {
 8000bf4:	b5b0      	push	{r4, r5, r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af04      	add	r7, sp, #16
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	4603      	mov	r3, r0
 8000c02:	81fb      	strh	r3, [r7, #14]

  // extraemos toda la informacion de la barra
  uint16_t xBarra = barraProgreso->Posx;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t yBarra = barraProgreso->Posy;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	885b      	ldrh	r3, [r3, #2]
 8000c0e:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t ancho = barraProgreso->ancho;
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	889b      	ldrh	r3, [r3, #4]
 8000c14:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t alto = barraProgreso->alto;
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	88db      	ldrh	r3, [r3, #6]
 8000c1a:	843b      	strh	r3, [r7, #32]
  uint32_t color = barraProgreso->color;
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	61fb      	str	r3, [r7, #28]

  uint8_t AltoTexto = barraProgreso->pJuegoCaracteres->alto; // altura del texto
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	76fb      	strb	r3, [r7, #27]
  char texto[10];

  if (Variable >= ancho - 2) {
 8000c2a:	89fa      	ldrh	r2, [r7, #14]
 8000c2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c2e:	3b02      	subs	r3, #2
 8000c30:	429a      	cmp	r2, r3
 8000c32:	db0a      	blt.n	8000c4a <VerificaBarraProgreso+0x56>
    sprintf(texto, "%d", 100); // pasamos el numero entero a texto
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	2264      	movs	r2, #100	; 0x64
 8000c3a:	4956      	ldr	r1, [pc, #344]	; (8000d94 <VerificaBarraProgreso+0x1a0>)
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f011 f92d 	bl	8011e9c <siprintf>
    Variable = ancho - 2; // una vez que llega al ancho maximo el rectangulo
 8000c42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c44:	3b02      	subs	r3, #2
 8000c46:	81fb      	strh	r3, [r7, #14]
 8000c48:	e028      	b.n	8000c9c <VerificaBarraProgreso+0xa8>
                          // deja de cambiar de tamaño
  } else {
    LCD_dibujaRectanguloRelleno(
        xBarra + Variable + 1, yBarra + 1, ancho - Variable - 2, alto - 2,
 8000c4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c4c:	89fb      	ldrh	r3, [r7, #14]
 8000c4e:	4413      	add	r3, r2
 8000c50:	b29b      	uxth	r3, r3
    LCD_dibujaRectanguloRelleno(
 8000c52:	3301      	adds	r3, #1
 8000c54:	b298      	uxth	r0, r3
 8000c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b299      	uxth	r1, r3
        xBarra + Variable + 1, yBarra + 1, ancho - Variable - 2, alto - 2,
 8000c5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	b29b      	uxth	r3, r3
    LCD_dibujaRectanguloRelleno(
 8000c64:	3b02      	subs	r3, #2
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	8c3b      	ldrh	r3, [r7, #32]
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	b29c      	uxth	r4, r3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	4623      	mov	r3, r4
 8000c7e:	f001 fc07 	bl	8002490 <LCD_dibujaRectanguloRelleno>
        0xFF000000, enBlancoYNegro, transparencia); // fondo de la barra
    sprintf(texto, "%d",
            (Variable * 100) / ancho); // pasamos el numero entero a texto
 8000c82:	89fb      	ldrh	r3, [r7, #14]
 8000c84:	2264      	movs	r2, #100	; 0x64
 8000c86:	fb03 f202 	mul.w	r2, r3, r2
    sprintf(texto, "%d",
 8000c8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c8c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	493f      	ldr	r1, [pc, #252]	; (8000d94 <VerificaBarraProgreso+0x1a0>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f011 f900 	bl	8011e9c <siprintf>
  }
  strcat(texto, "%"); // concatenamos el % al final del texto
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff faa5 	bl	80001f0 <strlen>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	461a      	mov	r2, r3
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4413      	add	r3, r2
 8000cb0:	4939      	ldr	r1, [pc, #228]	; (8000d98 <VerificaBarraProgreso+0x1a4>)
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	8013      	strh	r3, [r2, #0]

  // dibujamos la barra
  LCD_dibujaRectangulo(xBarra, yBarra, ancho, alto, color, enBlancoYNegro,
 8000cba:	8c3c      	ldrh	r4, [r7, #32]
 8000cbc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000cbe:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000cc0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	9302      	str	r3, [sp, #8]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	4623      	mov	r3, r4
 8000cd0:	f001 fb80 	bl	80023d4 <LCD_dibujaRectangulo>
                       transparencia); // borde de la barra
  LCD_dibujaRectanguloRelleno(xBarra + 1, yBarra + 1, Variable, alto - 2, color,
 8000cd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	b298      	uxth	r0, r3
 8000cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cdc:	3301      	adds	r3, #1
 8000cde:	b299      	uxth	r1, r3
 8000ce0:	8c3b      	ldrh	r3, [r7, #32]
 8000ce2:	3b02      	subs	r3, #2
 8000ce4:	b29c      	uxth	r4, r3
 8000ce6:	89fa      	ldrh	r2, [r7, #14]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	9302      	str	r3, [sp, #8]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	4623      	mov	r3, r4
 8000cf6:	f001 fbcb 	bl	8002490 <LCD_dibujaRectanguloRelleno>
                              enBlancoYNegro, transparencia);

  Variable = (Variable * 100) / ancho; // hallamos el porcentaje de progreso
 8000cfa:	89fb      	ldrh	r3, [r7, #14]
 8000cfc:	2264      	movs	r2, #100	; 0x64
 8000cfe:	fb03 f202 	mul.w	r2, r3, r2
 8000d02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d04:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d08:	81fb      	strh	r3, [r7, #14]

  // dibujamos el porcentaje de progreso en el centro de la barra
  // el tipo de letra es fija juegoAlpha15 de color blanco y separacion tenemos
  // 1 pixel
  LCD_dibujaCadenaCaracteresAlpha(
      xBarra + ancho / 2 -
 8000d0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d0c:	085b      	lsrs	r3, r3, #1
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d12:	4413      	add	r3, r2
 8000d14:	b29c      	uxth	r4, r3
          LCD_anchoCadenaCaracteresAlpha(texto, barraProgreso->pJuegoCaracteres, barraProgreso->separacion) / 2,
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	68d9      	ldr	r1, [r3, #12]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	7c1b      	ldrb	r3, [r3, #16]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fd87 	bl	8002838 <LCD_anchoCadenaCaracteresAlpha>
 8000d2a:	4603      	mov	r3, r0
  LCD_dibujaCadenaCaracteresAlpha(
 8000d2c:	085b      	lsrs	r3, r3, #1
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	1ae3      	subs	r3, r4, r3
 8000d32:	b298      	uxth	r0, r3
      yBarra + alto / 2 - AltoTexto / 2, texto, 0xFFFFFFFF,  barraProgreso->separacion, barraProgreso->pJuegoCaracteres,
 8000d34:	8c3b      	ldrh	r3, [r7, #32]
 8000d36:	085b      	lsrs	r3, r3, #1
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d3c:	4413      	add	r3, r2
 8000d3e:	b29a      	uxth	r2, r3
  LCD_dibujaCadenaCaracteresAlpha(
 8000d40:	7efb      	ldrb	r3, [r7, #27]
 8000d42:	085b      	lsrs	r3, r3, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	b29c      	uxth	r4, r3
      yBarra + alto / 2 - AltoTexto / 2, texto, 0xFFFFFFFF,  barraProgreso->separacion, barraProgreso->pJuegoCaracteres,
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	7c1b      	ldrb	r3, [r3, #16]
  LCD_dibujaCadenaCaracteresAlpha(
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	68d2      	ldr	r2, [r2, #12]
 8000d56:	f107 0510 	add.w	r5, r7, #16
 8000d5a:	6839      	ldr	r1, [r7, #0]
 8000d5c:	9103      	str	r1, [sp, #12]
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	9102      	str	r1, [sp, #8]
 8000d62:	9201      	str	r2, [sp, #4]
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	462a      	mov	r2, r5
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	f001 fdb4 	bl	80028da <LCD_dibujaCadenaCaracteresAlpha>
      enBlancoYNegro, transparencia);

  // establecemos la salida de la barra
  if (Variable + 1 == 100) {
 8000d72:	89fb      	ldrh	r3, [r7, #14]
 8000d74:	2b63      	cmp	r3, #99	; 0x63
 8000d76:	d106      	bne.n	8000d86 <VerificaBarraProgreso+0x192>
    barraProgreso->pFuncion();
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4798      	blx	r3
    barraProgreso->finalizacion = 1;
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2201      	movs	r2, #1
 8000d82:	619a      	str	r2, [r3, #24]
  } else
    barraProgreso->finalizacion = 0;

} // VerificaBarraProgreso
 8000d84:	e002      	b.n	8000d8c <VerificaBarraProgreso+0x198>
    barraProgreso->finalizacion = 0;
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
} // VerificaBarraProgreso
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bdb0      	pop	{r4, r5, r7, pc}
 8000d94:	080126d8 	.word	0x080126d8
 8000d98:	080126dc 	.word	0x080126dc

08000d9c <fBarraProgreso>:

void fBarraProgreso(BarraProgreso *barraProgreso, int contador) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]

  LCD_intercambiaBuffers2(); // dibujamos en el buffer visible
 8000da6:	f001 f9ff 	bl	80021a8 <LCD_intercambiaBuffers2>

  if (barraProgreso->finalizacion == 0) {
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d119      	bne.n	8000de6 <fBarraProgreso+0x4a>

    int finalizacion = barraProgreso->finalizacion;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	60fb      	str	r3, [r7, #12]

    VerificaBarraProgreso(contador, barraProgreso, finalizacion, 0);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b298      	uxth	r0, r3
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	f7ff ff17 	bl	8000bf4 <VerificaBarraProgreso>

    if ((contador * 100) / barraProgreso->ancho == 100)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2264      	movs	r2, #100	; 0x64
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	8892      	ldrh	r2, [r2, #4]
 8000dd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d102      	bne.n	8000de0 <fBarraProgreso+0x44>
      barraProgreso->pFuncion();
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4798      	blx	r3

    osDelay(100);
 8000de0:	2064      	movs	r0, #100	; 0x64
 8000de2:	f00d fe0b 	bl	800e9fc <osDelay>
  }

} // fBarraProgreso
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <verificaEditorTexto>:
      estado); // ejecutamos la funcion asociada al estado del interruptor

} // VerificaInterruptor

void verificaEditorTexto(EditorTexto *editorTexto, int pulsada, int xPulsacion,
                         int yPulsacion) {
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	b0b1      	sub	sp, #196	; 0xc4
 8000df4:	af04      	add	r7, sp, #16
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]

  if (pulsada && editorTexto->pulsacionAnterior == 0) {
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 80ce 	beq.w	8000fa2 <verificaEditorTexto+0x1b2>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f040 80c8 	bne.w	8000fa2 <verificaEditorTexto+0x1b2>

    BarraTexto barraTexto = editorTexto->barraTexto;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000e18:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8000e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    Pulsador PulResta = editorTexto->PulResta;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f107 0414 	add.w	r4, r7, #20
 8000e36:	f103 0544 	add.w	r5, r3, #68	; 0x44
 8000e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Pulsador PulSuma = editorTexto->PulSuma;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000e4c:	f103 0524 	add.w	r5, r3, #36	; 0x24
 8000e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t AltoTexto = juegoAlpha15.alto;
 8000e5c:	4b55      	ldr	r3, [pc, #340]	; (8000fb4 <verificaEditorTexto+0x1c4>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    // verificamos si se pulsa el boton de resta
    if (editorTexto->Cuenta > 0 &&
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	dd22      	ble.n	8000eb2 <verificaEditorTexto+0xc2>
        (xPulsacion >= PulResta.Posx &&
 8000e6c:	8abb      	ldrh	r3, [r7, #20]
 8000e6e:	461a      	mov	r2, r3
    if (editorTexto->Cuenta > 0 &&
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4293      	cmp	r3, r2
 8000e74:	db1d      	blt.n	8000eb2 <verificaEditorTexto+0xc2>
         xPulsacion <= PulResta.Posx + PulResta.ancho) &&
 8000e76:	8abb      	ldrh	r3, [r7, #20]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	8b3b      	ldrh	r3, [r7, #24]
 8000e7c:	4413      	add	r3, r2
        (xPulsacion >= PulResta.Posx &&
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dc16      	bgt.n	8000eb2 <verificaEditorTexto+0xc2>
        (yPulsacion >= PulResta.Posy &&
 8000e84:	8afb      	ldrh	r3, [r7, #22]
 8000e86:	461a      	mov	r2, r3
         xPulsacion <= PulResta.Posx + PulResta.ancho) &&
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	db11      	blt.n	8000eb2 <verificaEditorTexto+0xc2>
         yPulsacion <= PulResta.Posy + PulResta.alto)) {
 8000e8e:	8afb      	ldrh	r3, [r7, #22]
 8000e90:	461a      	mov	r2, r3
 8000e92:	8b7b      	ldrh	r3, [r7, #26]
 8000e94:	4413      	add	r3, r2
        (yPulsacion >= PulResta.Posy &&
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dc0a      	bgt.n	8000eb2 <verificaEditorTexto+0xc2>

      editorTexto->Cuenta = editorTexto->Cuenta - editorTexto->incremento;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	69da      	ldr	r2, [r3, #28]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	1ad2      	subs	r2, r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	61da      	str	r2, [r3, #28]
      editorTexto->pulsacionAnterior = 1;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2201      	movs	r2, #1
 8000eae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    }
    // verificamos si se pulsa el boton de suma
    if ((xPulsacion >= PulSuma.Posx &&
 8000eb2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	db1d      	blt.n	8000ef8 <verificaEditorTexto+0x108>
         xPulsacion <= PulSuma.Posx + PulSuma.ancho) &&
 8000ebc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ec2:	4413      	add	r3, r2
    if ((xPulsacion >= PulSuma.Posx &&
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	dc16      	bgt.n	8000ef8 <verificaEditorTexto+0x108>
        (yPulsacion >= PulSuma.Posy &&
 8000eca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000ecc:	461a      	mov	r2, r3
         xPulsacion <= PulSuma.Posx + PulSuma.ancho) &&
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	db11      	blt.n	8000ef8 <verificaEditorTexto+0x108>
         yPulsacion <= PulSuma.Posy + PulSuma.alto)) {
 8000ed4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000eda:	4413      	add	r3, r2
        (yPulsacion >= PulSuma.Posy &&
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	dc0a      	bgt.n	8000ef8 <verificaEditorTexto+0x108>
      editorTexto->Cuenta = editorTexto->Cuenta + editorTexto->incremento;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	69da      	ldr	r2, [r3, #28]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	441a      	add	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	61da      	str	r2, [r3, #28]
      editorTexto->pulsacionAnterior = 1;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    }

    // redibujamos el vusualizador para mostrar el nuevo numero
    char texto[31];
    sprintf(texto, "%d", editorTexto->Cuenta);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	69da      	ldr	r2, [r3, #28]
 8000efc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f00:	492d      	ldr	r1, [pc, #180]	; (8000fb8 <verificaEditorTexto+0x1c8>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f010 ffca 	bl	8011e9c <siprintf>


    LCD_dibujaRectanguloRelleno(barraTexto.Posx, barraTexto.Posy,
 8000f08:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 8000f0c:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000f10:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8000f14:	f8b7 405a 	ldrh.w	r4, [r7, #90]	; 0x5a
 8000f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	9502      	str	r5, [sp, #8]
 8000f1e:	2500      	movs	r5, #0
 8000f20:	9501      	str	r5, [sp, #4]
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	4623      	mov	r3, r4
 8000f26:	f001 fab3 	bl	8002490 <LCD_dibujaRectanguloRelleno>
                                barraTexto.ancho, barraTexto.alto,
                                barraTexto.colorFondo, 0, 0);

    LCD_dibujaCadenaCaracteresAlpha(barraTexto.Posx + (barraTexto.ancho - LCD_anchoCadenaCaracteresAlpha(texto, editorTexto->pJuegoCaracteres, editorTexto->separacion)) / 2,
 8000f2a:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 8000f2e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000f32:	461d      	mov	r5, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fc76 	bl	8002838 <LCD_anchoCadenaCaracteresAlpha>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	1aeb      	subs	r3, r5, r3
 8000f50:	0fda      	lsrs	r2, r3, #31
 8000f52:	4413      	add	r3, r2
 8000f54:	105b      	asrs	r3, r3, #1
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4423      	add	r3, r4
 8000f5a:	b298      	uxth	r0, r3
                                    barraTexto.Posy +
 8000f5c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
                                        (editorTexto->alto - AltoTexto) / 2,
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	891b      	ldrh	r3, [r3, #8]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000f6a:	1acb      	subs	r3, r1, r3
 8000f6c:	0fd9      	lsrs	r1, r3, #31
 8000f6e:	440b      	add	r3, r1
 8000f70:	105b      	asrs	r3, r3, #1
    LCD_dibujaCadenaCaracteresAlpha(barraTexto.Posx + (barraTexto.ancho - LCD_anchoCadenaCaracteresAlpha(texto, editorTexto->pJuegoCaracteres, editorTexto->separacion)) / 2,
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	b299      	uxth	r1, r3
 8000f78:	6ebd      	ldr	r5, [r7, #104]	; 0x68
                                    texto, barraTexto.colorTexto, editorTexto->separacion, editorTexto->pJuegoCaracteres, 0, 0);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
    LCD_dibujaCadenaCaracteresAlpha(barraTexto.Posx + (barraTexto.ancho - LCD_anchoCadenaCaracteresAlpha(texto, editorTexto->pJuegoCaracteres, editorTexto->separacion)) / 2,
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8000f88:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000f8c:	2600      	movs	r6, #0
 8000f8e:	9603      	str	r6, [sp, #12]
 8000f90:	2600      	movs	r6, #0
 8000f92:	9602      	str	r6, [sp, #8]
 8000f94:	9201      	str	r2, [sp, #4]
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	462b      	mov	r3, r5
 8000f9a:	4622      	mov	r2, r4
 8000f9c:	f001 fc9d 	bl	80028da <LCD_dibujaCadenaCaracteresAlpha>
  if (pulsada && editorTexto->pulsacionAnterior == 0) {
 8000fa0:	e004      	b.n	8000fac <verificaEditorTexto+0x1bc>
  } else
    editorTexto->pulsacionAnterior = 0;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

} // verificaEditorTexto
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	37b4      	adds	r7, #180	; 0xb4
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb4:	08067dfc 	.word	0x08067dfc
 8000fb8:	080126d8 	.word	0x080126d8

08000fbc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000ff2:	f001 ff33 	bl	8002e5c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000ff6:	20ca      	movs	r0, #202	; 0xca
 8000ff8:	f000 f95d 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000ffc:	20c3      	movs	r0, #195	; 0xc3
 8000ffe:	f000 f967 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001002:	2008      	movs	r0, #8
 8001004:	f000 f964 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001008:	2050      	movs	r0, #80	; 0x50
 800100a:	f000 f961 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800100e:	20cf      	movs	r0, #207	; 0xcf
 8001010:	f000 f951 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001014:	2000      	movs	r0, #0
 8001016:	f000 f95b 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800101a:	20c1      	movs	r0, #193	; 0xc1
 800101c:	f000 f958 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001020:	2030      	movs	r0, #48	; 0x30
 8001022:	f000 f955 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001026:	20ed      	movs	r0, #237	; 0xed
 8001028:	f000 f945 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800102c:	2064      	movs	r0, #100	; 0x64
 800102e:	f000 f94f 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001032:	2003      	movs	r0, #3
 8001034:	f000 f94c 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001038:	2012      	movs	r0, #18
 800103a:	f000 f949 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800103e:	2081      	movs	r0, #129	; 0x81
 8001040:	f000 f946 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001044:	20e8      	movs	r0, #232	; 0xe8
 8001046:	f000 f936 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800104a:	2085      	movs	r0, #133	; 0x85
 800104c:	f000 f940 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001050:	2000      	movs	r0, #0
 8001052:	f000 f93d 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001056:	2078      	movs	r0, #120	; 0x78
 8001058:	f000 f93a 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800105c:	20cb      	movs	r0, #203	; 0xcb
 800105e:	f000 f92a 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001062:	2039      	movs	r0, #57	; 0x39
 8001064:	f000 f934 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001068:	202c      	movs	r0, #44	; 0x2c
 800106a:	f000 f931 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f92e 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001074:	2034      	movs	r0, #52	; 0x34
 8001076:	f000 f92b 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800107a:	2002      	movs	r0, #2
 800107c:	f000 f928 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001080:	20f7      	movs	r0, #247	; 0xf7
 8001082:	f000 f918 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001086:	2020      	movs	r0, #32
 8001088:	f000 f922 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800108c:	20ea      	movs	r0, #234	; 0xea
 800108e:	f000 f912 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f91c 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f919 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800109e:	20b1      	movs	r0, #177	; 0xb1
 80010a0:	f000 f909 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 f913 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80010aa:	201b      	movs	r0, #27
 80010ac:	f000 f910 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80010b0:	20b6      	movs	r0, #182	; 0xb6
 80010b2:	f000 f900 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80010b6:	200a      	movs	r0, #10
 80010b8:	f000 f90a 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80010bc:	20a2      	movs	r0, #162	; 0xa2
 80010be:	f000 f907 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80010c2:	20c0      	movs	r0, #192	; 0xc0
 80010c4:	f000 f8f7 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80010c8:	2010      	movs	r0, #16
 80010ca:	f000 f901 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80010ce:	20c1      	movs	r0, #193	; 0xc1
 80010d0:	f000 f8f1 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80010d4:	2010      	movs	r0, #16
 80010d6:	f000 f8fb 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80010da:	20c5      	movs	r0, #197	; 0xc5
 80010dc:	f000 f8eb 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80010e0:	2045      	movs	r0, #69	; 0x45
 80010e2:	f000 f8f5 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80010e6:	2015      	movs	r0, #21
 80010e8:	f000 f8f2 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80010ec:	20c7      	movs	r0, #199	; 0xc7
 80010ee:	f000 f8e2 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80010f2:	2090      	movs	r0, #144	; 0x90
 80010f4:	f000 f8ec 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80010f8:	2036      	movs	r0, #54	; 0x36
 80010fa:	f000 f8dc 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80010fe:	20c8      	movs	r0, #200	; 0xc8
 8001100:	f000 f8e6 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001104:	20f2      	movs	r0, #242	; 0xf2
 8001106:	f000 f8d6 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f8e0 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001110:	20b0      	movs	r0, #176	; 0xb0
 8001112:	f000 f8d0 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001116:	20c2      	movs	r0, #194	; 0xc2
 8001118:	f000 f8da 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800111c:	20b6      	movs	r0, #182	; 0xb6
 800111e:	f000 f8ca 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001122:	200a      	movs	r0, #10
 8001124:	f000 f8d4 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001128:	20a7      	movs	r0, #167	; 0xa7
 800112a:	f000 f8d1 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800112e:	2027      	movs	r0, #39	; 0x27
 8001130:	f000 f8ce 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001134:	2004      	movs	r0, #4
 8001136:	f000 f8cb 	bl	80012d0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800113a:	202a      	movs	r0, #42	; 0x2a
 800113c:	f000 f8bb 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001140:	2000      	movs	r0, #0
 8001142:	f000 f8c5 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f8c2 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800114c:	2000      	movs	r0, #0
 800114e:	f000 f8bf 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001152:	20ef      	movs	r0, #239	; 0xef
 8001154:	f000 f8bc 	bl	80012d0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001158:	202b      	movs	r0, #43	; 0x2b
 800115a:	f000 f8ac 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f8b6 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001164:	2000      	movs	r0, #0
 8001166:	f000 f8b3 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800116a:	2001      	movs	r0, #1
 800116c:	f000 f8b0 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001170:	203f      	movs	r0, #63	; 0x3f
 8001172:	f000 f8ad 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001176:	20f6      	movs	r0, #246	; 0xf6
 8001178:	f000 f89d 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800117c:	2001      	movs	r0, #1
 800117e:	f000 f8a7 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f8a4 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001188:	2006      	movs	r0, #6
 800118a:	f000 f8a1 	bl	80012d0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800118e:	202c      	movs	r0, #44	; 0x2c
 8001190:	f000 f891 	bl	80012b6 <ili9341_WriteReg>
  LCD_Delay(200);
 8001194:	20c8      	movs	r0, #200	; 0xc8
 8001196:	f001 ff4f 	bl	8003038 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800119a:	2026      	movs	r0, #38	; 0x26
 800119c:	f000 f88b 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f000 f895 	bl	80012d0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80011a6:	20e0      	movs	r0, #224	; 0xe0
 80011a8:	f000 f885 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80011ac:	200f      	movs	r0, #15
 80011ae:	f000 f88f 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80011b2:	2029      	movs	r0, #41	; 0x29
 80011b4:	f000 f88c 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80011b8:	2024      	movs	r0, #36	; 0x24
 80011ba:	f000 f889 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80011be:	200c      	movs	r0, #12
 80011c0:	f000 f886 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80011c4:	200e      	movs	r0, #14
 80011c6:	f000 f883 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80011ca:	2009      	movs	r0, #9
 80011cc:	f000 f880 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80011d0:	204e      	movs	r0, #78	; 0x4e
 80011d2:	f000 f87d 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80011d6:	2078      	movs	r0, #120	; 0x78
 80011d8:	f000 f87a 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80011dc:	203c      	movs	r0, #60	; 0x3c
 80011de:	f000 f877 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80011e2:	2009      	movs	r0, #9
 80011e4:	f000 f874 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80011e8:	2013      	movs	r0, #19
 80011ea:	f000 f871 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80011ee:	2005      	movs	r0, #5
 80011f0:	f000 f86e 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80011f4:	2017      	movs	r0, #23
 80011f6:	f000 f86b 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80011fa:	2011      	movs	r0, #17
 80011fc:	f000 f868 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f865 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001206:	20e1      	movs	r0, #225	; 0xe1
 8001208:	f000 f855 	bl	80012b6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f85f 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001212:	2016      	movs	r0, #22
 8001214:	f000 f85c 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001218:	201b      	movs	r0, #27
 800121a:	f000 f859 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800121e:	2004      	movs	r0, #4
 8001220:	f000 f856 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001224:	2011      	movs	r0, #17
 8001226:	f000 f853 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800122a:	2007      	movs	r0, #7
 800122c:	f000 f850 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001230:	2031      	movs	r0, #49	; 0x31
 8001232:	f000 f84d 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001236:	2033      	movs	r0, #51	; 0x33
 8001238:	f000 f84a 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800123c:	2042      	movs	r0, #66	; 0x42
 800123e:	f000 f847 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001242:	2005      	movs	r0, #5
 8001244:	f000 f844 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001248:	200c      	movs	r0, #12
 800124a:	f000 f841 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800124e:	200a      	movs	r0, #10
 8001250:	f000 f83e 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001254:	2028      	movs	r0, #40	; 0x28
 8001256:	f000 f83b 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800125a:	202f      	movs	r0, #47	; 0x2f
 800125c:	f000 f838 	bl	80012d0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001260:	200f      	movs	r0, #15
 8001262:	f000 f835 	bl	80012d0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001266:	2011      	movs	r0, #17
 8001268:	f000 f825 	bl	80012b6 <ili9341_WriteReg>
  LCD_Delay(200);
 800126c:	20c8      	movs	r0, #200	; 0xc8
 800126e:	f001 fee3 	bl	8003038 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001272:	2029      	movs	r0, #41	; 0x29
 8001274:	f000 f81f 	bl	80012b6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001278:	202c      	movs	r0, #44	; 0x2c
 800127a:	f000 f81c 	bl	80012b6 <ili9341_WriteReg>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}

08001282 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001286:	f001 fde9 	bl	8002e5c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800128a:	2103      	movs	r1, #3
 800128c:	20d3      	movs	r0, #211	; 0xd3
 800128e:	f000 f82c 	bl	80012ea <ili9341_ReadData>
 8001292:	4603      	mov	r3, r0
 8001294:	b29b      	uxth	r3, r3
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}

0800129a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800129e:	2029      	movs	r0, #41	; 0x29
 80012a0:	f000 f809 	bl	80012b6 <ili9341_WriteReg>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80012ac:	2028      	movs	r0, #40	; 0x28
 80012ae:	f000 f802 	bl	80012b6 <ili9341_WriteReg>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fe64 	bl	8002f90 <LCD_IO_WriteReg>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fe35 	bl	8002f4c <LCD_IO_WriteData>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	460a      	mov	r2, r1
 80012f4:	80fb      	strh	r3, [r7, #6]
 80012f6:	4613      	mov	r3, r2
 80012f8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80012fa:	797a      	ldrb	r2, [r7, #5]
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fe67 	bl	8002fd4 <LCD_IO_ReadData>
 8001306:	4603      	mov	r3, r0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001314:	23f0      	movs	r3, #240	; 0xf0
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001324:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LCD_inicializaBoton>:


void LCD_inicializaBoton(uint16_t x, uint16_t y, uint16_t ancho, uint16_t alto, const uint8_t * imagen,
		char * texto, const LCD_JuegoCaracteresAlpha * pJuegoCaracteres, uint8_t separacion, uint32_t colorTexto,
		void (*funcion)(), int habilitado,
		int visible, LCD_Boton * pBoton) {
 8001332:	b590      	push	{r4, r7, lr}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	4604      	mov	r4, r0
 800133a:	4608      	mov	r0, r1
 800133c:	4611      	mov	r1, r2
 800133e:	461a      	mov	r2, r3
 8001340:	4623      	mov	r3, r4
 8001342:	80fb      	strh	r3, [r7, #6]
 8001344:	4603      	mov	r3, r0
 8001346:	80bb      	strh	r3, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	803b      	strh	r3, [r7, #0]

    pBoton->x = x;
 8001350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001352:	88fa      	ldrh	r2, [r7, #6]
 8001354:	801a      	strh	r2, [r3, #0]
    pBoton->y = y;
 8001356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001358:	88ba      	ldrh	r2, [r7, #4]
 800135a:	805a      	strh	r2, [r3, #2]
    // Coordenadas de la esquina superior izquierda del botón

    pBoton->ancho = ancho;
 800135c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	809a      	strh	r2, [r3, #4]
    pBoton->alto = alto;
 8001362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001364:	883a      	ldrh	r2, [r7, #0]
 8001366:	80da      	strh	r2, [r3, #6]
    // Dimensiones del botón en puntos

    pBoton->imagen = imagen;
 8001368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	609a      	str	r2, [r3, #8]
    // Imagen utilizada para mostrar el botón

    strcpy(pBoton->texto, texto);
 800136e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001370:	330c      	adds	r3, #12
 8001372:	69f9      	ldr	r1, [r7, #28]
 8001374:	4618      	mov	r0, r3
 8001376:	f010 fdf5 	bl	8011f64 <strcpy>
    pBoton->pJuegoCaracteres = pJuegoCaracteres;
 800137a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800137c:	6a3a      	ldr	r2, [r7, #32]
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
    pBoton->separacion = separacion;
 8001380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001382:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    pBoton->xTexto = (ancho - LCD_anchoCadenaCaracteresAlpha(texto, pJuegoCaracteres, separacion)) / 2;
 800138a:	887c      	ldrh	r4, [r7, #2]
 800138c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001390:	b29b      	uxth	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	6a39      	ldr	r1, [r7, #32]
 8001396:	69f8      	ldr	r0, [r7, #28]
 8001398:	f001 fa4e 	bl	8002838 <LCD_anchoCadenaCaracteresAlpha>
 800139c:	4603      	mov	r3, r0
 800139e:	1ae3      	subs	r3, r4, r3
 80013a0:	0fda      	lsrs	r2, r3, #31
 80013a2:	4413      	add	r3, r2
 80013a4:	105b      	asrs	r3, r3, #1
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013aa:	871a      	strh	r2, [r3, #56]	; 0x38
    pBoton->yTexto = (alto - pJuegoCaracteres->alto) / 2;
 80013ac:	883b      	ldrh	r3, [r7, #0]
 80013ae:	6a3a      	ldr	r2, [r7, #32]
 80013b0:	7812      	ldrb	r2, [r2, #0]
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	0fda      	lsrs	r2, r3, #31
 80013b6:	4413      	add	r3, r2
 80013b8:	105b      	asrs	r3, r3, #1
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013be:	875a      	strh	r2, [r3, #58]	; 0x3a
    pBoton->colorTexto = colorTexto;
 80013c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013c4:	635a      	str	r2, [r3, #52]	; 0x34
    // Texto y juego de caracteres mostrado sobre el botón

    pBoton->funcion = funcion;
 80013c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ca:	63da      	str	r2, [r3, #60]	; 0x3c
    // Función a ejecutar cuando se pulsa el botón

    pBoton->habilitado = habilitado;
 80013cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
    // Indica si se muestra habilitado

    pBoton->pulsado = 0;
 80013d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d4:	2200      	movs	r2, #0
 80013d6:	645a      	str	r2, [r3, #68]	; 0x44
    // Inicialmente no está pulsado

    pBoton->visible = visible;
 80013d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013dc:	649a      	str	r2, [r3, #72]	; 0x48
    // Indica si hay que mostrar el botón

}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}

080013e6 <LCD_atiendeBoton>:

	pBoton->imagen = imagen;
}


void LCD_atiendeBoton(LCD_Boton * pBoton) {
 80013e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e8:	b089      	sub	sp, #36	; 0x24
 80013ea:	af04      	add	r7, sp, #16
 80013ec:	6078      	str	r0, [r7, #4]

	int opacidad; // Para expresar el grado de opacidad (de 0 a 100) con el que se va a dibujar
	int enBlancoYNegro;  // Buleano cierto si hay que dibujarlo en blanco y negro

	if (pBoton->visible) pBoton->visible=0;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <LCD_atiendeBoton+0x18>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	649a      	str	r2, [r3, #72]	; 0x48
 80013fc:	e002      	b.n	8001404 <LCD_atiendeBoton+0x1e>
	else pBoton->visible = 1;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	649a      	str	r2, [r3, #72]	; 0x48

	if (pBoton->visible) {  // Si el botón tiene que ser visible ...
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00d      	beq.n	8001428 <LCD_atiendeBoton+0x42>
		if (pBoton->habilitado) {  // Si está habilitado ...
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d004      	beq.n	800141e <LCD_atiendeBoton+0x38>
			opacidad = 100;  // Totalmente opaco
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	60fb      	str	r3, [r7, #12]
			enBlancoYNegro = 0;  // Se va a mostra en color
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	e008      	b.n	8001430 <LCD_atiendeBoton+0x4a>
		}
		else {  // Si es visible pero no está habilitado
			opacidad = 70;  // Se muestra semitransparente
 800141e:	2346      	movs	r3, #70	; 0x46
 8001420:	60fb      	str	r3, [r7, #12]
			enBlancoYNegro = 1;  // y en niveles de gris
 8001422:	2301      	movs	r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	e003      	b.n	8001430 <LCD_atiendeBoton+0x4a>
		}
	} else {  // Si no es visible
		opacidad = 0;  // Se muestra completamente transparente
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
		enBlancoYNegro = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
	}

	LCD_dibujaImagen(pBoton->x, pBoton->y, pBoton->ancho, pBoton->alto, pBoton->imagen, enBlancoYNegro,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	8818      	ldrh	r0, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	8859      	ldrh	r1, [r3, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	889c      	ldrh	r4, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	88dd      	ldrh	r5, [r3, #6]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	9202      	str	r2, [sp, #8]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	9201      	str	r2, [sp, #4]
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	462b      	mov	r3, r5
 8001450:	4622      	mov	r2, r4
 8001452:	f001 f8c8 	bl	80025e6 <LCD_dibujaImagen>
		opacidad);
	// Finalmente dibuja la imagen para mostrar el botón con la opacidad y color establecidos

	LCD_dibujaCadenaCaracteresAlpha(pBoton->x + pBoton->xTexto, pBoton->y + pBoton->yTexto, pBoton->texto,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	881a      	ldrh	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800145e:	4413      	add	r3, r2
 8001460:	b298      	uxth	r0, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	885a      	ldrh	r2, [r3, #2]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800146a:	4413      	add	r3, r2
 800146c:	b299      	uxth	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f103 040c 	add.w	r4, r3, #12
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b5d      	ldr	r5, [r3, #52]	; 0x34
		pBoton->colorTexto, pBoton->separacion, pBoton->pJuegoCaracteres, 0, 100);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	LCD_dibujaCadenaCaracteresAlpha(pBoton->x + pBoton->xTexto, pBoton->y + pBoton->yTexto, pBoton->texto,
 800147e:	b29b      	uxth	r3, r3
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001484:	2664      	movs	r6, #100	; 0x64
 8001486:	9603      	str	r6, [sp, #12]
 8001488:	2600      	movs	r6, #0
 800148a:	9602      	str	r6, [sp, #8]
 800148c:	9201      	str	r2, [sp, #4]
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	462b      	mov	r3, r5
 8001492:	4622      	mov	r2, r4
 8001494:	f001 fa21 	bl	80028da <LCD_dibujaCadenaCaracteresAlpha>
	// Dibuja el texto sobre el botón

    if (pBoton->habilitado && pBoton->visible) {  // Si el botón está habilitado y es visible ...
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	2b00      	cmp	r3, #0
 800149e:	d03f      	beq.n	8001520 <LCD_atiendeBoton+0x13a>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d03b      	beq.n	8001520 <LCD_atiendeBoton+0x13a>

        if (LCD_pulsada() && LCD_xPulsacion() > pBoton->x && LCD_xPulsacion() < pBoton->x + pBoton->ancho &&
 80014a8:	f000 fdda 	bl	8002060 <LCD_pulsada>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d032      	beq.n	8001518 <LCD_atiendeBoton+0x132>
 80014b2:	f000 fde1 	bl	8002078 <LCD_xPulsacion>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d92a      	bls.n	8001518 <LCD_atiendeBoton+0x132>
 80014c2:	f000 fdd9 	bl	8002078 <LCD_xPulsacion>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	4619      	mov	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	889b      	ldrh	r3, [r3, #4]
 80014d4:	440b      	add	r3, r1
 80014d6:	429a      	cmp	r2, r3
 80014d8:	da1e      	bge.n	8001518 <LCD_atiendeBoton+0x132>
                LCD_yPulsacion() > pBoton->y && LCD_yPulsacion() < pBoton->y + pBoton->alto) {
 80014da:	f000 fde3 	bl	80020a4 <LCD_yPulsacion>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	885b      	ldrh	r3, [r3, #2]
        if (LCD_pulsada() && LCD_xPulsacion() > pBoton->x && LCD_xPulsacion() < pBoton->x + pBoton->ancho &&
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d916      	bls.n	8001518 <LCD_atiendeBoton+0x132>
                LCD_yPulsacion() > pBoton->y && LCD_yPulsacion() < pBoton->y + pBoton->alto) {
 80014ea:	f000 fddb 	bl	80020a4 <LCD_yPulsacion>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	885b      	ldrh	r3, [r3, #2]
 80014f6:	4619      	mov	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	88db      	ldrh	r3, [r3, #6]
 80014fc:	440b      	add	r3, r1
 80014fe:	429a      	cmp	r2, r3
 8001500:	da0a      	bge.n	8001518 <LCD_atiendeBoton+0x132>
            // Si se ha pulsado la pantalla dentro de las coordenadas de la superficie ocupada por el
            // botón ...

            if (!pBoton->pulsado)  // Si el botón no estaba pulsado previamente ...
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <LCD_atiendeBoton+0x12a>
                pBoton->funcion();  // Ejecuta la función asociada al botón
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150e:	4798      	blx	r3

            pBoton->pulsado = 1;  // Indica que se está pulsando el botón
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
        if (LCD_pulsada() && LCD_xPulsacion() > pBoton->x && LCD_xPulsacion() < pBoton->x + pBoton->ancho &&
 8001516:	e007      	b.n	8001528 <LCD_atiendeBoton+0x142>

        } else pBoton->pulsado = 0;  // Si no, indica que no se está pulsando el botón
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
        if (LCD_pulsada() && LCD_xPulsacion() > pBoton->x && LCD_xPulsacion() < pBoton->x + pBoton->ancho &&
 800151e:	e003      	b.n	8001528 <LCD_atiendeBoton+0x142>

    } else pBoton->pulsado =0;  // Si no, indica que no se está pulsando el botón
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001530 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8001534:	f003 f9c8 	bl	80048c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001538:	f000 f834 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153c:	f000 faa2 	bl	8001a84 <MX_GPIO_Init>
  MX_CRC_Init();
 8001540:	f000 f89a 	bl	8001678 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001544:	f000 f8ac 	bl	80016a0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001548:	f000 fa4c 	bl	80019e4 <MX_FMC_Init>
  MX_I2C3_Init();
 800154c:	f000 f8da 	bl	8001704 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001550:	f000 f918 	bl	8001784 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001554:	f000 f996 	bl	8001884 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001558:	f000 f9ca 	bl	80018f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800155c:	f000 fa18 	bl	8001990 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001560:	f00d f970 	bl	800e844 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle =
      osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001564:	4a09      	ldr	r2, [pc, #36]	; (800158c <main+0x5c>)
 8001566:	2100      	movs	r1, #0
 8001568:	4809      	ldr	r0, [pc, #36]	; (8001590 <main+0x60>)
 800156a:	f00d f9b5 	bl	800e8d8 <osThreadNew>
 800156e:	4603      	mov	r3, r0
  defaultTaskHandle =
 8001570:	4a08      	ldr	r2, [pc, #32]	; (8001594 <main+0x64>)
 8001572:	6013      	str	r3, [r2, #0]

  /* creation of tareaPantalla */
  tareaPantallaHandle =
      osThreadNew(fTareaPantalla, NULL, &tareaPantalla_attributes);
 8001574:	4a08      	ldr	r2, [pc, #32]	; (8001598 <main+0x68>)
 8001576:	2100      	movs	r1, #0
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <main+0x6c>)
 800157a:	f00d f9ad 	bl	800e8d8 <osThreadNew>
 800157e:	4603      	mov	r3, r0
  tareaPantallaHandle =
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <main+0x70>)
 8001582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001584:	f00d f982 	bl	800e88c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001588:	e7fe      	b.n	8001588 <main+0x58>
 800158a:	bf00      	nop
 800158c:	0807ba78 	.word	0x0807ba78
 8001590:	08001ced 	.word	0x08001ced
 8001594:	20000364 	.word	0x20000364
 8001598:	0807ba9c 	.word	0x0807ba9c
 800159c:	08001f3d 	.word	0x08001f3d
 80015a0:	20000368 	.word	0x20000368

080015a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	; 0x50
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0320 	add.w	r3, r7, #32
 80015ae:	2230      	movs	r2, #48	; 0x30
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f010 fc92 	bl	8011edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <SystemClock_Config+0xcc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	4a27      	ldr	r2, [pc, #156]	; (8001670 <SystemClock_Config+0xcc>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	; 0x40
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <SystemClock_Config+0xcc>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <SystemClock_Config+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015f0:	4a20      	ldr	r2, [pc, #128]	; (8001674 <SystemClock_Config+0xd0>)
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <SystemClock_Config+0xd0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001604:	2301      	movs	r3, #1
 8001606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160e:	2302      	movs	r3, #2
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001618:	2304      	movs	r3, #4
 800161a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800161c:	2348      	movs	r3, #72	; 0x48
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001620:	2302      	movs	r3, #2
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001624:	2303      	movs	r3, #3
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001628:	f107 0320 	add.w	r3, r7, #32
 800162c:	4618      	mov	r0, r3
 800162e:	f007 f93f 	bl	80088b0 <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x98>
    Error_Handler();
 8001638:	f000 fc9a 	bl	8001f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800163c:	230f      	movs	r3, #15
 800163e:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001640:	2302      	movs	r3, #2
 8001642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	2102      	movs	r1, #2
 8001658:	4618      	mov	r0, r3
 800165a:	f007 fba1 	bl	8008da0 <HAL_RCC_ClockConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0xc4>
    Error_Handler();
 8001664:	f000 fc84 	bl	8001f70 <Error_Handler>
  }
}
 8001668:	bf00      	nop
 800166a:	3750      	adds	r7, #80	; 0x50
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000

08001678 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_CRC_Init+0x20>)
 800167e:	4a07      	ldr	r2, [pc, #28]	; (800169c <MX_CRC_Init+0x24>)
 8001680:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_CRC_Init+0x20>)
 8001684:	f003 fa68 	bl	8004b58 <HAL_CRC_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_CRC_Init+0x1a>
    Error_Handler();
 800168e:	f000 fc6f 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000108 	.word	0x20000108
 800169c:	40023000 	.word	0x40023000

080016a0 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_DMA2D_Init+0x5c>)
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <MX_DMA2D_Init+0x60>)
 80016a8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_DMA2D_Init+0x5c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_DMA2D_Init+0x5c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_DMA2D_Init+0x5c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_DMA2D_Init+0x5c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_DMA2D_Init+0x5c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_DMA2D_Init+0x5c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_DMA2D_Init+0x5c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 80016d4:	4809      	ldr	r0, [pc, #36]	; (80016fc <MX_DMA2D_Init+0x5c>)
 80016d6:	f003 fc19 	bl	8004f0c <HAL_DMA2D_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_DMA2D_Init+0x44>
    Error_Handler();
 80016e0:	f000 fc46 	bl	8001f70 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 80016e4:	2101      	movs	r1, #1
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_DMA2D_Init+0x5c>)
 80016e8:	f003 fd6a 	bl	80051c0 <HAL_DMA2D_ConfigLayer>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_DMA2D_Init+0x56>
    Error_Handler();
 80016f2:	f000 fc3d 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000110 	.word	0x20000110
 8001700:	4002b000 	.word	0x4002b000

08001704 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_I2C3_Init+0x74>)
 800170a:	4a1c      	ldr	r2, [pc, #112]	; (800177c <MX_I2C3_Init+0x78>)
 800170c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_I2C3_Init+0x74>)
 8001710:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <MX_I2C3_Init+0x7c>)
 8001712:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_I2C3_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_I2C3_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_I2C3_Init+0x74>)
 8001722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001726:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_I2C3_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_I2C3_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_I2C3_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_I2C3_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_I2C3_Init+0x74>)
 8001742:	f005 fcab 	bl	800709c <HAL_I2C_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_I2C3_Init+0x4c>
    Error_Handler();
 800174c:	f000 fc10 	bl	8001f70 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001750:	2100      	movs	r1, #0
 8001752:	4809      	ldr	r0, [pc, #36]	; (8001778 <MX_I2C3_Init+0x74>)
 8001754:	f006 fc9f 	bl	8008096 <HAL_I2CEx_ConfigAnalogFilter>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_I2C3_Init+0x5e>
    Error_Handler();
 800175e:	f000 fc07 	bl	8001f70 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8001762:	2100      	movs	r1, #0
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <MX_I2C3_Init+0x74>)
 8001766:	f006 fcd2 	bl	800810e <HAL_I2CEx_ConfigDigitalFilter>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_I2C3_Init+0x70>
    Error_Handler();
 8001770:	f000 fbfe 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000150 	.word	0x20000150
 800177c:	40005c00 	.word	0x40005c00
 8001780:	000186a0 	.word	0x000186a0

08001784 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	; 0x38
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2234      	movs	r2, #52	; 0x34
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f010 fba3 	bl	8011edc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001796:	4b39      	ldr	r3, [pc, #228]	; (800187c <MX_LTDC_Init+0xf8>)
 8001798:	4a39      	ldr	r2, [pc, #228]	; (8001880 <MX_LTDC_Init+0xfc>)
 800179a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800179c:	4b37      	ldr	r3, [pc, #220]	; (800187c <MX_LTDC_Init+0xf8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017a2:	4b36      	ldr	r3, [pc, #216]	; (800187c <MX_LTDC_Init+0xf8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017a8:	4b34      	ldr	r3, [pc, #208]	; (800187c <MX_LTDC_Init+0xf8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017ae:	4b33      	ldr	r3, [pc, #204]	; (800187c <MX_LTDC_Init+0xf8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80017b4:	4b31      	ldr	r3, [pc, #196]	; (800187c <MX_LTDC_Init+0xf8>)
 80017b6:	2209      	movs	r2, #9
 80017b8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80017ba:	4b30      	ldr	r3, [pc, #192]	; (800187c <MX_LTDC_Init+0xf8>)
 80017bc:	2201      	movs	r2, #1
 80017be:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80017c0:	4b2e      	ldr	r3, [pc, #184]	; (800187c <MX_LTDC_Init+0xf8>)
 80017c2:	221d      	movs	r2, #29
 80017c4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <MX_LTDC_Init+0xf8>)
 80017c8:	2203      	movs	r2, #3
 80017ca:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80017cc:	4b2b      	ldr	r3, [pc, #172]	; (800187c <MX_LTDC_Init+0xf8>)
 80017ce:	f240 120d 	movw	r2, #269	; 0x10d
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <MX_LTDC_Init+0xf8>)
 80017d6:	f240 1243 	movw	r2, #323	; 0x143
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <MX_LTDC_Init+0xf8>)
 80017de:	f240 1217 	movw	r2, #279	; 0x117
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <MX_LTDC_Init+0xf8>)
 80017e6:	f240 1247 	movw	r2, #327	; 0x147
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <MX_LTDC_Init+0xf8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <MX_LTDC_Init+0xf8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_LTDC_Init+0xf8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8001804:	481d      	ldr	r0, [pc, #116]	; (800187c <MX_LTDC_Init+0xf8>)
 8001806:	f006 fcc1 	bl	800818c <HAL_LTDC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_LTDC_Init+0x90>
    Error_Handler();
 8001810:	f000 fbae 	bl	8001f70 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001818:	23f0      	movs	r3, #240	; 0xf0
 800181a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001820:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001824:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001826:	2302      	movs	r3, #2
 8001828:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800182a:	23ff      	movs	r3, #255	; 0xff
 800182c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001832:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001836:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001838:	2307      	movs	r3, #7
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800183c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001842:	23f0      	movs	r3, #240	; 0xf0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001846:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2200      	movs	r2, #0
 8001862:	4619      	mov	r1, r3
 8001864:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_LTDC_Init+0xf8>)
 8001866:	f006 fe23 	bl	80084b0 <HAL_LTDC_ConfigLayer>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_LTDC_Init+0xf0>
    Error_Handler();
 8001870:	f000 fb7e 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */
}
 8001874:	bf00      	nop
 8001876:	3738      	adds	r7, #56	; 0x38
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200001a4 	.word	0x200001a4
 8001880:	40016800 	.word	0x40016800

08001884 <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_SPI5_Init+0x64>)
 800188a:	4a18      	ldr	r2, [pc, #96]	; (80018ec <MX_SPI5_Init+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_SPI5_Init+0x64>)
 8001890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001894:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_SPI5_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_SPI5_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_SPI5_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_SPI5_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_SPI5_Init+0x64>)
 80018b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_SPI5_Init+0x64>)
 80018b8:	2218      	movs	r2, #24
 80018ba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_SPI5_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_SPI5_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_SPI5_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_SPI5_Init+0x64>)
 80018d0:	220a      	movs	r2, #10
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_SPI5_Init+0x64>)
 80018d6:	f007 ff06 	bl	80096e6 <HAL_SPI_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_SPI5_Init+0x60>
    Error_Handler();
 80018e0:	f000 fb46 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000024c 	.word	0x2000024c
 80018ec:	40015000 	.word	0x40015000

080018f0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f6:	f107 0308 	add.w	r3, r7, #8
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <MX_TIM1_Init+0x98>)
 800190e:	4a1f      	ldr	r2, [pc, #124]	; (800198c <MX_TIM1_Init+0x9c>)
 8001910:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <MX_TIM1_Init+0x98>)
 8001914:	2200      	movs	r2, #0
 8001916:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <MX_TIM1_Init+0x98>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <MX_TIM1_Init+0x98>)
 8001920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001924:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_TIM1_Init+0x98>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_TIM1_Init+0x98>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_TIM1_Init+0x98>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001938:	4813      	ldr	r0, [pc, #76]	; (8001988 <MX_TIM1_Init+0x98>)
 800193a:	f008 fcb3 	bl	800a2a4 <HAL_TIM_Base_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x58>
    Error_Handler();
 8001944:	f000 fb14 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4619      	mov	r1, r3
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <MX_TIM1_Init+0x98>)
 8001956:	f008 fe6d 	bl	800a634 <HAL_TIM_ConfigClockSource>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM1_Init+0x74>
    Error_Handler();
 8001960:	f000 fb06 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800196c:	463b      	mov	r3, r7
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_TIM1_Init+0x98>)
 8001972:	f009 f889 	bl	800aa88 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0x90>
    Error_Handler();
 800197c:	f000 faf8 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 8001980:	bf00      	nop
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200002a4 	.word	0x200002a4
 800198c:	40010000 	.word	0x40010000

08001990 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <MX_USART1_UART_Init+0x50>)
 8001998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019c8:	f009 f8ee 	bl	800aba8 <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART1_UART_Init+0x46>
    Error_Handler();
 80019d2:	f000 facd 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200002ec 	.word	0x200002ec
 80019e0:	40011000 	.word	0x40011000

080019e4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
 80019f8:	615a      	str	r2, [r3, #20]
 80019fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
   */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_FMC_Init+0x98>)
 80019fe:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <MX_FMC_Init+0x9c>)
 8001a00:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_FMC_Init+0x98>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_FMC_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_FMC_Init+0x98>)
 8001a10:	2204      	movs	r2, #4
 8001a12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_FMC_Init+0x98>)
 8001a16:	2210      	movs	r2, #16
 8001a18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_FMC_Init+0x98>)
 8001a1c:	2240      	movs	r2, #64	; 0x40
 8001a1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_FMC_Init+0x98>)
 8001a22:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_FMC_Init+0x98>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_FMC_Init+0x98>)
 8001a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a34:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_FMC_Init+0x98>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_FMC_Init+0x98>)
 8001a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001a48:	2307      	movs	r3, #7
 8001a4a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001a50:	2307      	movs	r3, #7
 8001a52:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001a54:	2303      	movs	r3, #3
 8001a56:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_FMC_Init+0x98>)
 8001a66:	f007 fdad 	bl	80095c4 <HAL_SDRAM_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_FMC_Init+0x90>
    Error_Handler();
 8001a70:	f000 fa7e 	bl	8001f70 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000330 	.word	0x20000330
 8001a80:	a0000140 	.word	0xa0000140

08001a84 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08e      	sub	sp, #56	; 0x38
 8001a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
 8001a9e:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a7a      	ldr	r2, [pc, #488]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b78      	ldr	r3, [pc, #480]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	4b74      	ldr	r3, [pc, #464]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a73      	ldr	r2, [pc, #460]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b71      	ldr	r3, [pc, #452]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a6c      	ldr	r2, [pc, #432]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a65      	ldr	r2, [pc, #404]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b63      	ldr	r3, [pc, #396]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a5e      	ldr	r2, [pc, #376]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b58      	ldr	r3, [pc, #352]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a57      	ldr	r2, [pc, #348]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b55      	ldr	r3, [pc, #340]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b51      	ldr	r3, [pc, #324]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a50      	ldr	r2, [pc, #320]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b4c:	f043 0310 	orr.w	r3, r3, #16
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a49      	ldr	r2, [pc, #292]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <MX_GPIO_Init+0x208>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2116      	movs	r1, #22
 8001b7e:	4844      	ldr	r0, [pc, #272]	; (8001c90 <MX_GPIO_Init+0x20c>)
 8001b80:	f003 fe68 	bl	8005854 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	4842      	ldr	r0, [pc, #264]	; (8001c94 <MX_GPIO_Init+0x210>)
 8001b8a:	f003 fe63 	bl	8005854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b94:	4840      	ldr	r0, [pc, #256]	; (8001c98 <MX_GPIO_Init+0x214>)
 8001b96:	f003 fe5d 	bl	8005854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001ba0:	483e      	ldr	r0, [pc, #248]	; (8001c9c <MX_GPIO_Init+0x218>)
 8001ba2:	f003 fe57 	bl	8005854 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8001ba6:	2316      	movs	r3, #22
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4834      	ldr	r0, [pc, #208]	; (8001c90 <MX_GPIO_Init+0x20c>)
 8001bbe:	f003 fb91 	bl	80052e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8001bc2:	f248 0307 	movw	r3, #32775	; 0x8007
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bc8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	482e      	ldr	r0, [pc, #184]	; (8001c94 <MX_GPIO_Init+0x210>)
 8001bda:	f003 fb83 	bl	80052e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4827      	ldr	r0, [pc, #156]	; (8001c94 <MX_GPIO_Init+0x210>)
 8001bf6:	f003 fb75 	bl	80052e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bfe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4820      	ldr	r0, [pc, #128]	; (8001c90 <MX_GPIO_Init+0x20c>)
 8001c10:	f003 fb68 	bl	80052e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c14:	2304      	movs	r3, #4
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	4619      	mov	r1, r3
 8001c26:	481e      	ldr	r0, [pc, #120]	; (8001ca0 <MX_GPIO_Init+0x21c>)
 8001c28:	f003 fb5c 	bl	80052e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001c2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4815      	ldr	r0, [pc, #84]	; (8001c98 <MX_GPIO_Init+0x214>)
 8001c42:	f003 fb4f 	bl	80052e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 8001c46:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480e      	ldr	r0, [pc, #56]	; (8001c98 <MX_GPIO_Init+0x214>)
 8001c60:	f003 fb40 	bl	80052e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 8001c64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4807      	ldr	r0, [pc, #28]	; (8001c9c <MX_GPIO_Init+0x218>)
 8001c7e:	f003 fb31 	bl	80052e4 <HAL_GPIO_Init>
}
 8001c82:	bf00      	nop
 8001c84:	3738      	adds	r7, #56	; 0x38
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020c00 	.word	0x40020c00
 8001c9c:	40021800 	.word	0x40021800
 8001ca0:	40020400 	.word	0x40020400

08001ca4 <funcionBarra1>:

/* USER CODE BEGIN 4 */

void funcionBarra1() { // Función a ejecutar cuando se pulse el botón
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af02      	add	r7, sp, #8

  LCD_dibujaCuadrado(90, 10, 20, COLOR_NARANJA, 0, 0);
 8001caa:	2300      	movs	r3, #0
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <funcionBarra1+0x20>)
 8001cb4:	2214      	movs	r2, #20
 8001cb6:	210a      	movs	r1, #10
 8001cb8:	205a      	movs	r0, #90	; 0x5a
 8001cba:	f000 fc79 	bl	80025b0 <LCD_dibujaCuadrado>
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	ffff6000 	.word	0xffff6000

08001cc8 <funcionBoton>:
    LCD_dibujaCuadrado(130, 90, 40, COLOR_ROJO, 0, 0);
  else
    LCD_dibujaCuadrado(130, 90, 40, COLOR_VERDE, 0, 0);
}

void funcionBoton(){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af02      	add	r7, sp, #8
	LCD_dibujaCuadrado(90, 140, 20, COLOR_ROJO, 0, 0);
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <funcionBoton+0x20>)
 8001cd8:	2214      	movs	r2, #20
 8001cda:	218c      	movs	r1, #140	; 0x8c
 8001cdc:	205a      	movs	r0, #90	; 0x5a
 8001cde:	f000 fc67 	bl	80025b0 <LCD_dibujaCuadrado>
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	ffff0000 	.word	0xffff0000

08001cec <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0e8      	sub	sp, #416	; 0x1a0
 8001cf0:	af0a      	add	r7, sp, #40	; 0x28
 8001cf2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001cf6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cfa:	6018      	str	r0, [r3, #0]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001cfc:	f00f fd0a 	bl	8011714 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  // inicializamos los buffers
  //  si usamos la pantalla en vertical el parametro es 0
  //  si usamos la pantalla en horizontal el parametro es 1
  LCD_inicializa2Buffers(1, 1);
 8001d00:	2101      	movs	r1, #1
 8001d02:	2001      	movs	r0, #1
 8001d04:	f000 f93a 	bl	8001f7c <LCD_inicializa2Buffers>

  //--------------------------------------------------------------------------------------
  // creamos los componentes

  BarraProgreso Barra1;
  InicializaBarraProgreso(&Barra1, 5, 10, 80, 20, &juegoAlpha15, 2, COLOR_ROSA, &funcionBarra1);
 8001d08:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001d0c:	4b7a      	ldr	r3, [pc, #488]	; (8001ef8 <StartDefaultTask+0x20c>)
 8001d0e:	9304      	str	r3, [sp, #16]
 8001d10:	4b7a      	ldr	r3, [pc, #488]	; (8001efc <StartDefaultTask+0x210>)
 8001d12:	9303      	str	r3, [sp, #12]
 8001d14:	2302      	movs	r3, #2
 8001d16:	9302      	str	r3, [sp, #8]
 8001d18:	4b79      	ldr	r3, [pc, #484]	; (8001f00 <StartDefaultTask+0x214>)
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	2314      	movs	r3, #20
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2350      	movs	r3, #80	; 0x50
 8001d22:	220a      	movs	r2, #10
 8001d24:	2105      	movs	r1, #5
 8001d26:	f7fe fc39 	bl	800059c <InicializaBarraProgreso>


  BarraTexto barraTexto;
  inicializaBarraTexto(&barraTexto,5, 40, 80, 40, &juegoAlpha15, 2, COLOR_ROJO, COLOR_BLANCO, 2, "texto");
 8001d2a:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8001d2e:	4b75      	ldr	r3, [pc, #468]	; (8001f04 <StartDefaultTask+0x218>)
 8001d30:	9306      	str	r3, [sp, #24]
 8001d32:	2302      	movs	r3, #2
 8001d34:	9305      	str	r3, [sp, #20]
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	9304      	str	r3, [sp, #16]
 8001d3c:	4b72      	ldr	r3, [pc, #456]	; (8001f08 <StartDefaultTask+0x21c>)
 8001d3e:	9303      	str	r3, [sp, #12]
 8001d40:	2302      	movs	r3, #2
 8001d42:	9302      	str	r3, [sp, #8]
 8001d44:	4b6e      	ldr	r3, [pc, #440]	; (8001f00 <StartDefaultTask+0x214>)
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2328      	movs	r3, #40	; 0x28
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2350      	movs	r3, #80	; 0x50
 8001d4e:	2228      	movs	r2, #40	; 0x28
 8001d50:	2105      	movs	r1, #5
 8001d52:	f7fe fc83 	bl	800065c <inicializaBarraTexto>
  //Interruptor Interruptor1;
  //InicializaInterruptor(&Interruptor1, 5, 90, 120, 40, COLOR_ROSA, 0, funcionInterruptor1);


  LCD_Boton boton;
  LCD_inicializaBoton(160, 90, 50, 50 ,imagenBotonNo50x50, "boton1", &juegoAlpha15, 2, COLOR_BLANCO, &funcionBoton, 1, 1, &boton);
 8001d56:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d5a:	9308      	str	r3, [sp, #32]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	9307      	str	r3, [sp, #28]
 8001d60:	2301      	movs	r3, #1
 8001d62:	9306      	str	r3, [sp, #24]
 8001d64:	4b69      	ldr	r3, [pc, #420]	; (8001f0c <StartDefaultTask+0x220>)
 8001d66:	9305      	str	r3, [sp, #20]
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	9304      	str	r3, [sp, #16]
 8001d6e:	2302      	movs	r3, #2
 8001d70:	9303      	str	r3, [sp, #12]
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <StartDefaultTask+0x214>)
 8001d74:	9302      	str	r3, [sp, #8]
 8001d76:	4b66      	ldr	r3, [pc, #408]	; (8001f10 <StartDefaultTask+0x224>)
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <StartDefaultTask+0x228>)
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2332      	movs	r3, #50	; 0x32
 8001d80:	2232      	movs	r2, #50	; 0x32
 8001d82:	215a      	movs	r1, #90	; 0x5a
 8001d84:	20a0      	movs	r0, #160	; 0xa0
 8001d86:	f7ff fad4 	bl	8001332 <LCD_inicializaBoton>

  Etiqueta etiqueta;
  inicializaEtiqueta(&etiqueta, 150, 10, 60, 60, imagenAlarma11_60x60, 1, 1);
 8001d8a:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8001d8e:	2301      	movs	r3, #1
 8001d90:	9303      	str	r3, [sp, #12]
 8001d92:	2301      	movs	r3, #1
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <StartDefaultTask+0x22c>)
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	233c      	movs	r3, #60	; 0x3c
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	233c      	movs	r3, #60	; 0x3c
 8001da0:	220a      	movs	r2, #10
 8001da2:	2196      	movs	r1, #150	; 0x96
 8001da4:	f7fe fc8d 	bl	80006c2 <inicializaEtiqueta>

  EditorTexto editorTexto;
  inicializaEditorTexto(&editorTexto, 5, 90, 40, 60, 40, &juegoAlpha15, 2, COLOR_NEGRO, COLOR_BLANCO, COLOR_AZUL_CLARO, COLOR_NEGRO, 0,2),
 8001da8:	f107 0008 	add.w	r0, r7, #8
 8001dac:	2302      	movs	r3, #2
 8001dae:	9309      	str	r3, [sp, #36]	; 0x24
 8001db0:	2300      	movs	r3, #0
 8001db2:	9308      	str	r3, [sp, #32]
 8001db4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001db8:	9307      	str	r3, [sp, #28]
 8001dba:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <StartDefaultTask+0x230>)
 8001dbc:	9306      	str	r3, [sp, #24]
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	9305      	str	r3, [sp, #20]
 8001dc4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001dc8:	9304      	str	r3, [sp, #16]
 8001dca:	2302      	movs	r3, #2
 8001dcc:	9303      	str	r3, [sp, #12]
 8001dce:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <StartDefaultTask+0x214>)
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	2328      	movs	r3, #40	; 0x28
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	233c      	movs	r3, #60	; 0x3c
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2328      	movs	r3, #40	; 0x28
 8001ddc:	225a      	movs	r2, #90	; 0x5a
 8001dde:	2105      	movs	r1, #5
 8001de0:	f7fe fc98 	bl	8000714 <inicializaEditorTexto>

  //---------------------------------------------------------------------------------------

  //---------------------------------------------------------------------------------------
  // dibujamos la pantalla estatica
  LCD_intercambiaBuffers();
 8001de4:	f000 f9b6 	bl	8002154 <LCD_intercambiaBuffers>
  LCD_setFondoColor(COLOR_NEGRO);
 8001de8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001dec:	f000 f990 	bl	8002110 <LCD_setFondoColor>
  LCD_setFondoImagen(imagenCircuito240x320);
 8001df0:	484b      	ldr	r0, [pc, #300]	; (8001f20 <StartDefaultTask+0x234>)
 8001df2:	f000 f99e 	bl	8002132 <LCD_setFondoImagen>
  //DibujaBoton(&Boton1, Boton1.activacion, 90);
  // DibujaBoton1(&Boton2,"holaa" ,Boton2.activacion, 0);
  dibujaBarraTexto(&barraTexto, 0, 0);
 8001df6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fd1a 	bl	8000838 <dibujaBarraTexto>
  //DibujaInterruptor(&Interruptor1, 0, 0);
  dibujaEtiqueta(&etiqueta);
 8001e04:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fdc3 	bl	8000994 <dibujaEtiqueta>
  dibujaEditorTexto(&editorTexto,0,0);
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fde8 	bl	80009ec <dibujaEditorTexto>

  //LCD_dibujaImagen(150, 10, 60, 60, imagenAlarma11_60x60, 0, 0);
  // Caracter degradado a color
  LCD_dibujaCaracterAlpha(5, 140, 'A', COLOR_AMARILLO, &juegoAlpha22, 0, 0);
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	2300      	movs	r3, #0
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <StartDefaultTask+0x238>)
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	4b3f      	ldr	r3, [pc, #252]	; (8001f28 <StartDefaultTask+0x23c>)
 8001e2a:	2241      	movs	r2, #65	; 0x41
 8001e2c:	218c      	movs	r1, #140	; 0x8c
 8001e2e:	2005      	movs	r0, #5
 8001e30:	f000 fc6a 	bl	8002708 <LCD_dibujaCaracterAlpha>
  LCD_dibujaCaracterAlpha(35, 140, 'A', COLOR_AMARILLO, &juegoAlpha19, 0, 50);
 8001e34:	2332      	movs	r3, #50	; 0x32
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <StartDefaultTask+0x240>)
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <StartDefaultTask+0x23c>)
 8001e42:	2241      	movs	r2, #65	; 0x41
 8001e44:	218c      	movs	r1, #140	; 0x8c
 8001e46:	2023      	movs	r0, #35	; 0x23
 8001e48:	f000 fc5e 	bl	8002708 <LCD_dibujaCaracterAlpha>
  LCD_dibujaCaracterAlpha(65, 140, 'A', COLOR_AMARILLO, &juegoAlpha17, 0, 90);
 8001e4c:	235a      	movs	r3, #90	; 0x5a
 8001e4e:	9302      	str	r3, [sp, #8]
 8001e50:	2300      	movs	r3, #0
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <StartDefaultTask+0x244>)
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <StartDefaultTask+0x23c>)
 8001e5a:	2241      	movs	r2, #65	; 0x41
 8001e5c:	218c      	movs	r1, #140	; 0x8c
 8001e5e:	2041      	movs	r0, #65	; 0x41
 8001e60:	f000 fc52 	bl	8002708 <LCD_dibujaCaracterAlpha>
  LCD_dibujaCadenaCaracteresAlpha(
 8001e64:	2300      	movs	r3, #0
 8001e66:	9303      	str	r3, [sp, #12]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <StartDefaultTask+0x244>)
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	2303      	movs	r3, #3
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <StartDefaultTask+0x248>)
 8001e76:	4a30      	ldr	r2, [pc, #192]	; (8001f38 <StartDefaultTask+0x24c>)
 8001e78:	21aa      	movs	r1, #170	; 0xaa
 8001e7a:	2005      	movs	r0, #5
 8001e7c:	f000 fd2d 	bl	80028da <LCD_dibujaCadenaCaracteresAlpha>
      5, 170, "abcdefghijklmnopqrstABCDEFGHIJKLMNOPQRSTUVW0123456789",
      COLOR_CIAN, 3, &juegoAlpha17, 0, 0);

  uint16_t contador = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176

  /* Infinite loop */
  while (1) {

    // si la pantalla se pulsa
    LCD_actualizaPulsacion();
 8001e86:	f000 f91f 	bl	80020c8 <LCD_actualizaPulsacion>
    pulsada = LCD_pulsada();
 8001e8a:	f000 f8e9 	bl	8002060 <LCD_pulsada>
 8001e8e:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
    if (pulsada) {
 8001e92:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <StartDefaultTask+0x1c2>
      xPulsacion = LCD_xPulsacion();
 8001e9a:	f000 f8ed 	bl	8002078 <LCD_xPulsacion>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
      yPulsacion = LCD_yPulsacion();
 8001ea4:	f000 f8fe 	bl	80020a4 <LCD_yPulsacion>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
    }
    fBarraProgreso(&Barra1, contador); // dibujamos la barra de progreso
 8001eae:	f8b7 2176 	ldrh.w	r2, [r7, #374]	; 0x176
 8001eb2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe ff6f 	bl	8000d9c <fBarraProgreso>
    //VerificaBoton(&Boton1, pulsada, xPulsacion, yPulsacion); // gestion Boton1
    // VerificaBoton(&Boton2, pulsada, xPulsacion, yPulsacion); // gestion
    // Boton2
   // VerificaInterruptor(&Interruptor1, Interruptor1.activacion, pulsada, xPulsacion, yPulsacion); // Gestion Interruptor1

    verificaEditorTexto(&editorTexto, pulsada, xPulsacion, yPulsacion);
 8001ebe:	f8b7 2174 	ldrh.w	r2, [r7, #372]	; 0x174
 8001ec2:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8001ec6:	f107 0008 	add.w	r0, r7, #8
 8001eca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ece:	f7fe ff8f 	bl	8000df0 <verificaEditorTexto>
    contador++;
 8001ed2:	f8b7 3176 	ldrh.w	r3, [r7, #374]	; 0x176
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176

    LCD_atiendeBoton(&boton);
 8001edc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fa80 	bl	80013e6 <LCD_atiendeBoton>

    LCD_intercambiaBuffers();
 8001ee6:	f000 f935 	bl	8002154 <LCD_intercambiaBuffers>
    LCD_intercambiaBuffers2(); // mostramos el buffer visible
 8001eea:	f000 f95d 	bl	80021a8 <LCD_intercambiaBuffers2>

    osDelay(1);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f00c fd84 	bl	800e9fc <osDelay>
    LCD_actualizaPulsacion();
 8001ef4:	e7c7      	b.n	8001e86 <StartDefaultTask+0x19a>
 8001ef6:	bf00      	nop
 8001ef8:	08001ca5 	.word	0x08001ca5
 8001efc:	ffff00dd 	.word	0xffff00dd
 8001f00:	08067dfc 	.word	0x08067dfc
 8001f04:	080126fc 	.word	0x080126fc
 8001f08:	ffff0000 	.word	0xffff0000
 8001f0c:	08001cc9 	.word	0x08001cc9
 8001f10:	08012704 	.word	0x08012704
 8001f14:	08015fac 	.word	0x08015fac
 8001f18:	0801276c 	.word	0x0801276c
 8001f1c:	ff2873ff 	.word	0xff2873ff
 8001f20:	080186bc 	.word	0x080186bc
 8001f24:	08074e50 	.word	0x08074e50
 8001f28:	fffff000 	.word	0xfffff000
 8001f2c:	0806f840 	.word	0x0806f840
 8001f30:	0806b354 	.word	0x0806b354
 8001f34:	ff1aede1 	.word	0xff1aede1
 8001f38:	0801270c 	.word	0x0801270c

08001f3c <fTareaPantalla>:
 * @brief Function implementing the tareaPantalla thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_fTareaPantalla */
void fTareaPantalla(void *argument) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTareaPantalla */
  /* Infinite loop */
  for (;;) {

    osDelay(1);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f00c fd59 	bl	800e9fc <osDelay>
 8001f4a:	e7fb      	b.n	8001f44 <fTareaPantalla+0x8>

08001f4c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f5e:	f002 fcd5 	bl	800490c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40001000 	.word	0x40001000

08001f70 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001f78:	e7fe      	b.n	8001f78 <Error_Handler+0x8>
	...

08001f7c <LCD_inicializa2Buffers>:
static int SentidoHorizontal; // Buleano cierto si se quiere usar la pantalla horizontal
static int pantallaInvertida; // segun el sentido de la pantalla invertimos o no la pantalla

// -----------------------------------------------------------------------------------------

void LCD_inicializa2Buffers(int Horizontal, int sentido) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]

    BSP_LCD_Init();
 8001f86:	f001 f8b7 	bl	80030f8 <BSP_LCD_Init>
    BSP_LCD_Init();  // Inicializa la pantalla LCD
 8001f8a:	f001 f8b5 	bl	80030f8 <BSP_LCD_Init>

    lcd_ancho = BSP_LCD_GetXSize();  // Obtiene el ancho de la pantalla en número de puntos
 8001f8e:	f001 f917 	bl	80031c0 <BSP_LCD_GetXSize>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <LCD_inicializa2Buffers+0x7c>)
 8001f98:	801a      	strh	r2, [r3, #0]
    lcd_alto = BSP_LCD_GetYSize();  // Obtiene el alto de la pantalla
 8001f9a:	f001 f91d 	bl	80031d8 <BSP_LCD_GetYSize>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <LCD_inicializa2Buffers+0x80>)
 8001fa4:	801a      	strh	r2, [r3, #0]
    lcd_buffers[0] = (uint32_t*)LCD_FRAME_BUFFER_LAYER_0;  // Dirección del frame buffer número 0
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <LCD_inicializa2Buffers+0x84>)
 8001fa8:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8001fac:	601a      	str	r2, [r3, #0]
    lcd_buffers[1] = (uint32_t*)LCD_FRAME_BUFFER_LAYER_1;  // Dirección del frame buffer número 1
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <LCD_inicializa2Buffers+0x84>)
 8001fb0:	4a14      	ldr	r2, [pc, #80]	; (8002004 <LCD_inicializa2Buffers+0x88>)
 8001fb2:	605a      	str	r2, [r3, #4]

    lcd_pulsada = 0;  // Inicialmente la pantalla no se está pulsando
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <LCD_inicializa2Buffers+0x8c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

    BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER_0);  // Inicializa frame buffer 0
 8001fba:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f001 f916 	bl	80031f0 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER_1);  // Inicializa frame buffer 1
 8001fc4:	490f      	ldr	r1, [pc, #60]	; (8002004 <LCD_inicializa2Buffers+0x88>)
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f001 f912 	bl	80031f0 <BSP_LCD_LayerDefaultInit>

    lcd_bufferOculto = 0;  // Selecciona el frame buffer 0 para dibujar
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <LCD_inicializa2Buffers+0x90>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]

    BSP_TS_Init(lcd_ancho, lcd_alto);
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <LCD_inicializa2Buffers+0x7c>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <LCD_inicializa2Buffers+0x80>)
 8001fd8:	8812      	ldrh	r2, [r2, #0]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 fc35 	bl	800384c <BSP_TS_Init>
    // Indica a la interfaz táctil el ancho y alto de la pantalla en puntos


    SentidoHorizontal = Horizontal;
 8001fe2:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <LCD_inicializa2Buffers+0x94>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6013      	str	r3, [r2, #0]
    pantallaInvertida = sentido;
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <LCD_inicializa2Buffers+0x98>)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6013      	str	r3, [r2, #0]
} // LCD_inicializa2Buffers
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000036c 	.word	0x2000036c
 8001ffc:	2000036e 	.word	0x2000036e
 8002000:	20000370 	.word	0x20000370
 8002004:	d0130000 	.word	0xd0130000
 8002008:	20000380 	.word	0x20000380
 800200c:	20000378 	.word	0x20000378
 8002010:	20000384 	.word	0x20000384
 8002014:	20000388 	.word	0x20000388

08002018 <LCD_SentidoHorizontal>:

int LCD_SentidoHorizontal() {
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
        return SentidoHorizontal; // Devuelve el ancho de la pantalla en puntos
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <LCD_SentidoHorizontal+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
} // LCD_SentidoHorizontal
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000384 	.word	0x20000384

08002030 <LCD_ancho>:

void Set_buffreOculto(int bufferOculto){
	lcd_bufferOculto = bufferOculto;
} // Set_buffreOculto

uint16_t LCD_ancho() {
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
    return lcd_ancho; // Devuelve el ancho de la pantalla en puntos
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <LCD_ancho+0x14>)
 8002036:	881b      	ldrh	r3, [r3, #0]
} // LCD_ancho
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	2000036c 	.word	0x2000036c

08002048 <LCD_alto>:


uint16_t LCD_alto() {
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
    return lcd_alto; // Devuelve el alto de la pantalla en puntos
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <LCD_alto+0x14>)
 800204e:	881b      	ldrh	r3, [r3, #0]
} // LCD_alto
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	2000036e 	.word	0x2000036e

08002060 <LCD_pulsada>:


int LCD_pulsada() {
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
	// Devuelve un buleano que indica si se ha pulsado la pantalla en la última llamada a
	// LCD_actualizaPulsacion(). Devuelve un buleano falso si se llamó a LCD_resetPulsacion().

	return lcd_pulsada;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <LCD_pulsada+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
} // LCD_pulsada
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000380 	.word	0x20000380

08002078 <LCD_xPulsacion>:
void LCD_resetPulsacion() {
	lcd_pulsada = 0;  // Indica que no está pulsada para que no se traten pulsaciones posteriormente
} // LCD_resetPulsacion


uint16_t LCD_xPulsacion() {
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	// Devuelve la coordenada X del punto donde se detectó la última pulsación dependiendo de la orientacion de la pantalla

	if (LCD_SentidoHorizontal()) return 320-lcd_yPulsacion;
 800207c:	f7ff ffcc 	bl	8002018 <LCD_SentidoHorizontal>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <LCD_xPulsacion+0x1a>
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <LCD_xPulsacion+0x24>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800208e:	b29b      	uxth	r3, r3
 8002090:	e001      	b.n	8002096 <LCD_xPulsacion+0x1e>
	else return lcd_xPulsacion;
 8002092:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <LCD_xPulsacion+0x28>)
 8002094:	881b      	ldrh	r3, [r3, #0]
} // LCD_xPulsacion
 8002096:	4618      	mov	r0, r3
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000037e 	.word	0x2000037e
 80020a0:	2000037c 	.word	0x2000037c

080020a4 <LCD_yPulsacion>:


uint16_t LCD_yPulsacion() {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	// Devuelve la coordenada Y del punto donde se detectó la última pulsación  dependiendo de la orientacion de la pantalla
	if (LCD_SentidoHorizontal()) return lcd_xPulsacion;
 80020a8:	f7ff ffb6 	bl	8002018 <LCD_SentidoHorizontal>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <LCD_yPulsacion+0x14>
 80020b2:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <LCD_yPulsacion+0x1c>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	e001      	b.n	80020bc <LCD_yPulsacion+0x18>
	else return lcd_yPulsacion;
 80020b8:	4b02      	ldr	r3, [pc, #8]	; (80020c4 <LCD_yPulsacion+0x20>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
} // LCD_yPulsacion
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000037c 	.word	0x2000037c
 80020c4:	2000037e 	.word	0x2000037e

080020c8 <LCD_actualizaPulsacion>:


void LCD_actualizaPulsacion() {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
	// Actualiza el estado de pulsación de la pantalla

    TS_StateTypeDef estadoTactil;  // Estructura para datos de interfaz táctil

    BSP_TS_GetState(&estadoTactil);  // Obtiene el estado de la interfaz táctil
 80020ce:	463b      	mov	r3, r7
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 fbf5 	bl	80038c0 <BSP_TS_GetState>

    if (estadoTactil.TouchDetected) {  // Si se detectó pulsación
 80020d6:	883b      	ldrh	r3, [r7, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00c      	beq.n	80020f6 <LCD_actualizaPulsacion+0x2e>
        lcd_xPulsacion = estadoTactil.X;  // Recoge coordenada X
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <LCD_actualizaPulsacion+0x3c>)
 80020e0:	801a      	strh	r2, [r3, #0]
        lcd_yPulsacion = 320 - estadoTactil.Y;  // y coordenada Y
 80020e2:	88bb      	ldrh	r3, [r7, #4]
 80020e4:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <LCD_actualizaPulsacion+0x40>)
 80020ec:	801a      	strh	r2, [r3, #0]
        lcd_pulsada = 1;  // Indica que está pulsada
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <LCD_actualizaPulsacion+0x44>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
    } else lcd_pulsada = 0;  // Indica que no está pulsada
} // LCD_actualizaPulsacion
 80020f4:	e002      	b.n	80020fc <LCD_actualizaPulsacion+0x34>
    } else lcd_pulsada = 0;  // Indica que no está pulsada
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <LCD_actualizaPulsacion+0x44>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
} // LCD_actualizaPulsacion
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2000037c 	.word	0x2000037c
 8002108:	2000037e 	.word	0x2000037e
 800210c:	20000380 	.word	0x20000380

08002110 <LCD_setFondoColor>:


void LCD_setFondoColor(uint32_t color) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af02      	add	r7, sp, #8
 8002116:	6078      	str	r0, [r7, #4]
    // Borra toda la pantalla y establece como fondo el color indicado por parámetro

    LCD_dibujaRectanguloRellenoOpaco(0, 0, 240, 320, color);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002120:	22f0      	movs	r2, #240	; 0xf0
 8002122:	2100      	movs	r1, #0
 8002124:	2000      	movs	r0, #0
 8002126:	f000 f9eb 	bl	8002500 <LCD_dibujaRectanguloRellenoOpaco>
    // Pone todos los puntos en el frame buffer oculto al color indicado
} // LCD_setFondoColor
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <LCD_setFondoImagen>:


void LCD_setFondoImagen(const uint8_t * imagen) {
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af02      	add	r7, sp, #8
 8002138:	6078      	str	r0, [r7, #4]
    // Borra toda la pantalla y establece como fondo la imagen de 240x320 puntos indicada por parámetro

    LCD_dibujaImagenOpaca(0, 0, 240, 320, imagen);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002142:	22f0      	movs	r2, #240	; 0xf0
 8002144:	2100      	movs	r1, #0
 8002146:	2000      	movs	r0, #0
 8002148:	f000 fa8c 	bl	8002664 <LCD_dibujaImagenOpaca>
    // Dibuja la imagen de fondo
} // LCD_setFondoImagen
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <LCD_intercambiaBuffers>:


void LCD_intercambiaBuffers() {
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
    // Cambia en qué frame buffer se dibuja y qué frame buffer se visualiza

    while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS));  // Espera a que la GPU finalice sincronismo con pantalla
 8002158:	bf00      	nop
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <LCD_intercambiaBuffers+0x4c>)
 800215c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f9      	beq.n	800215a <LCD_intercambiaBuffers+0x6>
    if (lcd_bufferOculto == 0) {  // Si se dibujó en el buffer 0
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <LCD_intercambiaBuffers+0x50>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <LCD_intercambiaBuffers+0x32>

        BSP_LCD_SetLayerVisible(1, DISABLE);  // Buffer 1 invisible
 800216e:	2100      	movs	r1, #0
 8002170:	2001      	movs	r0, #1
 8002172:	f001 f88d 	bl	8003290 <BSP_LCD_SetLayerVisible>
        BSP_LCD_SetLayerVisible(0, ENABLE);  // Buffer 0 visible
 8002176:	2101      	movs	r1, #1
 8002178:	2000      	movs	r0, #0
 800217a:	f001 f889 	bl	8003290 <BSP_LCD_SetLayerVisible>
        lcd_bufferOculto = 1;  // Buffer donde se va a dibujar
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <LCD_intercambiaBuffers+0x50>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]
    } else {
        BSP_LCD_SetLayerVisible(0, DISABLE);  // Buffer 0 invisible
        BSP_LCD_SetLayerVisible(1, ENABLE);  // Buffer 1 ivisible
        lcd_bufferOculto = 0;  // Buffer donde se dibuja
    }
} // LCD_intercambiaBuffers
 8002184:	e00a      	b.n	800219c <LCD_intercambiaBuffers+0x48>
        BSP_LCD_SetLayerVisible(0, DISABLE);  // Buffer 0 invisible
 8002186:	2100      	movs	r1, #0
 8002188:	2000      	movs	r0, #0
 800218a:	f001 f881 	bl	8003290 <BSP_LCD_SetLayerVisible>
        BSP_LCD_SetLayerVisible(1, ENABLE);  // Buffer 1 ivisible
 800218e:	2101      	movs	r1, #1
 8002190:	2001      	movs	r0, #1
 8002192:	f001 f87d 	bl	8003290 <BSP_LCD_SetLayerVisible>
        lcd_bufferOculto = 0;  // Buffer donde se dibuja
 8002196:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <LCD_intercambiaBuffers+0x50>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
} // LCD_intercambiaBuffers
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40016800 	.word	0x40016800
 80021a4:	20000378 	.word	0x20000378

080021a8 <LCD_intercambiaBuffers2>:



void LCD_intercambiaBuffers2() {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0

	// Mostramos el Buffer 1 y cambiamos el Buffer oculto

    while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS));  // Espera a que la GPU finalice sincronismo con pantalla
 80021ac:	bf00      	nop
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <LCD_intercambiaBuffers2+0x2c>)
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f9      	beq.n	80021ae <LCD_intercambiaBuffers2+0x6>


        BSP_LCD_SetLayerVisible(0, DISABLE);  // Buffer 0 invisible
 80021ba:	2100      	movs	r1, #0
 80021bc:	2000      	movs	r0, #0
 80021be:	f001 f867 	bl	8003290 <BSP_LCD_SetLayerVisible>
        BSP_LCD_SetLayerVisible(1, ENABLE);  // Buffer 1 visible
 80021c2:	2101      	movs	r1, #1
 80021c4:	2001      	movs	r0, #1
 80021c6:	f001 f863 	bl	8003290 <BSP_LCD_SetLayerVisible>
        lcd_bufferOculto = 1;  // Buffer donde se va a dibujar
 80021ca:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <LCD_intercambiaBuffers2+0x30>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]


} // LCD_intercambiaBuffers2
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40016800 	.word	0x40016800
 80021d8:	20000378 	.word	0x20000378

080021dc <LCD_dibujaPunto>:


void LCD_dibujaPunto(uint16_t x, uint16_t y, uint32_t color, int enBlancoYNegro, int transparencia) {
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60ba      	str	r2, [r7, #8]
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	4603      	mov	r3, r0
 80021e8:	81fb      	strh	r3, [r7, #14]
 80021ea:	460b      	mov	r3, r1
 80021ec:	81bb      	strh	r3, [r7, #12]
    // Dibuja un punto en coordenadas ('x', 'y') con el color indicado en 'color'
    // Si 'enBlancoYNegro' es un buleano cierto, convierte el color a niveles de gris
    // 'transparencia' es un factor entre 0 y 100 para aplicar un nivel de transparencia al color, desde
    // completamente transparente (valor 0) a transparencia original (valor 100)

    uint8_t * pColor = (uint8_t*) &color;  // Para acceder a los bytes del nuevo color
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	61bb      	str	r3, [r7, #24]

    uint16_t X, Y; // ejes de la pantalla

    // Establecemos los ejes segun la orientacion de la pantalla en los cuatro sentidos
    if (SentidoHorizontal == 1){ // si es horizontal
 80021f4:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <LCD_dibujaPunto+0x1d8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d111      	bne.n	8002220 <LCD_dibujaPunto+0x44>
    	if (pantallaInvertida  == 0)  // no hay que invertir la pantalla
 80021fc:	4b6e      	ldr	r3, [pc, #440]	; (80023b8 <LCD_dibujaPunto+0x1dc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d106      	bne.n	8002212 <LCD_dibujaPunto+0x36>
    	{Y=320-x; X=y;} // pantalla horizontal normal
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800220a:	83bb      	strh	r3, [r7, #28]
 800220c:	89bb      	ldrh	r3, [r7, #12]
 800220e:	83fb      	strh	r3, [r7, #30]
 8002210:	e017      	b.n	8002242 <LCD_dibujaPunto+0x66>
    	else {Y=x; X=240-y;} // pantalla horizontal invertida
 8002212:	89fb      	ldrh	r3, [r7, #14]
 8002214:	83bb      	strh	r3, [r7, #28]
 8002216:	89bb      	ldrh	r3, [r7, #12]
 8002218:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800221c:	83fb      	strh	r3, [r7, #30]
 800221e:	e010      	b.n	8002242 <LCD_dibujaPunto+0x66>
    }
    else{ // si esta en vertical
    	if (pantallaInvertida  == 0) // no hay que invertir la pantalla
 8002220:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <LCD_dibujaPunto+0x1dc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d104      	bne.n	8002232 <LCD_dibujaPunto+0x56>
    	{Y=y;X=x;} // pantalla vertical normal
 8002228:	89bb      	ldrh	r3, [r7, #12]
 800222a:	83bb      	strh	r3, [r7, #28]
 800222c:	89fb      	ldrh	r3, [r7, #14]
 800222e:	83fb      	strh	r3, [r7, #30]
 8002230:	e007      	b.n	8002242 <LCD_dibujaPunto+0x66>
    	else {X=240-x; Y=320-y;} // pantalla vertical invertida
 8002232:	89fb      	ldrh	r3, [r7, #14]
 8002234:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002238:	83fb      	strh	r3, [r7, #30]
 800223a:	89bb      	ldrh	r3, [r7, #12]
 800223c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002240:	83bb      	strh	r3, [r7, #28]
    }



    if (enBlancoYNegro) {  // Si hay que convertir a niveles de gris ...
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <LCD_dibujaPunto+0xa4>

        uint8_t gris = ((int)pColor[0] + pColor[1] + pColor[2]) / 3;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	3301      	adds	r3, #1
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4413      	add	r3, r2
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	3202      	adds	r2, #2
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	4413      	add	r3, r2
 800225e:	4a57      	ldr	r2, [pc, #348]	; (80023bc <LCD_dibujaPunto+0x1e0>)
 8002260:	fb82 1203 	smull	r1, r2, r2, r3
 8002264:	17db      	asrs	r3, r3, #31
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	75fb      	strb	r3, [r7, #23]
        // Obtiene la media de las componentes RGB

        pColor[0] = gris;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	7dfa      	ldrb	r2, [r7, #23]
 800226e:	701a      	strb	r2, [r3, #0]
        pColor[1] = gris;
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	3301      	adds	r3, #1
 8002274:	7dfa      	ldrb	r2, [r7, #23]
 8002276:	701a      	strb	r2, [r3, #0]
        pColor[2] = gris;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3302      	adds	r3, #2
 800227c:	7dfa      	ldrb	r2, [r7, #23]
 800227e:	701a      	strb	r2, [r3, #0]
        // Guarda la media en las componentes RGB del color
    }

    uint8_t alpha = pColor[3] * transparencia / 100;
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	3303      	adds	r3, #3
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	4a4c      	ldr	r2, [pc, #304]	; (80023c0 <LCD_dibujaPunto+0x1e4>)
 8002290:	fb82 1203 	smull	r1, r2, r2, r3
 8002294:	1152      	asrs	r2, r2, #5
 8002296:	17db      	asrs	r3, r3, #31
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	75bb      	strb	r3, [r7, #22]
    // Canal alpha del nuevo color modificado por el grado de transparencia a aplicar

    if (alpha > 0 && alpha < 255) {
 800229c:	7dbb      	ldrb	r3, [r7, #22]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d069      	beq.n	8002376 <LCD_dibujaPunto+0x19a>
 80022a2:	7dbb      	ldrb	r3, [r7, #22]
 80022a4:	2bff      	cmp	r3, #255	; 0xff
 80022a6:	d066      	beq.n	8002376 <LCD_dibujaPunto+0x19a>
        // Si el nuevo color es semitransparente, hay que mezclar

        uint8_t * pFrameBuffer = (uint8_t*)(lcd_buffers[lcd_bufferOculto] +
 80022a8:	4b46      	ldr	r3, [pc, #280]	; (80023c4 <LCD_dibujaPunto+0x1e8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a46      	ldr	r2, [pc, #280]	; (80023c8 <LCD_dibujaPunto+0x1ec>)
 80022ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            Y * lcd_ancho + X);  // Dirección del punto en el frame buffer
 80022b2:	8bbb      	ldrh	r3, [r7, #28]
 80022b4:	4945      	ldr	r1, [pc, #276]	; (80023cc <LCD_dibujaPunto+0x1f0>)
 80022b6:	8809      	ldrh	r1, [r1, #0]
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4619      	mov	r1, r3
 80022be:	8bfb      	ldrh	r3, [r7, #30]
 80022c0:	440b      	add	r3, r1
 80022c2:	009b      	lsls	r3, r3, #2
        uint8_t * pFrameBuffer = (uint8_t*)(lcd_buffers[lcd_bufferOculto] +
 80022c4:	4413      	add	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

        pFrameBuffer[0] = (pFrameBuffer[0] * (0xFF - alpha) + pColor[0] * alpha) / 0xFF;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	7dbb      	ldrb	r3, [r7, #22]
 80022d0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80022d4:	fb03 f202 	mul.w	r2, r3, r2
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	7dbb      	ldrb	r3, [r7, #22]
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	4a3a      	ldr	r2, [pc, #232]	; (80023d0 <LCD_dibujaPunto+0x1f4>)
 80022e8:	fb82 1203 	smull	r1, r2, r2, r3
 80022ec:	441a      	add	r2, r3
 80022ee:	11d2      	asrs	r2, r2, #7
 80022f0:	17db      	asrs	r3, r3, #31
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	701a      	strb	r2, [r3, #0]
        pFrameBuffer[1] = (pFrameBuffer[1] * (0xFF - alpha) + pColor[1] * alpha) / 0xFF;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	3301      	adds	r3, #1
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	7dbb      	ldrb	r3, [r7, #22]
 8002304:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002308:	fb03 f202 	mul.w	r2, r3, r2
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	3301      	adds	r3, #1
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	7dbb      	ldrb	r3, [r7, #22]
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	4a2c      	ldr	r2, [pc, #176]	; (80023d0 <LCD_dibujaPunto+0x1f4>)
 800231e:	fb82 1203 	smull	r1, r2, r2, r3
 8002322:	441a      	add	r2, r3
 8002324:	11d2      	asrs	r2, r2, #7
 8002326:	17db      	asrs	r3, r3, #31
 8002328:	1ad2      	subs	r2, r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	3301      	adds	r3, #1
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]
        pFrameBuffer[2] = (pFrameBuffer[2] * (0xFF - alpha) + pColor[2] * alpha) / 0xFF;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3302      	adds	r3, #2
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	7dbb      	ldrb	r3, [r7, #22]
 800233c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002340:	fb03 f202 	mul.w	r2, r3, r2
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	3302      	adds	r3, #2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	4619      	mov	r1, r3
 800234c:	7dbb      	ldrb	r3, [r7, #22]
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <LCD_dibujaPunto+0x1f4>)
 8002356:	fb82 1203 	smull	r1, r2, r2, r3
 800235a:	441a      	add	r2, r3
 800235c:	11d2      	asrs	r2, r2, #7
 800235e:	17db      	asrs	r3, r3, #31
 8002360:	1ad2      	subs	r2, r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	3302      	adds	r3, #2
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]
        pFrameBuffer[3] = 0xFF;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	3303      	adds	r3, #3
 800236e:	22ff      	movs	r2, #255	; 0xff
 8002370:	701a      	strb	r2, [r3, #0]
    if (alpha > 0 && alpha < 255) {
 8002372:	bf00      	nop
        pColor[3] = alpha;  // Le pone al nuevo color un alpha de 0xFF
        *(lcd_buffers[lcd_bufferOculto] + Y * lcd_ancho + X) = color;
        // Copia el nuevo color en el frame buffer
    }

} // LCD_dibujaPunto
 8002374:	e017      	b.n	80023a6 <LCD_dibujaPunto+0x1ca>
    } else if (alpha == 0xFF) { // El color es opaco y hay que sustituir el color
 8002376:	7dbb      	ldrb	r3, [r7, #22]
 8002378:	2bff      	cmp	r3, #255	; 0xff
 800237a:	d114      	bne.n	80023a6 <LCD_dibujaPunto+0x1ca>
        pColor[3] = alpha;  // Le pone al nuevo color un alpha de 0xFF
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	3303      	adds	r3, #3
 8002380:	7dba      	ldrb	r2, [r7, #22]
 8002382:	701a      	strb	r2, [r3, #0]
        *(lcd_buffers[lcd_bufferOculto] + Y * lcd_ancho + X) = color;
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <LCD_dibujaPunto+0x1e8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <LCD_dibujaPunto+0x1ec>)
 800238a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800238e:	8bbb      	ldrh	r3, [r7, #28]
 8002390:	490e      	ldr	r1, [pc, #56]	; (80023cc <LCD_dibujaPunto+0x1f0>)
 8002392:	8809      	ldrh	r1, [r1, #0]
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4619      	mov	r1, r3
 800239a:	8bfb      	ldrh	r3, [r7, #30]
 800239c:	440b      	add	r3, r1
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	601a      	str	r2, [r3, #0]
} // LCD_dibujaPunto
 80023a6:	bf00      	nop
 80023a8:	3724      	adds	r7, #36	; 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000384 	.word	0x20000384
 80023b8:	20000388 	.word	0x20000388
 80023bc:	55555556 	.word	0x55555556
 80023c0:	51eb851f 	.word	0x51eb851f
 80023c4:	20000378 	.word	0x20000378
 80023c8:	20000370 	.word	0x20000370
 80023cc:	2000036c 	.word	0x2000036c
 80023d0:	80808081 	.word	0x80808081

080023d4 <LCD_dibujaRectangulo>:
    // Copia el nuevo color en el frame buffer
} // LCD_dibujaPuntoOpaco


void LCD_dibujaRectangulo(uint16_t xInicial, uint16_t yInicial, uint16_t ancho, uint16_t alto,
    uint32_t color, int enBlancoYNegro, int transparencia) {
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af02      	add	r7, sp, #8
 80023da:	4604      	mov	r4, r0
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	80fb      	strh	r3, [r7, #6]
 80023e6:	4603      	mov	r3, r0
 80023e8:	80bb      	strh	r3, [r7, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	807b      	strh	r3, [r7, #2]
 80023ee:	4613      	mov	r3, r2
 80023f0:	803b      	strh	r3, [r7, #0]
    // Dibuja el contorno de un rectángulo cuya esquina superior izquierda está situada en (xInicial, yInicial) y
    // donde se indica el alto y ancho y el color.
    // Si 'enBlancoYNegro' es un buleano cierto, convierte el color a gris
    // 'transparencia' es un factor entre 0 y 100 para aplicar un nivel de transparencia al color, desde
    // completamente transparente (valor 100) a transparencia original (valor 0)
	transparencia = 100 - transparencia;
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28

    for(int x = xInicial; x < xInicial + ancho; x++) { // Recorriendo el ancho del rectángulo
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	e019      	b.n	8002434 <LCD_dibujaRectangulo+0x60>
        LCD_dibujaPunto(x, yInicial, color, enBlancoYNegro, transparencia);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	b298      	uxth	r0, r3
 8002404:	88b9      	ldrh	r1, [r7, #4]
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	6a3a      	ldr	r2, [r7, #32]
 800240e:	f7ff fee5 	bl	80021dc <LCD_dibujaPunto>
        LCD_dibujaPunto(x, yInicial + alto - 1, color, enBlancoYNegro, transparencia);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	b298      	uxth	r0, r3
 8002416:	88ba      	ldrh	r2, [r7, #4]
 8002418:	883b      	ldrh	r3, [r7, #0]
 800241a:	4413      	add	r3, r2
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b299      	uxth	r1, r3
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	6a3a      	ldr	r2, [r7, #32]
 800242a:	f7ff fed7 	bl	80021dc <LCD_dibujaPunto>
    for(int x = xInicial; x < xInicial + ancho; x++) { // Recorriendo el ancho del rectángulo
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3301      	adds	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	4413      	add	r3, r2
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	429a      	cmp	r2, r3
 800243e:	dbdf      	blt.n	8002400 <LCD_dibujaRectangulo+0x2c>
    }
    for(int y = yInicial; y < yInicial + alto; y++) { // Recorriendo el alto del rectángulo
 8002440:	88bb      	ldrh	r3, [r7, #4]
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	e019      	b.n	800247a <LCD_dibujaRectangulo+0xa6>
        LCD_dibujaPunto(xInicial, y, color, enBlancoYNegro, transparencia);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	b299      	uxth	r1, r3
 800244a:	88f8      	ldrh	r0, [r7, #6]
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	6a3a      	ldr	r2, [r7, #32]
 8002454:	f7ff fec2 	bl	80021dc <LCD_dibujaPunto>
        LCD_dibujaPunto(xInicial + ancho - 1, y, color, enBlancoYNegro, transparencia);
 8002458:	88fa      	ldrh	r2, [r7, #6]
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	4413      	add	r3, r2
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b298      	uxth	r0, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	b299      	uxth	r1, r3
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	6a3a      	ldr	r2, [r7, #32]
 8002470:	f7ff feb4 	bl	80021dc <LCD_dibujaPunto>
    for(int y = yInicial; y < yInicial + alto; y++) { // Recorriendo el alto del rectángulo
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	88ba      	ldrh	r2, [r7, #4]
 800247c:	883b      	ldrh	r3, [r7, #0]
 800247e:	4413      	add	r3, r2
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	dbdf      	blt.n	8002446 <LCD_dibujaRectangulo+0x72>
    }
} // LCD_dibujaRectangulo
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}

08002490 <LCD_dibujaRectanguloRelleno>:


void LCD_dibujaRectanguloRelleno(uint16_t xInicial, uint16_t yInicial, uint16_t ancho, uint16_t alto,
    uint32_t color, int enBlancoYNegro, int transparencia) {
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b087      	sub	sp, #28
 8002494:	af02      	add	r7, sp, #8
 8002496:	4604      	mov	r4, r0
 8002498:	4608      	mov	r0, r1
 800249a:	4611      	mov	r1, r2
 800249c:	461a      	mov	r2, r3
 800249e:	4623      	mov	r3, r4
 80024a0:	80fb      	strh	r3, [r7, #6]
 80024a2:	4603      	mov	r3, r0
 80024a4:	80bb      	strh	r3, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	807b      	strh	r3, [r7, #2]
 80024aa:	4613      	mov	r3, r2
 80024ac:	803b      	strh	r3, [r7, #0]
    // donde se indica el alto y ancho el color de sus puntos.
    // Si 'enBlancoYNegro' es un buleano cierto, convierte el color a gris
    // 'transparencia' es un factor entre 0 y 100 para aplicar un nivel de transparencia al color, desde
    // completamente transparente (valor 100) a transparencia original (valor 0)

    for(int x = xInicial; x < xInicial + ancho; x++)  // Recorriendo el lcd_ancho del rectángulo
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e01a      	b.n	80024ea <LCD_dibujaRectanguloRelleno+0x5a>
        for(int y = yInicial; y < yInicial + alto; y++)  // y el alto
 80024b4:	88bb      	ldrh	r3, [r7, #4]
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	e00e      	b.n	80024d8 <LCD_dibujaRectanguloRelleno+0x48>
            LCD_dibujaPunto(x, y, color, enBlancoYNegro, 100-transparencia);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	b298      	uxth	r0, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	b299      	uxth	r1, r3
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	6a3a      	ldr	r2, [r7, #32]
 80024ce:	f7ff fe85 	bl	80021dc <LCD_dibujaPunto>
        for(int y = yInicial; y < yInicial + alto; y++)  // y el alto
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3301      	adds	r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	88ba      	ldrh	r2, [r7, #4]
 80024da:	883b      	ldrh	r3, [r7, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	dbea      	blt.n	80024ba <LCD_dibujaRectanguloRelleno+0x2a>
    for(int x = xInicial; x < xInicial + ancho; x++)  // Recorriendo el lcd_ancho del rectángulo
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3301      	adds	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	88fa      	ldrh	r2, [r7, #6]
 80024ec:	887b      	ldrh	r3, [r7, #2]
 80024ee:	4413      	add	r3, r2
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	dbde      	blt.n	80024b4 <LCD_dibujaRectanguloRelleno+0x24>
            // Dibuja cada punto del rectángulo con su color
} // LCD_dibujaRectanguloRelleno
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd90      	pop	{r4, r7, pc}

08002500 <LCD_dibujaRectanguloRellenoOpaco>:


void LCD_dibujaRectanguloRellenoOpaco(uint16_t xInicial, uint16_t yInicial, uint16_t ancho, uint16_t alto,
    uint32_t color) {
 8002500:	b490      	push	{r4, r7}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	4604      	mov	r4, r0
 8002508:	4608      	mov	r0, r1
 800250a:	4611      	mov	r1, r2
 800250c:	461a      	mov	r2, r3
 800250e:	4623      	mov	r3, r4
 8002510:	80fb      	strh	r3, [r7, #6]
 8002512:	4603      	mov	r3, r0
 8002514:	80bb      	strh	r3, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	807b      	strh	r3, [r7, #2]
 800251a:	4613      	mov	r3, r2
 800251c:	803b      	strh	r3, [r7, #0]
// Dibuja un rectángulo relleno de un color opaco.
// 'xInicial' e 'yInicial' indican las coordenadas de la esquina superior izquierda.
// 'ancho' y 'alto' son las dimensiones del rectángulo.

	uint32_t* p = lcd_buffers[lcd_bufferOculto] + yInicial * lcd_ancho + xInicial;
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <LCD_dibujaRectanguloRellenoOpaco+0xa4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <LCD_dibujaRectanguloRellenoOpaco+0xa8>)
 8002524:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002528:	88bb      	ldrh	r3, [r7, #4]
 800252a:	4920      	ldr	r1, [pc, #128]	; (80025ac <LCD_dibujaRectanguloRellenoOpaco+0xac>)
 800252c:	8809      	ldrh	r1, [r1, #0]
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4619      	mov	r1, r3
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	440b      	add	r3, r1
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	61fb      	str	r3, [r7, #28]
	uint16_t salto = lcd_ancho - ancho;
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <LCD_dibujaRectanguloRellenoOpaco+0xac>)
 8002540:	881a      	ldrh	r2, [r3, #0]
 8002542:	887b      	ldrh	r3, [r7, #2]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	827b      	strh	r3, [r7, #18]
	int yFinal = yInicial + alto - 1;
 8002548:	88ba      	ldrh	r2, [r7, #4]
 800254a:	883b      	ldrh	r3, [r7, #0]
 800254c:	4413      	add	r3, r2
 800254e:	3b01      	subs	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
	int xFinal = xInicial + ancho - 1;
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	4413      	add	r3, r2
 8002558:	3b01      	subs	r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
    for(int y = yInicial; y <= yFinal; y++) { // Para cada fila de puntos
 800255c:	88bb      	ldrh	r3, [r7, #4]
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	e016      	b.n	8002590 <LCD_dibujaRectanguloRellenoOpaco+0x90>
        for(int x = xInicial; x <= xFinal; x++) // Recorre los puntos de la fila
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e007      	b.n	8002578 <LCD_dibujaRectanguloRellenoOpaco+0x78>
        	*(p++) = color;  // Establece el color del punto y apunta al siguiente
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	1d1a      	adds	r2, r3, #4
 800256c:	61fa      	str	r2, [r7, #28]
 800256e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002570:	601a      	str	r2, [r3, #0]
        for(int x = xInicial; x <= xFinal; x++) // Recorre los puntos de la fila
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	429a      	cmp	r2, r3
 800257e:	ddf3      	ble.n	8002568 <LCD_dibujaRectanguloRellenoOpaco+0x68>
        p += salto;  // Apunta al primer punto de la siguiente fila
 8002580:	8a7b      	ldrh	r3, [r7, #18]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	61fb      	str	r3, [r7, #28]
    for(int y = yInicial; y <= yFinal; y++) { // Para cada fila de puntos
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	3301      	adds	r3, #1
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	dde4      	ble.n	8002562 <LCD_dibujaRectanguloRellenoOpaco+0x62>
    }
} // LCD_dibujaRectanguloRellenoOpaco
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3720      	adds	r7, #32
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc90      	pop	{r4, r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000378 	.word	0x20000378
 80025a8:	20000370 	.word	0x20000370
 80025ac:	2000036c 	.word	0x2000036c

080025b0 <LCD_dibujaCuadrado>:

void LCD_dibujaCuadrado(uint16_t xInicial, uint16_t yInicial, uint16_t lado,
    uint32_t color, int enBlancoYNegro, int transparencia) {
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af04      	add	r7, sp, #16
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	4603      	mov	r3, r0
 80025ba:	81fb      	strh	r3, [r7, #14]
 80025bc:	460b      	mov	r3, r1
 80025be:	81bb      	strh	r3, [r7, #12]
 80025c0:	4613      	mov	r3, r2
 80025c2:	817b      	strh	r3, [r7, #10]

	LCD_dibujaRectanguloRelleno(xInicial, yInicial, lado, lado, color, enBlancoYNegro, transparencia);
 80025c4:	897c      	ldrh	r4, [r7, #10]
 80025c6:	897a      	ldrh	r2, [r7, #10]
 80025c8:	89b9      	ldrh	r1, [r7, #12]
 80025ca:	89f8      	ldrh	r0, [r7, #14]
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4623      	mov	r3, r4
 80025da:	f7ff ff59 	bl	8002490 <LCD_dibujaRectanguloRelleno>
} // LCD_dibujaCuadrado
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}

080025e6 <LCD_dibujaImagen>:
    }
} // LCD_dibujaCirculo


void LCD_dibujaImagen(uint16_t xImagen, uint16_t yImagen, uint16_t ancho, uint16_t alto,
    const uint8_t * imagen, int enBlancoYNegro, int transparencia) {
 80025e6:	b590      	push	{r4, r7, lr}
 80025e8:	b087      	sub	sp, #28
 80025ea:	af02      	add	r7, sp, #8
 80025ec:	4604      	mov	r4, r0
 80025ee:	4608      	mov	r0, r1
 80025f0:	4611      	mov	r1, r2
 80025f2:	461a      	mov	r2, r3
 80025f4:	4623      	mov	r3, r4
 80025f6:	80fb      	strh	r3, [r7, #6]
 80025f8:	4603      	mov	r3, r0
 80025fa:	80bb      	strh	r3, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
 8002600:	4613      	mov	r3, r2
 8002602:	803b      	strh	r3, [r7, #0]
    // expresan el color de todos sus puntos (cada punto en 4 bytes en formato ARGB)
    // se encuentran en 'imagen'.
    // La magen se convierte a niveles de gris si 'enBlancoYNegro' es cierto.
    // Se le aplica el grado de transparencia indicado en 'transparencia', de 0 a 100.

	transparencia = 100 - transparencia;
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t * p = (uint32_t*) imagen;  // Para acceder a cada punto por separado
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	60fb      	str	r3, [r7, #12]

    for(uint16_t y = yImagen; y < yImagen + alto; y++)  // Recorriendo filas
 8002610:	88bb      	ldrh	r3, [r7, #4]
 8002612:	817b      	strh	r3, [r7, #10]
 8002614:	e01a      	b.n	800264c <LCD_dibujaImagen+0x66>
        for (uint16_t x = xImagen; x < xImagen + ancho; x++) {  // y columnas
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	813b      	strh	r3, [r7, #8]
 800261a:	e00e      	b.n	800263a <LCD_dibujaImagen+0x54>
        	LCD_dibujaPunto(x, y, *p, enBlancoYNegro, transparencia);  // dibuja cada punto
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	8979      	ldrh	r1, [r7, #10]
 8002622:	8938      	ldrh	r0, [r7, #8]
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	f7ff fdd7 	bl	80021dc <LCD_dibujaPunto>
            p++;  // Para acceder al color del siguiente punto
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3304      	adds	r3, #4
 8002632:	60fb      	str	r3, [r7, #12]
        for (uint16_t x = xImagen; x < xImagen + ancho; x++) {  // y columnas
 8002634:	893b      	ldrh	r3, [r7, #8]
 8002636:	3301      	adds	r3, #1
 8002638:	813b      	strh	r3, [r7, #8]
 800263a:	893a      	ldrh	r2, [r7, #8]
 800263c:	88f9      	ldrh	r1, [r7, #6]
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	440b      	add	r3, r1
 8002642:	429a      	cmp	r2, r3
 8002644:	dbea      	blt.n	800261c <LCD_dibujaImagen+0x36>
    for(uint16_t y = yImagen; y < yImagen + alto; y++)  // Recorriendo filas
 8002646:	897b      	ldrh	r3, [r7, #10]
 8002648:	3301      	adds	r3, #1
 800264a:	817b      	strh	r3, [r7, #10]
 800264c:	897a      	ldrh	r2, [r7, #10]
 800264e:	88b9      	ldrh	r1, [r7, #4]
 8002650:	883b      	ldrh	r3, [r7, #0]
 8002652:	440b      	add	r3, r1
 8002654:	429a      	cmp	r2, r3
 8002656:	dbde      	blt.n	8002616 <LCD_dibujaImagen+0x30>
        }
} // LCD_dibujaImagen
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}
	...

08002664 <LCD_dibujaImagenOpaca>:


void LCD_dibujaImagenOpaca(uint16_t xImagen, uint16_t yImagen, uint16_t ancho, uint16_t alto,
	  const uint8_t * imagen) {
 8002664:	b490      	push	{r4, r7}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	4604      	mov	r4, r0
 800266c:	4608      	mov	r0, r1
 800266e:	4611      	mov	r1, r2
 8002670:	461a      	mov	r2, r3
 8002672:	4623      	mov	r3, r4
 8002674:	80fb      	strh	r3, [r7, #6]
 8002676:	4603      	mov	r3, r0
 8002678:	80bb      	strh	r3, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	807b      	strh	r3, [r7, #2]
 800267e:	4613      	mov	r3, r2
 8002680:	803b      	strh	r3, [r7, #0]
    // Dibuja una imagen situando su esquina superior izquierda en 'xImagen', 'yImagen', que tiene
    // una resolución de 'ancho' puntos en horizontal y 'alto' puntos en vertical. Los bytes que
    // expresan el color de todos sus puntos (cada punto en 4 bytes en formato ARGB)
    // se encuentran en 'imagen'. La imagen es opaca, el canal Alpha de todos sus puntos es 0xFF.
    
	uint32_t * pFila = lcd_buffers[lcd_bufferOculto] + yImagen * lcd_ancho + xImagen;
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <LCD_dibujaImagenOpaca+0x98>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1e      	ldr	r2, [pc, #120]	; (8002700 <LCD_dibujaImagenOpaca+0x9c>)
 8002688:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800268c:	88bb      	ldrh	r3, [r7, #4]
 800268e:	491d      	ldr	r1, [pc, #116]	; (8002704 <LCD_dibujaImagenOpaca+0xa0>)
 8002690:	8809      	ldrh	r1, [r1, #0]
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4619      	mov	r1, r3
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	440b      	add	r3, r1
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	60bb      	str	r3, [r7, #8]
	uint32_t * pFrameBuffer = pFila;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	617b      	str	r3, [r7, #20]
	uint32_t * p = (uint32_t*) imagen;  // Para acceder a cada punto por separado
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	613b      	str	r3, [r7, #16]
    for(uint16_t y = yImagen; y < yImagen + alto; y++) { // Recorriendo filas
 80026aa:	88bb      	ldrh	r3, [r7, #4]
 80026ac:	81fb      	strh	r3, [r7, #14]
 80026ae:	e018      	b.n	80026e2 <LCD_dibujaImagenOpaca+0x7e>
        for (uint16_t x = xImagen; x < xImagen + ancho; x++) {  // y columnas
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	81bb      	strh	r3, [r7, #12]
 80026b4:	e00c      	b.n	80026d0 <LCD_dibujaImagenOpaca+0x6c>
        	* pFrameBuffer = * p;
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	601a      	str	r2, [r3, #0]
            p++;  // Para acceder al color del siguiente punto
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	3304      	adds	r3, #4
 80026c2:	613b      	str	r3, [r7, #16]
            pFrameBuffer++;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3304      	adds	r3, #4
 80026c8:	617b      	str	r3, [r7, #20]
        for (uint16_t x = xImagen; x < xImagen + ancho; x++) {  // y columnas
 80026ca:	89bb      	ldrh	r3, [r7, #12]
 80026cc:	3301      	adds	r3, #1
 80026ce:	81bb      	strh	r3, [r7, #12]
 80026d0:	89ba      	ldrh	r2, [r7, #12]
 80026d2:	88f9      	ldrh	r1, [r7, #6]
 80026d4:	887b      	ldrh	r3, [r7, #2]
 80026d6:	440b      	add	r3, r1
 80026d8:	429a      	cmp	r2, r3
 80026da:	dbec      	blt.n	80026b6 <LCD_dibujaImagenOpaca+0x52>
    for(uint16_t y = yImagen; y < yImagen + alto; y++) { // Recorriendo filas
 80026dc:	89fb      	ldrh	r3, [r7, #14]
 80026de:	3301      	adds	r3, #1
 80026e0:	81fb      	strh	r3, [r7, #14]
 80026e2:	89fa      	ldrh	r2, [r7, #14]
 80026e4:	88b9      	ldrh	r1, [r7, #4]
 80026e6:	883b      	ldrh	r3, [r7, #0]
 80026e8:	440b      	add	r3, r1
 80026ea:	429a      	cmp	r2, r3
 80026ec:	dbe0      	blt.n	80026b0 <LCD_dibujaImagenOpaca+0x4c>
        }
    }
} // LCD_dibujaImagenOpaca
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc90      	pop	{r4, r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000378 	.word	0x20000378
 8002700:	20000370 	.word	0x20000370
 8002704:	2000036c 	.word	0x2000036c

08002708 <LCD_dibujaCaracterAlpha>:


void LCD_dibujaCaracterAlpha(uint16_t xCaracter, uint16_t yCaracter, char caracter, uint32_t color,
	const LCD_JuegoCaracteresAlpha * pJuegoCaracteres, int enBlancoYNegro, int transparencia) {
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b08b      	sub	sp, #44	; 0x2c
 800270c:	af02      	add	r7, sp, #8
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	4603      	mov	r3, r0
 8002712:	81fb      	strh	r3, [r7, #14]
 8002714:	460b      	mov	r3, r1
 8002716:	81bb      	strh	r3, [r7, #12]
 8002718:	4613      	mov	r3, r2
 800271a:	72fb      	strb	r3, [r7, #11]
    // Si 'enBlancoYNegro' es un buleano cierto, convierte el color a gris
    // 'transparencia' es un factor entre 0 y 100 para aplicar un nivel de transparencia al color, desde
    // completamente transparente (valor 0) a transparencia original (valor 100)

    // Completar
	uint8_t Alto = pJuegoCaracteres -> alto;
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	75fb      	strb	r3, [r7, #23]
	uint8_t Ancho = LCD_anchoCaracterAlpha(caracter, pJuegoCaracteres);
 8002722:	7afb      	ldrb	r3, [r7, #11]
 8002724:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f86c 	bl	8002804 <LCD_anchoCaracterAlpha>
 800272c:	4603      	mov	r3, r0
 800272e:	75bb      	strb	r3, [r7, #22]

	uint8_t CARACTER; // aqui selccionamos los bits a partir de donde podemos empezar a dibujar



	for(int y = 0; y < Alto; y++) {  // Recorriendo las filas
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	e058      	b.n	80027e8 <LCD_dibujaCaracterAlpha+0xe0>
		for(int x = 0; x < Ancho; x++) {  // y las columnas de puntos
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	e04e      	b.n	80027da <LCD_dibujaCaracterAlpha+0xd2>

			CARACTER = pJuegoCaracteres -> caracteres[pJuegoCaracteres -> posiciones[caracter-32]+x+y*Ancho+1];
 800273c:	7afb      	ldrb	r3, [r7, #11]
 800273e:	3b20      	subs	r3, #32
 8002740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	7dba      	ldrb	r2, [r7, #22]
 800274e:	69f9      	ldr	r1, [r7, #28]
 8002750:	fb01 f202 	mul.w	r2, r1, r2
 8002754:	4413      	add	r3, r2
 8002756:	3301      	adds	r3, #1
 8002758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800275a:	4413      	add	r3, r2
 800275c:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8002760:	757b      	strb	r3, [r7, #21]
			//CARACTER=(((CARACTER*100)/255)+transparencia)/2; // hacemos la media entre la transparencia del caracter y la transparencia que queremos aplicar

			if (CARACTER != 0){
 8002762:	7d7b      	ldrb	r3, [r7, #21]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d025      	beq.n	80027b4 <LCD_dibujaCaracterAlpha+0xac>
				LCD_dibujaPunto(x + xCaracter,y + yCaracter, color, enBlancoYNegro, (((CARACTER*100)/255) * (100-transparencia))/100);
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	b29a      	uxth	r2, r3
 800276c:	89fb      	ldrh	r3, [r7, #14]
 800276e:	4413      	add	r3, r2
 8002770:	b298      	uxth	r0, r3
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	b29a      	uxth	r2, r3
 8002776:	89bb      	ldrh	r3, [r7, #12]
 8002778:	4413      	add	r3, r2
 800277a:	b299      	uxth	r1, r3
 800277c:	7d7b      	ldrb	r3, [r7, #21]
 800277e:	2264      	movs	r2, #100	; 0x64
 8002780:	fb02 f303 	mul.w	r3, r2, r3
 8002784:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <LCD_dibujaCaracterAlpha+0xf4>)
 8002786:	fb82 4203 	smull	r4, r2, r2, r3
 800278a:	441a      	add	r2, r3
 800278c:	11d2      	asrs	r2, r2, #7
 800278e:	17db      	asrs	r3, r3, #31
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002794:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	4a18      	ldr	r2, [pc, #96]	; (8002800 <LCD_dibujaCaracterAlpha+0xf8>)
 800279e:	fb82 4203 	smull	r4, r2, r2, r3
 80027a2:	1152      	asrs	r2, r2, #5
 80027a4:	17db      	asrs	r3, r3, #31
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	f7ff fd15 	bl	80021dc <LCD_dibujaPunto>
 80027b2:	e00f      	b.n	80027d4 <LCD_dibujaCaracterAlpha+0xcc>

				//LCD_dibujaPunto(x + xCaracter,y + yCaracter, color, 0, (CARACTER*100)/255);
			}
			else
				LCD_dibujaPunto(x + xCaracter,y + yCaracter, color, 0, 0); //si no hay nada dibujamos un punto transparente
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	89fb      	ldrh	r3, [r7, #14]
 80027ba:	4413      	add	r3, r2
 80027bc:	b298      	uxth	r0, r3
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	89bb      	ldrh	r3, [r7, #12]
 80027c4:	4413      	add	r3, r2
 80027c6:	b299      	uxth	r1, r3
 80027c8:	2300      	movs	r3, #0
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2300      	movs	r3, #0
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	f7ff fd04 	bl	80021dc <LCD_dibujaPunto>
		for(int x = 0; x < Ancho; x++) {  // y las columnas de puntos
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	3301      	adds	r3, #1
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	7dbb      	ldrb	r3, [r7, #22]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	429a      	cmp	r2, r3
 80027e0:	dbac      	blt.n	800273c <LCD_dibujaCaracterAlpha+0x34>
	for(int y = 0; y < Alto; y++) {  // Recorriendo las filas
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3301      	adds	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	dba2      	blt.n	8002736 <LCD_dibujaCaracterAlpha+0x2e>

		}
	}

} // LCD_dibujaCaracterAlpha
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	bf00      	nop
 80027fc:	80808081 	.word	0x80808081
 8002800:	51eb851f 	.word	0x51eb851f

08002804 <LCD_anchoCaracterAlpha>:


uint16_t LCD_anchoCaracterAlpha(char caracter, const LCD_JuegoCaracteresAlpha * pJuegoCaracteres) {
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
	  // Devuelve el ancho en puntos del carácter indicado en el primer parámetro, utilizando el juego de 
	  // caracteres indicado en el segundo parámetro
	  
	  // Completar
	int i = pJuegoCaracteres -> posiciones[caracter-32];
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	3b20      	subs	r3, #32
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
	return pJuegoCaracteres -> caracteres[i];
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3

} // LCD_anchoCaracterAlpha
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LCD_anchoCadenaCaracteresAlpha>:


uint16_t LCD_anchoCadenaCaracteresAlpha(const char* cadena, const LCD_JuegoCaracteresAlpha * pJuegoCaracteres, uint16_t separacion) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
	// Devuelve el ancho en puntos de la cadena de caracteres indicada en el primer parámetro, utilizando el juego de
	// caracteres indicado en el segundo parámetro y la separación entre caracteres indicada en el último parámetro

	// Completar
	 int longitud = strlen(cadena);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7fd fcd2 	bl	80001f0 <strlen>
 800284c:	4603      	mov	r3, r0
 800284e:	617b      	str	r3, [r7, #20]
	 uint16_t AchoCadena =0;
 8002850:	2300      	movs	r3, #0
 8002852:	83fb      	strh	r3, [r7, #30]


	 for (int i = 0; i < longitud; i++) {
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	e036      	b.n	80028c8 <LCD_anchoCadenaCaracteresAlpha+0x90>
		 if (longitud == 1) AchoCadena += LCD_anchoCaracterAlpha(cadena[i],pJuegoCaracteres);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10d      	bne.n	800287c <LCD_anchoCadenaCaracteresAlpha+0x44>
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4413      	add	r3, r2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ffca 	bl	8002804 <LCD_anchoCaracterAlpha>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	8bfb      	ldrh	r3, [r7, #30]
 8002876:	4413      	add	r3, r2
 8002878:	83fb      	strh	r3, [r7, #30]
 800287a:	e022      	b.n	80028c2 <LCD_anchoCadenaCaracteresAlpha+0x8a>
		 else if (i < longitud -1) AchoCadena += LCD_anchoCaracterAlpha(cadena[i],pJuegoCaracteres) + separacion;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3b01      	subs	r3, #1
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	429a      	cmp	r2, r3
 8002884:	da10      	bge.n	80028a8 <LCD_anchoCadenaCaracteresAlpha+0x70>
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ffb7 	bl	8002804 <LCD_anchoCaracterAlpha>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	4413      	add	r3, r2
 800289e:	b29a      	uxth	r2, r3
 80028a0:	8bfb      	ldrh	r3, [r7, #30]
 80028a2:	4413      	add	r3, r2
 80028a4:	83fb      	strh	r3, [r7, #30]
 80028a6:	e00c      	b.n	80028c2 <LCD_anchoCadenaCaracteresAlpha+0x8a>
		 else AchoCadena += LCD_anchoCaracterAlpha(cadena[i],pJuegoCaracteres);
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4413      	add	r3, r2
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ffa6 	bl	8002804 <LCD_anchoCaracterAlpha>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	8bfb      	ldrh	r3, [r7, #30]
 80028be:	4413      	add	r3, r2
 80028c0:	83fb      	strh	r3, [r7, #30]
	 for (int i = 0; i < longitud; i++) {
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	dbc4      	blt.n	800285a <LCD_anchoCadenaCaracteresAlpha+0x22>
	 }

	 return AchoCadena;
 80028d0:	8bfb      	ldrh	r3, [r7, #30]

} // LCD_anchoCadenaCaracteresAlpha
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <LCD_dibujaCadenaCaracteresAlpha>:
	 }

} // LCD_dibujaCadenaCaracteresAlpha
*/

void LCD_dibujaCadenaCaracteresAlpha(uint16_t xCadena, uint16_t yCadena, const char* cadena, uint32_t color, uint16_t separacion,  const LCD_JuegoCaracteresAlpha * pJuegoCaracteres, int enBlancoYNegro, int transparencia) {
 80028da:	b580      	push	{r7, lr}
 80028dc:	b096      	sub	sp, #88	; 0x58
 80028de:	af04      	add	r7, sp, #16
 80028e0:	60ba      	str	r2, [r7, #8]
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	4603      	mov	r3, r0
 80028e6:	81fb      	strh	r3, [r7, #14]
 80028e8:	460b      	mov	r3, r1
 80028ea:	81bb      	strh	r3, [r7, #12]

	// el texto se ajusta al sentido de la pantalla, si el texto es muy largo se realizan los saltos de linea correspondientes (LimiteH)
	// si no se puede seguir escribiendo verticalemente porque se supera el espacio vertical (LimiteV) se deja de escribir

    // Completar
	 int longitud = strlen(cadena);
 80028ec:	68b8      	ldr	r0, [r7, #8]
 80028ee:	f7fd fc7f 	bl	80001f0 <strlen>
 80028f2:	4603      	mov	r3, r0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	 uint8_t Alto = pJuegoCaracteres -> alto; // el alto de todos los caracteres es el mismo
 80028f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	 uint8_t AnchoIncremental =0;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	 uint16_t AchoCaracter;

	 int LimiteH, LimiteV;
	 int lcd_ancho = LCD_ancho(); // ancho de la pantalla
 8002904:	f7ff fb94 	bl	8002030 <LCD_ancho>
 8002908:	4603      	mov	r3, r0
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
	 int lcd_alto = LCD_alto(); // alto de la pantalla
 800290c:	f7ff fb9c 	bl	8002048 <LCD_alto>
 8002910:	4603      	mov	r3, r0
 8002912:	623b      	str	r3, [r7, #32]

	 //limites de tamaño del texto
	 if (LCD_SentidoHorizontal() == 0){ //pantalla vertical
 8002914:	f7ff fb80 	bl	8002018 <LCD_SentidoHorizontal>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d104      	bne.n	8002928 <LCD_dibujaCadenaCaracteresAlpha+0x4e>
		 LimiteH= lcd_ancho; // 240
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	643b      	str	r3, [r7, #64]	; 0x40
		 LimiteV = lcd_alto; // 320
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002926:	e003      	b.n	8002930 <LCD_dibujaCadenaCaracteresAlpha+0x56>
	 }
	 else{ //pantalla horizontal
		 LimiteV= lcd_ancho; // 240
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	63fb      	str	r3, [r7, #60]	; 0x3c
		 LimiteH = lcd_alto; // 320
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	643b      	str	r3, [r7, #64]	; 0x40
	 }

	 int PosX, PosY; // coordenadas de cada caracter

	 // variables para los saltos de linea
	 int saltar=0;
 8002930:	2300      	movs	r3, #0
 8002932:	63bb      	str	r3, [r7, #56]	; 0x38
	 int SaltoLinea = Alto + separacion;
 8002934:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002938:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800293c:	4413      	add	r3, r2
 800293e:	61fb      	str	r3, [r7, #28]


	 // comenzamos a dibujar la cadena de caracteres
	 int PosXActual=0;
 8002940:	2300      	movs	r3, #0
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
	 for (int i = 0; i < longitud + saltar ; i++) {
 8002944:	2300      	movs	r3, #0
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
 8002948:	e057      	b.n	80029fa <LCD_dibujaCadenaCaracteresAlpha+0x120>
		 AchoCaracter = LCD_anchoCaracterAlpha(cadena[i-saltar],pJuegoCaracteres);
 800294a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	461a      	mov	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4413      	add	r3, r2
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff52 	bl	8002804 <LCD_anchoCaracterAlpha>
 8002960:	4603      	mov	r3, r0
 8002962:	837b      	strh	r3, [r7, #26]

		 // definimos las coordenadas de cada caracter de la cadena de texto
		 PosX = xCadena + separacion*PosXActual + AnchoIncremental;
 8002964:	89fa      	ldrh	r2, [r7, #14]
 8002966:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800296a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	441a      	add	r2, r3
 8002972:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002976:	4413      	add	r3, r2
 8002978:	617b      	str	r3, [r7, #20]
		 PosY = yCadena + saltar*SaltoLinea;
 800297a:	89ba      	ldrh	r2, [r7, #12]
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	69f9      	ldr	r1, [r7, #28]
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	613b      	str	r3, [r7, #16]

		 if (PosX+AchoCaracter <= LimiteH && PosY + Alto <= LimiteV){ // el texto no debe superar el ancho ni el alto de la pantalla
 8002988:	8b7a      	ldrh	r2, [r7, #26]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	4413      	add	r3, r2
 800298e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002990:	429a      	cmp	r2, r3
 8002992:	db25      	blt.n	80029e0 <LCD_dibujaCadenaCaracteresAlpha+0x106>
 8002994:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800299e:	429a      	cmp	r2, r3
 80029a0:	db1e      	blt.n	80029e0 <LCD_dibujaCadenaCaracteresAlpha+0x106>
			 LCD_dibujaCaracterAlpha(PosX,PosY,cadena[i-saltar],color,pJuegoCaracteres,enBlancoYNegro,transparencia);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	b298      	uxth	r0, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	b299      	uxth	r1, r3
 80029aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4413      	add	r3, r2
 80029b6:	781a      	ldrb	r2, [r3, #0]
 80029b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ba:	9302      	str	r3, [sp, #8]
 80029bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f7ff fe9f 	bl	8002708 <LCD_dibujaCaracterAlpha>

			 //accedemos al siguiente caracter
			 PosXActual++;
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	3301      	adds	r3, #1
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
			 AnchoIncremental += AchoCaracter;
 80029d0:	8b7b      	ldrh	r3, [r7, #26]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029d8:	4413      	add	r3, r2
 80029da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80029de:	e009      	b.n	80029f4 <LCD_dibujaCadenaCaracteresAlpha+0x11a>
		 }
		 else{
			 saltar ++;// si se supera el ancho de la pantalla hacemos una salto de linea
 80029e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e2:	3301      	adds	r3, #1
 80029e4:	63bb      	str	r3, [r7, #56]	; 0x38

			 // reiniciamos las variables para poder empezar a escribir la nueva linea a la misma distancia del borde que la linea origen
			 PosXActual=0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
			 AnchoIncremental = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			 AchoCaracter=0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	837b      	strh	r3, [r7, #26]
	 for (int i = 0; i < longitud + saltar ; i++) {
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	3301      	adds	r3, #1
 80029f8:	633b      	str	r3, [r7, #48]	; 0x30
 80029fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	4413      	add	r3, r2
 8002a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a02:	429a      	cmp	r2, r3
 8002a04:	dba1      	blt.n	800294a <LCD_dibujaCadenaCaracteresAlpha+0x70>
		 }
	 }
} // LCD_dibujaCadenaLargaCaracteresAlpha
 8002a06:	bf00      	nop
 8002a08:	bf00      	nop
 8002a0a:	3748      	adds	r7, #72	; 0x48
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a33      	ldr	r2, [pc, #204]	; (8002aec <I2Cx_MspInit+0xdc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d15f      	bne.n	8002ae2 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a31      	ldr	r2, [pc, #196]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a2a      	ldr	r2, [pc, #168]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002a60:	2312      	movs	r3, #18
 8002a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4619      	mov	r1, r3
 8002a76:	481f      	ldr	r0, [pc, #124]	; (8002af4 <I2Cx_MspInit+0xe4>)
 8002a78:	f002 fc34 	bl	80052e4 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a80:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	4619      	mov	r1, r3
 8002a88:	481b      	ldr	r0, [pc, #108]	; (8002af8 <I2Cx_MspInit+0xe8>)
 8002a8a:	f002 fc2b 	bl	80052e4 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002a98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ab4:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <I2Cx_MspInit+0xe0>)
 8002abc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ac0:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	210f      	movs	r1, #15
 8002ac6:	2048      	movs	r0, #72	; 0x48
 8002ac8:	f002 f81c 	bl	8004b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002acc:	2048      	movs	r0, #72	; 0x48
 8002ace:	f002 f835 	bl	8004b3c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	210f      	movs	r1, #15
 8002ad6:	2049      	movs	r0, #73	; 0x49
 8002ad8:	f002 f814 	bl	8004b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002adc:	2049      	movs	r0, #73	; 0x49
 8002ade:	f002 f82d 	bl	8004b3c <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3728      	adds	r7, #40	; 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40005c00 	.word	0x40005c00
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020000 	.word	0x40020000
 8002af8:	40020800 	.word	0x40020800

08002afc <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002b00:	4814      	ldr	r0, [pc, #80]	; (8002b54 <I2Cx_Init+0x58>)
 8002b02:	f004 ff5f 	bl	80079c4 <HAL_I2C_GetState>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d121      	bne.n	8002b50 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <I2Cx_Init+0x58>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <I2Cx_Init+0x5c>)
 8002b10:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <I2Cx_Init+0x58>)
 8002b14:	4a11      	ldr	r2, [pc, #68]	; (8002b5c <I2Cx_Init+0x60>)
 8002b16:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <I2Cx_Init+0x58>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <I2Cx_Init+0x58>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <I2Cx_Init+0x58>)
 8002b26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b2a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <I2Cx_Init+0x58>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <I2Cx_Init+0x58>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <I2Cx_Init+0x58>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <I2Cx_Init+0x58>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002b44:	4803      	ldr	r0, [pc, #12]	; (8002b54 <I2Cx_Init+0x58>)
 8002b46:	f7ff ff63 	bl	8002a10 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002b4a:	4802      	ldr	r0, [pc, #8]	; (8002b54 <I2Cx_Init+0x58>)
 8002b4c:	f004 faa6 	bl	800709c <HAL_I2C_Init>
  }
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	2000038c 	.word	0x2000038c
 8002b58:	40005c00 	.word	0x40005c00
 8002b5c:	000186a0 	.word	0x000186a0

08002b60 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <I2Cx_ITConfig+0x58>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <I2Cx_ITConfig+0x58>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <I2Cx_ITConfig+0x58>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002b90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b94:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4808      	ldr	r0, [pc, #32]	; (8002bbc <I2Cx_ITConfig+0x5c>)
 8002b9c:	f002 fba2 	bl	80052e4 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	210f      	movs	r1, #15
 8002ba4:	2028      	movs	r0, #40	; 0x28
 8002ba6:	f001 ffad 	bl	8004b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002baa:	2028      	movs	r0, #40	; 0x28
 8002bac:	f001 ffc6 	bl	8004b3c <HAL_NVIC_EnableIRQ>
}
 8002bb0:	bf00      	nop
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40020000 	.word	0x40020000

08002bc0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af04      	add	r7, sp, #16
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	71bb      	strb	r3, [r7, #6]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	b299      	uxth	r1, r3
 8002bda:	79bb      	ldrb	r3, [r7, #6]
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <I2Cx_WriteData+0x4c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	2301      	movs	r3, #1
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	1d7b      	adds	r3, r7, #5
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	2301      	movs	r3, #1
 8002bee:	4808      	ldr	r0, [pc, #32]	; (8002c10 <I2Cx_WriteData+0x50>)
 8002bf0:	f004 fbc8 	bl	8007384 <HAL_I2C_Mem_Write>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002bfe:	f000 f863 	bl	8002cc8 <I2Cx_Error>
  }        
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000038 	.word	0x20000038
 8002c10:	2000038c 	.word	0x2000038c

08002c14 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af04      	add	r7, sp, #16
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	71fb      	strb	r3, [r7, #7]
 8002c20:	4613      	mov	r3, r2
 8002c22:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	b299      	uxth	r1, r3
 8002c30:	79bb      	ldrb	r3, [r7, #6]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <I2Cx_ReadData+0x50>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	9302      	str	r3, [sp, #8]
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	f107 030e 	add.w	r3, r7, #14
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2301      	movs	r3, #1
 8002c46:	4808      	ldr	r0, [pc, #32]	; (8002c68 <I2Cx_ReadData+0x54>)
 8002c48:	f004 fc96 	bl	8007578 <HAL_I2C_Mem_Read>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002c56:	f000 f837 	bl	8002cc8 <I2Cx_Error>
  
  }
  return value;
 8002c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000038 	.word	0x20000038
 8002c68:	2000038c 	.word	0x2000038c

08002c6c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af04      	add	r7, sp, #16
 8002c72:	603a      	str	r2, [r7, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	71bb      	strb	r3, [r7, #6]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	b299      	uxth	r1, r3
 8002c8a:	79bb      	ldrb	r3, [r7, #6]
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <I2Cx_ReadBuffer+0x54>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	9302      	str	r3, [sp, #8]
 8002c94:	88bb      	ldrh	r3, [r7, #4]
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	4809      	ldr	r0, [pc, #36]	; (8002cc4 <I2Cx_ReadBuffer+0x58>)
 8002ca0:	f004 fc6a 	bl	8007578 <HAL_I2C_Mem_Read>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e002      	b.n	8002cb8 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002cb2:	f000 f809 	bl	8002cc8 <I2Cx_Error>

    return 1;
 8002cb6:	2301      	movs	r3, #1
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000038 	.word	0x20000038
 8002cc4:	2000038c 	.word	0x2000038c

08002cc8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002ccc:	4803      	ldr	r0, [pc, #12]	; (8002cdc <I2Cx_Error+0x14>)
 8002cce:	f004 fb29 	bl	8007324 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002cd2:	f7ff ff13 	bl	8002afc <I2Cx_Init>
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	2000038c 	.word	0x2000038c

08002ce0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002ce4:	4819      	ldr	r0, [pc, #100]	; (8002d4c <SPIx_Init+0x6c>)
 8002ce6:	f007 f99e 	bl	800a026 <HAL_SPI_GetState>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d12b      	bne.n	8002d48 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002cf0:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <SPIx_Init+0x6c>)
 8002cf2:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <SPIx_Init+0x70>)
 8002cf4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <SPIx_Init+0x6c>)
 8002cf8:	2218      	movs	r2, #24
 8002cfa:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <SPIx_Init+0x6c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <SPIx_Init+0x6c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <SPIx_Init+0x6c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <SPIx_Init+0x6c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <SPIx_Init+0x6c>)
 8002d16:	2207      	movs	r2, #7
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <SPIx_Init+0x6c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <SPIx_Init+0x6c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <SPIx_Init+0x6c>)
 8002d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <SPIx_Init+0x6c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <SPIx_Init+0x6c>)
 8002d36:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d3a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002d3c:	4803      	ldr	r0, [pc, #12]	; (8002d4c <SPIx_Init+0x6c>)
 8002d3e:	f000 f853 	bl	8002de8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002d42:	4802      	ldr	r0, [pc, #8]	; (8002d4c <SPIx_Init+0x6c>)
 8002d44:	f006 fccf 	bl	80096e6 <HAL_SPI_Init>
  } 
}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	200003e0 	.word	0x200003e0
 8002d50:	40015000 	.word	0x40015000

08002d54 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <SPIx_Read+0x38>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f107 0108 	add.w	r1, r7, #8
 8002d6e:	4808      	ldr	r0, [pc, #32]	; (8002d90 <SPIx_Read+0x3c>)
 8002d70:	f006 fea6 	bl	8009ac0 <HAL_SPI_Receive>
 8002d74:	4603      	mov	r3, r0
 8002d76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002d7e:	f000 f827 	bl	8002dd0 <SPIx_Error>
  }
  
  return readvalue;
 8002d82:	68bb      	ldr	r3, [r7, #8]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	2000003c 	.word	0x2000003c
 8002d90:	200003e0 	.word	0x200003e0

08002d94 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <SPIx_Write+0x34>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	1db9      	adds	r1, r7, #6
 8002da8:	2201      	movs	r2, #1
 8002daa:	4808      	ldr	r0, [pc, #32]	; (8002dcc <SPIx_Write+0x38>)
 8002dac:	f006 fd4c 	bl	8009848 <HAL_SPI_Transmit>
 8002db0:	4603      	mov	r3, r0
 8002db2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002dba:	f000 f809 	bl	8002dd0 <SPIx_Error>
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2000003c 	.word	0x2000003c
 8002dcc:	200003e0 	.word	0x200003e0

08002dd0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002dd4:	4803      	ldr	r0, [pc, #12]	; (8002de4 <SPIx_Error+0x14>)
 8002dd6:	f006 fd0f 	bl	80097f8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002dda:	f7ff ff81 	bl	8002ce0 <SPIx_Init>
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200003e0 	.word	0x200003e0

08002de8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <SPIx_MspInit+0x6c>)
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <SPIx_MspInit+0x6c>)
 8002dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dfe:	6453      	str	r3, [r2, #68]	; 0x44
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <SPIx_MspInit+0x6c>)
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <SPIx_MspInit+0x6c>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <SPIx_MspInit+0x6c>)
 8002e16:	f043 0320 	orr.w	r3, r3, #32
 8002e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <SPIx_MspInit+0x6c>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002e28:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002e32:	2302      	movs	r3, #2
 8002e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002e36:	2301      	movs	r3, #1
 8002e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002e3a:	2305      	movs	r3, #5
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002e3e:	f107 0314 	add.w	r3, r7, #20
 8002e42:	4619      	mov	r1, r3
 8002e44:	4804      	ldr	r0, [pc, #16]	; (8002e58 <SPIx_MspInit+0x70>)
 8002e46:	f002 fa4d 	bl	80052e4 <HAL_GPIO_Init>
}
 8002e4a:	bf00      	nop
 8002e4c:	3728      	adds	r7, #40	; 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40021400 	.word	0x40021400

08002e5c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002e62:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <LCD_IO_Init+0xe0>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d164      	bne.n	8002f34 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002e6a:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <LCD_IO_Init+0xe0>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	4b32      	ldr	r3, [pc, #200]	; (8002f40 <LCD_IO_Init+0xe4>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	4a31      	ldr	r2, [pc, #196]	; (8002f40 <LCD_IO_Init+0xe4>)
 8002e7a:	f043 0308 	orr.w	r3, r3, #8
 8002e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e80:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <LCD_IO_Init+0xe4>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002e92:	2301      	movs	r3, #1
 8002e94:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4827      	ldr	r0, [pc, #156]	; (8002f44 <LCD_IO_Init+0xe8>)
 8002ea6:	f002 fa1d 	bl	80052e4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <LCD_IO_Init+0xe4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a23      	ldr	r2, [pc, #140]	; (8002f40 <LCD_IO_Init+0xe4>)
 8002eb4:	f043 0308 	orr.w	r3, r3, #8
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <LCD_IO_Init+0xe4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002ed8:	f107 030c 	add.w	r3, r7, #12
 8002edc:	4619      	mov	r1, r3
 8002ede:	4819      	ldr	r0, [pc, #100]	; (8002f44 <LCD_IO_Init+0xe8>)
 8002ee0:	f002 fa00 	bl	80052e4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <LCD_IO_Init+0xe4>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <LCD_IO_Init+0xe4>)
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <LCD_IO_Init+0xe4>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002f00:	2304      	movs	r3, #4
 8002f02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002f04:	2301      	movs	r3, #1
 8002f06:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002f10:	f107 030c 	add.w	r3, r7, #12
 8002f14:	4619      	mov	r1, r3
 8002f16:	480c      	ldr	r0, [pc, #48]	; (8002f48 <LCD_IO_Init+0xec>)
 8002f18:	f002 f9e4 	bl	80052e4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2104      	movs	r1, #4
 8002f20:	4809      	ldr	r0, [pc, #36]	; (8002f48 <LCD_IO_Init+0xec>)
 8002f22:	f002 fc97 	bl	8005854 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002f26:	2201      	movs	r2, #1
 8002f28:	2104      	movs	r1, #4
 8002f2a:	4807      	ldr	r0, [pc, #28]	; (8002f48 <LCD_IO_Init+0xec>)
 8002f2c:	f002 fc92 	bl	8005854 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002f30:	f7ff fed6 	bl	8002ce0 <SPIx_Init>
  }
}
 8002f34:	bf00      	nop
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000438 	.word	0x20000438
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40020c00 	.word	0x40020c00
 8002f48:	40020800 	.word	0x40020800

08002f4c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002f56:	2201      	movs	r2, #1
 8002f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f5c:	480a      	ldr	r0, [pc, #40]	; (8002f88 <LCD_IO_WriteData+0x3c>)
 8002f5e:	f002 fc79 	bl	8005854 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002f62:	2200      	movs	r2, #0
 8002f64:	2104      	movs	r1, #4
 8002f66:	4809      	ldr	r0, [pc, #36]	; (8002f8c <LCD_IO_WriteData+0x40>)
 8002f68:	f002 fc74 	bl	8005854 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff10 	bl	8002d94 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002f74:	2201      	movs	r2, #1
 8002f76:	2104      	movs	r1, #4
 8002f78:	4804      	ldr	r0, [pc, #16]	; (8002f8c <LCD_IO_WriteData+0x40>)
 8002f7a:	f002 fc6b 	bl	8005854 <HAL_GPIO_WritePin>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40020c00 	.word	0x40020c00
 8002f8c:	40020800 	.word	0x40020800

08002f90 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fa0:	480a      	ldr	r0, [pc, #40]	; (8002fcc <LCD_IO_WriteReg+0x3c>)
 8002fa2:	f002 fc57 	bl	8005854 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2104      	movs	r1, #4
 8002faa:	4809      	ldr	r0, [pc, #36]	; (8002fd0 <LCD_IO_WriteReg+0x40>)
 8002fac:	f002 fc52 	bl	8005854 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff feed 	bl	8002d94 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002fba:	2201      	movs	r2, #1
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	4804      	ldr	r0, [pc, #16]	; (8002fd0 <LCD_IO_WriteReg+0x40>)
 8002fc0:	f002 fc48 	bl	8005854 <HAL_GPIO_WritePin>
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40020c00 	.word	0x40020c00
 8002fd0:	40020800 	.word	0x40020800

08002fd4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	460a      	mov	r2, r1
 8002fde:	80fb      	strh	r3, [r7, #6]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2104      	movs	r1, #4
 8002fec:	4810      	ldr	r0, [pc, #64]	; (8003030 <LCD_IO_ReadData+0x5c>)
 8002fee:	f002 fc31 	bl	8005854 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ff8:	480e      	ldr	r0, [pc, #56]	; (8003034 <LCD_IO_ReadData+0x60>)
 8002ffa:	f002 fc2b 	bl	8005854 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fec7 	bl	8002d94 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003006:	797b      	ldrb	r3, [r7, #5]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fea3 	bl	8002d54 <SPIx_Read>
 800300e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003010:	2201      	movs	r2, #1
 8003012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003016:	4807      	ldr	r0, [pc, #28]	; (8003034 <LCD_IO_ReadData+0x60>)
 8003018:	f002 fc1c 	bl	8005854 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800301c:	2201      	movs	r2, #1
 800301e:	2104      	movs	r1, #4
 8003020:	4803      	ldr	r0, [pc, #12]	; (8003030 <LCD_IO_ReadData+0x5c>)
 8003022:	f002 fc17 	bl	8005854 <HAL_GPIO_WritePin>
  
  return readvalue;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40020800 	.word	0x40020800
 8003034:	40020c00 	.word	0x40020c00

08003038 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f001 fc83 	bl	800494c <HAL_Delay>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800304e:	b580      	push	{r7, lr}
 8003050:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003052:	f7ff fd53 	bl	8002afc <I2Cx_Init>
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}

0800305a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800305e:	f7ff fd7f 	bl	8002b60 <I2Cx_ITConfig>
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}

08003066 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	71fb      	strb	r3, [r7, #7]
 8003070:	460b      	mov	r3, r1
 8003072:	71bb      	strb	r3, [r7, #6]
 8003074:	4613      	mov	r3, r2
 8003076:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003078:	797a      	ldrb	r2, [r7, #5]
 800307a:	79b9      	ldrb	r1, [r7, #6]
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fd9e 	bl	8002bc0 <I2Cx_WriteData>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	460a      	mov	r2, r1
 8003096:	71fb      	strb	r3, [r7, #7]
 8003098:	4613      	mov	r3, r2
 800309a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800309c:	79ba      	ldrb	r2, [r7, #6]
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fdb6 	bl	8002c14 <I2Cx_ReadData>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	603a      	str	r2, [r7, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4603      	mov	r3, r0
 80030be:	71fb      	strb	r3, [r7, #7]
 80030c0:	460b      	mov	r3, r1
 80030c2:	71bb      	strb	r3, [r7, #6]
 80030c4:	4613      	mov	r3, r2
 80030c6:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80030c8:	88bb      	ldrh	r3, [r7, #4]
 80030ca:	79b9      	ldrb	r1, [r7, #6]
 80030cc:	79f8      	ldrb	r0, [r7, #7]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	f7ff fdcc 	bl	8002c6c <I2Cx_ReadBuffer>
 80030d4:	4603      	mov	r3, r0
 80030d6:	b29b      	uxth	r3, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f001 fc2f 	bl	800494c <HAL_Delay>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80030fc:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <BSP_LCD_Init+0xb4>)
 80030fe:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <BSP_LCD_Init+0xb8>)
 8003100:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003102:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <BSP_LCD_Init+0xb4>)
 8003104:	2209      	movs	r2, #9
 8003106:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003108:	4b28      	ldr	r3, [pc, #160]	; (80031ac <BSP_LCD_Init+0xb4>)
 800310a:	2201      	movs	r2, #1
 800310c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800310e:	4b27      	ldr	r3, [pc, #156]	; (80031ac <BSP_LCD_Init+0xb4>)
 8003110:	221d      	movs	r2, #29
 8003112:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003114:	4b25      	ldr	r3, [pc, #148]	; (80031ac <BSP_LCD_Init+0xb4>)
 8003116:	2203      	movs	r2, #3
 8003118:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <BSP_LCD_Init+0xb4>)
 800311c:	f240 120d 	movw	r2, #269	; 0x10d
 8003120:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003122:	4b22      	ldr	r3, [pc, #136]	; (80031ac <BSP_LCD_Init+0xb4>)
 8003124:	f240 1243 	movw	r2, #323	; 0x143
 8003128:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800312a:	4b20      	ldr	r3, [pc, #128]	; (80031ac <BSP_LCD_Init+0xb4>)
 800312c:	f240 1217 	movw	r2, #279	; 0x117
 8003130:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <BSP_LCD_Init+0xb4>)
 8003134:	f240 1247 	movw	r2, #327	; 0x147
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800313a:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <BSP_LCD_Init+0xb4>)
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <BSP_LCD_Init+0xb4>)
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <BSP_LCD_Init+0xb4>)
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <BSP_LCD_Init+0xbc>)
 8003154:	2208      	movs	r2, #8
 8003156:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003158:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <BSP_LCD_Init+0xbc>)
 800315a:	22c0      	movs	r2, #192	; 0xc0
 800315c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <BSP_LCD_Init+0xbc>)
 8003160:	2204      	movs	r2, #4
 8003162:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <BSP_LCD_Init+0xbc>)
 8003166:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800316c:	4811      	ldr	r0, [pc, #68]	; (80031b4 <BSP_LCD_Init+0xbc>)
 800316e:	f006 f869 	bl	8009244 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <BSP_LCD_Init+0xb4>)
 8003174:	2200      	movs	r2, #0
 8003176:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <BSP_LCD_Init+0xb4>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800317e:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <BSP_LCD_Init+0xb4>)
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <BSP_LCD_Init+0xb4>)
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800318a:	f000 f8bf 	bl	800330c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800318e:	4807      	ldr	r0, [pc, #28]	; (80031ac <BSP_LCD_Init+0xb4>)
 8003190:	f004 fffc 	bl	800818c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <BSP_LCD_Init+0xc0>)
 8003196:	4a09      	ldr	r2, [pc, #36]	; (80031bc <BSP_LCD_Init+0xc4>)
 8003198:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <BSP_LCD_Init+0xc0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80031a2:	f000 f989 	bl	80034b8 <BSP_SDRAM_Init>

  return LCD_OK;
 80031a6:	2300      	movs	r3, #0
}  
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	2000043c 	.word	0x2000043c
 80031b0:	40016800 	.word	0x40016800
 80031b4:	200004e4 	.word	0x200004e4
 80031b8:	20000524 	.word	0x20000524
 80031bc:	20000000 	.word	0x20000000

080031c0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <BSP_LCD_GetXSize+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	4798      	blx	r3
 80031cc:	4603      	mov	r3, r0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000524 	.word	0x20000524

080031d8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <BSP_LCD_GetYSize+0x14>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	4798      	blx	r3
 80031e4:	4603      	mov	r3, r0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000524 	.word	0x20000524

080031f0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b090      	sub	sp, #64	; 0x40
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003200:	f7ff ffde 	bl	80031c0 <BSP_LCD_GetXSize>
 8003204:	4603      	mov	r3, r0
 8003206:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800320c:	f7ff ffe4 	bl	80031d8 <BSP_LCD_GetYSize>
 8003210:	4603      	mov	r3, r0
 8003212:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800321c:	23ff      	movs	r3, #255	; 0xff
 800321e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003236:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800323c:	2307      	movs	r3, #7
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003240:	f7ff ffbe 	bl	80031c0 <BSP_LCD_GetXSize>
 8003244:	4603      	mov	r3, r0
 8003246:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003248:	f7ff ffc6 	bl	80031d8 <BSP_LCD_GetYSize>
 800324c:	4603      	mov	r3, r0
 800324e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	f107 030c 	add.w	r3, r7, #12
 8003256:	4619      	mov	r1, r3
 8003258:	480b      	ldr	r0, [pc, #44]	; (8003288 <BSP_LCD_LayerDefaultInit+0x98>)
 800325a:	f005 f929 	bl	80084b0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <BSP_LCD_LayerDefaultInit+0x9c>)
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	f04f 32ff 	mov.w	r2, #4294967295
 800326a:	605a      	str	r2, [r3, #4]

  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	4a07      	ldr	r2, [pc, #28]	; (800328c <BSP_LCD_LayerDefaultInit+0x9c>)
 8003270:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8003274:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003278:	4803      	ldr	r0, [pc, #12]	; (8003288 <BSP_LCD_LayerDefaultInit+0x98>)
 800327a:	f005 f957 	bl	800852c <HAL_LTDC_EnableDither>
}
 800327e:	bf00      	nop
 8003280:	3740      	adds	r7, #64	; 0x40
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	2000043c 	.word	0x2000043c
 800328c:	20000514 	.word	0x20000514

08003290 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d112      	bne.n	80032c8 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 80032a2:	4b19      	ldr	r3, [pc, #100]	; (8003308 <BSP_LCD_SetLayerVisible+0x78>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	01db      	lsls	r3, r3, #7
 80032ac:	4413      	add	r3, r2
 80032ae:	3384      	adds	r3, #132	; 0x84
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a15      	ldr	r2, [pc, #84]	; (8003308 <BSP_LCD_SetLayerVisible+0x78>)
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	4611      	mov	r1, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	01d2      	lsls	r2, r2, #7
 80032bc:	440a      	add	r2, r1
 80032be:	3284      	adds	r2, #132	; 0x84
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e011      	b.n	80032ec <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <BSP_LCD_SetLayerVisible+0x78>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	01db      	lsls	r3, r3, #7
 80032d2:	4413      	add	r3, r2
 80032d4:	3384      	adds	r3, #132	; 0x84
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0b      	ldr	r2, [pc, #44]	; (8003308 <BSP_LCD_SetLayerVisible+0x78>)
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	4611      	mov	r1, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	01d2      	lsls	r2, r2, #7
 80032e2:	440a      	add	r2, r1
 80032e4:	3284      	adds	r2, #132	; 0x84
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <BSP_LCD_SetLayerVisible+0x78>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <BSP_LCD_SetLayerVisible+0x78>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	2000043c 	.word	0x2000043c

0800330c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08e      	sub	sp, #56	; 0x38
 8003310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	623b      	str	r3, [r7, #32]
 8003316:	4b61      	ldr	r3, [pc, #388]	; (800349c <BSP_LCD_MspInit+0x190>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	4a60      	ldr	r2, [pc, #384]	; (800349c <BSP_LCD_MspInit+0x190>)
 800331c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003320:	6453      	str	r3, [r2, #68]	; 0x44
 8003322:	4b5e      	ldr	r3, [pc, #376]	; (800349c <BSP_LCD_MspInit+0x190>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800332a:	623b      	str	r3, [r7, #32]
 800332c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	4b5a      	ldr	r3, [pc, #360]	; (800349c <BSP_LCD_MspInit+0x190>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a59      	ldr	r2, [pc, #356]	; (800349c <BSP_LCD_MspInit+0x190>)
 8003338:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b57      	ldr	r3, [pc, #348]	; (800349c <BSP_LCD_MspInit+0x190>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	4b53      	ldr	r3, [pc, #332]	; (800349c <BSP_LCD_MspInit+0x190>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a52      	ldr	r2, [pc, #328]	; (800349c <BSP_LCD_MspInit+0x190>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b50      	ldr	r3, [pc, #320]	; (800349c <BSP_LCD_MspInit+0x190>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	4b4c      	ldr	r3, [pc, #304]	; (800349c <BSP_LCD_MspInit+0x190>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	4a4b      	ldr	r2, [pc, #300]	; (800349c <BSP_LCD_MspInit+0x190>)
 8003370:	f043 0302 	orr.w	r3, r3, #2
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
 8003376:	4b49      	ldr	r3, [pc, #292]	; (800349c <BSP_LCD_MspInit+0x190>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	4b45      	ldr	r3, [pc, #276]	; (800349c <BSP_LCD_MspInit+0x190>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a44      	ldr	r2, [pc, #272]	; (800349c <BSP_LCD_MspInit+0x190>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b42      	ldr	r3, [pc, #264]	; (800349c <BSP_LCD_MspInit+0x190>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	4b3e      	ldr	r3, [pc, #248]	; (800349c <BSP_LCD_MspInit+0x190>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4a3d      	ldr	r2, [pc, #244]	; (800349c <BSP_LCD_MspInit+0x190>)
 80033a8:	f043 0308 	orr.w	r3, r3, #8
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
 80033ae:	4b3b      	ldr	r3, [pc, #236]	; (800349c <BSP_LCD_MspInit+0x190>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b37      	ldr	r3, [pc, #220]	; (800349c <BSP_LCD_MspInit+0x190>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a36      	ldr	r2, [pc, #216]	; (800349c <BSP_LCD_MspInit+0x190>)
 80033c4:	f043 0320 	orr.w	r3, r3, #32
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b34      	ldr	r3, [pc, #208]	; (800349c <BSP_LCD_MspInit+0x190>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	4b30      	ldr	r3, [pc, #192]	; (800349c <BSP_LCD_MspInit+0x190>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a2f      	ldr	r2, [pc, #188]	; (800349c <BSP_LCD_MspInit+0x190>)
 80033e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <BSP_LCD_MspInit+0x190>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	607b      	str	r3, [r7, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80033f2:	f641 0358 	movw	r3, #6232	; 0x1858
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003400:	2302      	movs	r3, #2
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003404:	230e      	movs	r3, #14
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340c:	4619      	mov	r1, r3
 800340e:	4824      	ldr	r0, [pc, #144]	; (80034a0 <BSP_LCD_MspInit+0x194>)
 8003410:	f001 ff68 	bl	80052e4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003414:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800341a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800341e:	4619      	mov	r1, r3
 8003420:	4820      	ldr	r0, [pc, #128]	; (80034a4 <BSP_LCD_MspInit+0x198>)
 8003422:	f001 ff5f 	bl	80052e4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003426:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800342c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003430:	4619      	mov	r1, r3
 8003432:	481d      	ldr	r0, [pc, #116]	; (80034a8 <BSP_LCD_MspInit+0x19c>)
 8003434:	f001 ff56 	bl	80052e4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003438:	2348      	movs	r3, #72	; 0x48
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800343c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003440:	4619      	mov	r1, r3
 8003442:	481a      	ldr	r0, [pc, #104]	; (80034ac <BSP_LCD_MspInit+0x1a0>)
 8003444:	f001 ff4e 	bl	80052e4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800344e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003452:	4619      	mov	r1, r3
 8003454:	4816      	ldr	r0, [pc, #88]	; (80034b0 <BSP_LCD_MspInit+0x1a4>)
 8003456:	f001 ff45 	bl	80052e4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800345a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003464:	4619      	mov	r1, r3
 8003466:	4813      	ldr	r0, [pc, #76]	; (80034b4 <BSP_LCD_MspInit+0x1a8>)
 8003468:	f001 ff3c 	bl	80052e4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800346c:	2303      	movs	r3, #3
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003470:	2309      	movs	r3, #9
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003478:	4619      	mov	r1, r3
 800347a:	480a      	ldr	r0, [pc, #40]	; (80034a4 <BSP_LCD_MspInit+0x198>)
 800347c:	f001 ff32 	bl	80052e4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003480:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800348a:	4619      	mov	r1, r3
 800348c:	4809      	ldr	r0, [pc, #36]	; (80034b4 <BSP_LCD_MspInit+0x1a8>)
 800348e:	f001 ff29 	bl	80052e4 <HAL_GPIO_Init>
}
 8003492:	bf00      	nop
 8003494:	3738      	adds	r7, #56	; 0x38
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	40020000 	.word	0x40020000
 80034a4:	40020400 	.word	0x40020400
 80034a8:	40020800 	.word	0x40020800
 80034ac:	40020c00 	.word	0x40020c00
 80034b0:	40021400 	.word	0x40021400
 80034b4:	40021800 	.word	0x40021800

080034b8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80034bc:	4b29      	ldr	r3, [pc, #164]	; (8003564 <BSP_SDRAM_Init+0xac>)
 80034be:	4a2a      	ldr	r2, [pc, #168]	; (8003568 <BSP_SDRAM_Init+0xb0>)
 80034c0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80034c2:	4b2a      	ldr	r3, [pc, #168]	; (800356c <BSP_SDRAM_Init+0xb4>)
 80034c4:	2202      	movs	r2, #2
 80034c6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80034c8:	4b28      	ldr	r3, [pc, #160]	; (800356c <BSP_SDRAM_Init+0xb4>)
 80034ca:	2207      	movs	r2, #7
 80034cc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80034ce:	4b27      	ldr	r3, [pc, #156]	; (800356c <BSP_SDRAM_Init+0xb4>)
 80034d0:	2204      	movs	r2, #4
 80034d2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80034d4:	4b25      	ldr	r3, [pc, #148]	; (800356c <BSP_SDRAM_Init+0xb4>)
 80034d6:	2207      	movs	r2, #7
 80034d8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <BSP_SDRAM_Init+0xb4>)
 80034dc:	2202      	movs	r2, #2
 80034de:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80034e0:	4b22      	ldr	r3, [pc, #136]	; (800356c <BSP_SDRAM_Init+0xb4>)
 80034e2:	2202      	movs	r2, #2
 80034e4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <BSP_SDRAM_Init+0xb4>)
 80034e8:	2202      	movs	r2, #2
 80034ea:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80034ec:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <BSP_SDRAM_Init+0xac>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80034f2:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <BSP_SDRAM_Init+0xac>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80034f8:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <BSP_SDRAM_Init+0xac>)
 80034fa:	2204      	movs	r2, #4
 80034fc:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80034fe:	4b19      	ldr	r3, [pc, #100]	; (8003564 <BSP_SDRAM_Init+0xac>)
 8003500:	2210      	movs	r2, #16
 8003502:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003504:	4b17      	ldr	r3, [pc, #92]	; (8003564 <BSP_SDRAM_Init+0xac>)
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800350a:	4b16      	ldr	r3, [pc, #88]	; (8003564 <BSP_SDRAM_Init+0xac>)
 800350c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003510:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <BSP_SDRAM_Init+0xac>)
 8003514:	2200      	movs	r2, #0
 8003516:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <BSP_SDRAM_Init+0xac>)
 800351a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800351e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003520:	4b10      	ldr	r3, [pc, #64]	; (8003564 <BSP_SDRAM_Init+0xac>)
 8003522:	2200      	movs	r2, #0
 8003524:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003526:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <BSP_SDRAM_Init+0xac>)
 8003528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800352c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800352e:	2100      	movs	r1, #0
 8003530:	480c      	ldr	r0, [pc, #48]	; (8003564 <BSP_SDRAM_Init+0xac>)
 8003532:	f000 f87f 	bl	8003634 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003536:	490d      	ldr	r1, [pc, #52]	; (800356c <BSP_SDRAM_Init+0xb4>)
 8003538:	480a      	ldr	r0, [pc, #40]	; (8003564 <BSP_SDRAM_Init+0xac>)
 800353a:	f006 f843 	bl	80095c4 <HAL_SDRAM_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <BSP_SDRAM_Init+0xb8>)
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	e002      	b.n	8003552 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <BSP_SDRAM_Init+0xb8>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003552:	f240 506a 	movw	r0, #1386	; 0x56a
 8003556:	f000 f80d 	bl	8003574 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <BSP_SDRAM_Init+0xb8>)
 800355c:	781b      	ldrb	r3, [r3, #0]
}
 800355e:	4618      	mov	r0, r3
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000528 	.word	0x20000528
 8003568:	a0000140 	.word	0xa0000140
 800356c:	2000055c 	.word	0x2000055c
 8003570:	20000040 	.word	0x20000040

08003574 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003580:	4b2a      	ldr	r3, [pc, #168]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003586:	4b29      	ldr	r3, [pc, #164]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003588:	2208      	movs	r2, #8
 800358a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800358e:	2201      	movs	r2, #1
 8003590:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003592:	4b26      	ldr	r3, [pc, #152]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003594:	2200      	movs	r2, #0
 8003596:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800359c:	4923      	ldr	r1, [pc, #140]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800359e:	4824      	ldr	r0, [pc, #144]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80035a0:	f006 f844 	bl	800962c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80035a4:	2001      	movs	r0, #1
 80035a6:	f001 f9d1 	bl	800494c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035ac:	2202      	movs	r2, #2
 80035ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035b2:	2208      	movs	r2, #8
 80035b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80035b6:	4b1d      	ldr	r3, [pc, #116]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035be:	2200      	movs	r2, #0
 80035c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80035c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035c6:	4919      	ldr	r1, [pc, #100]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035c8:	4819      	ldr	r0, [pc, #100]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80035ca:	f006 f82f 	bl	800962c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035d0:	2203      	movs	r2, #3
 80035d2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80035d4:	4b15      	ldr	r3, [pc, #84]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035d6:	2208      	movs	r2, #8
 80035d8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035dc:	2204      	movs	r2, #4
 80035de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80035e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ea:	4910      	ldr	r1, [pc, #64]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035ec:	4810      	ldr	r0, [pc, #64]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80035ee:	f006 f81d 	bl	800962c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80035f2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80035f6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035fa:	2204      	movs	r2, #4
 80035fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003600:	2208      	movs	r2, #8
 8003602:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003606:	2201      	movs	r2, #1
 8003608:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a07      	ldr	r2, [pc, #28]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800360e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003614:	4905      	ldr	r1, [pc, #20]	; (800362c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003616:	4806      	ldr	r0, [pc, #24]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003618:	f006 f808 	bl	800962c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4804      	ldr	r0, [pc, #16]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003620:	f006 f839 	bl	8009696 <HAL_SDRAM_ProgramRefreshRate>
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000578 	.word	0x20000578
 8003630:	20000528 	.word	0x20000528

08003634 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b090      	sub	sp, #64	; 0x40
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80ec 	beq.w	800381e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
 800364a:	4b77      	ldr	r3, [pc, #476]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	4a76      	ldr	r2, [pc, #472]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6393      	str	r3, [r2, #56]	; 0x38
 8003656:	4b74      	ldr	r3, [pc, #464]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	4b70      	ldr	r3, [pc, #448]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a6f      	ldr	r2, [pc, #444]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 800366c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
 8003672:	4b6d      	ldr	r3, [pc, #436]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	4b69      	ldr	r3, [pc, #420]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a68      	ldr	r2, [pc, #416]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b66      	ldr	r3, [pc, #408]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	623b      	str	r3, [r7, #32]
 8003698:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	4b62      	ldr	r3, [pc, #392]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4a61      	ldr	r2, [pc, #388]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6313      	str	r3, [r2, #48]	; 0x30
 80036aa:	4b5f      	ldr	r3, [pc, #380]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a5a      	ldr	r2, [pc, #360]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 80036c0:	f043 0308 	orr.w	r3, r3, #8
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b58      	ldr	r3, [pc, #352]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	4b54      	ldr	r3, [pc, #336]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4a53      	ldr	r2, [pc, #332]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 80036dc:	f043 0310 	orr.w	r3, r3, #16
 80036e0:	6313      	str	r3, [r2, #48]	; 0x30
 80036e2:	4b51      	ldr	r3, [pc, #324]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	4b4d      	ldr	r3, [pc, #308]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	4a4c      	ldr	r2, [pc, #304]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 80036f8:	f043 0320 	orr.w	r3, r3, #32
 80036fc:	6313      	str	r3, [r2, #48]	; 0x30
 80036fe:	4b4a      	ldr	r3, [pc, #296]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	4b46      	ldr	r3, [pc, #280]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	4a45      	ldr	r2, [pc, #276]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 8003714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003718:	6313      	str	r3, [r2, #48]	; 0x30
 800371a:	4b43      	ldr	r3, [pc, #268]	; (8003828 <BSP_SDRAM_MspInit+0x1f4>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800372a:	2302      	movs	r3, #2
 800372c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800372e:	2300      	movs	r3, #0
 8003730:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003732:	230c      	movs	r3, #12
 8003734:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003736:	2360      	movs	r3, #96	; 0x60
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800373a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800373e:	4619      	mov	r1, r3
 8003740:	483a      	ldr	r0, [pc, #232]	; (800382c <BSP_SDRAM_MspInit+0x1f8>)
 8003742:	f001 fdcf 	bl	80052e4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003746:	2301      	movs	r3, #1
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800374a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800374e:	4619      	mov	r1, r3
 8003750:	4837      	ldr	r0, [pc, #220]	; (8003830 <BSP_SDRAM_MspInit+0x1fc>)
 8003752:	f001 fdc7 	bl	80052e4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003756:	f24c 7303 	movw	r3, #50947	; 0xc703
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800375c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003760:	4619      	mov	r1, r3
 8003762:	4834      	ldr	r0, [pc, #208]	; (8003834 <BSP_SDRAM_MspInit+0x200>)
 8003764:	f001 fdbe 	bl	80052e4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003768:	f64f 7383 	movw	r3, #65411	; 0xff83
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800376e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003772:	4619      	mov	r1, r3
 8003774:	4830      	ldr	r0, [pc, #192]	; (8003838 <BSP_SDRAM_MspInit+0x204>)
 8003776:	f001 fdb5 	bl	80052e4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800377a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003784:	4619      	mov	r1, r3
 8003786:	482d      	ldr	r0, [pc, #180]	; (800383c <BSP_SDRAM_MspInit+0x208>)
 8003788:	f001 fdac 	bl	80052e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800378c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003796:	4619      	mov	r1, r3
 8003798:	4829      	ldr	r0, [pc, #164]	; (8003840 <BSP_SDRAM_MspInit+0x20c>)
 800379a:	f001 fda3 	bl	80052e4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800379e:	4b29      	ldr	r3, [pc, #164]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037a6:	2280      	movs	r2, #128	; 0x80
 80037a8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80037aa:	4b26      	ldr	r3, [pc, #152]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037b8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037ba:	4b22      	ldr	r3, [pc, #136]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037c0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037c8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80037d0:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037d6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037da:	2200      	movs	r2, #0
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037e0:	2203      	movs	r2, #3
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037f2:	4a15      	ldr	r2, [pc, #84]	; (8003848 <BSP_SDRAM_MspInit+0x214>)
 80037f4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a12      	ldr	r2, [pc, #72]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
 80037fc:	4a11      	ldr	r2, [pc, #68]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003802:	4810      	ldr	r0, [pc, #64]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 8003804:	f001 fa72 	bl	8004cec <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003808:	480e      	ldr	r0, [pc, #56]	; (8003844 <BSP_SDRAM_MspInit+0x210>)
 800380a:	f001 f9c1 	bl	8004b90 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	210f      	movs	r1, #15
 8003812:	2038      	movs	r0, #56	; 0x38
 8003814:	f001 f976 	bl	8004b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003818:	2038      	movs	r0, #56	; 0x38
 800381a:	f001 f98f 	bl	8004b3c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800381e:	bf00      	nop
 8003820:	3740      	adds	r7, #64	; 0x40
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	40020400 	.word	0x40020400
 8003830:	40020800 	.word	0x40020800
 8003834:	40020c00 	.word	0x40020c00
 8003838:	40021000 	.word	0x40021000
 800383c:	40021400 	.word	0x40021400
 8003840:	40021800 	.word	0x40021800
 8003844:	20000588 	.word	0x20000588
 8003848:	40026410 	.word	0x40026410

0800384c <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	460a      	mov	r2, r1
 8003856:	80fb      	strh	r3, [r7, #6]
 8003858:	4613      	mov	r3, r2
 800385a:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003860:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <BSP_TS_Init+0x64>)
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003866:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <BSP_TS_Init+0x68>)
 8003868:	88bb      	ldrh	r3, [r7, #4]
 800386a:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <BSP_TS_Init+0x6c>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2082      	movs	r0, #130	; 0x82
 8003872:	4798      	blx	r3
 8003874:	4603      	mov	r3, r0
 8003876:	461a      	mov	r2, r3
 8003878:	f640 0311 	movw	r3, #2065	; 0x811
 800387c:	429a      	cmp	r2, r3
 800387e:	d104      	bne.n	800388a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003880:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <BSP_TS_Init+0x70>)
 8003882:	4a0d      	ldr	r2, [pc, #52]	; (80038b8 <BSP_TS_Init+0x6c>)
 8003884:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <BSP_TS_Init+0x70>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2082      	movs	r0, #130	; 0x82
 8003898:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <BSP_TS_Init+0x70>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2082      	movs	r0, #130	; 0x82
 80038a2:	4798      	blx	r3
  }

  return ret;
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	200005ec 	.word	0x200005ec
 80038b4:	200005ee 	.word	0x200005ee
 80038b8:	20000044 	.word	0x20000044
 80038bc:	200005e8 	.word	0x200005e8

080038c0 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80038c8:	4b4f      	ldr	r3, [pc, #316]	; (8003a08 <BSP_TS_GetState+0x148>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2082      	movs	r0, #130	; 0x82
 80038d0:	4798      	blx	r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 808d 	beq.w	80039fe <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80038e4:	4b48      	ldr	r3, [pc, #288]	; (8003a08 <BSP_TS_GetState+0x148>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f107 020c 	add.w	r2, r7, #12
 80038ee:	f107 010e 	add.w	r1, r7, #14
 80038f2:	2082      	movs	r0, #130	; 0x82
 80038f4:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80038f6:	89bb      	ldrh	r3, [r7, #12]
 80038f8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003900:	89bb      	ldrh	r3, [r7, #12]
 8003902:	4a42      	ldr	r2, [pc, #264]	; (8003a0c <BSP_TS_GetState+0x14c>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	08db      	lsrs	r3, r3, #3
 800390a:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 800390c:	8abb      	ldrh	r3, [r7, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	82bb      	strh	r3, [r7, #20]
 8003916:	e008      	b.n	800392a <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003918:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <BSP_TS_GetState+0x150>)
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	8aba      	ldrh	r2, [r7, #20]
 800391e:	429a      	cmp	r2, r3
 8003920:	d903      	bls.n	800392a <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <BSP_TS_GetState+0x150>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	3b01      	subs	r3, #1
 8003928:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800392a:	8abb      	ldrh	r3, [r7, #20]
 800392c:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800392e:	89fb      	ldrh	r3, [r7, #14]
 8003930:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003934:	4293      	cmp	r3, r2
 8003936:	d806      	bhi.n	8003946 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003938:	89fb      	ldrh	r3, [r7, #14]
 800393a:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800393e:	330e      	adds	r3, #14
 8003940:	b29b      	uxth	r3, r3
 8003942:	81fb      	strh	r3, [r7, #14]
 8003944:	e005      	b.n	8003952 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003946:	89fb      	ldrh	r3, [r7, #14]
 8003948:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800394c:	3308      	adds	r3, #8
 800394e:	b29b      	uxth	r3, r3
 8003950:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003952:	89fb      	ldrh	r3, [r7, #14]
 8003954:	4a2f      	ldr	r2, [pc, #188]	; (8003a14 <BSP_TS_GetState+0x154>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	08db      	lsrs	r3, r3, #3
 800395c:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800395e:	8afb      	ldrh	r3, [r7, #22]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	82fb      	strh	r3, [r7, #22]
 8003968:	e008      	b.n	800397c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800396a:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <BSP_TS_GetState+0x158>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	8afa      	ldrh	r2, [r7, #22]
 8003970:	429a      	cmp	r2, r3
 8003972:	d903      	bls.n	800397c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003974:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <BSP_TS_GetState+0x158>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	3b01      	subs	r3, #1
 800397a:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 800397c:	8afb      	ldrh	r3, [r7, #22]
 800397e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003980:	89fb      	ldrh	r3, [r7, #14]
 8003982:	461a      	mov	r2, r3
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <BSP_TS_GetState+0x15c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d906      	bls.n	800399a <BSP_TS_GetState+0xda>
 800398c:	89fa      	ldrh	r2, [r7, #14]
 800398e:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <BSP_TS_GetState+0x15c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	b29b      	uxth	r3, r3
 8003998:	e005      	b.n	80039a6 <BSP_TS_GetState+0xe6>
 800399a:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <BSP_TS_GetState+0x15c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	89fb      	ldrh	r3, [r7, #14]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 80039a8:	89bb      	ldrh	r3, [r7, #12]
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <BSP_TS_GetState+0x160>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d906      	bls.n	80039c2 <BSP_TS_GetState+0x102>
 80039b4:	89ba      	ldrh	r2, [r7, #12]
 80039b6:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <BSP_TS_GetState+0x160>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	b29b      	uxth	r3, r3
 80039c0:	e005      	b.n	80039ce <BSP_TS_GetState+0x10e>
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <BSP_TS_GetState+0x160>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	89bb      	ldrh	r3, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 80039d0:	8a7a      	ldrh	r2, [r7, #18]
 80039d2:	8a3b      	ldrh	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	dd07      	ble.n	80039ea <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80039da:	89fb      	ldrh	r3, [r7, #14]
 80039dc:	461a      	mov	r2, r3
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <BSP_TS_GetState+0x15c>)
 80039e0:	601a      	str	r2, [r3, #0]
      _y = y; 
 80039e2:	89bb      	ldrh	r3, [r7, #12]
 80039e4:	461a      	mov	r2, r3
 80039e6:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <BSP_TS_GetState+0x160>)
 80039e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <BSP_TS_GetState+0x15c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <BSP_TS_GetState+0x160>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	809a      	strh	r2, [r3, #4]
  }
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	200005e8 	.word	0x200005e8
 8003a0c:	ba2e8ba3 	.word	0xba2e8ba3
 8003a10:	200005ee 	.word	0x200005ee
 8003a14:	88888889 	.word	0x88888889
 8003a18:	200005ec 	.word	0x200005ec
 8003a1c:	200005f0 	.word	0x200005f0
 8003a20:	200005f4 	.word	0x200005f4

08003a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_MspInit+0x54>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <HAL_MspInit+0x54>)
 8003a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a38:	6453      	str	r3, [r2, #68]	; 0x44
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <HAL_MspInit+0x54>)
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_MspInit+0x54>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <HAL_MspInit+0x54>)
 8003a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a54:	6413      	str	r3, [r2, #64]	; 0x40
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_MspInit+0x54>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	210f      	movs	r1, #15
 8003a66:	f06f 0001 	mvn.w	r0, #1
 8003a6a:	f001 f84b 	bl	8004b04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800

08003a7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <HAL_CRC_MspInit+0x3c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10d      	bne.n	8003aaa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <HAL_CRC_MspInit+0x40>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	4a09      	ldr	r2, [pc, #36]	; (8003abc <HAL_CRC_MspInit+0x40>)
 8003a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <HAL_CRC_MspInit+0x40>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40023000 	.word	0x40023000
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <HAL_DMA2D_MspInit+0x48>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d115      	bne.n	8003afe <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <HAL_DMA2D_MspInit+0x4c>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4a0c      	ldr	r2, [pc, #48]	; (8003b0c <HAL_DMA2D_MspInit+0x4c>)
 8003adc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <HAL_DMA2D_MspInit+0x4c>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003aee:	2200      	movs	r2, #0
 8003af0:	2105      	movs	r1, #5
 8003af2:	205a      	movs	r0, #90	; 0x5a
 8003af4:	f001 f806 	bl	8004b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003af8:	205a      	movs	r0, #90	; 0x5a
 8003afa:	f001 f81f 	bl	8004b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	4002b000 	.word	0x4002b000
 8003b0c:	40023800 	.word	0x40023800

08003b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a29      	ldr	r2, [pc, #164]	; (8003bd4 <HAL_I2C_MspInit+0xc4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d14b      	bne.n	8003bca <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <HAL_I2C_MspInit+0xc8>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <HAL_I2C_MspInit+0xc8>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b25      	ldr	r3, [pc, #148]	; (8003bd8 <HAL_I2C_MspInit+0xc8>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b21      	ldr	r3, [pc, #132]	; (8003bd8 <HAL_I2C_MspInit+0xc8>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a20      	ldr	r2, [pc, #128]	; (8003bd8 <HAL_I2C_MspInit+0xc8>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <HAL_I2C_MspInit+0xc8>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b70:	2312      	movs	r3, #18
 8003b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b74:	2301      	movs	r3, #1
 8003b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	4619      	mov	r1, r3
 8003b86:	4815      	ldr	r0, [pc, #84]	; (8003bdc <HAL_I2C_MspInit+0xcc>)
 8003b88:	f001 fbac 	bl	80052e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b92:	2312      	movs	r3, #18
 8003b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b9e:	2304      	movs	r3, #4
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003ba2:	f107 0314 	add.w	r3, r7, #20
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	480d      	ldr	r0, [pc, #52]	; (8003be0 <HAL_I2C_MspInit+0xd0>)
 8003baa:	f001 fb9b 	bl	80052e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_I2C_MspInit+0xc8>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	4a08      	ldr	r2, [pc, #32]	; (8003bd8 <HAL_I2C_MspInit+0xc8>)
 8003bb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_I2C_MspInit+0xc8>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003bca:	bf00      	nop
 8003bcc:	3728      	adds	r7, #40	; 0x28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40005c00 	.word	0x40005c00
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40020800 	.word	0x40020800
 8003be0:	40020000 	.word	0x40020000

08003be4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <HAL_I2C_MspDeInit+0x3c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10f      	bne.n	8003c16 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_I2C_MspDeInit+0x40>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <HAL_I2C_MspDeInit+0x40>)
 8003bfc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c00:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8003c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c06:	4808      	ldr	r0, [pc, #32]	; (8003c28 <HAL_I2C_MspDeInit+0x44>)
 8003c08:	f001 fd18 	bl	800563c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8003c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c10:	4806      	ldr	r0, [pc, #24]	; (8003c2c <HAL_I2C_MspDeInit+0x48>)
 8003c12:	f001 fd13 	bl	800563c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40005c00 	.word	0x40005c00
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40020800 	.word	0x40020800
 8003c2c:	40020000 	.word	0x40020000

08003c30 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b09a      	sub	sp, #104	; 0x68
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c4c:	2230      	movs	r2, #48	; 0x30
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f00e f943 	bl	8011edc <memset>
  if(hltdc->Instance==LTDC)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a85      	ldr	r2, [pc, #532]	; (8003e70 <HAL_LTDC_MspInit+0x240>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	f040 8102 	bne.w	8003e66 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003c62:	2308      	movs	r3, #8
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003c66:	2332      	movs	r3, #50	; 0x32
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c76:	4618      	mov	r0, r3
 8003c78:	f005 fae4 	bl	8009244 <HAL_RCCEx_PeriphCLKConfig>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003c82:	f7fe f975 	bl	8001f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	4b7a      	ldr	r3, [pc, #488]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	4a79      	ldr	r2, [pc, #484]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003c90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c94:	6453      	str	r3, [r2, #68]	; 0x44
 8003c96:	4b77      	ldr	r3, [pc, #476]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	4b73      	ldr	r3, [pc, #460]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	4a72      	ldr	r2, [pc, #456]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003cac:	f043 0320 	orr.w	r3, r3, #32
 8003cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb2:	4b70      	ldr	r3, [pc, #448]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	4b6c      	ldr	r3, [pc, #432]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	4a6b      	ldr	r2, [pc, #428]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cce:	4b69      	ldr	r3, [pc, #420]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	4b65      	ldr	r3, [pc, #404]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	4a64      	ldr	r2, [pc, #400]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cea:	4b62      	ldr	r3, [pc, #392]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	4b5e      	ldr	r3, [pc, #376]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	4a5d      	ldr	r2, [pc, #372]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
 8003d06:	4b5b      	ldr	r3, [pc, #364]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	4b57      	ldr	r3, [pc, #348]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	4a56      	ldr	r2, [pc, #344]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003d1c:	f043 0304 	orr.w	r3, r3, #4
 8003d20:	6313      	str	r3, [r2, #48]	; 0x30
 8003d22:	4b54      	ldr	r3, [pc, #336]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	4b50      	ldr	r3, [pc, #320]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4a4f      	ldr	r2, [pc, #316]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003d38:	f043 0308 	orr.w	r3, r3, #8
 8003d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3e:	4b4d      	ldr	r3, [pc, #308]	; (8003e74 <HAL_LTDC_MspInit+0x244>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d4e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d50:	2302      	movs	r3, #2
 8003d52:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d5c:	230e      	movs	r3, #14
 8003d5e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003d60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d64:	4619      	mov	r1, r3
 8003d66:	4844      	ldr	r0, [pc, #272]	; (8003e78 <HAL_LTDC_MspInit+0x248>)
 8003d68:	f001 fabc 	bl	80052e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003d6c:	f641 0358 	movw	r3, #6232	; 0x1858
 8003d70:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d72:	2302      	movs	r3, #2
 8003d74:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d7e:	230e      	movs	r3, #14
 8003d80:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d86:	4619      	mov	r1, r3
 8003d88:	483c      	ldr	r0, [pc, #240]	; (8003e7c <HAL_LTDC_MspInit+0x24c>)
 8003d8a:	f001 faab 	bl	80052e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d92:	2302      	movs	r3, #2
 8003d94:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003d9e:	2309      	movs	r3, #9
 8003da0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003da6:	4619      	mov	r1, r3
 8003da8:	4835      	ldr	r0, [pc, #212]	; (8003e80 <HAL_LTDC_MspInit+0x250>)
 8003daa:	f001 fa9b 	bl	80052e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003dae:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003db2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003dc0:	230e      	movs	r3, #14
 8003dc2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003dc8:	4619      	mov	r1, r3
 8003dca:	482d      	ldr	r0, [pc, #180]	; (8003e80 <HAL_LTDC_MspInit+0x250>)
 8003dcc:	f001 fa8a 	bl	80052e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003dd0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003dd4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dde:	2300      	movs	r3, #0
 8003de0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003de2:	230e      	movs	r3, #14
 8003de4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003de6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003dea:	4619      	mov	r1, r3
 8003dec:	4825      	ldr	r0, [pc, #148]	; (8003e84 <HAL_LTDC_MspInit+0x254>)
 8003dee:	f001 fa79 	bl	80052e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003df2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003df6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e00:	2300      	movs	r3, #0
 8003e02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e04:	230e      	movs	r3, #14
 8003e06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	481e      	ldr	r0, [pc, #120]	; (8003e88 <HAL_LTDC_MspInit+0x258>)
 8003e10:	f001 fa68 	bl	80052e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003e14:	2348      	movs	r3, #72	; 0x48
 8003e16:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e20:	2300      	movs	r3, #0
 8003e22:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e24:	230e      	movs	r3, #14
 8003e26:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4817      	ldr	r0, [pc, #92]	; (8003e8c <HAL_LTDC_MspInit+0x25c>)
 8003e30:	f001 fa58 	bl	80052e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003e34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e38:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e42:	2300      	movs	r3, #0
 8003e44:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003e46:	2309      	movs	r3, #9
 8003e48:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e4e:	4619      	mov	r1, r3
 8003e50:	480c      	ldr	r0, [pc, #48]	; (8003e84 <HAL_LTDC_MspInit+0x254>)
 8003e52:	f001 fa47 	bl	80052e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003e56:	2200      	movs	r2, #0
 8003e58:	2105      	movs	r1, #5
 8003e5a:	2058      	movs	r0, #88	; 0x58
 8003e5c:	f000 fe52 	bl	8004b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003e60:	2058      	movs	r0, #88	; 0x58
 8003e62:	f000 fe6b 	bl	8004b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003e66:	bf00      	nop
 8003e68:	3768      	adds	r7, #104	; 0x68
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40016800 	.word	0x40016800
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40021400 	.word	0x40021400
 8003e7c:	40020000 	.word	0x40020000
 8003e80:	40020400 	.word	0x40020400
 8003e84:	40021800 	.word	0x40021800
 8003e88:	40020800 	.word	0x40020800
 8003e8c:	40020c00 	.word	0x40020c00

08003e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e98:	f107 0314 	add.w	r3, r7, #20
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <HAL_SPI_MspInit+0x84>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d12c      	bne.n	8003f0c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <HAL_SPI_MspInit+0x88>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	4a17      	ldr	r2, [pc, #92]	; (8003f18 <HAL_SPI_MspInit+0x88>)
 8003ebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_SPI_MspInit+0x88>)
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <HAL_SPI_MspInit+0x88>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <HAL_SPI_MspInit+0x88>)
 8003ed8:	f043 0320 	orr.w	r3, r3, #32
 8003edc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ede:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <HAL_SPI_MspInit+0x88>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003eea:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003efc:	2305      	movs	r3, #5
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4619      	mov	r1, r3
 8003f06:	4805      	ldr	r0, [pc, #20]	; (8003f1c <HAL_SPI_MspInit+0x8c>)
 8003f08:	f001 f9ec 	bl	80052e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003f0c:	bf00      	nop
 8003f0e:	3728      	adds	r7, #40	; 0x28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40015000 	.word	0x40015000
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40021400 	.word	0x40021400

08003f20 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a08      	ldr	r2, [pc, #32]	; (8003f50 <HAL_SPI_MspDeInit+0x30>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d10a      	bne.n	8003f48 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_SPI_MspDeInit+0x34>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <HAL_SPI_MspDeInit+0x34>)
 8003f38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f3c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003f3e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8003f42:	4805      	ldr	r0, [pc, #20]	; (8003f58 <HAL_SPI_MspDeInit+0x38>)
 8003f44:	f001 fb7a 	bl	800563c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40015000 	.word	0x40015000
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40021400 	.word	0x40021400

08003f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <HAL_TIM_Base_MspInit+0x3c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10d      	bne.n	8003f8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <HAL_TIM_Base_MspInit+0x40>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <HAL_TIM_Base_MspInit+0x40>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <HAL_TIM_Base_MspInit+0x40>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40010000 	.word	0x40010000
 8003f9c:	40023800 	.word	0x40023800

08003fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	f107 0314 	add.w	r3, r7, #20
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a19      	ldr	r2, [pc, #100]	; (8004024 <HAL_UART_MspInit+0x84>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d12c      	bne.n	800401c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <HAL_UART_MspInit+0x88>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	4a17      	ldr	r2, [pc, #92]	; (8004028 <HAL_UART_MspInit+0x88>)
 8003fcc:	f043 0310 	orr.w	r3, r3, #16
 8003fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <HAL_UART_MspInit+0x88>)
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_UART_MspInit+0x88>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	4a10      	ldr	r2, [pc, #64]	; (8004028 <HAL_UART_MspInit+0x88>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6313      	str	r3, [r2, #48]	; 0x30
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_UART_MspInit+0x88>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003ffa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004000:	2302      	movs	r3, #2
 8004002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004004:	2300      	movs	r3, #0
 8004006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004008:	2303      	movs	r3, #3
 800400a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800400c:	2307      	movs	r3, #7
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	4619      	mov	r1, r3
 8004016:	4805      	ldr	r0, [pc, #20]	; (800402c <HAL_UART_MspInit+0x8c>)
 8004018:	f001 f964 	bl	80052e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800401c:	bf00      	nop
 800401e:	3728      	adds	r7, #40	; 0x28
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40011000 	.word	0x40011000
 8004028:	40023800 	.word	0x40023800
 800402c:	40020000 	.word	0x40020000

08004030 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	60da      	str	r2, [r3, #12]
 8004042:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004044:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_FMC_MspInit+0x104>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d16f      	bne.n	800412c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800404c:	4b39      	ldr	r3, [pc, #228]	; (8004134 <HAL_FMC_MspInit+0x104>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4b38      	ldr	r3, [pc, #224]	; (8004138 <HAL_FMC_MspInit+0x108>)
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	4a37      	ldr	r2, [pc, #220]	; (8004138 <HAL_FMC_MspInit+0x108>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6393      	str	r3, [r2, #56]	; 0x38
 8004062:	4b35      	ldr	r3, [pc, #212]	; (8004138 <HAL_FMC_MspInit+0x108>)
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800406e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004072:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004074:	2302      	movs	r3, #2
 8004076:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407c:	2303      	movs	r3, #3
 800407e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004080:	230c      	movs	r3, #12
 8004082:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	4619      	mov	r1, r3
 8004088:	482c      	ldr	r0, [pc, #176]	; (800413c <HAL_FMC_MspInit+0x10c>)
 800408a:	f001 f92b 	bl	80052e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800408e:	2301      	movs	r3, #1
 8004090:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004092:	2302      	movs	r3, #2
 8004094:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409a:	2303      	movs	r3, #3
 800409c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800409e:	230c      	movs	r3, #12
 80040a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4826      	ldr	r0, [pc, #152]	; (8004140 <HAL_FMC_MspInit+0x110>)
 80040a8:	f001 f91c 	bl	80052e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80040ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80040b0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b2:	2302      	movs	r3, #2
 80040b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ba:	2303      	movs	r3, #3
 80040bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040be:	230c      	movs	r3, #12
 80040c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	4619      	mov	r1, r3
 80040c6:	481f      	ldr	r0, [pc, #124]	; (8004144 <HAL_FMC_MspInit+0x114>)
 80040c8:	f001 f90c 	bl	80052e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80040cc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80040d0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d2:	2302      	movs	r3, #2
 80040d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040da:	2303      	movs	r3, #3
 80040dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040de:	230c      	movs	r3, #12
 80040e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4818      	ldr	r0, [pc, #96]	; (8004148 <HAL_FMC_MspInit+0x118>)
 80040e8:	f001 f8fc 	bl	80052e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80040ec:	f24c 7303 	movw	r3, #50947	; 0xc703
 80040f0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f2:	2302      	movs	r3, #2
 80040f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040fa:	2303      	movs	r3, #3
 80040fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040fe:	230c      	movs	r3, #12
 8004100:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004102:	1d3b      	adds	r3, r7, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4811      	ldr	r0, [pc, #68]	; (800414c <HAL_FMC_MspInit+0x11c>)
 8004108:	f001 f8ec 	bl	80052e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800410c:	2360      	movs	r3, #96	; 0x60
 800410e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004110:	2302      	movs	r3, #2
 8004112:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004118:	2303      	movs	r3, #3
 800411a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800411c:	230c      	movs	r3, #12
 800411e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	4619      	mov	r1, r3
 8004124:	480a      	ldr	r0, [pc, #40]	; (8004150 <HAL_FMC_MspInit+0x120>)
 8004126:	f001 f8dd 	bl	80052e4 <HAL_GPIO_Init>
 800412a:	e000      	b.n	800412e <HAL_FMC_MspInit+0xfe>
    return;
 800412c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	200005f8 	.word	0x200005f8
 8004138:	40023800 	.word	0x40023800
 800413c:	40021400 	.word	0x40021400
 8004140:	40020800 	.word	0x40020800
 8004144:	40021800 	.word	0x40021800
 8004148:	40021000 	.word	0x40021000
 800414c:	40020c00 	.word	0x40020c00
 8004150:	40020400 	.word	0x40020400

08004154 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800415c:	f7ff ff68 	bl	8004030 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08e      	sub	sp, #56	; 0x38
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	4b33      	ldr	r3, [pc, #204]	; (800424c <HAL_InitTick+0xe4>)
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	4a32      	ldr	r2, [pc, #200]	; (800424c <HAL_InitTick+0xe4>)
 8004182:	f043 0310 	orr.w	r3, r3, #16
 8004186:	6413      	str	r3, [r2, #64]	; 0x40
 8004188:	4b30      	ldr	r3, [pc, #192]	; (800424c <HAL_InitTick+0xe4>)
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004194:	f107 0210 	add.w	r2, r7, #16
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f005 f81e 	bl	80091e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80041ae:	f004 ffef 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 80041b2:	6378      	str	r0, [r7, #52]	; 0x34
 80041b4:	e004      	b.n	80041c0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80041b6:	f004 ffeb 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 80041ba:	4603      	mov	r3, r0
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80041c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c2:	4a23      	ldr	r2, [pc, #140]	; (8004250 <HAL_InitTick+0xe8>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	0c9b      	lsrs	r3, r3, #18
 80041ca:	3b01      	subs	r3, #1
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80041ce:	4b21      	ldr	r3, [pc, #132]	; (8004254 <HAL_InitTick+0xec>)
 80041d0:	4a21      	ldr	r2, [pc, #132]	; (8004258 <HAL_InitTick+0xf0>)
 80041d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80041d4:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <HAL_InitTick+0xec>)
 80041d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80041dc:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <HAL_InitTick+0xec>)
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <HAL_InitTick+0xec>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <HAL_InitTick+0xec>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ee:	4b19      	ldr	r3, [pc, #100]	; (8004254 <HAL_InitTick+0xec>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80041f4:	4817      	ldr	r0, [pc, #92]	; (8004254 <HAL_InitTick+0xec>)
 80041f6:	f006 f855 	bl	800a2a4 <HAL_TIM_Base_Init>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004200:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004204:	2b00      	cmp	r3, #0
 8004206:	d11b      	bne.n	8004240 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004208:	4812      	ldr	r0, [pc, #72]	; (8004254 <HAL_InitTick+0xec>)
 800420a:	f006 f89b 	bl	800a344 <HAL_TIM_Base_Start_IT>
 800420e:	4603      	mov	r3, r0
 8004210:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004218:	2b00      	cmp	r3, #0
 800421a:	d111      	bne.n	8004240 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800421c:	2036      	movs	r0, #54	; 0x36
 800421e:	f000 fc8d 	bl	8004b3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b0f      	cmp	r3, #15
 8004226:	d808      	bhi.n	800423a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004228:	2200      	movs	r2, #0
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	2036      	movs	r0, #54	; 0x36
 800422e:	f000 fc69 	bl	8004b04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <HAL_InitTick+0xf4>)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	e002      	b.n	8004240 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004240:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004244:	4618      	mov	r0, r3
 8004246:	3738      	adds	r7, #56	; 0x38
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	431bde83 	.word	0x431bde83
 8004254:	200005fc 	.word	0x200005fc
 8004258:	40001000 	.word	0x40001000
 800425c:	20000070 	.word	0x20000070

08004260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004264:	e7fe      	b.n	8004264 <NMI_Handler+0x4>

08004266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004266:	b480      	push	{r7}
 8004268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800426a:	e7fe      	b.n	800426a <HardFault_Handler+0x4>

0800426c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004270:	e7fe      	b.n	8004270 <MemManage_Handler+0x4>

08004272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004276:	e7fe      	b.n	8004276 <BusFault_Handler+0x4>

08004278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800427c:	e7fe      	b.n	800427c <UsageFault_Handler+0x4>

0800427e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800427e:	b480      	push	{r7}
 8004280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004282:	bf00      	nop
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004290:	4802      	ldr	r0, [pc, #8]	; (800429c <TIM6_DAC_IRQHandler+0x10>)
 8004292:	f006 f8c7 	bl	800a424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	200005fc 	.word	0x200005fc

080042a0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80042a4:	4802      	ldr	r0, [pc, #8]	; (80042b0 <OTG_HS_IRQHandler+0x10>)
 80042a6:	f001 fd59 	bl	8005d5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200097b4 	.word	0x200097b4

080042b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80042b8:	4802      	ldr	r0, [pc, #8]	; (80042c4 <LTDC_IRQHandler+0x10>)
 80042ba:	f004 f837 	bl	800832c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	200001a4 	.word	0x200001a4

080042c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80042cc:	4802      	ldr	r0, [pc, #8]	; (80042d8 <DMA2D_IRQHandler+0x10>)
 80042ce:	f000 fe66 	bl	8004f9e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000110 	.word	0x20000110

080042dc <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fa59 	bl	80047a0 <stmpe811_GetInstance>
 80042ee:	4603      	mov	r3, r0
 80042f0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	2bff      	cmp	r3, #255	; 0xff
 80042f6:	d112      	bne.n	800431e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80042f8:	2000      	movs	r0, #0
 80042fa:	f000 fa51 	bl	80047a0 <stmpe811_GetInstance>
 80042fe:	4603      	mov	r3, r0
 8004300:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8004302:	7bbb      	ldrb	r3, [r7, #14]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d80a      	bhi.n	800431e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8004308:	7bbb      	ldrb	r3, [r7, #14]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	b2d1      	uxtb	r1, r2
 800430e:	4a06      	ldr	r2, [pc, #24]	; (8004328 <stmpe811_Init+0x4c>)
 8004310:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8004312:	f7fe fe9c 	bl	800304e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f807 	bl	800432c <stmpe811_Reset>
    }
  }
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000644 	.word	0x20000644

0800432c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2202      	movs	r2, #2
 800433c:	2103      	movs	r1, #3
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fe91 	bl	8003066 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8004344:	200a      	movs	r0, #10
 8004346:	f7fe fecb 	bl	80030e0 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2200      	movs	r2, #0
 8004350:	2103      	movs	r1, #3
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fe87 	bl	8003066 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8004358:	2002      	movs	r0, #2
 800435a:	f7fe fec1 	bl	80030e0 <IOE_Delay>
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8004366:	b590      	push	{r4, r7, lr}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	4603      	mov	r3, r0
 800436e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8004370:	f7fe fe6d 	bl	800304e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fe86 	bl	800308c <IOE_Read>
 8004380:	4603      	mov	r3, r0
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f7fe fe7d 	bl	800308c <IOE_Read>
 8004392:	4603      	mov	r3, r0
 8004394:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004396:	4323      	orrs	r3, r4
 8004398:	b21b      	sxth	r3, r3
 800439a:	b29b      	uxth	r3, r3
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd90      	pop	{r4, r7, pc}

080043a4 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2109      	movs	r1, #9
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fe67 	bl	800308c <IOE_Read>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	7bfa      	ldrb	r2, [r7, #15]
 80043d0:	2109      	movs	r1, #9
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe fe47 	bl	8003066 <IOE_Write>
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2109      	movs	r1, #9
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe fe49 	bl	800308c <IOE_Read>
 80043fa:	4603      	mov	r3, r0
 80043fc:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	7bfa      	ldrb	r2, [r7, #15]
 800440c:	2109      	movs	r1, #9
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe fe29 	bl	8003066 <IOE_Write>
    
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	460a      	mov	r2, r1
 8004426:	80fb      	strh	r3, [r7, #6]
 8004428:	4613      	mov	r3, r2
 800442a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	210a      	movs	r1, #10
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fe28 	bl	800308c <IOE_Read>
 800443c:	4603      	mov	r3, r0
 800443e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	797b      	ldrb	r3, [r7, #5]
 8004444:	4313      	orrs	r3, r2
 8004446:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	7bfa      	ldrb	r2, [r7, #15]
 800444e:	210a      	movs	r1, #10
 8004450:	4618      	mov	r0, r3
 8004452:	f7fe fe08 	bl	8003066 <IOE_Write>
}
 8004456:	bf00      	nop
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	4603      	mov	r3, r0
 8004466:	460a      	mov	r2, r1
 8004468:	80fb      	strh	r3, [r7, #6]
 800446a:	4613      	mov	r3, r2
 800446c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	210a      	movs	r1, #10
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe fe07 	bl	800308c <IOE_Read>
 800447e:	4603      	mov	r3, r0
 8004480:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8004482:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004486:	43db      	mvns	r3, r3
 8004488:	b25a      	sxtb	r2, r3
 800448a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448e:	4013      	ands	r3, r2
 8004490:	b25b      	sxtb	r3, r3
 8004492:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	7bfa      	ldrb	r2, [r7, #15]
 800449a:	210a      	movs	r1, #10
 800449c:	4618      	mov	r0, r3
 800449e:	f7fe fde2 	bl	8003066 <IOE_Write>
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	4603      	mov	r3, r0
 80044b2:	460a      	mov	r2, r1
 80044b4:	80fb      	strh	r3, [r7, #6]
 80044b6:	4613      	mov	r3, r2
 80044b8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	210b      	movs	r1, #11
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fde3 	bl	800308c <IOE_Read>
 80044c6:	4603      	mov	r3, r0
 80044c8:	461a      	mov	r2, r3
 80044ca:	797b      	ldrb	r3, [r7, #5]
 80044cc:	4013      	ands	r3, r2
 80044ce:	b2db      	uxtb	r3, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	460a      	mov	r2, r1
 80044e2:	80fb      	strh	r3, [r7, #6]
 80044e4:	4613      	mov	r3, r2
 80044e6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	797a      	ldrb	r2, [r7, #5]
 80044ee:	210b      	movs	r1, #11
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe fdb8 	bl	8003066 <IOE_Write>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	6039      	str	r1, [r7, #0]
 8004508:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2117      	movs	r1, #23
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fdb9 	bl	800308c <IOE_Read>
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	b25b      	sxtb	r3, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	b25a      	sxtb	r2, r3
 8004526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800452a:	4013      	ands	r3, r2
 800452c:	b25b      	sxtb	r3, r3
 800452e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	2117      	movs	r1, #23
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe fd94 	bl	8003066 <IOE_Write>
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	4603      	mov	r3, r0
 800454e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2104      	movs	r1, #4
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe fd98 	bl	800308c <IOE_Read>
 800455c:	4603      	mov	r3, r0
 800455e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	f023 0304 	bic.w	r3, r3, #4
 8004566:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	2104      	movs	r1, #4
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe fd78 	bl	8003066 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	21f0      	movs	r1, #240	; 0xf0
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff ffbf 	bl	80044fe <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	f023 0303 	bic.w	r3, r3, #3
 8004586:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	2104      	movs	r1, #4
 8004590:	4618      	mov	r0, r3
 8004592:	f7fe fd68 	bl	8003066 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2249      	movs	r2, #73	; 0x49
 800459c:	2120      	movs	r1, #32
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe fd61 	bl	8003066 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80045a4:	2002      	movs	r0, #2
 80045a6:	f7fe fd9b 	bl	80030e0 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2201      	movs	r2, #1
 80045b0:	2121      	movs	r1, #33	; 0x21
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe fd57 	bl	8003066 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	229a      	movs	r2, #154	; 0x9a
 80045be:	2141      	movs	r1, #65	; 0x41
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fd50 	bl	8003066 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2201      	movs	r2, #1
 80045cc:	214a      	movs	r1, #74	; 0x4a
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fe fd49 	bl	8003066 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2201      	movs	r2, #1
 80045da:	214b      	movs	r1, #75	; 0x4b
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fe fd42 	bl	8003066 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2200      	movs	r2, #0
 80045e8:	214b      	movs	r1, #75	; 0x4b
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fd3b 	bl	8003066 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2201      	movs	r2, #1
 80045f6:	2156      	movs	r1, #86	; 0x56
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe fd34 	bl	8003066 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2201      	movs	r2, #1
 8004604:	2158      	movs	r1, #88	; 0x58
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe fd2d 	bl	8003066 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2201      	movs	r2, #1
 8004612:	2140      	movs	r1, #64	; 0x40
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe fd26 	bl	8003066 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	22ff      	movs	r2, #255	; 0xff
 8004620:	210b      	movs	r1, #11
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fd1f 	bl	8003066 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8004628:	2002      	movs	r0, #2
 800462a:	f7fe fd59 	bl	80030e0 <IOE_Delay>
}
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	4603      	mov	r3, r0
 800463e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2140      	movs	r1, #64	; 0x40
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fd1e 	bl	800308c <IOE_Read>
 8004650:	4603      	mov	r3, r0
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b80      	cmp	r3, #128	; 0x80
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8004662:	7bbb      	ldrb	r3, [r7, #14]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	214c      	movs	r1, #76	; 0x4c
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fd0c 	bl	800308c <IOE_Read>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d010      	beq.n	800469c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	e00d      	b.n	800469c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2201      	movs	r2, #1
 8004686:	214b      	movs	r1, #75	; 0x4b
 8004688:	4618      	mov	r0, r3
 800468a:	f7fe fcec 	bl	8003066 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2200      	movs	r2, #0
 8004694:	214b      	movs	r1, #75	; 0x4b
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fce5 	bl	8003066 <IOE_Write>
  }
  
  return ret;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4603      	mov	r3, r0
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80046b4:	89fb      	ldrh	r3, [r7, #14]
 80046b6:	b2d8      	uxtb	r0, r3
 80046b8:	f107 0210 	add.w	r2, r7, #16
 80046bc:	2304      	movs	r3, #4
 80046be:	21d7      	movs	r1, #215	; 0xd7
 80046c0:	f7fe fcf7 	bl	80030b2 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80046c4:	7c3b      	ldrb	r3, [r7, #16]
 80046c6:	061a      	lsls	r2, r3, #24
 80046c8:	7c7b      	ldrb	r3, [r7, #17]
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	431a      	orrs	r2, r3
 80046ce:	7cbb      	ldrb	r3, [r7, #18]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	4313      	orrs	r3, r2
 80046d4:	7cfa      	ldrb	r2, [r7, #19]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	0d1b      	lsrs	r3, r3, #20
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80046f4:	89fb      	ldrh	r3, [r7, #14]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2201      	movs	r2, #1
 80046fa:	214b      	movs	r1, #75	; 0x4b
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fe fcb2 	bl	8003066 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004702:	89fb      	ldrh	r3, [r7, #14]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2200      	movs	r2, #0
 8004708:	214b      	movs	r1, #75	; 0x4b
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fcab 	bl	8003066 <IOE_Write>
}
 8004710:	bf00      	nop
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8004722:	f7fe fc9a 	bl	800305a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	211f      	movs	r1, #31
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fe76 	bl	800441c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fe36 	bl	80043a4 <stmpe811_EnableGlobalIT>
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fe47 	bl	80043e0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	211f      	movs	r1, #31
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fe81 	bl	800445e <stmpe811_DisableITSource>
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	211f      	movs	r1, #31
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fe99 	bl	80044aa <stmpe811_ReadGITStatus>
 8004778:	4603      	mov	r3, r0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	4603      	mov	r3, r0
 800478a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	211f      	movs	r1, #31
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fea1 	bl	80044d8 <stmpe811_ClearGlobalIT>
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80047ae:	2300      	movs	r3, #0
 80047b0:	73fb      	strb	r3, [r7, #15]
 80047b2:	e00b      	b.n	80047cc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <stmpe811_GetInstance+0x40>)
 80047b8:	5cd3      	ldrb	r3, [r2, r3]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d101      	bne.n	80047c6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	e006      	b.n	80047d4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	3301      	adds	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d9f0      	bls.n	80047b4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80047d2:	23ff      	movs	r3, #255	; 0xff
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	20000644 	.word	0x20000644

080047e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <_sbrk+0x5c>)
 80047ee:	4b15      	ldr	r3, [pc, #84]	; (8004844 <_sbrk+0x60>)
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047f8:	4b13      	ldr	r3, [pc, #76]	; (8004848 <_sbrk+0x64>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d102      	bne.n	8004806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <_sbrk+0x64>)
 8004802:	4a12      	ldr	r2, [pc, #72]	; (800484c <_sbrk+0x68>)
 8004804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004806:	4b10      	ldr	r3, [pc, #64]	; (8004848 <_sbrk+0x64>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	429a      	cmp	r2, r3
 8004812:	d207      	bcs.n	8004824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004814:	f00d fb7a 	bl	8011f0c <__errno>
 8004818:	4603      	mov	r3, r0
 800481a:	220c      	movs	r2, #12
 800481c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800481e:	f04f 33ff 	mov.w	r3, #4294967295
 8004822:	e009      	b.n	8004838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004824:	4b08      	ldr	r3, [pc, #32]	; (8004848 <_sbrk+0x64>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <_sbrk+0x64>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	4a05      	ldr	r2, [pc, #20]	; (8004848 <_sbrk+0x64>)
 8004834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004836:	68fb      	ldr	r3, [r7, #12]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20030000 	.word	0x20030000
 8004844:	00000400 	.word	0x00000400
 8004848:	20000648 	.word	0x20000648
 800484c:	20009c00 	.word	0x20009c00

08004850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <SystemInit+0x20>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	4a05      	ldr	r2, [pc, #20]	; (8004870 <SystemInit+0x20>)
 800485c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048ac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004878:	480d      	ldr	r0, [pc, #52]	; (80048b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800487a:	490e      	ldr	r1, [pc, #56]	; (80048b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800487c:	4a0e      	ldr	r2, [pc, #56]	; (80048b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800487e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004880:	e002      	b.n	8004888 <LoopCopyDataInit>

08004882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004886:	3304      	adds	r3, #4

08004888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800488a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800488c:	d3f9      	bcc.n	8004882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800488e:	4a0b      	ldr	r2, [pc, #44]	; (80048bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004890:	4c0b      	ldr	r4, [pc, #44]	; (80048c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004894:	e001      	b.n	800489a <LoopFillZerobss>

08004896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004898:	3204      	adds	r2, #4

0800489a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800489a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800489c:	d3fb      	bcc.n	8004896 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800489e:	f7ff ffd7 	bl	8004850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048a2:	f00d fb39 	bl	8011f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048a6:	f7fc fe43 	bl	8001530 <main>
  bx  lr    
 80048aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80048ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80048b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048b4:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80048b8:	0807bb24 	.word	0x0807bb24
  ldr r2, =_sbss
 80048bc:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80048c0:	20009c00 	.word	0x20009c00

080048c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048c4:	e7fe      	b.n	80048c4 <ADC_IRQHandler>
	...

080048c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048cc:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <HAL_Init+0x40>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0d      	ldr	r2, [pc, #52]	; (8004908 <HAL_Init+0x40>)
 80048d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_Init+0x40>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <HAL_Init+0x40>)
 80048de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <HAL_Init+0x40>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a07      	ldr	r2, [pc, #28]	; (8004908 <HAL_Init+0x40>)
 80048ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048f0:	2003      	movs	r0, #3
 80048f2:	f000 f8fc 	bl	8004aee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048f6:	2000      	movs	r0, #0
 80048f8:	f7ff fc36 	bl	8004168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048fc:	f7ff f892 	bl	8003a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40023c00 	.word	0x40023c00

0800490c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_IncTick+0x20>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_IncTick+0x24>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4413      	add	r3, r2
 800491c:	4a04      	ldr	r2, [pc, #16]	; (8004930 <HAL_IncTick+0x24>)
 800491e:	6013      	str	r3, [r2, #0]
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000074 	.word	0x20000074
 8004930:	2000064c 	.word	0x2000064c

08004934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return uwTick;
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_GetTick+0x14>)
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	2000064c 	.word	0x2000064c

0800494c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004954:	f7ff ffee 	bl	8004934 <HAL_GetTick>
 8004958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d005      	beq.n	8004972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_Delay+0x44>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004972:	bf00      	nop
 8004974:	f7ff ffde 	bl	8004934 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	429a      	cmp	r2, r3
 8004982:	d8f7      	bhi.n	8004974 <HAL_Delay+0x28>
  {
  }
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000074 	.word	0x20000074

08004994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <__NVIC_SetPriorityGrouping+0x44>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049b0:	4013      	ands	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049c6:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <__NVIC_SetPriorityGrouping+0x44>)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	60d3      	str	r3, [r2, #12]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	e000ed00 	.word	0xe000ed00

080049dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <__NVIC_GetPriorityGrouping+0x18>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	0a1b      	lsrs	r3, r3, #8
 80049e6:	f003 0307 	and.w	r3, r3, #7
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	e000ed00 	.word	0xe000ed00

080049f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	db0b      	blt.n	8004a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	f003 021f 	and.w	r2, r3, #31
 8004a10:	4907      	ldr	r1, [pc, #28]	; (8004a30 <__NVIC_EnableIRQ+0x38>)
 8004a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	2001      	movs	r0, #1
 8004a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000e100 	.word	0xe000e100

08004a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	6039      	str	r1, [r7, #0]
 8004a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	db0a      	blt.n	8004a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	490c      	ldr	r1, [pc, #48]	; (8004a80 <__NVIC_SetPriority+0x4c>)
 8004a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a52:	0112      	lsls	r2, r2, #4
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	440b      	add	r3, r1
 8004a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a5c:	e00a      	b.n	8004a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	4908      	ldr	r1, [pc, #32]	; (8004a84 <__NVIC_SetPriority+0x50>)
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	3b04      	subs	r3, #4
 8004a6c:	0112      	lsls	r2, r2, #4
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	440b      	add	r3, r1
 8004a72:	761a      	strb	r2, [r3, #24]
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	e000e100 	.word	0xe000e100
 8004a84:	e000ed00 	.word	0xe000ed00

08004a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b089      	sub	sp, #36	; 0x24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f1c3 0307 	rsb	r3, r3, #7
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	bf28      	it	cs
 8004aa6:	2304      	movcs	r3, #4
 8004aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3304      	adds	r3, #4
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d902      	bls.n	8004ab8 <NVIC_EncodePriority+0x30>
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3b03      	subs	r3, #3
 8004ab6:	e000      	b.n	8004aba <NVIC_EncodePriority+0x32>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004abc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43da      	mvns	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	401a      	ands	r2, r3
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ada:	43d9      	mvns	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae0:	4313      	orrs	r3, r2
         );
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3724      	adds	r7, #36	; 0x24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff ff4c 	bl	8004994 <__NVIC_SetPriorityGrouping>
}
 8004afc:	bf00      	nop
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b16:	f7ff ff61 	bl	80049dc <__NVIC_GetPriorityGrouping>
 8004b1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	6978      	ldr	r0, [r7, #20]
 8004b22:	f7ff ffb1 	bl	8004a88 <NVIC_EncodePriority>
 8004b26:	4602      	mov	r2, r0
 8004b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ff80 	bl	8004a34 <__NVIC_SetPriority>
}
 8004b34:	bf00      	nop
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff ff54 	bl	80049f8 <__NVIC_EnableIRQ>
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e00e      	b.n	8004b88 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	795b      	ldrb	r3, [r3, #5]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fe ff7e 	bl	8003a7c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b9c:	f7ff feca 	bl	8004934 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e099      	b.n	8004ce0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bcc:	e00f      	b.n	8004bee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bce:	f7ff feb1 	bl	8004934 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b05      	cmp	r3, #5
 8004bda:	d908      	bls.n	8004bee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2203      	movs	r2, #3
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e078      	b.n	8004ce0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e8      	bne.n	8004bce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4b38      	ldr	r3, [pc, #224]	; (8004ce8 <HAL_DMA_Init+0x158>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d107      	bne.n	8004c58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	4313      	orrs	r3, r2
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d117      	bne.n	8004cb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00e      	beq.n	8004cb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f8bd 	bl	8004e14 <DMA_CheckFifoParam>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2240      	movs	r2, #64	; 0x40
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e016      	b.n	8004ce0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f874 	bl	8004da8 <DMA_CalcBaseAndBitshift>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc8:	223f      	movs	r2, #63	; 0x3f
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	f010803f 	.word	0xf010803f

08004cec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e050      	b.n	8004da0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d101      	bne.n	8004d0e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e048      	b.n	8004da0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2200      	movs	r2, #0
 8004d34:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2221      	movs	r2, #33	; 0x21
 8004d4c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f82a 	bl	8004da8 <DMA_CalcBaseAndBitshift>
 8004d54:	4603      	mov	r3, r0
 8004d56:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	223f      	movs	r2, #63	; 0x3f
 8004d82:	409a      	lsls	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	3b10      	subs	r3, #16
 8004db8:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <DMA_CalcBaseAndBitshift+0x64>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	091b      	lsrs	r3, r3, #4
 8004dc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dc2:	4a13      	ldr	r2, [pc, #76]	; (8004e10 <DMA_CalcBaseAndBitshift+0x68>)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d909      	bls.n	8004dea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	1d1a      	adds	r2, r3, #4
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	659a      	str	r2, [r3, #88]	; 0x58
 8004de8:	e007      	b.n	8004dfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004df2:	f023 0303 	bic.w	r3, r3, #3
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	aaaaaaab 	.word	0xaaaaaaab
 8004e10:	0807bad8 	.word	0x0807bad8

08004e14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11f      	bne.n	8004e6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d856      	bhi.n	8004ee2 <DMA_CheckFifoParam+0xce>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <DMA_CheckFifoParam+0x28>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e5f 	.word	0x08004e5f
 8004e44:	08004e4d 	.word	0x08004e4d
 8004e48:	08004ee3 	.word	0x08004ee3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d046      	beq.n	8004ee6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5c:	e043      	b.n	8004ee6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e66:	d140      	bne.n	8004eea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e6c:	e03d      	b.n	8004eea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	d121      	bne.n	8004ebc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d837      	bhi.n	8004eee <DMA_CheckFifoParam+0xda>
 8004e7e:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <DMA_CheckFifoParam+0x70>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004e9b 	.word	0x08004e9b
 8004e8c:	08004e95 	.word	0x08004e95
 8004e90:	08004ead 	.word	0x08004ead
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
      break;
 8004e98:	e030      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d025      	beq.n	8004ef2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eaa:	e022      	b.n	8004ef2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eb4:	d11f      	bne.n	8004ef6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004eba:	e01c      	b.n	8004ef6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d903      	bls.n	8004eca <DMA_CheckFifoParam+0xb6>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d003      	beq.n	8004ed0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ec8:	e018      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ece:	e015      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00e      	beq.n	8004efa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee0:	e00b      	b.n	8004efa <DMA_CheckFifoParam+0xe6>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e00a      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e008      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004eea:	bf00      	nop
 8004eec:	e006      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e004      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e002      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;   
 8004ef6:	bf00      	nop
 8004ef8:	e000      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004efa:	bf00      	nop
    }
  } 
  
  return status; 
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop

08004f0c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e03b      	b.n	8004f96 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fe fdc4 	bl	8003ac0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5c:	f023 0107 	bic.w	r1, r3, #7
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	68d1      	ldr	r1, [r2, #12]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	430b      	orrs	r3, r1
 8004f84:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d026      	beq.n	800500e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d021      	beq.n	800500e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2201      	movs	r2, #1
 8004fec:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d026      	beq.n	8005066 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d021      	beq.n	8005066 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005030:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2220      	movs	r2, #32
 8005038:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503e:	f043 0202 	orr.w	r2, r3, #2
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2204      	movs	r2, #4
 800504a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d026      	beq.n	80050be <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005076:	2b00      	cmp	r3, #0
 8005078:	d021      	beq.n	80050be <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005088:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2208      	movs	r2, #8
 8005090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	f043 0204 	orr.w	r2, r3, #4
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2204      	movs	r2, #4
 80050a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d013      	beq.n	80050f0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00e      	beq.n	80050f0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2204      	movs	r2, #4
 80050e8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f853 	bl	8005196 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d024      	beq.n	8005144 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01f      	beq.n	8005144 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005112:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2202      	movs	r2, #2
 800511a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01f      	beq.n	800518e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01a      	beq.n	800518e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005166:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2210      	movs	r2, #16
 800516e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f80e 	bl	80051aa <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800518e:	bf00      	nop
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_DMA2D_ConfigLayer+0x20>
 80051dc:	2302      	movs	r3, #2
 80051de:	e079      	b.n	80052d4 <HAL_DMA2D_ConfigLayer+0x114>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	3318      	adds	r3, #24
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4413      	add	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800520a:	4b35      	ldr	r3, [pc, #212]	; (80052e0 <HAL_DMA2D_ConfigLayer+0x120>)
 800520c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b0a      	cmp	r3, #10
 8005214:	d003      	beq.n	800521e <HAL_DMA2D_ConfigLayer+0x5e>
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b09      	cmp	r3, #9
 800521c:	d107      	bne.n	800522e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e005      	b.n	800523a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d120      	bne.n	8005282 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	43db      	mvns	r3, r3
 800524a:	ea02 0103 	and.w	r1, r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	430a      	orrs	r2, r1
 8005256:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b0a      	cmp	r3, #10
 8005268:	d003      	beq.n	8005272 <HAL_DMA2D_ConfigLayer+0xb2>
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b09      	cmp	r3, #9
 8005270:	d127      	bne.n	80052c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800527e:	629a      	str	r2, [r3, #40]	; 0x28
 8005280:	e01f      	b.n	80052c2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	43db      	mvns	r3, r3
 800528c:	ea02 0103 	and.w	r1, r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	430a      	orrs	r2, r1
 8005298:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b0a      	cmp	r3, #10
 80052aa:	d003      	beq.n	80052b4 <HAL_DMA2D_ConfigLayer+0xf4>
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b09      	cmp	r3, #9
 80052b2:	d106      	bne.n	80052c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80052c0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	ff03000f 	.word	0xff03000f

080052e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b089      	sub	sp, #36	; 0x24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	e177      	b.n	80055f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005300:	2201      	movs	r2, #1
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4013      	ands	r3, r2
 8005312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	429a      	cmp	r2, r3
 800531a:	f040 8166 	bne.w	80055ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d005      	beq.n	8005336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005332:	2b02      	cmp	r3, #2
 8005334:	d130      	bne.n	8005398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	2203      	movs	r2, #3
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800536c:	2201      	movs	r2, #1
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	f003 0201 	and.w	r2, r3, #1
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4313      	orrs	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d017      	beq.n	80053d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	2203      	movs	r2, #3
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d123      	bne.n	8005428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	08da      	lsrs	r2, r3, #3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3208      	adds	r2, #8
 80053e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	220f      	movs	r2, #15
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	4013      	ands	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	4313      	orrs	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	08da      	lsrs	r2, r3, #3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3208      	adds	r2, #8
 8005422:	69b9      	ldr	r1, [r7, #24]
 8005424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	2203      	movs	r2, #3
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f003 0203 	and.w	r2, r3, #3
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 80c0 	beq.w	80055ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	4b66      	ldr	r3, [pc, #408]	; (8005608 <HAL_GPIO_Init+0x324>)
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	4a65      	ldr	r2, [pc, #404]	; (8005608 <HAL_GPIO_Init+0x324>)
 8005474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005478:	6453      	str	r3, [r2, #68]	; 0x44
 800547a:	4b63      	ldr	r3, [pc, #396]	; (8005608 <HAL_GPIO_Init+0x324>)
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005486:	4a61      	ldr	r2, [pc, #388]	; (800560c <HAL_GPIO_Init+0x328>)
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	089b      	lsrs	r3, r3, #2
 800548c:	3302      	adds	r3, #2
 800548e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	220f      	movs	r2, #15
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4013      	ands	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a58      	ldr	r2, [pc, #352]	; (8005610 <HAL_GPIO_Init+0x32c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d037      	beq.n	8005522 <HAL_GPIO_Init+0x23e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a57      	ldr	r2, [pc, #348]	; (8005614 <HAL_GPIO_Init+0x330>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d031      	beq.n	800551e <HAL_GPIO_Init+0x23a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a56      	ldr	r2, [pc, #344]	; (8005618 <HAL_GPIO_Init+0x334>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d02b      	beq.n	800551a <HAL_GPIO_Init+0x236>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a55      	ldr	r2, [pc, #340]	; (800561c <HAL_GPIO_Init+0x338>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d025      	beq.n	8005516 <HAL_GPIO_Init+0x232>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a54      	ldr	r2, [pc, #336]	; (8005620 <HAL_GPIO_Init+0x33c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01f      	beq.n	8005512 <HAL_GPIO_Init+0x22e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a53      	ldr	r2, [pc, #332]	; (8005624 <HAL_GPIO_Init+0x340>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d019      	beq.n	800550e <HAL_GPIO_Init+0x22a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a52      	ldr	r2, [pc, #328]	; (8005628 <HAL_GPIO_Init+0x344>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <HAL_GPIO_Init+0x226>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a51      	ldr	r2, [pc, #324]	; (800562c <HAL_GPIO_Init+0x348>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00d      	beq.n	8005506 <HAL_GPIO_Init+0x222>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a50      	ldr	r2, [pc, #320]	; (8005630 <HAL_GPIO_Init+0x34c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d007      	beq.n	8005502 <HAL_GPIO_Init+0x21e>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a4f      	ldr	r2, [pc, #316]	; (8005634 <HAL_GPIO_Init+0x350>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d101      	bne.n	80054fe <HAL_GPIO_Init+0x21a>
 80054fa:	2309      	movs	r3, #9
 80054fc:	e012      	b.n	8005524 <HAL_GPIO_Init+0x240>
 80054fe:	230a      	movs	r3, #10
 8005500:	e010      	b.n	8005524 <HAL_GPIO_Init+0x240>
 8005502:	2308      	movs	r3, #8
 8005504:	e00e      	b.n	8005524 <HAL_GPIO_Init+0x240>
 8005506:	2307      	movs	r3, #7
 8005508:	e00c      	b.n	8005524 <HAL_GPIO_Init+0x240>
 800550a:	2306      	movs	r3, #6
 800550c:	e00a      	b.n	8005524 <HAL_GPIO_Init+0x240>
 800550e:	2305      	movs	r3, #5
 8005510:	e008      	b.n	8005524 <HAL_GPIO_Init+0x240>
 8005512:	2304      	movs	r3, #4
 8005514:	e006      	b.n	8005524 <HAL_GPIO_Init+0x240>
 8005516:	2303      	movs	r3, #3
 8005518:	e004      	b.n	8005524 <HAL_GPIO_Init+0x240>
 800551a:	2302      	movs	r3, #2
 800551c:	e002      	b.n	8005524 <HAL_GPIO_Init+0x240>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_GPIO_Init+0x240>
 8005522:	2300      	movs	r3, #0
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	f002 0203 	and.w	r2, r2, #3
 800552a:	0092      	lsls	r2, r2, #2
 800552c:	4093      	lsls	r3, r2
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005534:	4935      	ldr	r1, [pc, #212]	; (800560c <HAL_GPIO_Init+0x328>)
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	089b      	lsrs	r3, r3, #2
 800553a:	3302      	adds	r3, #2
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005542:	4b3d      	ldr	r3, [pc, #244]	; (8005638 <HAL_GPIO_Init+0x354>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	43db      	mvns	r3, r3
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	4013      	ands	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005566:	4a34      	ldr	r2, [pc, #208]	; (8005638 <HAL_GPIO_Init+0x354>)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800556c:	4b32      	ldr	r3, [pc, #200]	; (8005638 <HAL_GPIO_Init+0x354>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	43db      	mvns	r3, r3
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4013      	ands	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005590:	4a29      	ldr	r2, [pc, #164]	; (8005638 <HAL_GPIO_Init+0x354>)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005596:	4b28      	ldr	r3, [pc, #160]	; (8005638 <HAL_GPIO_Init+0x354>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	43db      	mvns	r3, r3
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4013      	ands	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <HAL_GPIO_Init+0x354>)
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055c0:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <HAL_GPIO_Init+0x354>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	43db      	mvns	r3, r3
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	4013      	ands	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055e4:	4a14      	ldr	r2, [pc, #80]	; (8005638 <HAL_GPIO_Init+0x354>)
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	3301      	adds	r3, #1
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b0f      	cmp	r3, #15
 80055f4:	f67f ae84 	bls.w	8005300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	3724      	adds	r7, #36	; 0x24
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800
 800560c:	40013800 	.word	0x40013800
 8005610:	40020000 	.word	0x40020000
 8005614:	40020400 	.word	0x40020400
 8005618:	40020800 	.word	0x40020800
 800561c:	40020c00 	.word	0x40020c00
 8005620:	40021000 	.word	0x40021000
 8005624:	40021400 	.word	0x40021400
 8005628:	40021800 	.word	0x40021800
 800562c:	40021c00 	.word	0x40021c00
 8005630:	40022000 	.word	0x40022000
 8005634:	40022400 	.word	0x40022400
 8005638:	40013c00 	.word	0x40013c00

0800563c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	e0d9      	b.n	800580c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005658:	2201      	movs	r2, #1
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4013      	ands	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	429a      	cmp	r2, r3
 8005670:	f040 80c9 	bne.w	8005806 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005674:	4a6b      	ldr	r2, [pc, #428]	; (8005824 <HAL_GPIO_DeInit+0x1e8>)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	089b      	lsrs	r3, r3, #2
 800567a:	3302      	adds	r3, #2
 800567c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005680:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	220f      	movs	r2, #15
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	4013      	ands	r3, r2
 8005694:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a63      	ldr	r2, [pc, #396]	; (8005828 <HAL_GPIO_DeInit+0x1ec>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d037      	beq.n	800570e <HAL_GPIO_DeInit+0xd2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a62      	ldr	r2, [pc, #392]	; (800582c <HAL_GPIO_DeInit+0x1f0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d031      	beq.n	800570a <HAL_GPIO_DeInit+0xce>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a61      	ldr	r2, [pc, #388]	; (8005830 <HAL_GPIO_DeInit+0x1f4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d02b      	beq.n	8005706 <HAL_GPIO_DeInit+0xca>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a60      	ldr	r2, [pc, #384]	; (8005834 <HAL_GPIO_DeInit+0x1f8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d025      	beq.n	8005702 <HAL_GPIO_DeInit+0xc6>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a5f      	ldr	r2, [pc, #380]	; (8005838 <HAL_GPIO_DeInit+0x1fc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d01f      	beq.n	80056fe <HAL_GPIO_DeInit+0xc2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a5e      	ldr	r2, [pc, #376]	; (800583c <HAL_GPIO_DeInit+0x200>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d019      	beq.n	80056fa <HAL_GPIO_DeInit+0xbe>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a5d      	ldr	r2, [pc, #372]	; (8005840 <HAL_GPIO_DeInit+0x204>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <HAL_GPIO_DeInit+0xba>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a5c      	ldr	r2, [pc, #368]	; (8005844 <HAL_GPIO_DeInit+0x208>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00d      	beq.n	80056f2 <HAL_GPIO_DeInit+0xb6>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a5b      	ldr	r2, [pc, #364]	; (8005848 <HAL_GPIO_DeInit+0x20c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <HAL_GPIO_DeInit+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a5a      	ldr	r2, [pc, #360]	; (800584c <HAL_GPIO_DeInit+0x210>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d101      	bne.n	80056ea <HAL_GPIO_DeInit+0xae>
 80056e6:	2309      	movs	r3, #9
 80056e8:	e012      	b.n	8005710 <HAL_GPIO_DeInit+0xd4>
 80056ea:	230a      	movs	r3, #10
 80056ec:	e010      	b.n	8005710 <HAL_GPIO_DeInit+0xd4>
 80056ee:	2308      	movs	r3, #8
 80056f0:	e00e      	b.n	8005710 <HAL_GPIO_DeInit+0xd4>
 80056f2:	2307      	movs	r3, #7
 80056f4:	e00c      	b.n	8005710 <HAL_GPIO_DeInit+0xd4>
 80056f6:	2306      	movs	r3, #6
 80056f8:	e00a      	b.n	8005710 <HAL_GPIO_DeInit+0xd4>
 80056fa:	2305      	movs	r3, #5
 80056fc:	e008      	b.n	8005710 <HAL_GPIO_DeInit+0xd4>
 80056fe:	2304      	movs	r3, #4
 8005700:	e006      	b.n	8005710 <HAL_GPIO_DeInit+0xd4>
 8005702:	2303      	movs	r3, #3
 8005704:	e004      	b.n	8005710 <HAL_GPIO_DeInit+0xd4>
 8005706:	2302      	movs	r3, #2
 8005708:	e002      	b.n	8005710 <HAL_GPIO_DeInit+0xd4>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <HAL_GPIO_DeInit+0xd4>
 800570e:	2300      	movs	r3, #0
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	f002 0203 	and.w	r2, r2, #3
 8005716:	0092      	lsls	r2, r2, #2
 8005718:	4093      	lsls	r3, r2
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	429a      	cmp	r2, r3
 800571e:	d132      	bne.n	8005786 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005720:	4b4b      	ldr	r3, [pc, #300]	; (8005850 <HAL_GPIO_DeInit+0x214>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	43db      	mvns	r3, r3
 8005728:	4949      	ldr	r1, [pc, #292]	; (8005850 <HAL_GPIO_DeInit+0x214>)
 800572a:	4013      	ands	r3, r2
 800572c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800572e:	4b48      	ldr	r3, [pc, #288]	; (8005850 <HAL_GPIO_DeInit+0x214>)
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	43db      	mvns	r3, r3
 8005736:	4946      	ldr	r1, [pc, #280]	; (8005850 <HAL_GPIO_DeInit+0x214>)
 8005738:	4013      	ands	r3, r2
 800573a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800573c:	4b44      	ldr	r3, [pc, #272]	; (8005850 <HAL_GPIO_DeInit+0x214>)
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	43db      	mvns	r3, r3
 8005744:	4942      	ldr	r1, [pc, #264]	; (8005850 <HAL_GPIO_DeInit+0x214>)
 8005746:	4013      	ands	r3, r2
 8005748:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800574a:	4b41      	ldr	r3, [pc, #260]	; (8005850 <HAL_GPIO_DeInit+0x214>)
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	43db      	mvns	r3, r3
 8005752:	493f      	ldr	r1, [pc, #252]	; (8005850 <HAL_GPIO_DeInit+0x214>)
 8005754:	4013      	ands	r3, r2
 8005756:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	220f      	movs	r2, #15
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005768:	4a2e      	ldr	r2, [pc, #184]	; (8005824 <HAL_GPIO_DeInit+0x1e8>)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	089b      	lsrs	r3, r3, #2
 800576e:	3302      	adds	r3, #2
 8005770:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	43da      	mvns	r2, r3
 8005778:	482a      	ldr	r0, [pc, #168]	; (8005824 <HAL_GPIO_DeInit+0x1e8>)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	089b      	lsrs	r3, r3, #2
 800577e:	400a      	ands	r2, r1
 8005780:	3302      	adds	r3, #2
 8005782:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	2103      	movs	r1, #3
 8005790:	fa01 f303 	lsl.w	r3, r1, r3
 8005794:	43db      	mvns	r3, r3
 8005796:	401a      	ands	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	08da      	lsrs	r2, r3, #3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3208      	adds	r2, #8
 80057a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	220f      	movs	r2, #15
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	08d2      	lsrs	r2, r2, #3
 80057bc:	4019      	ands	r1, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3208      	adds	r2, #8
 80057c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	2103      	movs	r1, #3
 80057d0:	fa01 f303 	lsl.w	r3, r1, r3
 80057d4:	43db      	mvns	r3, r3
 80057d6:	401a      	ands	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	2101      	movs	r1, #1
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	fa01 f303 	lsl.w	r3, r1, r3
 80057e8:	43db      	mvns	r3, r3
 80057ea:	401a      	ands	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	2103      	movs	r1, #3
 80057fa:	fa01 f303 	lsl.w	r3, r1, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	401a      	ands	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	3301      	adds	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b0f      	cmp	r3, #15
 8005810:	f67f af22 	bls.w	8005658 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40013800 	.word	0x40013800
 8005828:	40020000 	.word	0x40020000
 800582c:	40020400 	.word	0x40020400
 8005830:	40020800 	.word	0x40020800
 8005834:	40020c00 	.word	0x40020c00
 8005838:	40021000 	.word	0x40021000
 800583c:	40021400 	.word	0x40021400
 8005840:	40021800 	.word	0x40021800
 8005844:	40021c00 	.word	0x40021c00
 8005848:	40022000 	.word	0x40022000
 800584c:	40022400 	.word	0x40022400
 8005850:	40013c00 	.word	0x40013c00

08005854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	807b      	strh	r3, [r7, #2]
 8005860:	4613      	mov	r3, r2
 8005862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005864:	787b      	ldrb	r3, [r7, #1]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800586a:	887a      	ldrh	r2, [r7, #2]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005870:	e003      	b.n	800587a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005872:	887b      	ldrh	r3, [r7, #2]
 8005874:	041a      	lsls	r2, r3, #16
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	619a      	str	r2, [r3, #24]
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005886:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005888:	b08f      	sub	sp, #60	; 0x3c
 800588a:	af0a      	add	r7, sp, #40	; 0x28
 800588c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e054      	b.n	8005942 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f00b ff82 	bl	80117bc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2203      	movs	r2, #3
 80058bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f005 fdb4 	bl	800b444 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	603b      	str	r3, [r7, #0]
 80058e2:	687e      	ldr	r6, [r7, #4]
 80058e4:	466d      	mov	r5, sp
 80058e6:	f106 0410 	add.w	r4, r6, #16
 80058ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80058fa:	1d33      	adds	r3, r6, #4
 80058fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058fe:	6838      	ldr	r0, [r7, #0]
 8005900:	f005 fd2e 	bl	800b360 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2101      	movs	r1, #1
 800590a:	4618      	mov	r0, r3
 800590c:	f005 fdab 	bl	800b466 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	687e      	ldr	r6, [r7, #4]
 8005918:	466d      	mov	r5, sp
 800591a:	f106 0410 	add.w	r4, r6, #16
 800591e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800592a:	e885 0003 	stmia.w	r5, {r0, r1}
 800592e:	1d33      	adds	r3, r6, #4
 8005930:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005932:	6838      	ldr	r0, [r7, #0]
 8005934:	f005 ff34 	bl	800b7a0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800594a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800594a:	b590      	push	{r4, r7, lr}
 800594c:	b089      	sub	sp, #36	; 0x24
 800594e:	af04      	add	r7, sp, #16
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	461a      	mov	r2, r3
 8005958:	4603      	mov	r3, r0
 800595a:	70fb      	strb	r3, [r7, #3]
 800595c:	460b      	mov	r3, r1
 800595e:	70bb      	strb	r3, [r7, #2]
 8005960:	4613      	mov	r3, r2
 8005962:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_HCD_HC_Init+0x28>
 800596e:	2302      	movs	r3, #2
 8005970:	e076      	b.n	8005a60 <HAL_HCD_HC_Init+0x116>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	212c      	movs	r1, #44	; 0x2c
 8005980:	fb01 f303 	mul.w	r3, r1, r3
 8005984:	4413      	add	r3, r2
 8005986:	333d      	adds	r3, #61	; 0x3d
 8005988:	2200      	movs	r2, #0
 800598a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	212c      	movs	r1, #44	; 0x2c
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	4413      	add	r3, r2
 8005998:	3338      	adds	r3, #56	; 0x38
 800599a:	787a      	ldrb	r2, [r7, #1]
 800599c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	212c      	movs	r1, #44	; 0x2c
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	4413      	add	r3, r2
 80059aa:	3340      	adds	r3, #64	; 0x40
 80059ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80059ae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	212c      	movs	r1, #44	; 0x2c
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	4413      	add	r3, r2
 80059bc:	3339      	adds	r3, #57	; 0x39
 80059be:	78fa      	ldrb	r2, [r7, #3]
 80059c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	212c      	movs	r1, #44	; 0x2c
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	4413      	add	r3, r2
 80059ce:	333f      	adds	r3, #63	; 0x3f
 80059d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80059d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	78ba      	ldrb	r2, [r7, #2]
 80059da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059de:	b2d0      	uxtb	r0, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	212c      	movs	r1, #44	; 0x2c
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	4413      	add	r3, r2
 80059ea:	333a      	adds	r3, #58	; 0x3a
 80059ec:	4602      	mov	r2, r0
 80059ee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80059f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	da09      	bge.n	8005a0c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	212c      	movs	r1, #44	; 0x2c
 80059fe:	fb01 f303 	mul.w	r3, r1, r3
 8005a02:	4413      	add	r3, r2
 8005a04:	333b      	adds	r3, #59	; 0x3b
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	e008      	b.n	8005a1e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	212c      	movs	r1, #44	; 0x2c
 8005a12:	fb01 f303 	mul.w	r3, r1, r3
 8005a16:	4413      	add	r3, r2
 8005a18:	333b      	adds	r3, #59	; 0x3b
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	212c      	movs	r1, #44	; 0x2c
 8005a24:	fb01 f303 	mul.w	r3, r1, r3
 8005a28:	4413      	add	r3, r2
 8005a2a:	333c      	adds	r3, #60	; 0x3c
 8005a2c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005a30:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	787c      	ldrb	r4, [r7, #1]
 8005a38:	78ba      	ldrb	r2, [r7, #2]
 8005a3a:	78f9      	ldrb	r1, [r7, #3]
 8005a3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a3e:	9302      	str	r3, [sp, #8]
 8005a40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	f006 f82d 	bl	800baac <USB_HC_Init>
 8005a52:	4603      	mov	r3, r0
 8005a54:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd90      	pop	{r4, r7, pc}

08005a68 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_HCD_HC_Halt+0x1e>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e00f      	b.n	8005aa6 <HAL_HCD_HC_Halt+0x3e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	78fa      	ldrb	r2, [r7, #3]
 8005a94:	4611      	mov	r1, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f006 fa7d 	bl	800bf96 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	4608      	mov	r0, r1
 8005aba:	4611      	mov	r1, r2
 8005abc:	461a      	mov	r2, r3
 8005abe:	4603      	mov	r3, r0
 8005ac0:	70fb      	strb	r3, [r7, #3]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	70bb      	strb	r3, [r7, #2]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	212c      	movs	r1, #44	; 0x2c
 8005ad0:	fb01 f303 	mul.w	r3, r1, r3
 8005ad4:	4413      	add	r3, r2
 8005ad6:	333b      	adds	r3, #59	; 0x3b
 8005ad8:	78ba      	ldrb	r2, [r7, #2]
 8005ada:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	212c      	movs	r1, #44	; 0x2c
 8005ae2:	fb01 f303 	mul.w	r3, r1, r3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	333f      	adds	r3, #63	; 0x3f
 8005aea:	787a      	ldrb	r2, [r7, #1]
 8005aec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005aee:	7c3b      	ldrb	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d112      	bne.n	8005b1a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	212c      	movs	r1, #44	; 0x2c
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	4413      	add	r3, r2
 8005b00:	3342      	adds	r3, #66	; 0x42
 8005b02:	2203      	movs	r2, #3
 8005b04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	212c      	movs	r1, #44	; 0x2c
 8005b0c:	fb01 f303 	mul.w	r3, r1, r3
 8005b10:	4413      	add	r3, r2
 8005b12:	333d      	adds	r3, #61	; 0x3d
 8005b14:	7f3a      	ldrb	r2, [r7, #28]
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	e008      	b.n	8005b2c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	212c      	movs	r1, #44	; 0x2c
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	3342      	adds	r3, #66	; 0x42
 8005b28:	2202      	movs	r2, #2
 8005b2a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005b2c:	787b      	ldrb	r3, [r7, #1]
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	f200 80c6 	bhi.w	8005cc0 <HAL_HCD_HC_SubmitRequest+0x210>
 8005b34:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b4d 	.word	0x08005b4d
 8005b40:	08005cad 	.word	0x08005cad
 8005b44:	08005bb1 	.word	0x08005bb1
 8005b48:	08005c2f 	.word	0x08005c2f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005b4c:	7c3b      	ldrb	r3, [r7, #16]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	f040 80b8 	bne.w	8005cc4 <HAL_HCD_HC_SubmitRequest+0x214>
 8005b54:	78bb      	ldrb	r3, [r7, #2]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f040 80b4 	bne.w	8005cc4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005b5c:	8b3b      	ldrh	r3, [r7, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d108      	bne.n	8005b74 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	212c      	movs	r1, #44	; 0x2c
 8005b68:	fb01 f303 	mul.w	r3, r1, r3
 8005b6c:	4413      	add	r3, r2
 8005b6e:	3355      	adds	r3, #85	; 0x55
 8005b70:	2201      	movs	r2, #1
 8005b72:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	212c      	movs	r1, #44	; 0x2c
 8005b7a:	fb01 f303 	mul.w	r3, r1, r3
 8005b7e:	4413      	add	r3, r2
 8005b80:	3355      	adds	r3, #85	; 0x55
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d109      	bne.n	8005b9c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	212c      	movs	r1, #44	; 0x2c
 8005b8e:	fb01 f303 	mul.w	r3, r1, r3
 8005b92:	4413      	add	r3, r2
 8005b94:	3342      	adds	r3, #66	; 0x42
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005b9a:	e093      	b.n	8005cc4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	212c      	movs	r1, #44	; 0x2c
 8005ba2:	fb01 f303 	mul.w	r3, r1, r3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3342      	adds	r3, #66	; 0x42
 8005baa:	2202      	movs	r2, #2
 8005bac:	701a      	strb	r2, [r3, #0]
      break;
 8005bae:	e089      	b.n	8005cc4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005bb0:	78bb      	ldrb	r3, [r7, #2]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d11d      	bne.n	8005bf2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	212c      	movs	r1, #44	; 0x2c
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3355      	adds	r3, #85	; 0x55
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d109      	bne.n	8005bde <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	212c      	movs	r1, #44	; 0x2c
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	3342      	adds	r3, #66	; 0x42
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005bdc:	e073      	b.n	8005cc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	212c      	movs	r1, #44	; 0x2c
 8005be4:	fb01 f303 	mul.w	r3, r1, r3
 8005be8:	4413      	add	r3, r2
 8005bea:	3342      	adds	r3, #66	; 0x42
 8005bec:	2202      	movs	r2, #2
 8005bee:	701a      	strb	r2, [r3, #0]
      break;
 8005bf0:	e069      	b.n	8005cc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	212c      	movs	r1, #44	; 0x2c
 8005bf8:	fb01 f303 	mul.w	r3, r1, r3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	3354      	adds	r3, #84	; 0x54
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	212c      	movs	r1, #44	; 0x2c
 8005c0c:	fb01 f303 	mul.w	r3, r1, r3
 8005c10:	4413      	add	r3, r2
 8005c12:	3342      	adds	r3, #66	; 0x42
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
      break;
 8005c18:	e055      	b.n	8005cc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	212c      	movs	r1, #44	; 0x2c
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	4413      	add	r3, r2
 8005c26:	3342      	adds	r3, #66	; 0x42
 8005c28:	2202      	movs	r2, #2
 8005c2a:	701a      	strb	r2, [r3, #0]
      break;
 8005c2c:	e04b      	b.n	8005cc6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005c2e:	78bb      	ldrb	r3, [r7, #2]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d11d      	bne.n	8005c70 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	212c      	movs	r1, #44	; 0x2c
 8005c3a:	fb01 f303 	mul.w	r3, r1, r3
 8005c3e:	4413      	add	r3, r2
 8005c40:	3355      	adds	r3, #85	; 0x55
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	212c      	movs	r1, #44	; 0x2c
 8005c4e:	fb01 f303 	mul.w	r3, r1, r3
 8005c52:	4413      	add	r3, r2
 8005c54:	3342      	adds	r3, #66	; 0x42
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005c5a:	e034      	b.n	8005cc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	212c      	movs	r1, #44	; 0x2c
 8005c62:	fb01 f303 	mul.w	r3, r1, r3
 8005c66:	4413      	add	r3, r2
 8005c68:	3342      	adds	r3, #66	; 0x42
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	701a      	strb	r2, [r3, #0]
      break;
 8005c6e:	e02a      	b.n	8005cc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	212c      	movs	r1, #44	; 0x2c
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3354      	adds	r3, #84	; 0x54
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d109      	bne.n	8005c98 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	212c      	movs	r1, #44	; 0x2c
 8005c8a:	fb01 f303 	mul.w	r3, r1, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	3342      	adds	r3, #66	; 0x42
 8005c92:	2200      	movs	r2, #0
 8005c94:	701a      	strb	r2, [r3, #0]
      break;
 8005c96:	e016      	b.n	8005cc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	212c      	movs	r1, #44	; 0x2c
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3342      	adds	r3, #66	; 0x42
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	701a      	strb	r2, [r3, #0]
      break;
 8005caa:	e00c      	b.n	8005cc6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	212c      	movs	r1, #44	; 0x2c
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3342      	adds	r3, #66	; 0x42
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]
      break;
 8005cbe:	e002      	b.n	8005cc6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005cc0:	bf00      	nop
 8005cc2:	e000      	b.n	8005cc6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005cc4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	212c      	movs	r1, #44	; 0x2c
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3344      	adds	r3, #68	; 0x44
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	8b3a      	ldrh	r2, [r7, #24]
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	202c      	movs	r0, #44	; 0x2c
 8005ce0:	fb00 f303 	mul.w	r3, r0, r3
 8005ce4:	440b      	add	r3, r1
 8005ce6:	334c      	adds	r3, #76	; 0x4c
 8005ce8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	212c      	movs	r1, #44	; 0x2c
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3360      	adds	r3, #96	; 0x60
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	212c      	movs	r1, #44	; 0x2c
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	4413      	add	r3, r2
 8005d08:	3350      	adds	r3, #80	; 0x50
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	212c      	movs	r1, #44	; 0x2c
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	4413      	add	r3, r2
 8005d1a:	3339      	adds	r3, #57	; 0x39
 8005d1c:	78fa      	ldrb	r2, [r7, #3]
 8005d1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	212c      	movs	r1, #44	; 0x2c
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3361      	adds	r3, #97	; 0x61
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	78fb      	ldrb	r3, [r7, #3]
 8005d38:	222c      	movs	r2, #44	; 0x2c
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	3338      	adds	r3, #56	; 0x38
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	18d1      	adds	r1, r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f005 ffd0 	bl	800bcf0 <USB_HC_StartXfer>
 8005d50:	4603      	mov	r3, r0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop

08005d5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f005 fcd1 	bl	800b71a <USB_GetMode>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	f040 80f6 	bne.w	8005f6c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f005 fcb5 	bl	800b6f4 <USB_ReadInterrupts>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 80ec 	beq.w	8005f6a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f005 fcac 	bl	800b6f4 <USB_ReadInterrupts>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005da6:	d104      	bne.n	8005db2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005db0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f005 fc9c 	bl	800b6f4 <USB_ReadInterrupts>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc6:	d104      	bne.n	8005dd2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005dd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f005 fc8c 	bl	800b6f4 <USB_ReadInterrupts>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005de2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005de6:	d104      	bne.n	8005df2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005df0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f005 fc7c 	bl	800b6f4 <USB_ReadInterrupts>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d103      	bne.n	8005e0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f005 fc6e 	bl	800b6f4 <USB_ReadInterrupts>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e22:	d11c      	bne.n	8005e5e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005e2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10f      	bne.n	8005e5e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005e3e:	2110      	movs	r1, #16
 8005e40:	6938      	ldr	r0, [r7, #16]
 8005e42:	f005 fb5d 	bl	800b500 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005e46:	6938      	ldr	r0, [r7, #16]
 8005e48:	f005 fb8e 	bl	800b568 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2101      	movs	r1, #1
 8005e52:	4618      	mov	r0, r3
 8005e54:	f005 fd64 	bl	800b920 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f00b fd29 	bl	80118b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f005 fc46 	bl	800b6f4 <USB_ReadInterrupts>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e72:	d102      	bne.n	8005e7a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f001 f89e 	bl	8006fb6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f005 fc38 	bl	800b6f4 <USB_ReadInterrupts>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d106      	bne.n	8005e9c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f00b fcf2 	bl	8011878 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2208      	movs	r2, #8
 8005e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f005 fc27 	bl	800b6f4 <USB_ReadInterrupts>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d101      	bne.n	8005eb4 <HAL_HCD_IRQHandler+0x158>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <HAL_HCD_IRQHandler+0x15a>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d012      	beq.n	8005ee0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0210 	bic.w	r2, r2, #16
 8005ec8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 ffa1 	bl	8006e12 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0210 	orr.w	r2, r2, #16
 8005ede:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f005 fc05 	bl	800b6f4 <USB_ReadInterrupts>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ef4:	d13a      	bne.n	8005f6c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f006 f83a 	bl	800bf74 <USB_HC_ReadInterrupt>
 8005f00:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e025      	b.n	8005f54 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d018      	beq.n	8005f4e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f32:	d106      	bne.n	8005f42 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8ab 	bl	8006096 <HCD_HC_IN_IRQHandler>
 8005f40:	e005      	b.n	8005f4e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fbf9 	bl	8006740 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	3301      	adds	r3, #1
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d3d4      	bcc.n	8005f08 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f66:	615a      	str	r2, [r3, #20]
 8005f68:	e000      	b.n	8005f6c <HAL_HCD_IRQHandler+0x210>
      return;
 8005f6a:	bf00      	nop
    }
  }
}
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_HCD_Start+0x16>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e013      	b.n	8005fb0 <HAL_HCD_Start+0x3e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2101      	movs	r1, #1
 8005f96:	4618      	mov	r0, r3
 8005f98:	f005 fd26 	bl	800b9e8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f005 fa3e 	bl	800b422 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_HCD_Stop+0x16>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e00d      	b.n	8005fea <HAL_HCD_Stop+0x32>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f006 f914 	bl	800c208 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f005 fcc8 	bl	800b994 <USB_ResetPort>
 8006004:	4603      	mov	r3, r0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	212c      	movs	r1, #44	; 0x2c
 8006020:	fb01 f303 	mul.w	r3, r1, r3
 8006024:	4413      	add	r3, r2
 8006026:	3360      	adds	r3, #96	; 0x60
 8006028:	781b      	ldrb	r3, [r3, #0]
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	460b      	mov	r3, r1
 8006040:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	212c      	movs	r1, #44	; 0x2c
 8006048:	fb01 f303 	mul.w	r3, r1, r3
 800604c:	4413      	add	r3, r2
 800604e:	3350      	adds	r3, #80	; 0x50
 8006050:	681b      	ldr	r3, [r3, #0]
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f005 fd0c 	bl	800ba88 <USB_GetCurrentFrame>
 8006070:	4603      	mov	r3, r0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f005 fce7 	bl	800ba5a <USB_GetHostSpeed>
 800608c:	4603      	mov	r3, r0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d11a      	bne.n	80060fc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d2:	461a      	mov	r2, r3
 80060d4:	2304      	movs	r3, #4
 80060d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	212c      	movs	r1, #44	; 0x2c
 80060de:	fb01 f303 	mul.w	r3, r1, r3
 80060e2:	4413      	add	r3, r2
 80060e4:	3361      	adds	r3, #97	; 0x61
 80060e6:	2206      	movs	r2, #6
 80060e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f005 ff4e 	bl	800bf96 <USB_HC_Halt>
 80060fa:	e0af      	b.n	800625c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4413      	add	r3, r2
 8006104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006112:	d11b      	bne.n	800614c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006120:	461a      	mov	r2, r3
 8006122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006126:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	212c      	movs	r1, #44	; 0x2c
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	4413      	add	r3, r2
 8006134:	3361      	adds	r3, #97	; 0x61
 8006136:	2207      	movs	r2, #7
 8006138:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	4611      	mov	r1, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f005 ff26 	bl	800bf96 <USB_HC_Halt>
 800614a:	e087      	b.n	800625c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b20      	cmp	r3, #32
 8006160:	d109      	bne.n	8006176 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4413      	add	r3, r2
 800616a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616e:	461a      	mov	r2, r3
 8006170:	2320      	movs	r3, #32
 8006172:	6093      	str	r3, [r2, #8]
 8006174:	e072      	b.n	800625c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b08      	cmp	r3, #8
 800618a:	d11a      	bne.n	80061c2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006198:	461a      	mov	r2, r3
 800619a:	2308      	movs	r3, #8
 800619c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	212c      	movs	r1, #44	; 0x2c
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	4413      	add	r3, r2
 80061aa:	3361      	adds	r3, #97	; 0x61
 80061ac:	2205      	movs	r2, #5
 80061ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	4611      	mov	r1, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f005 feeb 	bl	800bf96 <USB_HC_Halt>
 80061c0:	e04c      	b.n	800625c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d8:	d11b      	bne.n	8006212 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	461a      	mov	r2, r3
 80061e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	212c      	movs	r1, #44	; 0x2c
 80061f4:	fb01 f303 	mul.w	r3, r1, r3
 80061f8:	4413      	add	r3, r2
 80061fa:	3361      	adds	r3, #97	; 0x61
 80061fc:	2208      	movs	r2, #8
 80061fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f005 fec3 	bl	800bf96 <USB_HC_Halt>
 8006210:	e024      	b.n	800625c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	4413      	add	r3, r2
 800621a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006224:	2b80      	cmp	r3, #128	; 0x80
 8006226:	d119      	bne.n	800625c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006234:	461a      	mov	r2, r3
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	212c      	movs	r1, #44	; 0x2c
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	4413      	add	r3, r2
 8006246:	3361      	adds	r3, #97	; 0x61
 8006248:	2206      	movs	r2, #6
 800624a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	4611      	mov	r1, r2
 8006256:	4618      	mov	r0, r3
 8006258:	f005 fe9d 	bl	800bf96 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800626e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006272:	d112      	bne.n	800629a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	4611      	mov	r1, r2
 800627e:	4618      	mov	r0, r3
 8006280:	f005 fe89 	bl	800bf96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4413      	add	r3, r2
 800628c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006290:	461a      	mov	r2, r3
 8006292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006296:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006298:	e24e      	b.n	8006738 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	f040 80df 	bne.w	8006470 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d019      	beq.n	80062ee <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	212c      	movs	r1, #44	; 0x2c
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	4413      	add	r3, r2
 80062c6:	3348      	adds	r3, #72	; 0x48
 80062c8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	0159      	lsls	r1, r3, #5
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	440b      	add	r3, r1
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80062dc:	1ad2      	subs	r2, r2, r3
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	202c      	movs	r0, #44	; 0x2c
 80062e4:	fb00 f303 	mul.w	r3, r0, r3
 80062e8:	440b      	add	r3, r1
 80062ea:	3350      	adds	r3, #80	; 0x50
 80062ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	212c      	movs	r1, #44	; 0x2c
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	4413      	add	r3, r2
 80062fa:	3361      	adds	r3, #97	; 0x61
 80062fc:	2201      	movs	r2, #1
 80062fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	212c      	movs	r1, #44	; 0x2c
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	4413      	add	r3, r2
 800630c:	335c      	adds	r3, #92	; 0x5c
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	461a      	mov	r2, r3
 8006320:	2301      	movs	r3, #1
 8006322:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	212c      	movs	r1, #44	; 0x2c
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	4413      	add	r3, r2
 8006330:	333f      	adds	r3, #63	; 0x3f
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d009      	beq.n	800634c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	212c      	movs	r1, #44	; 0x2c
 800633e:	fb01 f303 	mul.w	r3, r1, r3
 8006342:	4413      	add	r3, r2
 8006344:	333f      	adds	r3, #63	; 0x3f
 8006346:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006348:	2b02      	cmp	r3, #2
 800634a:	d111      	bne.n	8006370 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	4611      	mov	r1, r2
 8006356:	4618      	mov	r0, r3
 8006358:	f005 fe1d 	bl	800bf96 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006368:	461a      	mov	r2, r3
 800636a:	2310      	movs	r3, #16
 800636c:	6093      	str	r3, [r2, #8]
 800636e:	e03a      	b.n	80063e6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	212c      	movs	r1, #44	; 0x2c
 8006376:	fb01 f303 	mul.w	r3, r1, r3
 800637a:	4413      	add	r3, r2
 800637c:	333f      	adds	r3, #63	; 0x3f
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d009      	beq.n	8006398 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	212c      	movs	r1, #44	; 0x2c
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	4413      	add	r3, r2
 8006390:	333f      	adds	r3, #63	; 0x3f
 8006392:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006394:	2b01      	cmp	r3, #1
 8006396:	d126      	bne.n	80063e6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063b6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	212c      	movs	r1, #44	; 0x2c
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	3360      	adds	r3, #96	; 0x60
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	b2d9      	uxtb	r1, r3
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	202c      	movs	r0, #44	; 0x2c
 80063d4:	fb00 f303 	mul.w	r3, r0, r3
 80063d8:	4413      	add	r3, r2
 80063da:	3360      	adds	r3, #96	; 0x60
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f00b fa73 	bl	80118cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d12b      	bne.n	8006446 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	212c      	movs	r1, #44	; 0x2c
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	4413      	add	r3, r2
 80063fa:	3348      	adds	r3, #72	; 0x48
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	202c      	movs	r0, #44	; 0x2c
 8006404:	fb00 f202 	mul.w	r2, r0, r2
 8006408:	440a      	add	r2, r1
 800640a:	3240      	adds	r2, #64	; 0x40
 800640c:	8812      	ldrh	r2, [r2, #0]
 800640e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 818e 	beq.w	8006738 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	212c      	movs	r1, #44	; 0x2c
 8006422:	fb01 f303 	mul.w	r3, r1, r3
 8006426:	4413      	add	r3, r2
 8006428:	3354      	adds	r3, #84	; 0x54
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	f083 0301 	eor.w	r3, r3, #1
 8006430:	b2d8      	uxtb	r0, r3
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	212c      	movs	r1, #44	; 0x2c
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	4413      	add	r3, r2
 800643e:	3354      	adds	r3, #84	; 0x54
 8006440:	4602      	mov	r2, r0
 8006442:	701a      	strb	r2, [r3, #0]
}
 8006444:	e178      	b.n	8006738 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	212c      	movs	r1, #44	; 0x2c
 800644c:	fb01 f303 	mul.w	r3, r1, r3
 8006450:	4413      	add	r3, r2
 8006452:	3354      	adds	r3, #84	; 0x54
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	f083 0301 	eor.w	r3, r3, #1
 800645a:	b2d8      	uxtb	r0, r3
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	212c      	movs	r1, #44	; 0x2c
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	4413      	add	r3, r2
 8006468:	3354      	adds	r3, #84	; 0x54
 800646a:	4602      	mov	r2, r0
 800646c:	701a      	strb	r2, [r3, #0]
}
 800646e:	e163      	b.n	8006738 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b02      	cmp	r3, #2
 8006484:	f040 80f6 	bne.w	8006674 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	212c      	movs	r1, #44	; 0x2c
 800648e:	fb01 f303 	mul.w	r3, r1, r3
 8006492:	4413      	add	r3, r2
 8006494:	3361      	adds	r3, #97	; 0x61
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d109      	bne.n	80064b0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	212c      	movs	r1, #44	; 0x2c
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	4413      	add	r3, r2
 80064a8:	3360      	adds	r3, #96	; 0x60
 80064aa:	2201      	movs	r2, #1
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	e0c9      	b.n	8006644 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	212c      	movs	r1, #44	; 0x2c
 80064b6:	fb01 f303 	mul.w	r3, r1, r3
 80064ba:	4413      	add	r3, r2
 80064bc:	3361      	adds	r3, #97	; 0x61
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	d109      	bne.n	80064d8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	212c      	movs	r1, #44	; 0x2c
 80064ca:	fb01 f303 	mul.w	r3, r1, r3
 80064ce:	4413      	add	r3, r2
 80064d0:	3360      	adds	r3, #96	; 0x60
 80064d2:	2205      	movs	r2, #5
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	e0b5      	b.n	8006644 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	212c      	movs	r1, #44	; 0x2c
 80064de:	fb01 f303 	mul.w	r3, r1, r3
 80064e2:	4413      	add	r3, r2
 80064e4:	3361      	adds	r3, #97	; 0x61
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b06      	cmp	r3, #6
 80064ea:	d009      	beq.n	8006500 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	212c      	movs	r1, #44	; 0x2c
 80064f2:	fb01 f303 	mul.w	r3, r1, r3
 80064f6:	4413      	add	r3, r2
 80064f8:	3361      	adds	r3, #97	; 0x61
 80064fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d150      	bne.n	80065a2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	212c      	movs	r1, #44	; 0x2c
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	335c      	adds	r3, #92	; 0x5c
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	202c      	movs	r0, #44	; 0x2c
 8006518:	fb00 f303 	mul.w	r3, r0, r3
 800651c:	440b      	add	r3, r1
 800651e:	335c      	adds	r3, #92	; 0x5c
 8006520:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	212c      	movs	r1, #44	; 0x2c
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	4413      	add	r3, r2
 800652e:	335c      	adds	r3, #92	; 0x5c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d912      	bls.n	800655c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	212c      	movs	r1, #44	; 0x2c
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	4413      	add	r3, r2
 8006542:	335c      	adds	r3, #92	; 0x5c
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	212c      	movs	r1, #44	; 0x2c
 800654e:	fb01 f303 	mul.w	r3, r1, r3
 8006552:	4413      	add	r3, r2
 8006554:	3360      	adds	r3, #96	; 0x60
 8006556:	2204      	movs	r2, #4
 8006558:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800655a:	e073      	b.n	8006644 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	212c      	movs	r1, #44	; 0x2c
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	4413      	add	r3, r2
 8006568:	3360      	adds	r3, #96	; 0x60
 800656a:	2202      	movs	r2, #2
 800656c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006584:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800658c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	461a      	mov	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80065a0:	e050      	b.n	8006644 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	212c      	movs	r1, #44	; 0x2c
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	4413      	add	r3, r2
 80065ae:	3361      	adds	r3, #97	; 0x61
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d122      	bne.n	80065fc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	212c      	movs	r1, #44	; 0x2c
 80065bc:	fb01 f303 	mul.w	r3, r1, r3
 80065c0:	4413      	add	r3, r2
 80065c2:	3360      	adds	r3, #96	; 0x60
 80065c4:	2202      	movs	r2, #2
 80065c6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065de:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065e6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f4:	461a      	mov	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	e023      	b.n	8006644 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	212c      	movs	r1, #44	; 0x2c
 8006602:	fb01 f303 	mul.w	r3, r1, r3
 8006606:	4413      	add	r3, r2
 8006608:	3361      	adds	r3, #97	; 0x61
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b07      	cmp	r3, #7
 800660e:	d119      	bne.n	8006644 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	212c      	movs	r1, #44	; 0x2c
 8006616:	fb01 f303 	mul.w	r3, r1, r3
 800661a:	4413      	add	r3, r2
 800661c:	335c      	adds	r3, #92	; 0x5c
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	202c      	movs	r0, #44	; 0x2c
 8006628:	fb00 f303 	mul.w	r3, r0, r3
 800662c:	440b      	add	r3, r1
 800662e:	335c      	adds	r3, #92	; 0x5c
 8006630:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	212c      	movs	r1, #44	; 0x2c
 8006638:	fb01 f303 	mul.w	r3, r1, r3
 800663c:	4413      	add	r3, r2
 800663e:	3360      	adds	r3, #96	; 0x60
 8006640:	2204      	movs	r2, #4
 8006642:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006650:	461a      	mov	r2, r3
 8006652:	2302      	movs	r3, #2
 8006654:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	b2d9      	uxtb	r1, r3
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	202c      	movs	r0, #44	; 0x2c
 8006660:	fb00 f303 	mul.w	r3, r0, r3
 8006664:	4413      	add	r3, r2
 8006666:	3360      	adds	r3, #96	; 0x60
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f00b f92d 	bl	80118cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006672:	e061      	b.n	8006738 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4413      	add	r3, r2
 800667c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	2b10      	cmp	r3, #16
 8006688:	d156      	bne.n	8006738 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	212c      	movs	r1, #44	; 0x2c
 8006690:	fb01 f303 	mul.w	r3, r1, r3
 8006694:	4413      	add	r3, r2
 8006696:	333f      	adds	r3, #63	; 0x3f
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b03      	cmp	r3, #3
 800669c:	d111      	bne.n	80066c2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	212c      	movs	r1, #44	; 0x2c
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	4413      	add	r3, r2
 80066aa:	335c      	adds	r3, #92	; 0x5c
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	4611      	mov	r1, r2
 80066ba:	4618      	mov	r0, r3
 80066bc:	f005 fc6b 	bl	800bf96 <USB_HC_Halt>
 80066c0:	e031      	b.n	8006726 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	212c      	movs	r1, #44	; 0x2c
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	4413      	add	r3, r2
 80066ce:	333f      	adds	r3, #63	; 0x3f
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d009      	beq.n	80066ea <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	212c      	movs	r1, #44	; 0x2c
 80066dc:	fb01 f303 	mul.w	r3, r1, r3
 80066e0:	4413      	add	r3, r2
 80066e2:	333f      	adds	r3, #63	; 0x3f
 80066e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d11d      	bne.n	8006726 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	212c      	movs	r1, #44	; 0x2c
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	4413      	add	r3, r2
 80066f6:	335c      	adds	r3, #92	; 0x5c
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d110      	bne.n	8006726 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	212c      	movs	r1, #44	; 0x2c
 800670a:	fb01 f303 	mul.w	r3, r1, r3
 800670e:	4413      	add	r3, r2
 8006710:	3361      	adds	r3, #97	; 0x61
 8006712:	2203      	movs	r2, #3
 8006714:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	4611      	mov	r1, r2
 8006720:	4618      	mov	r0, r3
 8006722:	f005 fc38 	bl	800bf96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	461a      	mov	r2, r3
 8006734:	2310      	movs	r3, #16
 8006736:	6093      	str	r3, [r2, #8]
}
 8006738:	bf00      	nop
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b04      	cmp	r3, #4
 800676e:	d11a      	bne.n	80067a6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	4413      	add	r3, r2
 8006778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677c:	461a      	mov	r2, r3
 800677e:	2304      	movs	r3, #4
 8006780:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	212c      	movs	r1, #44	; 0x2c
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	4413      	add	r3, r2
 800678e:	3361      	adds	r3, #97	; 0x61
 8006790:	2206      	movs	r2, #6
 8006792:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	4611      	mov	r1, r2
 800679e:	4618      	mov	r0, r3
 80067a0:	f005 fbf9 	bl	800bf96 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80067a4:	e331      	b.n	8006e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	d12e      	bne.n	800681a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c8:	461a      	mov	r2, r3
 80067ca:	2320      	movs	r3, #32
 80067cc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	212c      	movs	r1, #44	; 0x2c
 80067d4:	fb01 f303 	mul.w	r3, r1, r3
 80067d8:	4413      	add	r3, r2
 80067da:	333d      	adds	r3, #61	; 0x3d
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	f040 8313 	bne.w	8006e0a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	212c      	movs	r1, #44	; 0x2c
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	4413      	add	r3, r2
 80067f0:	333d      	adds	r3, #61	; 0x3d
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	212c      	movs	r1, #44	; 0x2c
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	4413      	add	r3, r2
 8006802:	3360      	adds	r3, #96	; 0x60
 8006804:	2202      	movs	r2, #2
 8006806:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	4611      	mov	r1, r2
 8006812:	4618      	mov	r0, r3
 8006814:	f005 fbbf 	bl	800bf96 <USB_HC_Halt>
}
 8006818:	e2f7      	b.n	8006e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	4413      	add	r3, r2
 8006822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800682c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006830:	d112      	bne.n	8006858 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683e:	461a      	mov	r2, r3
 8006840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006844:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	4611      	mov	r1, r2
 8006850:	4618      	mov	r0, r3
 8006852:	f005 fba0 	bl	800bf96 <USB_HC_Halt>
}
 8006856:	e2d8      	b.n	8006e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	4413      	add	r3, r2
 8006860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b01      	cmp	r3, #1
 800686c:	d140      	bne.n	80068f0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	212c      	movs	r1, #44	; 0x2c
 8006874:	fb01 f303 	mul.w	r3, r1, r3
 8006878:	4413      	add	r3, r2
 800687a:	335c      	adds	r3, #92	; 0x5c
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	4413      	add	r3, r2
 8006888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d111      	bne.n	80068ba <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	212c      	movs	r1, #44	; 0x2c
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	333d      	adds	r3, #61	; 0x3d
 80068a4:	2201      	movs	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b4:	461a      	mov	r2, r3
 80068b6:	2340      	movs	r3, #64	; 0x40
 80068b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c6:	461a      	mov	r2, r3
 80068c8:	2301      	movs	r3, #1
 80068ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	212c      	movs	r1, #44	; 0x2c
 80068d2:	fb01 f303 	mul.w	r3, r1, r3
 80068d6:	4413      	add	r3, r2
 80068d8:	3361      	adds	r3, #97	; 0x61
 80068da:	2201      	movs	r2, #1
 80068dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	4611      	mov	r1, r2
 80068e8:	4618      	mov	r0, r3
 80068ea:	f005 fb54 	bl	800bf96 <USB_HC_Halt>
}
 80068ee:	e28c      	b.n	8006e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006902:	2b40      	cmp	r3, #64	; 0x40
 8006904:	d12c      	bne.n	8006960 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	212c      	movs	r1, #44	; 0x2c
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	4413      	add	r3, r2
 8006912:	3361      	adds	r3, #97	; 0x61
 8006914:	2204      	movs	r2, #4
 8006916:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	212c      	movs	r1, #44	; 0x2c
 800691e:	fb01 f303 	mul.w	r3, r1, r3
 8006922:	4413      	add	r3, r2
 8006924:	333d      	adds	r3, #61	; 0x3d
 8006926:	2201      	movs	r2, #1
 8006928:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	212c      	movs	r1, #44	; 0x2c
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	4413      	add	r3, r2
 8006936:	335c      	adds	r3, #92	; 0x5c
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f005 fb25 	bl	800bf96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	4413      	add	r3, r2
 8006954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006958:	461a      	mov	r2, r3
 800695a:	2340      	movs	r3, #64	; 0x40
 800695c:	6093      	str	r3, [r2, #8]
}
 800695e:	e254      	b.n	8006e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	4413      	add	r3, r2
 8006968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b08      	cmp	r3, #8
 8006974:	d11a      	bne.n	80069ac <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	461a      	mov	r2, r3
 8006984:	2308      	movs	r3, #8
 8006986:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	212c      	movs	r1, #44	; 0x2c
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	4413      	add	r3, r2
 8006994:	3361      	adds	r3, #97	; 0x61
 8006996:	2205      	movs	r2, #5
 8006998:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	4611      	mov	r1, r2
 80069a4:	4618      	mov	r0, r3
 80069a6:	f005 faf6 	bl	800bf96 <USB_HC_Halt>
}
 80069aa:	e22e      	b.n	8006e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	2b10      	cmp	r3, #16
 80069c0:	d140      	bne.n	8006a44 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	212c      	movs	r1, #44	; 0x2c
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	4413      	add	r3, r2
 80069ce:	335c      	adds	r3, #92	; 0x5c
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	212c      	movs	r1, #44	; 0x2c
 80069da:	fb01 f303 	mul.w	r3, r1, r3
 80069de:	4413      	add	r3, r2
 80069e0:	3361      	adds	r3, #97	; 0x61
 80069e2:	2203      	movs	r2, #3
 80069e4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	212c      	movs	r1, #44	; 0x2c
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	333d      	adds	r3, #61	; 0x3d
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d112      	bne.n	8006a20 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	212c      	movs	r1, #44	; 0x2c
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	333c      	adds	r3, #60	; 0x3c
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d108      	bne.n	8006a20 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	212c      	movs	r1, #44	; 0x2c
 8006a14:	fb01 f303 	mul.w	r3, r1, r3
 8006a18:	4413      	add	r3, r2
 8006a1a:	333d      	adds	r3, #61	; 0x3d
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	4611      	mov	r1, r2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f005 fab3 	bl	800bf96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	2310      	movs	r3, #16
 8006a40:	6093      	str	r3, [r2, #8]
}
 8006a42:	e1e2      	b.n	8006e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a56:	2b80      	cmp	r3, #128	; 0x80
 8006a58:	d164      	bne.n	8006b24 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d111      	bne.n	8006a86 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	212c      	movs	r1, #44	; 0x2c
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	3361      	adds	r3, #97	; 0x61
 8006a70:	2206      	movs	r2, #6
 8006a72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f005 fa89 	bl	800bf96 <USB_HC_Halt>
 8006a84:	e044      	b.n	8006b10 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	212c      	movs	r1, #44	; 0x2c
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	335c      	adds	r3, #92	; 0x5c
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	202c      	movs	r0, #44	; 0x2c
 8006a9e:	fb00 f303 	mul.w	r3, r0, r3
 8006aa2:	440b      	add	r3, r1
 8006aa4:	335c      	adds	r3, #92	; 0x5c
 8006aa6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	212c      	movs	r1, #44	; 0x2c
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	335c      	adds	r3, #92	; 0x5c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d920      	bls.n	8006afe <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	212c      	movs	r1, #44	; 0x2c
 8006ac2:	fb01 f303 	mul.w	r3, r1, r3
 8006ac6:	4413      	add	r3, r2
 8006ac8:	335c      	adds	r3, #92	; 0x5c
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	212c      	movs	r1, #44	; 0x2c
 8006ad4:	fb01 f303 	mul.w	r3, r1, r3
 8006ad8:	4413      	add	r3, r2
 8006ada:	3360      	adds	r3, #96	; 0x60
 8006adc:	2204      	movs	r2, #4
 8006ade:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	b2d9      	uxtb	r1, r3
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	202c      	movs	r0, #44	; 0x2c
 8006aea:	fb00 f303 	mul.w	r3, r0, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	3360      	adds	r3, #96	; 0x60
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f00a fee8 	bl	80118cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8006afc:	e008      	b.n	8006b10 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	212c      	movs	r1, #44	; 0x2c
 8006b04:	fb01 f303 	mul.w	r3, r1, r3
 8006b08:	4413      	add	r3, r2
 8006b0a:	3360      	adds	r3, #96	; 0x60
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	2380      	movs	r3, #128	; 0x80
 8006b20:	6093      	str	r3, [r2, #8]
}
 8006b22:	e172      	b.n	8006e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b3a:	d11b      	bne.n	8006b74 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	212c      	movs	r1, #44	; 0x2c
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	4413      	add	r3, r2
 8006b48:	3361      	adds	r3, #97	; 0x61
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	4611      	mov	r1, r2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f005 fa1c 	bl	800bf96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b70:	6093      	str	r3, [r2, #8]
}
 8006b72:	e14a      	b.n	8006e0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	f040 813f 	bne.w	8006e0a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	212c      	movs	r1, #44	; 0x2c
 8006b92:	fb01 f303 	mul.w	r3, r1, r3
 8006b96:	4413      	add	r3, r2
 8006b98:	3361      	adds	r3, #97	; 0x61
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d17d      	bne.n	8006c9c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	212c      	movs	r1, #44	; 0x2c
 8006ba6:	fb01 f303 	mul.w	r3, r1, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	3360      	adds	r3, #96	; 0x60
 8006bae:	2201      	movs	r2, #1
 8006bb0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	212c      	movs	r1, #44	; 0x2c
 8006bb8:	fb01 f303 	mul.w	r3, r1, r3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	333f      	adds	r3, #63	; 0x3f
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d00a      	beq.n	8006bdc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	212c      	movs	r1, #44	; 0x2c
 8006bcc:	fb01 f303 	mul.w	r3, r1, r3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	333f      	adds	r3, #63	; 0x3f
 8006bd4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	f040 8100 	bne.w	8006ddc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d113      	bne.n	8006c0c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	212c      	movs	r1, #44	; 0x2c
 8006bea:	fb01 f303 	mul.w	r3, r1, r3
 8006bee:	4413      	add	r3, r2
 8006bf0:	3355      	adds	r3, #85	; 0x55
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	f083 0301 	eor.w	r3, r3, #1
 8006bf8:	b2d8      	uxtb	r0, r3
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	212c      	movs	r1, #44	; 0x2c
 8006c00:	fb01 f303 	mul.w	r3, r1, r3
 8006c04:	4413      	add	r3, r2
 8006c06:	3355      	adds	r3, #85	; 0x55
 8006c08:	4602      	mov	r2, r0
 8006c0a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	f040 80e3 	bne.w	8006ddc <HCD_HC_OUT_IRQHandler+0x69c>
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	212c      	movs	r1, #44	; 0x2c
 8006c1c:	fb01 f303 	mul.w	r3, r1, r3
 8006c20:	4413      	add	r3, r2
 8006c22:	334c      	adds	r3, #76	; 0x4c
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 80d8 	beq.w	8006ddc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	212c      	movs	r1, #44	; 0x2c
 8006c32:	fb01 f303 	mul.w	r3, r1, r3
 8006c36:	4413      	add	r3, r2
 8006c38:	334c      	adds	r3, #76	; 0x4c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	202c      	movs	r0, #44	; 0x2c
 8006c42:	fb00 f202 	mul.w	r2, r0, r2
 8006c46:	440a      	add	r2, r1
 8006c48:	3240      	adds	r2, #64	; 0x40
 8006c4a:	8812      	ldrh	r2, [r2, #0]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	202c      	movs	r0, #44	; 0x2c
 8006c56:	fb00 f202 	mul.w	r2, r0, r2
 8006c5a:	440a      	add	r2, r1
 8006c5c:	3240      	adds	r2, #64	; 0x40
 8006c5e:	8812      	ldrh	r2, [r2, #0]
 8006c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 80b5 	beq.w	8006ddc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	212c      	movs	r1, #44	; 0x2c
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	4413      	add	r3, r2
 8006c7e:	3355      	adds	r3, #85	; 0x55
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	f083 0301 	eor.w	r3, r3, #1
 8006c86:	b2d8      	uxtb	r0, r3
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	212c      	movs	r1, #44	; 0x2c
 8006c8e:	fb01 f303 	mul.w	r3, r1, r3
 8006c92:	4413      	add	r3, r2
 8006c94:	3355      	adds	r3, #85	; 0x55
 8006c96:	4602      	mov	r2, r0
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	e09f      	b.n	8006ddc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	212c      	movs	r1, #44	; 0x2c
 8006ca2:	fb01 f303 	mul.w	r3, r1, r3
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3361      	adds	r3, #97	; 0x61
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d109      	bne.n	8006cc4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	212c      	movs	r1, #44	; 0x2c
 8006cb6:	fb01 f303 	mul.w	r3, r1, r3
 8006cba:	4413      	add	r3, r2
 8006cbc:	3360      	adds	r3, #96	; 0x60
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	e08b      	b.n	8006ddc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	212c      	movs	r1, #44	; 0x2c
 8006cca:	fb01 f303 	mul.w	r3, r1, r3
 8006cce:	4413      	add	r3, r2
 8006cd0:	3361      	adds	r3, #97	; 0x61
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d109      	bne.n	8006cec <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	212c      	movs	r1, #44	; 0x2c
 8006cde:	fb01 f303 	mul.w	r3, r1, r3
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3360      	adds	r3, #96	; 0x60
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	e077      	b.n	8006ddc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	212c      	movs	r1, #44	; 0x2c
 8006cf2:	fb01 f303 	mul.w	r3, r1, r3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	3361      	adds	r3, #97	; 0x61
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b05      	cmp	r3, #5
 8006cfe:	d109      	bne.n	8006d14 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	212c      	movs	r1, #44	; 0x2c
 8006d06:	fb01 f303 	mul.w	r3, r1, r3
 8006d0a:	4413      	add	r3, r2
 8006d0c:	3360      	adds	r3, #96	; 0x60
 8006d0e:	2205      	movs	r2, #5
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	e063      	b.n	8006ddc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	212c      	movs	r1, #44	; 0x2c
 8006d1a:	fb01 f303 	mul.w	r3, r1, r3
 8006d1e:	4413      	add	r3, r2
 8006d20:	3361      	adds	r3, #97	; 0x61
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b06      	cmp	r3, #6
 8006d26:	d009      	beq.n	8006d3c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	212c      	movs	r1, #44	; 0x2c
 8006d2e:	fb01 f303 	mul.w	r3, r1, r3
 8006d32:	4413      	add	r3, r2
 8006d34:	3361      	adds	r3, #97	; 0x61
 8006d36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d14f      	bne.n	8006ddc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	212c      	movs	r1, #44	; 0x2c
 8006d42:	fb01 f303 	mul.w	r3, r1, r3
 8006d46:	4413      	add	r3, r2
 8006d48:	335c      	adds	r3, #92	; 0x5c
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	202c      	movs	r0, #44	; 0x2c
 8006d54:	fb00 f303 	mul.w	r3, r0, r3
 8006d58:	440b      	add	r3, r1
 8006d5a:	335c      	adds	r3, #92	; 0x5c
 8006d5c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	212c      	movs	r1, #44	; 0x2c
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	335c      	adds	r3, #92	; 0x5c
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d912      	bls.n	8006d98 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	212c      	movs	r1, #44	; 0x2c
 8006d78:	fb01 f303 	mul.w	r3, r1, r3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	335c      	adds	r3, #92	; 0x5c
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	212c      	movs	r1, #44	; 0x2c
 8006d8a:	fb01 f303 	mul.w	r3, r1, r3
 8006d8e:	4413      	add	r3, r2
 8006d90:	3360      	adds	r3, #96	; 0x60
 8006d92:	2204      	movs	r2, #4
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	e021      	b.n	8006ddc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	212c      	movs	r1, #44	; 0x2c
 8006d9e:	fb01 f303 	mul.w	r3, r1, r3
 8006da2:	4413      	add	r3, r2
 8006da4:	3360      	adds	r3, #96	; 0x60
 8006da6:	2202      	movs	r2, #2
 8006da8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dc0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dc8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de8:	461a      	mov	r2, r3
 8006dea:	2302      	movs	r3, #2
 8006dec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	b2d9      	uxtb	r1, r3
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	202c      	movs	r0, #44	; 0x2c
 8006df8:	fb00 f303 	mul.w	r3, r0, r3
 8006dfc:	4413      	add	r3, r2
 8006dfe:	3360      	adds	r3, #96	; 0x60
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f00a fd61 	bl	80118cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006e0a:	bf00      	nop
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b08a      	sub	sp, #40	; 0x28
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	0c5b      	lsrs	r3, r3, #17
 8006e38:	f003 030f 	and.w	r3, r3, #15
 8006e3c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	091b      	lsrs	r3, r3, #4
 8006e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e46:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d004      	beq.n	8006e58 <HCD_RXQLVL_IRQHandler+0x46>
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b05      	cmp	r3, #5
 8006e52:	f000 80a9 	beq.w	8006fa8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006e56:	e0aa      	b.n	8006fae <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80a6 	beq.w	8006fac <HCD_RXQLVL_IRQHandler+0x19a>
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	212c      	movs	r1, #44	; 0x2c
 8006e66:	fb01 f303 	mul.w	r3, r1, r3
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3344      	adds	r3, #68	; 0x44
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 809b 	beq.w	8006fac <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	212c      	movs	r1, #44	; 0x2c
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	4413      	add	r3, r2
 8006e82:	3350      	adds	r3, #80	; 0x50
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	441a      	add	r2, r3
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	202c      	movs	r0, #44	; 0x2c
 8006e90:	fb00 f303 	mul.w	r3, r0, r3
 8006e94:	440b      	add	r3, r1
 8006e96:	334c      	adds	r3, #76	; 0x4c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d87a      	bhi.n	8006f94 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	212c      	movs	r1, #44	; 0x2c
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	4413      	add	r3, r2
 8006eae:	3344      	adds	r3, #68	; 0x44
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	b292      	uxth	r2, r2
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	f004 fbc4 	bl	800b644 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	212c      	movs	r1, #44	; 0x2c
 8006ec2:	fb01 f303 	mul.w	r3, r1, r3
 8006ec6:	4413      	add	r3, r2
 8006ec8:	3344      	adds	r3, #68	; 0x44
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	441a      	add	r2, r3
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	202c      	movs	r0, #44	; 0x2c
 8006ed6:	fb00 f303 	mul.w	r3, r0, r3
 8006eda:	440b      	add	r3, r1
 8006edc:	3344      	adds	r3, #68	; 0x44
 8006ede:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	212c      	movs	r1, #44	; 0x2c
 8006ee6:	fb01 f303 	mul.w	r3, r1, r3
 8006eea:	4413      	add	r3, r2
 8006eec:	3350      	adds	r3, #80	; 0x50
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	441a      	add	r2, r3
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	202c      	movs	r0, #44	; 0x2c
 8006efa:	fb00 f303 	mul.w	r3, r0, r3
 8006efe:	440b      	add	r3, r1
 8006f00:	3350      	adds	r3, #80	; 0x50
 8006f02:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	0cdb      	lsrs	r3, r3, #19
 8006f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f18:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	212c      	movs	r1, #44	; 0x2c
 8006f20:	fb01 f303 	mul.w	r3, r1, r3
 8006f24:	4413      	add	r3, r2
 8006f26:	3340      	adds	r3, #64	; 0x40
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d13c      	bne.n	8006fac <HCD_RXQLVL_IRQHandler+0x19a>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d039      	beq.n	8006fac <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f4e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f56:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f64:	461a      	mov	r2, r3
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	212c      	movs	r1, #44	; 0x2c
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	4413      	add	r3, r2
 8006f76:	3354      	adds	r3, #84	; 0x54
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	f083 0301 	eor.w	r3, r3, #1
 8006f7e:	b2d8      	uxtb	r0, r3
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	212c      	movs	r1, #44	; 0x2c
 8006f86:	fb01 f303 	mul.w	r3, r1, r3
 8006f8a:	4413      	add	r3, r2
 8006f8c:	3354      	adds	r3, #84	; 0x54
 8006f8e:	4602      	mov	r2, r0
 8006f90:	701a      	strb	r2, [r3, #0]
      break;
 8006f92:	e00b      	b.n	8006fac <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	212c      	movs	r1, #44	; 0x2c
 8006f9a:	fb01 f303 	mul.w	r3, r1, r3
 8006f9e:	4413      	add	r3, r2
 8006fa0:	3360      	adds	r3, #96	; 0x60
 8006fa2:	2204      	movs	r2, #4
 8006fa4:	701a      	strb	r2, [r3, #0]
      break;
 8006fa6:	e001      	b.n	8006fac <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006fa8:	bf00      	nop
 8006faa:	e000      	b.n	8006fae <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006fac:	bf00      	nop
  }
}
 8006fae:	bf00      	nop
 8006fb0:	3728      	adds	r7, #40	; 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006fe2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d10b      	bne.n	8007006 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d102      	bne.n	8006ffe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f00a fc4b 	bl	8011894 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f043 0302 	orr.w	r3, r3, #2
 8007004:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b08      	cmp	r3, #8
 800700e:	d132      	bne.n	8007076 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f043 0308 	orr.w	r3, r3, #8
 8007016:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b04      	cmp	r3, #4
 8007020:	d126      	bne.n	8007070 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d113      	bne.n	8007052 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007030:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007034:	d106      	bne.n	8007044 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2102      	movs	r1, #2
 800703c:	4618      	mov	r0, r3
 800703e:	f004 fc6f 	bl	800b920 <USB_InitFSLSPClkSel>
 8007042:	e011      	b.n	8007068 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2101      	movs	r1, #1
 800704a:	4618      	mov	r0, r3
 800704c:	f004 fc68 	bl	800b920 <USB_InitFSLSPClkSel>
 8007050:	e00a      	b.n	8007068 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d106      	bne.n	8007068 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007060:	461a      	mov	r2, r3
 8007062:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007066:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f00a fc41 	bl	80118f0 <HAL_HCD_PortEnabled_Callback>
 800706e:	e002      	b.n	8007076 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f00a fc4b 	bl	801190c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b20      	cmp	r3, #32
 800707e:	d103      	bne.n	8007088 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f043 0320 	orr.w	r3, r3, #32
 8007086:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800708e:	461a      	mov	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	6013      	str	r3, [r2, #0]
}
 8007094:	bf00      	nop
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e12b      	b.n	8007306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fc fd24 	bl	8003b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2224      	movs	r2, #36	; 0x24
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0201 	bic.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007100:	f002 f846 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 8007104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4a81      	ldr	r2, [pc, #516]	; (8007310 <HAL_I2C_Init+0x274>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d807      	bhi.n	8007120 <HAL_I2C_Init+0x84>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a80      	ldr	r2, [pc, #512]	; (8007314 <HAL_I2C_Init+0x278>)
 8007114:	4293      	cmp	r3, r2
 8007116:	bf94      	ite	ls
 8007118:	2301      	movls	r3, #1
 800711a:	2300      	movhi	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	e006      	b.n	800712e <HAL_I2C_Init+0x92>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4a7d      	ldr	r2, [pc, #500]	; (8007318 <HAL_I2C_Init+0x27c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	bf94      	ite	ls
 8007128:	2301      	movls	r3, #1
 800712a:	2300      	movhi	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e0e7      	b.n	8007306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4a78      	ldr	r2, [pc, #480]	; (800731c <HAL_I2C_Init+0x280>)
 800713a:	fba2 2303 	umull	r2, r3, r2, r3
 800713e:	0c9b      	lsrs	r3, r3, #18
 8007140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	430a      	orrs	r2, r1
 8007154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4a6a      	ldr	r2, [pc, #424]	; (8007310 <HAL_I2C_Init+0x274>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d802      	bhi.n	8007170 <HAL_I2C_Init+0xd4>
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	3301      	adds	r3, #1
 800716e:	e009      	b.n	8007184 <HAL_I2C_Init+0xe8>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007176:	fb02 f303 	mul.w	r3, r2, r3
 800717a:	4a69      	ldr	r2, [pc, #420]	; (8007320 <HAL_I2C_Init+0x284>)
 800717c:	fba2 2303 	umull	r2, r3, r2, r3
 8007180:	099b      	lsrs	r3, r3, #6
 8007182:	3301      	adds	r3, #1
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6812      	ldr	r2, [r2, #0]
 8007188:	430b      	orrs	r3, r1
 800718a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007196:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	495c      	ldr	r1, [pc, #368]	; (8007310 <HAL_I2C_Init+0x274>)
 80071a0:	428b      	cmp	r3, r1
 80071a2:	d819      	bhi.n	80071d8 <HAL_I2C_Init+0x13c>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	1e59      	subs	r1, r3, #1
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80071b2:	1c59      	adds	r1, r3, #1
 80071b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80071b8:	400b      	ands	r3, r1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <HAL_I2C_Init+0x138>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1e59      	subs	r1, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80071cc:	3301      	adds	r3, #1
 80071ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071d2:	e051      	b.n	8007278 <HAL_I2C_Init+0x1dc>
 80071d4:	2304      	movs	r3, #4
 80071d6:	e04f      	b.n	8007278 <HAL_I2C_Init+0x1dc>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d111      	bne.n	8007204 <HAL_I2C_Init+0x168>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	1e58      	subs	r0, r3, #1
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6859      	ldr	r1, [r3, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	440b      	add	r3, r1
 80071ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80071f2:	3301      	adds	r3, #1
 80071f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bf0c      	ite	eq
 80071fc:	2301      	moveq	r3, #1
 80071fe:	2300      	movne	r3, #0
 8007200:	b2db      	uxtb	r3, r3
 8007202:	e012      	b.n	800722a <HAL_I2C_Init+0x18e>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	1e58      	subs	r0, r3, #1
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6859      	ldr	r1, [r3, #4]
 800720c:	460b      	mov	r3, r1
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	440b      	add	r3, r1
 8007212:	0099      	lsls	r1, r3, #2
 8007214:	440b      	add	r3, r1
 8007216:	fbb0 f3f3 	udiv	r3, r0, r3
 800721a:	3301      	adds	r3, #1
 800721c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007220:	2b00      	cmp	r3, #0
 8007222:	bf0c      	ite	eq
 8007224:	2301      	moveq	r3, #1
 8007226:	2300      	movne	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <HAL_I2C_Init+0x196>
 800722e:	2301      	movs	r3, #1
 8007230:	e022      	b.n	8007278 <HAL_I2C_Init+0x1dc>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10e      	bne.n	8007258 <HAL_I2C_Init+0x1bc>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	1e58      	subs	r0, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6859      	ldr	r1, [r3, #4]
 8007242:	460b      	mov	r3, r1
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	440b      	add	r3, r1
 8007248:	fbb0 f3f3 	udiv	r3, r0, r3
 800724c:	3301      	adds	r3, #1
 800724e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007256:	e00f      	b.n	8007278 <HAL_I2C_Init+0x1dc>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	1e58      	subs	r0, r3, #1
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6859      	ldr	r1, [r3, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	440b      	add	r3, r1
 8007266:	0099      	lsls	r1, r3, #2
 8007268:	440b      	add	r3, r1
 800726a:	fbb0 f3f3 	udiv	r3, r0, r3
 800726e:	3301      	adds	r3, #1
 8007270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	6809      	ldr	r1, [r1, #0]
 800727c:	4313      	orrs	r3, r2
 800727e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69da      	ldr	r2, [r3, #28]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80072a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6911      	ldr	r1, [r2, #16]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	68d2      	ldr	r2, [r2, #12]
 80072b2:	4311      	orrs	r1, r2
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	430b      	orrs	r3, r1
 80072ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	695a      	ldr	r2, [r3, #20]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	000186a0 	.word	0x000186a0
 8007314:	001e847f 	.word	0x001e847f
 8007318:	003d08ff 	.word	0x003d08ff
 800731c:	431bde83 	.word	0x431bde83
 8007320:	10624dd3 	.word	0x10624dd3

08007324 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e021      	b.n	800737a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2224      	movs	r2, #36	; 0x24
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0201 	bic.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fc fc48 	bl	8003be4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af02      	add	r7, sp, #8
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	4608      	mov	r0, r1
 800738e:	4611      	mov	r1, r2
 8007390:	461a      	mov	r2, r3
 8007392:	4603      	mov	r3, r0
 8007394:	817b      	strh	r3, [r7, #10]
 8007396:	460b      	mov	r3, r1
 8007398:	813b      	strh	r3, [r7, #8]
 800739a:	4613      	mov	r3, r2
 800739c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800739e:	f7fd fac9 	bl	8004934 <HAL_GetTick>
 80073a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	f040 80d9 	bne.w	8007564 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	2319      	movs	r3, #25
 80073b8:	2201      	movs	r2, #1
 80073ba:	496d      	ldr	r1, [pc, #436]	; (8007570 <HAL_I2C_Mem_Write+0x1ec>)
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 fc8d 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80073c8:	2302      	movs	r3, #2
 80073ca:	e0cc      	b.n	8007566 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d101      	bne.n	80073da <HAL_I2C_Mem_Write+0x56>
 80073d6:	2302      	movs	r3, #2
 80073d8:	e0c5      	b.n	8007566 <HAL_I2C_Mem_Write+0x1e2>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d007      	beq.n	8007400 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0201 	orr.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800740e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2221      	movs	r2, #33	; 0x21
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2240      	movs	r2, #64	; 0x40
 800741c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a3a      	ldr	r2, [r7, #32]
 800742a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4a4d      	ldr	r2, [pc, #308]	; (8007574 <HAL_I2C_Mem_Write+0x1f0>)
 8007440:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007442:	88f8      	ldrh	r0, [r7, #6]
 8007444:	893a      	ldrh	r2, [r7, #8]
 8007446:	8979      	ldrh	r1, [r7, #10]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	4603      	mov	r3, r0
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fac4 	bl	80079e0 <I2C_RequestMemoryWrite>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d052      	beq.n	8007504 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e081      	b.n	8007566 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 fd0e 	bl	8007e88 <I2C_WaitOnTXEFlagUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00d      	beq.n	800748e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	2b04      	cmp	r3, #4
 8007478:	d107      	bne.n	800748a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007488:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e06b      	b.n	8007566 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	781a      	ldrb	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d11b      	bne.n	8007504 <HAL_I2C_Mem_Write+0x180>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d017      	beq.n	8007504 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	781a      	ldrb	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3b01      	subs	r3, #1
 80074fe:	b29a      	uxth	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1aa      	bne.n	8007462 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 fcfa 	bl	8007f0a <I2C_WaitOnBTFFlagUntilTimeout>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00d      	beq.n	8007538 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	2b04      	cmp	r3, #4
 8007522:	d107      	bne.n	8007534 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007532:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e016      	b.n	8007566 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	e000      	b.n	8007566 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007564:	2302      	movs	r3, #2
  }
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	00100002 	.word	0x00100002
 8007574:	ffff0000 	.word	0xffff0000

08007578 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08c      	sub	sp, #48	; 0x30
 800757c:	af02      	add	r7, sp, #8
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	4608      	mov	r0, r1
 8007582:	4611      	mov	r1, r2
 8007584:	461a      	mov	r2, r3
 8007586:	4603      	mov	r3, r0
 8007588:	817b      	strh	r3, [r7, #10]
 800758a:	460b      	mov	r3, r1
 800758c:	813b      	strh	r3, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007592:	f7fd f9cf 	bl	8004934 <HAL_GetTick>
 8007596:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b20      	cmp	r3, #32
 80075a2:	f040 8208 	bne.w	80079b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	2319      	movs	r3, #25
 80075ac:	2201      	movs	r2, #1
 80075ae:	497b      	ldr	r1, [pc, #492]	; (800779c <HAL_I2C_Mem_Read+0x224>)
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 fb93 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80075bc:	2302      	movs	r3, #2
 80075be:	e1fb      	b.n	80079b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_I2C_Mem_Read+0x56>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e1f4      	b.n	80079b8 <HAL_I2C_Mem_Read+0x440>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d007      	beq.n	80075f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0201 	orr.w	r2, r2, #1
 80075f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007602:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2222      	movs	r2, #34	; 0x22
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2240      	movs	r2, #64	; 0x40
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a5b      	ldr	r2, [pc, #364]	; (80077a0 <HAL_I2C_Mem_Read+0x228>)
 8007634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007636:	88f8      	ldrh	r0, [r7, #6]
 8007638:	893a      	ldrh	r2, [r7, #8]
 800763a:	8979      	ldrh	r1, [r7, #10]
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	9301      	str	r3, [sp, #4]
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	4603      	mov	r3, r0
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fa60 	bl	8007b0c <I2C_RequestMemoryRead>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e1b0      	b.n	80079b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d113      	bne.n	8007686 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800765e:	2300      	movs	r3, #0
 8007660:	623b      	str	r3, [r7, #32]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	623b      	str	r3, [r7, #32]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	623b      	str	r3, [r7, #32]
 8007672:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	e184      	b.n	8007990 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800768a:	2b01      	cmp	r3, #1
 800768c:	d11b      	bne.n	80076c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800769c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	61fb      	str	r3, [r7, #28]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	61fb      	str	r3, [r7, #28]
 80076b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	e164      	b.n	8007990 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d11b      	bne.n	8007706 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ee:	2300      	movs	r3, #0
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	61bb      	str	r3, [r7, #24]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	e144      	b.n	8007990 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800771c:	e138      	b.n	8007990 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007722:	2b03      	cmp	r3, #3
 8007724:	f200 80f1 	bhi.w	800790a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772c:	2b01      	cmp	r3, #1
 800772e:	d123      	bne.n	8007778 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fc29 	bl	8007f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e139      	b.n	80079b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776c:	b29b      	uxth	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007776:	e10b      	b.n	8007990 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777c:	2b02      	cmp	r3, #2
 800777e:	d14e      	bne.n	800781e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	2200      	movs	r2, #0
 8007788:	4906      	ldr	r1, [pc, #24]	; (80077a4 <HAL_I2C_Mem_Read+0x22c>)
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 faa6 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d008      	beq.n	80077a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e10e      	b.n	80079b8 <HAL_I2C_Mem_Read+0x440>
 800779a:	bf00      	nop
 800779c:	00100002 	.word	0x00100002
 80077a0:	ffff0000 	.word	0xffff0000
 80077a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691a      	ldr	r2, [r3, #16]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800781c:	e0b8      	b.n	8007990 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	2200      	movs	r2, #0
 8007826:	4966      	ldr	r1, [pc, #408]	; (80079c0 <HAL_I2C_Mem_Read+0x448>)
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 fa57 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e0bf      	b.n	80079b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	691a      	ldr	r2, [r3, #16]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007864:	3b01      	subs	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007870:	b29b      	uxth	r3, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	b29a      	uxth	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	2200      	movs	r2, #0
 8007882:	494f      	ldr	r1, [pc, #316]	; (80079c0 <HAL_I2C_Mem_Read+0x448>)
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fa29 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e091      	b.n	80079b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691a      	ldr	r2, [r3, #16]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	3b01      	subs	r3, #1
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	691a      	ldr	r2, [r3, #16]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007908:	e042      	b.n	8007990 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800790a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fb3c 	bl	8007f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e04c      	b.n	80079b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	b2d2      	uxtb	r2, r2
 800792a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793a:	3b01      	subs	r3, #1
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007946:	b29b      	uxth	r3, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	f003 0304 	and.w	r3, r3, #4
 800795a:	2b04      	cmp	r3, #4
 800795c:	d118      	bne.n	8007990 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	691a      	ldr	r2, [r3, #16]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	b2d2      	uxtb	r2, r2
 800796a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800797a:	3b01      	subs	r3, #1
 800797c:	b29a      	uxth	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007994:	2b00      	cmp	r3, #0
 8007996:	f47f aec2 	bne.w	800771e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e000      	b.n	80079b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80079b6:	2302      	movs	r3, #2
  }
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3728      	adds	r7, #40	; 0x28
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	00010004 	.word	0x00010004

080079c4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d2:	b2db      	uxtb	r3, r3
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	4608      	mov	r0, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	461a      	mov	r2, r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	817b      	strh	r3, [r7, #10]
 80079f2:	460b      	mov	r3, r1
 80079f4:	813b      	strh	r3, [r7, #8]
 80079f6:	4613      	mov	r3, r2
 80079f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f960 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00d      	beq.n	8007a3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a30:	d103      	bne.n	8007a3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e05f      	b.n	8007afe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a3e:	897b      	ldrh	r3, [r7, #10]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	6a3a      	ldr	r2, [r7, #32]
 8007a52:	492d      	ldr	r1, [pc, #180]	; (8007b08 <I2C_RequestMemoryWrite+0x128>)
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f998 	bl	8007d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e04c      	b.n	8007afe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7c:	6a39      	ldr	r1, [r7, #32]
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 fa02 	bl	8007e88 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00d      	beq.n	8007aa6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d107      	bne.n	8007aa2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e02b      	b.n	8007afe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007aa6:	88fb      	ldrh	r3, [r7, #6]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d105      	bne.n	8007ab8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007aac:	893b      	ldrh	r3, [r7, #8]
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	611a      	str	r2, [r3, #16]
 8007ab6:	e021      	b.n	8007afc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ab8:	893b      	ldrh	r3, [r7, #8]
 8007aba:	0a1b      	lsrs	r3, r3, #8
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac8:	6a39      	ldr	r1, [r7, #32]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 f9dc 	bl	8007e88 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00d      	beq.n	8007af2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	d107      	bne.n	8007aee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e005      	b.n	8007afe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007af2:	893b      	ldrh	r3, [r7, #8]
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	00010002 	.word	0x00010002

08007b0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	4608      	mov	r0, r1
 8007b16:	4611      	mov	r1, r2
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	817b      	strh	r3, [r7, #10]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	813b      	strh	r3, [r7, #8]
 8007b22:	4613      	mov	r3, r2
 8007b24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 f8c2 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00d      	beq.n	8007b7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b6c:	d103      	bne.n	8007b76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e0aa      	b.n	8007cd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b7a:	897b      	ldrh	r3, [r7, #10]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	461a      	mov	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	6a3a      	ldr	r2, [r7, #32]
 8007b8e:	4952      	ldr	r1, [pc, #328]	; (8007cd8 <I2C_RequestMemoryRead+0x1cc>)
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f8fa 	bl	8007d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e097      	b.n	8007cd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb8:	6a39      	ldr	r1, [r7, #32]
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 f964 	bl	8007e88 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00d      	beq.n	8007be2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d107      	bne.n	8007bde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e076      	b.n	8007cd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007be2:	88fb      	ldrh	r3, [r7, #6]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d105      	bne.n	8007bf4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007be8:	893b      	ldrh	r3, [r7, #8]
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	611a      	str	r2, [r3, #16]
 8007bf2:	e021      	b.n	8007c38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007bf4:	893b      	ldrh	r3, [r7, #8]
 8007bf6:	0a1b      	lsrs	r3, r3, #8
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c04:	6a39      	ldr	r1, [r7, #32]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 f93e 	bl	8007e88 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00d      	beq.n	8007c2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d107      	bne.n	8007c2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e050      	b.n	8007cd0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c2e:	893b      	ldrh	r3, [r7, #8]
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3a:	6a39      	ldr	r1, [r7, #32]
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f923 	bl	8007e88 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d107      	bne.n	8007c60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e035      	b.n	8007cd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 f82b 	bl	8007cdc <I2C_WaitOnFlagUntilTimeout>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00d      	beq.n	8007ca8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c9a:	d103      	bne.n	8007ca4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ca2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e013      	b.n	8007cd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ca8:	897b      	ldrh	r3, [r7, #10]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	6a3a      	ldr	r2, [r7, #32]
 8007cbc:	4906      	ldr	r1, [pc, #24]	; (8007cd8 <I2C_RequestMemoryRead+0x1cc>)
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 f863 	bl	8007d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e000      	b.n	8007cd0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	00010002 	.word	0x00010002

08007cdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cec:	e025      	b.n	8007d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf4:	d021      	beq.n	8007d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf6:	f7fc fe1d 	bl	8004934 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d302      	bcc.n	8007d0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d116      	bne.n	8007d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e023      	b.n	8007d82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	0c1b      	lsrs	r3, r3, #16
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d10d      	bne.n	8007d60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	43da      	mvns	r2, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bf0c      	ite	eq
 8007d56:	2301      	moveq	r3, #1
 8007d58:	2300      	movne	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	e00c      	b.n	8007d7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	43da      	mvns	r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	bf0c      	ite	eq
 8007d72:	2301      	moveq	r3, #1
 8007d74:	2300      	movne	r3, #0
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d0b6      	beq.n	8007cee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d98:	e051      	b.n	8007e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da8:	d123      	bne.n	8007df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007db8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dc2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	f043 0204 	orr.w	r2, r3, #4
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e046      	b.n	8007e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df8:	d021      	beq.n	8007e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dfa:	f7fc fd9b 	bl	8004934 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d302      	bcc.n	8007e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d116      	bne.n	8007e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	f043 0220 	orr.w	r2, r3, #32
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e020      	b.n	8007e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	0c1b      	lsrs	r3, r3, #16
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d10c      	bne.n	8007e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	43da      	mvns	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4013      	ands	r3, r2
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2301      	movne	r3, #1
 8007e5c:	2300      	moveq	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	e00b      	b.n	8007e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	43da      	mvns	r2, r3
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bf14      	ite	ne
 8007e74:	2301      	movne	r3, #1
 8007e76:	2300      	moveq	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d18d      	bne.n	8007d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e94:	e02d      	b.n	8007ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 f8ce 	bl	8008038 <I2C_IsAcknowledgeFailed>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e02d      	b.n	8007f02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eac:	d021      	beq.n	8007ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eae:	f7fc fd41 	bl	8004934 <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d302      	bcc.n	8007ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d116      	bne.n	8007ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	f043 0220 	orr.w	r2, r3, #32
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e007      	b.n	8007f02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efc:	2b80      	cmp	r3, #128	; 0x80
 8007efe:	d1ca      	bne.n	8007e96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f16:	e02d      	b.n	8007f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f88d 	bl	8008038 <I2C_IsAcknowledgeFailed>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e02d      	b.n	8007f84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2e:	d021      	beq.n	8007f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f30:	f7fc fd00 	bl	8004934 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d302      	bcc.n	8007f46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d116      	bne.n	8007f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	f043 0220 	orr.w	r2, r3, #32
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e007      	b.n	8007f84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d1ca      	bne.n	8007f18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f98:	e042      	b.n	8008020 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b10      	cmp	r3, #16
 8007fa6:	d119      	bne.n	8007fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f06f 0210 	mvn.w	r2, #16
 8007fb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e029      	b.n	8008030 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fdc:	f7fc fcaa 	bl	8004934 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d302      	bcc.n	8007ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d116      	bne.n	8008020 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	f043 0220 	orr.w	r2, r3, #32
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e007      	b.n	8008030 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802a:	2b40      	cmp	r3, #64	; 0x40
 800802c:	d1b5      	bne.n	8007f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800804a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800804e:	d11b      	bne.n	8008088 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008058:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	f043 0204 	orr.w	r2, r3, #4
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e000      	b.n	800808a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b20      	cmp	r3, #32
 80080aa:	d129      	bne.n	8008100 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2224      	movs	r2, #36	; 0x24
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0201 	bic.w	r2, r2, #1
 80080c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0210 	bic.w	r2, r2, #16
 80080d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f042 0201 	orr.w	r2, r2, #1
 80080f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	e000      	b.n	8008102 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008100:	2302      	movs	r3, #2
  }
}
 8008102:	4618      	mov	r0, r3
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800810e:	b480      	push	{r7}
 8008110:	b085      	sub	sp, #20
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b20      	cmp	r3, #32
 8008126:	d12a      	bne.n	800817e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2224      	movs	r2, #36	; 0x24
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0201 	bic.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008148:	89fb      	ldrh	r3, [r7, #14]
 800814a:	f023 030f 	bic.w	r3, r3, #15
 800814e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	b29a      	uxth	r2, r3
 8008154:	89fb      	ldrh	r3, [r7, #14]
 8008156:	4313      	orrs	r3, r2
 8008158:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	89fa      	ldrh	r2, [r7, #14]
 8008160:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f042 0201 	orr.w	r2, r2, #1
 8008170:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	e000      	b.n	8008180 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800817e:	2302      	movs	r3, #2
  }
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e0bf      	b.n	800831e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d106      	bne.n	80081b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fb fd3c 	bl	8003c30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699a      	ldr	r2, [r3, #24]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80081ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6999      	ldr	r1, [r3, #24]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6899      	ldr	r1, [r3, #8]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	4b4a      	ldr	r3, [pc, #296]	; (8008328 <HAL_LTDC_Init+0x19c>)
 8008200:	400b      	ands	r3, r1
 8008202:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	041b      	lsls	r3, r3, #16
 800820a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6899      	ldr	r1, [r3, #8]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	431a      	orrs	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68d9      	ldr	r1, [r3, #12]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	4b3e      	ldr	r3, [pc, #248]	; (8008328 <HAL_LTDC_Init+0x19c>)
 800822e:	400b      	ands	r3, r1
 8008230:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	041b      	lsls	r3, r3, #16
 8008238:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68d9      	ldr	r1, [r3, #12]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a1a      	ldr	r2, [r3, #32]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6919      	ldr	r1, [r3, #16]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b33      	ldr	r3, [pc, #204]	; (8008328 <HAL_LTDC_Init+0x19c>)
 800825c:	400b      	ands	r3, r1
 800825e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008264:	041b      	lsls	r3, r3, #16
 8008266:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6919      	ldr	r1, [r3, #16]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	431a      	orrs	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6959      	ldr	r1, [r3, #20]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	4b27      	ldr	r3, [pc, #156]	; (8008328 <HAL_LTDC_Init+0x19c>)
 800828a:	400b      	ands	r3, r1
 800828c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6959      	ldr	r1, [r3, #20]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	431a      	orrs	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80082bc:	041b      	lsls	r3, r3, #16
 80082be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80082ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4313      	orrs	r3, r2
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0206 	orr.w	r2, r2, #6
 80082fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	f000f800 	.word	0xf000f800

0800832c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008342:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f003 0304 	and.w	r3, r3, #4
 800834a:	2b00      	cmp	r3, #0
 800834c:	d023      	beq.n	8008396 <HAL_LTDC_IRQHandler+0x6a>
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d01e      	beq.n	8008396 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 0204 	bic.w	r2, r2, #4
 8008366:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2204      	movs	r2, #4
 800836e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008376:	f043 0201 	orr.w	r2, r3, #1
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2204      	movs	r2, #4
 8008384:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f86f 	bl	8008474 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d023      	beq.n	80083e8 <HAL_LTDC_IRQHandler+0xbc>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d01e      	beq.n	80083e8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0202 	bic.w	r2, r2, #2
 80083b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2202      	movs	r2, #2
 80083c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083c8:	f043 0202 	orr.w	r2, r3, #2
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2204      	movs	r2, #4
 80083d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f846 	bl	8008474 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d01b      	beq.n	800842a <HAL_LTDC_IRQHandler+0xfe>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d016      	beq.n	800842a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0201 	bic.w	r2, r2, #1
 800840a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2201      	movs	r2, #1
 8008412:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f82f 	bl	8008488 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f003 0308 	and.w	r3, r3, #8
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01b      	beq.n	800846c <HAL_LTDC_IRQHandler+0x140>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d016      	beq.n	800846c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0208 	bic.w	r2, r2, #8
 800844c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2208      	movs	r2, #8
 8008454:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f818 	bl	800849c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800846c:	bf00      	nop
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80084b0:	b5b0      	push	{r4, r5, r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <HAL_LTDC_ConfigLayer+0x1a>
 80084c6:	2302      	movs	r3, #2
 80084c8:	e02c      	b.n	8008524 <HAL_LTDC_ConfigLayer+0x74>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2202      	movs	r2, #2
 80084d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2134      	movs	r1, #52	; 0x34
 80084e0:	fb01 f303 	mul.w	r3, r1, r3
 80084e4:	4413      	add	r3, r2
 80084e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	4614      	mov	r4, r2
 80084ee:	461d      	mov	r5, r3
 80084f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	68b9      	ldr	r1, [r7, #8]
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 f83b 	bl	8008580 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2201      	movs	r2, #1
 8008510:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bdb0      	pop	{r4, r5, r7, pc}

0800852c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800853a:	2b01      	cmp	r3, #1
 800853c:	d101      	bne.n	8008542 <HAL_LTDC_EnableDither+0x16>
 800853e:	2302      	movs	r3, #2
 8008540:	e016      	b.n	8008570 <HAL_LTDC_EnableDither+0x44>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2202      	movs	r2, #2
 800854e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8008552:	4b0a      	ldr	r3, [pc, #40]	; (800857c <HAL_LTDC_EnableDither+0x50>)
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	4a09      	ldr	r2, [pc, #36]	; (800857c <HAL_LTDC_EnableDither+0x50>)
 8008558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800855c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	40016800 	.word	0x40016800

08008580 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008580:	b480      	push	{r7}
 8008582:	b089      	sub	sp, #36	; 0x24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	0c1b      	lsrs	r3, r3, #16
 8008598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800859c:	4413      	add	r3, r2
 800859e:	041b      	lsls	r3, r3, #16
 80085a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	01db      	lsls	r3, r3, #7
 80085ac:	4413      	add	r3, r2
 80085ae:	3384      	adds	r3, #132	; 0x84
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	6812      	ldr	r2, [r2, #0]
 80085b6:	4611      	mov	r1, r2
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	01d2      	lsls	r2, r2, #7
 80085bc:	440a      	add	r2, r1
 80085be:	3284      	adds	r2, #132	; 0x84
 80085c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80085c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	0c1b      	lsrs	r3, r3, #16
 80085d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085d6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085d8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4619      	mov	r1, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	01db      	lsls	r3, r3, #7
 80085e4:	440b      	add	r3, r1
 80085e6:	3384      	adds	r3, #132	; 0x84
 80085e8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	68da      	ldr	r2, [r3, #12]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085fe:	4413      	add	r3, r2
 8008600:	041b      	lsls	r3, r3, #16
 8008602:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	01db      	lsls	r3, r3, #7
 800860e:	4413      	add	r3, r2
 8008610:	3384      	adds	r3, #132	; 0x84
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	6812      	ldr	r2, [r2, #0]
 8008618:	4611      	mov	r1, r2
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	01d2      	lsls	r2, r2, #7
 800861e:	440a      	add	r2, r1
 8008620:	3284      	adds	r2, #132	; 0x84
 8008622:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008626:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008636:	4413      	add	r3, r2
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4619      	mov	r1, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	01db      	lsls	r3, r3, #7
 8008644:	440b      	add	r3, r1
 8008646:	3384      	adds	r3, #132	; 0x84
 8008648:	4619      	mov	r1, r3
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	4313      	orrs	r3, r2
 800864e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	461a      	mov	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	01db      	lsls	r3, r3, #7
 800865a:	4413      	add	r3, r2
 800865c:	3384      	adds	r3, #132	; 0x84
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	6812      	ldr	r2, [r2, #0]
 8008664:	4611      	mov	r1, r2
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	01d2      	lsls	r2, r2, #7
 800866a:	440a      	add	r2, r1
 800866c:	3284      	adds	r2, #132	; 0x84
 800866e:	f023 0307 	bic.w	r3, r3, #7
 8008672:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	01db      	lsls	r3, r3, #7
 800867e:	4413      	add	r3, r2
 8008680:	3384      	adds	r3, #132	; 0x84
 8008682:	461a      	mov	r2, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800869a:	041b      	lsls	r3, r3, #16
 800869c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	061b      	lsls	r3, r3, #24
 80086a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	01db      	lsls	r3, r3, #7
 80086b0:	4413      	add	r3, r2
 80086b2:	3384      	adds	r3, #132	; 0x84
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	01db      	lsls	r3, r3, #7
 80086c0:	4413      	add	r3, r2
 80086c2:	3384      	adds	r3, #132	; 0x84
 80086c4:	461a      	mov	r2, r3
 80086c6:	2300      	movs	r3, #0
 80086c8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086d0:	461a      	mov	r2, r3
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	431a      	orrs	r2, r3
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	431a      	orrs	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4619      	mov	r1, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	01db      	lsls	r3, r3, #7
 80086e4:	440b      	add	r3, r1
 80086e6:	3384      	adds	r3, #132	; 0x84
 80086e8:	4619      	mov	r1, r3
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	01db      	lsls	r3, r3, #7
 80086fa:	4413      	add	r3, r2
 80086fc:	3384      	adds	r3, #132	; 0x84
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	6812      	ldr	r2, [r2, #0]
 8008704:	4611      	mov	r1, r2
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	01d2      	lsls	r2, r2, #7
 800870a:	440a      	add	r2, r1
 800870c:	3284      	adds	r2, #132	; 0x84
 800870e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008712:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	01db      	lsls	r3, r3, #7
 800871e:	4413      	add	r3, r2
 8008720:	3384      	adds	r3, #132	; 0x84
 8008722:	461a      	mov	r2, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	01db      	lsls	r3, r3, #7
 8008734:	4413      	add	r3, r2
 8008736:	3384      	adds	r3, #132	; 0x84
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	4611      	mov	r1, r2
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	01d2      	lsls	r2, r2, #7
 8008744:	440a      	add	r2, r1
 8008746:	3284      	adds	r2, #132	; 0x84
 8008748:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800874c:	f023 0307 	bic.w	r3, r3, #7
 8008750:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	69da      	ldr	r2, [r3, #28]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	6809      	ldr	r1, [r1, #0]
 800875e:	4608      	mov	r0, r1
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	01c9      	lsls	r1, r1, #7
 8008764:	4401      	add	r1, r0
 8008766:	3184      	adds	r1, #132	; 0x84
 8008768:	4313      	orrs	r3, r2
 800876a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	461a      	mov	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	01db      	lsls	r3, r3, #7
 8008776:	4413      	add	r3, r2
 8008778:	3384      	adds	r3, #132	; 0x84
 800877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	461a      	mov	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	01db      	lsls	r3, r3, #7
 8008786:	4413      	add	r3, r2
 8008788:	3384      	adds	r3, #132	; 0x84
 800878a:	461a      	mov	r2, r3
 800878c:	2300      	movs	r3, #0
 800878e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	01db      	lsls	r3, r3, #7
 800879a:	4413      	add	r3, r2
 800879c:	3384      	adds	r3, #132	; 0x84
 800879e:	461a      	mov	r2, r3
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d102      	bne.n	80087b4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80087ae:	2304      	movs	r3, #4
 80087b0:	61fb      	str	r3, [r7, #28]
 80087b2:	e01b      	b.n	80087ec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d102      	bne.n	80087c2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80087bc:	2303      	movs	r3, #3
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	e014      	b.n	80087ec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d00b      	beq.n	80087e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d007      	beq.n	80087e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d003      	beq.n	80087e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80087de:	2b07      	cmp	r3, #7
 80087e0:	d102      	bne.n	80087e8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80087e2:	2302      	movs	r3, #2
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	e001      	b.n	80087ec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80087e8:	2301      	movs	r3, #1
 80087ea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	461a      	mov	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	01db      	lsls	r3, r3, #7
 80087f6:	4413      	add	r3, r2
 80087f8:	3384      	adds	r3, #132	; 0x84
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	6812      	ldr	r2, [r2, #0]
 8008800:	4611      	mov	r1, r2
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	01d2      	lsls	r2, r2, #7
 8008806:	440a      	add	r2, r1
 8008808:	3284      	adds	r2, #132	; 0x84
 800880a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800880e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008814:	69fa      	ldr	r2, [r7, #28]
 8008816:	fb02 f303 	mul.w	r3, r2, r3
 800881a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	6859      	ldr	r1, [r3, #4]
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	1acb      	subs	r3, r1, r3
 8008826:	69f9      	ldr	r1, [r7, #28]
 8008828:	fb01 f303 	mul.w	r3, r1, r3
 800882c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800882e:	68f9      	ldr	r1, [r7, #12]
 8008830:	6809      	ldr	r1, [r1, #0]
 8008832:	4608      	mov	r0, r1
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	01c9      	lsls	r1, r1, #7
 8008838:	4401      	add	r1, r0
 800883a:	3184      	adds	r1, #132	; 0x84
 800883c:	4313      	orrs	r3, r2
 800883e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	461a      	mov	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	01db      	lsls	r3, r3, #7
 800884a:	4413      	add	r3, r2
 800884c:	3384      	adds	r3, #132	; 0x84
 800884e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	4611      	mov	r1, r2
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	01d2      	lsls	r2, r2, #7
 800885a:	440a      	add	r2, r1
 800885c:	3284      	adds	r2, #132	; 0x84
 800885e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008862:	f023 0307 	bic.w	r3, r3, #7
 8008866:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	461a      	mov	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	01db      	lsls	r3, r3, #7
 8008872:	4413      	add	r3, r2
 8008874:	3384      	adds	r3, #132	; 0x84
 8008876:	461a      	mov	r2, r3
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	01db      	lsls	r3, r3, #7
 8008888:	4413      	add	r3, r2
 800888a:	3384      	adds	r3, #132	; 0x84
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	6812      	ldr	r2, [r2, #0]
 8008892:	4611      	mov	r1, r2
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	01d2      	lsls	r2, r2, #7
 8008898:	440a      	add	r2, r1
 800889a:	3284      	adds	r2, #132	; 0x84
 800889c:	f043 0301 	orr.w	r3, r3, #1
 80088a0:	6013      	str	r3, [r2, #0]
}
 80088a2:	bf00      	nop
 80088a4:	3724      	adds	r7, #36	; 0x24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
	...

080088b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e267      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d075      	beq.n	80089ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80088ce:	4b88      	ldr	r3, [pc, #544]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f003 030c 	and.w	r3, r3, #12
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d00c      	beq.n	80088f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088da:	4b85      	ldr	r3, [pc, #532]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80088e2:	2b08      	cmp	r3, #8
 80088e4:	d112      	bne.n	800890c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088e6:	4b82      	ldr	r3, [pc, #520]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088f2:	d10b      	bne.n	800890c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088f4:	4b7e      	ldr	r3, [pc, #504]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d05b      	beq.n	80089b8 <HAL_RCC_OscConfig+0x108>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d157      	bne.n	80089b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e242      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008914:	d106      	bne.n	8008924 <HAL_RCC_OscConfig+0x74>
 8008916:	4b76      	ldr	r3, [pc, #472]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a75      	ldr	r2, [pc, #468]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 800891c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	e01d      	b.n	8008960 <HAL_RCC_OscConfig+0xb0>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800892c:	d10c      	bne.n	8008948 <HAL_RCC_OscConfig+0x98>
 800892e:	4b70      	ldr	r3, [pc, #448]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a6f      	ldr	r2, [pc, #444]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	4b6d      	ldr	r3, [pc, #436]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a6c      	ldr	r2, [pc, #432]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	e00b      	b.n	8008960 <HAL_RCC_OscConfig+0xb0>
 8008948:	4b69      	ldr	r3, [pc, #420]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a68      	ldr	r2, [pc, #416]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 800894e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	4b66      	ldr	r3, [pc, #408]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a65      	ldr	r2, [pc, #404]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 800895a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800895e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d013      	beq.n	8008990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008968:	f7fb ffe4 	bl	8004934 <HAL_GetTick>
 800896c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800896e:	e008      	b.n	8008982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008970:	f7fb ffe0 	bl	8004934 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b64      	cmp	r3, #100	; 0x64
 800897c:	d901      	bls.n	8008982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e207      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008982:	4b5b      	ldr	r3, [pc, #364]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d0f0      	beq.n	8008970 <HAL_RCC_OscConfig+0xc0>
 800898e:	e014      	b.n	80089ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008990:	f7fb ffd0 	bl	8004934 <HAL_GetTick>
 8008994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008996:	e008      	b.n	80089aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008998:	f7fb ffcc 	bl	8004934 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b64      	cmp	r3, #100	; 0x64
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e1f3      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089aa:	4b51      	ldr	r3, [pc, #324]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1f0      	bne.n	8008998 <HAL_RCC_OscConfig+0xe8>
 80089b6:	e000      	b.n	80089ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d063      	beq.n	8008a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80089c6:	4b4a      	ldr	r3, [pc, #296]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f003 030c 	and.w	r3, r3, #12
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00b      	beq.n	80089ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089d2:	4b47      	ldr	r3, [pc, #284]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80089da:	2b08      	cmp	r3, #8
 80089dc:	d11c      	bne.n	8008a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089de:	4b44      	ldr	r3, [pc, #272]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d116      	bne.n	8008a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089ea:	4b41      	ldr	r3, [pc, #260]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <HAL_RCC_OscConfig+0x152>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d001      	beq.n	8008a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e1c7      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a02:	4b3b      	ldr	r3, [pc, #236]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	4937      	ldr	r1, [pc, #220]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a16:	e03a      	b.n	8008a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d020      	beq.n	8008a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a20:	4b34      	ldr	r3, [pc, #208]	; (8008af4 <HAL_RCC_OscConfig+0x244>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a26:	f7fb ff85 	bl	8004934 <HAL_GetTick>
 8008a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a2c:	e008      	b.n	8008a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a2e:	f7fb ff81 	bl	8004934 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d901      	bls.n	8008a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e1a8      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a40:	4b2b      	ldr	r3, [pc, #172]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0f0      	beq.n	8008a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a4c:	4b28      	ldr	r3, [pc, #160]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	4925      	ldr	r1, [pc, #148]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	600b      	str	r3, [r1, #0]
 8008a60:	e015      	b.n	8008a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a62:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <HAL_RCC_OscConfig+0x244>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a68:	f7fb ff64 	bl	8004934 <HAL_GetTick>
 8008a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a6e:	e008      	b.n	8008a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a70:	f7fb ff60 	bl	8004934 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e187      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a82:	4b1b      	ldr	r3, [pc, #108]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1f0      	bne.n	8008a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0308 	and.w	r3, r3, #8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d036      	beq.n	8008b08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d016      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008aa2:	4b15      	ldr	r3, [pc, #84]	; (8008af8 <HAL_RCC_OscConfig+0x248>)
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa8:	f7fb ff44 	bl	8004934 <HAL_GetTick>
 8008aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008aae:	e008      	b.n	8008ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ab0:	f7fb ff40 	bl	8004934 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e167      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ac2:	4b0b      	ldr	r3, [pc, #44]	; (8008af0 <HAL_RCC_OscConfig+0x240>)
 8008ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0f0      	beq.n	8008ab0 <HAL_RCC_OscConfig+0x200>
 8008ace:	e01b      	b.n	8008b08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ad0:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <HAL_RCC_OscConfig+0x248>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ad6:	f7fb ff2d 	bl	8004934 <HAL_GetTick>
 8008ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008adc:	e00e      	b.n	8008afc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ade:	f7fb ff29 	bl	8004934 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d907      	bls.n	8008afc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e150      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
 8008af0:	40023800 	.word	0x40023800
 8008af4:	42470000 	.word	0x42470000
 8008af8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008afc:	4b88      	ldr	r3, [pc, #544]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1ea      	bne.n	8008ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 8097 	beq.w	8008c44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b16:	2300      	movs	r3, #0
 8008b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b1a:	4b81      	ldr	r3, [pc, #516]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10f      	bne.n	8008b46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b26:	2300      	movs	r3, #0
 8008b28:	60bb      	str	r3, [r7, #8]
 8008b2a:	4b7d      	ldr	r3, [pc, #500]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2e:	4a7c      	ldr	r2, [pc, #496]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b34:	6413      	str	r3, [r2, #64]	; 0x40
 8008b36:	4b7a      	ldr	r3, [pc, #488]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b3e:	60bb      	str	r3, [r7, #8]
 8008b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b42:	2301      	movs	r3, #1
 8008b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b46:	4b77      	ldr	r3, [pc, #476]	; (8008d24 <HAL_RCC_OscConfig+0x474>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d118      	bne.n	8008b84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b52:	4b74      	ldr	r3, [pc, #464]	; (8008d24 <HAL_RCC_OscConfig+0x474>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a73      	ldr	r2, [pc, #460]	; (8008d24 <HAL_RCC_OscConfig+0x474>)
 8008b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b5e:	f7fb fee9 	bl	8004934 <HAL_GetTick>
 8008b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b64:	e008      	b.n	8008b78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b66:	f7fb fee5 	bl	8004934 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d901      	bls.n	8008b78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e10c      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b78:	4b6a      	ldr	r3, [pc, #424]	; (8008d24 <HAL_RCC_OscConfig+0x474>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0f0      	beq.n	8008b66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d106      	bne.n	8008b9a <HAL_RCC_OscConfig+0x2ea>
 8008b8c:	4b64      	ldr	r3, [pc, #400]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b90:	4a63      	ldr	r2, [pc, #396]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008b92:	f043 0301 	orr.w	r3, r3, #1
 8008b96:	6713      	str	r3, [r2, #112]	; 0x70
 8008b98:	e01c      	b.n	8008bd4 <HAL_RCC_OscConfig+0x324>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2b05      	cmp	r3, #5
 8008ba0:	d10c      	bne.n	8008bbc <HAL_RCC_OscConfig+0x30c>
 8008ba2:	4b5f      	ldr	r3, [pc, #380]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba6:	4a5e      	ldr	r2, [pc, #376]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008ba8:	f043 0304 	orr.w	r3, r3, #4
 8008bac:	6713      	str	r3, [r2, #112]	; 0x70
 8008bae:	4b5c      	ldr	r3, [pc, #368]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb2:	4a5b      	ldr	r2, [pc, #364]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008bb4:	f043 0301 	orr.w	r3, r3, #1
 8008bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8008bba:	e00b      	b.n	8008bd4 <HAL_RCC_OscConfig+0x324>
 8008bbc:	4b58      	ldr	r3, [pc, #352]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc0:	4a57      	ldr	r2, [pc, #348]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008bc2:	f023 0301 	bic.w	r3, r3, #1
 8008bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8008bc8:	4b55      	ldr	r3, [pc, #340]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bcc:	4a54      	ldr	r2, [pc, #336]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008bce:	f023 0304 	bic.w	r3, r3, #4
 8008bd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d015      	beq.n	8008c08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bdc:	f7fb feaa 	bl	8004934 <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008be2:	e00a      	b.n	8008bfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008be4:	f7fb fea6 	bl	8004934 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e0cb      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bfa:	4b49      	ldr	r3, [pc, #292]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0ee      	beq.n	8008be4 <HAL_RCC_OscConfig+0x334>
 8008c06:	e014      	b.n	8008c32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c08:	f7fb fe94 	bl	8004934 <HAL_GetTick>
 8008c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c0e:	e00a      	b.n	8008c26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c10:	f7fb fe90 	bl	8004934 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d901      	bls.n	8008c26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e0b5      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c26:	4b3e      	ldr	r3, [pc, #248]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2a:	f003 0302 	and.w	r3, r3, #2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1ee      	bne.n	8008c10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d105      	bne.n	8008c44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c38:	4b39      	ldr	r3, [pc, #228]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	4a38      	ldr	r2, [pc, #224]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80a1 	beq.w	8008d90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c4e:	4b34      	ldr	r3, [pc, #208]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 030c 	and.w	r3, r3, #12
 8008c56:	2b08      	cmp	r3, #8
 8008c58:	d05c      	beq.n	8008d14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d141      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c62:	4b31      	ldr	r3, [pc, #196]	; (8008d28 <HAL_RCC_OscConfig+0x478>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c68:	f7fb fe64 	bl	8004934 <HAL_GetTick>
 8008c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c70:	f7fb fe60 	bl	8004934 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e087      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c82:	4b27      	ldr	r3, [pc, #156]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f0      	bne.n	8008c70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	69da      	ldr	r2, [r3, #28]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a1b      	ldr	r3, [r3, #32]
 8008c96:	431a      	orrs	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	019b      	lsls	r3, r3, #6
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	085b      	lsrs	r3, r3, #1
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	041b      	lsls	r3, r3, #16
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	061b      	lsls	r3, r3, #24
 8008cb2:	491b      	ldr	r1, [pc, #108]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cb8:	4b1b      	ldr	r3, [pc, #108]	; (8008d28 <HAL_RCC_OscConfig+0x478>)
 8008cba:	2201      	movs	r2, #1
 8008cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cbe:	f7fb fe39 	bl	8004934 <HAL_GetTick>
 8008cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cc4:	e008      	b.n	8008cd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cc6:	f7fb fe35 	bl	8004934 <HAL_GetTick>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d901      	bls.n	8008cd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e05c      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cd8:	4b11      	ldr	r3, [pc, #68]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d0f0      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x416>
 8008ce4:	e054      	b.n	8008d90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ce6:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <HAL_RCC_OscConfig+0x478>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cec:	f7fb fe22 	bl	8004934 <HAL_GetTick>
 8008cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cf2:	e008      	b.n	8008d06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cf4:	f7fb fe1e 	bl	8004934 <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d901      	bls.n	8008d06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e045      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d06:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <HAL_RCC_OscConfig+0x470>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1f0      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x444>
 8008d12:	e03d      	b.n	8008d90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d107      	bne.n	8008d2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e038      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
 8008d20:	40023800 	.word	0x40023800
 8008d24:	40007000 	.word	0x40007000
 8008d28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d2c:	4b1b      	ldr	r3, [pc, #108]	; (8008d9c <HAL_RCC_OscConfig+0x4ec>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d028      	beq.n	8008d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d121      	bne.n	8008d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d11a      	bne.n	8008d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d111      	bne.n	8008d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d72:	085b      	lsrs	r3, r3, #1
 8008d74:	3b01      	subs	r3, #1
 8008d76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d107      	bne.n	8008d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d001      	beq.n	8008d90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e000      	b.n	8008d92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	40023800 	.word	0x40023800

08008da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e0cc      	b.n	8008f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008db4:	4b68      	ldr	r3, [pc, #416]	; (8008f58 <HAL_RCC_ClockConfig+0x1b8>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d90c      	bls.n	8008ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dc2:	4b65      	ldr	r3, [pc, #404]	; (8008f58 <HAL_RCC_ClockConfig+0x1b8>)
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	b2d2      	uxtb	r2, r2
 8008dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dca:	4b63      	ldr	r3, [pc, #396]	; (8008f58 <HAL_RCC_ClockConfig+0x1b8>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d001      	beq.n	8008ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e0b8      	b.n	8008f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d020      	beq.n	8008e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0304 	and.w	r3, r3, #4
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d005      	beq.n	8008e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008df4:	4b59      	ldr	r3, [pc, #356]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	4a58      	ldr	r2, [pc, #352]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0308 	and.w	r3, r3, #8
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e0c:	4b53      	ldr	r3, [pc, #332]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	4a52      	ldr	r2, [pc, #328]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e18:	4b50      	ldr	r3, [pc, #320]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	494d      	ldr	r1, [pc, #308]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d044      	beq.n	8008ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d107      	bne.n	8008e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e3e:	4b47      	ldr	r3, [pc, #284]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d119      	bne.n	8008e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e07f      	b.n	8008f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d003      	beq.n	8008e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d107      	bne.n	8008e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e5e:	4b3f      	ldr	r3, [pc, #252]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d109      	bne.n	8008e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e06f      	b.n	8008f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e6e:	4b3b      	ldr	r3, [pc, #236]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e067      	b.n	8008f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e7e:	4b37      	ldr	r3, [pc, #220]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f023 0203 	bic.w	r2, r3, #3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	4934      	ldr	r1, [pc, #208]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e90:	f7fb fd50 	bl	8004934 <HAL_GetTick>
 8008e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e96:	e00a      	b.n	8008eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e98:	f7fb fd4c 	bl	8004934 <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d901      	bls.n	8008eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e04f      	b.n	8008f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eae:	4b2b      	ldr	r3, [pc, #172]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f003 020c 	and.w	r2, r3, #12
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d1eb      	bne.n	8008e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ec0:	4b25      	ldr	r3, [pc, #148]	; (8008f58 <HAL_RCC_ClockConfig+0x1b8>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 030f 	and.w	r3, r3, #15
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d20c      	bcs.n	8008ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ece:	4b22      	ldr	r3, [pc, #136]	; (8008f58 <HAL_RCC_ClockConfig+0x1b8>)
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	b2d2      	uxtb	r2, r2
 8008ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ed6:	4b20      	ldr	r3, [pc, #128]	; (8008f58 <HAL_RCC_ClockConfig+0x1b8>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 030f 	and.w	r3, r3, #15
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d001      	beq.n	8008ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e032      	b.n	8008f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0304 	and.w	r3, r3, #4
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d008      	beq.n	8008f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ef4:	4b19      	ldr	r3, [pc, #100]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	4916      	ldr	r1, [pc, #88]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0308 	and.w	r3, r3, #8
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d009      	beq.n	8008f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f12:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	490e      	ldr	r1, [pc, #56]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f26:	f000 f821 	bl	8008f6c <HAL_RCC_GetSysClockFreq>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	4b0b      	ldr	r3, [pc, #44]	; (8008f5c <HAL_RCC_ClockConfig+0x1bc>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	091b      	lsrs	r3, r3, #4
 8008f32:	f003 030f 	and.w	r3, r3, #15
 8008f36:	490a      	ldr	r1, [pc, #40]	; (8008f60 <HAL_RCC_ClockConfig+0x1c0>)
 8008f38:	5ccb      	ldrb	r3, [r1, r3]
 8008f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3e:	4a09      	ldr	r2, [pc, #36]	; (8008f64 <HAL_RCC_ClockConfig+0x1c4>)
 8008f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <HAL_RCC_ClockConfig+0x1c8>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fb f90e 	bl	8004168 <HAL_InitTick>

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	40023c00 	.word	0x40023c00
 8008f5c:	40023800 	.word	0x40023800
 8008f60:	0807bac0 	.word	0x0807bac0
 8008f64:	2000006c 	.word	0x2000006c
 8008f68:	20000070 	.word	0x20000070

08008f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f70:	b094      	sub	sp, #80	; 0x50
 8008f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	647b      	str	r3, [r7, #68]	; 0x44
 8008f78:	2300      	movs	r3, #0
 8008f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f84:	4b79      	ldr	r3, [pc, #484]	; (800916c <HAL_RCC_GetSysClockFreq+0x200>)
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f003 030c 	and.w	r3, r3, #12
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d00d      	beq.n	8008fac <HAL_RCC_GetSysClockFreq+0x40>
 8008f90:	2b08      	cmp	r3, #8
 8008f92:	f200 80e1 	bhi.w	8009158 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	d003      	beq.n	8008fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008f9e:	e0db      	b.n	8009158 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fa0:	4b73      	ldr	r3, [pc, #460]	; (8009170 <HAL_RCC_GetSysClockFreq+0x204>)
 8008fa2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008fa4:	e0db      	b.n	800915e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fa6:	4b73      	ldr	r3, [pc, #460]	; (8009174 <HAL_RCC_GetSysClockFreq+0x208>)
 8008fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008faa:	e0d8      	b.n	800915e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fac:	4b6f      	ldr	r3, [pc, #444]	; (800916c <HAL_RCC_GetSysClockFreq+0x200>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008fb6:	4b6d      	ldr	r3, [pc, #436]	; (800916c <HAL_RCC_GetSysClockFreq+0x200>)
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d063      	beq.n	800908a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fc2:	4b6a      	ldr	r3, [pc, #424]	; (800916c <HAL_RCC_GetSysClockFreq+0x200>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	099b      	lsrs	r3, r3, #6
 8008fc8:	2200      	movs	r2, #0
 8008fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8008fda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008fde:	4622      	mov	r2, r4
 8008fe0:	462b      	mov	r3, r5
 8008fe2:	f04f 0000 	mov.w	r0, #0
 8008fe6:	f04f 0100 	mov.w	r1, #0
 8008fea:	0159      	lsls	r1, r3, #5
 8008fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ff0:	0150      	lsls	r0, r2, #5
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	1a51      	subs	r1, r2, r1
 8008ffa:	6139      	str	r1, [r7, #16]
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8009002:	617b      	str	r3, [r7, #20]
 8009004:	f04f 0200 	mov.w	r2, #0
 8009008:	f04f 0300 	mov.w	r3, #0
 800900c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009010:	4659      	mov	r1, fp
 8009012:	018b      	lsls	r3, r1, #6
 8009014:	4651      	mov	r1, sl
 8009016:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800901a:	4651      	mov	r1, sl
 800901c:	018a      	lsls	r2, r1, #6
 800901e:	4651      	mov	r1, sl
 8009020:	ebb2 0801 	subs.w	r8, r2, r1
 8009024:	4659      	mov	r1, fp
 8009026:	eb63 0901 	sbc.w	r9, r3, r1
 800902a:	f04f 0200 	mov.w	r2, #0
 800902e:	f04f 0300 	mov.w	r3, #0
 8009032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800903a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800903e:	4690      	mov	r8, r2
 8009040:	4699      	mov	r9, r3
 8009042:	4623      	mov	r3, r4
 8009044:	eb18 0303 	adds.w	r3, r8, r3
 8009048:	60bb      	str	r3, [r7, #8]
 800904a:	462b      	mov	r3, r5
 800904c:	eb49 0303 	adc.w	r3, r9, r3
 8009050:	60fb      	str	r3, [r7, #12]
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800905e:	4629      	mov	r1, r5
 8009060:	024b      	lsls	r3, r1, #9
 8009062:	4621      	mov	r1, r4
 8009064:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009068:	4621      	mov	r1, r4
 800906a:	024a      	lsls	r2, r1, #9
 800906c:	4610      	mov	r0, r2
 800906e:	4619      	mov	r1, r3
 8009070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009072:	2200      	movs	r2, #0
 8009074:	62bb      	str	r3, [r7, #40]	; 0x28
 8009076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009078:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800907c:	f7f7 f910 	bl	80002a0 <__aeabi_uldivmod>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4613      	mov	r3, r2
 8009086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009088:	e058      	b.n	800913c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800908a:	4b38      	ldr	r3, [pc, #224]	; (800916c <HAL_RCC_GetSysClockFreq+0x200>)
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	099b      	lsrs	r3, r3, #6
 8009090:	2200      	movs	r2, #0
 8009092:	4618      	mov	r0, r3
 8009094:	4611      	mov	r1, r2
 8009096:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800909a:	623b      	str	r3, [r7, #32]
 800909c:	2300      	movs	r3, #0
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
 80090a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80090a4:	4642      	mov	r2, r8
 80090a6:	464b      	mov	r3, r9
 80090a8:	f04f 0000 	mov.w	r0, #0
 80090ac:	f04f 0100 	mov.w	r1, #0
 80090b0:	0159      	lsls	r1, r3, #5
 80090b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090b6:	0150      	lsls	r0, r2, #5
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4641      	mov	r1, r8
 80090be:	ebb2 0a01 	subs.w	sl, r2, r1
 80090c2:	4649      	mov	r1, r9
 80090c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80090c8:	f04f 0200 	mov.w	r2, #0
 80090cc:	f04f 0300 	mov.w	r3, #0
 80090d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80090d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80090d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80090dc:	ebb2 040a 	subs.w	r4, r2, sl
 80090e0:	eb63 050b 	sbc.w	r5, r3, fp
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	f04f 0300 	mov.w	r3, #0
 80090ec:	00eb      	lsls	r3, r5, #3
 80090ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090f2:	00e2      	lsls	r2, r4, #3
 80090f4:	4614      	mov	r4, r2
 80090f6:	461d      	mov	r5, r3
 80090f8:	4643      	mov	r3, r8
 80090fa:	18e3      	adds	r3, r4, r3
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	464b      	mov	r3, r9
 8009100:	eb45 0303 	adc.w	r3, r5, r3
 8009104:	607b      	str	r3, [r7, #4]
 8009106:	f04f 0200 	mov.w	r2, #0
 800910a:	f04f 0300 	mov.w	r3, #0
 800910e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009112:	4629      	mov	r1, r5
 8009114:	028b      	lsls	r3, r1, #10
 8009116:	4621      	mov	r1, r4
 8009118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800911c:	4621      	mov	r1, r4
 800911e:	028a      	lsls	r2, r1, #10
 8009120:	4610      	mov	r0, r2
 8009122:	4619      	mov	r1, r3
 8009124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009126:	2200      	movs	r2, #0
 8009128:	61bb      	str	r3, [r7, #24]
 800912a:	61fa      	str	r2, [r7, #28]
 800912c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009130:	f7f7 f8b6 	bl	80002a0 <__aeabi_uldivmod>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4613      	mov	r3, r2
 800913a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800913c:	4b0b      	ldr	r3, [pc, #44]	; (800916c <HAL_RCC_GetSysClockFreq+0x200>)
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	0c1b      	lsrs	r3, r3, #16
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	3301      	adds	r3, #1
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800914c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800914e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009150:	fbb2 f3f3 	udiv	r3, r2, r3
 8009154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009156:	e002      	b.n	800915e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009158:	4b05      	ldr	r3, [pc, #20]	; (8009170 <HAL_RCC_GetSysClockFreq+0x204>)
 800915a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800915c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800915e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009160:	4618      	mov	r0, r3
 8009162:	3750      	adds	r7, #80	; 0x50
 8009164:	46bd      	mov	sp, r7
 8009166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800916a:	bf00      	nop
 800916c:	40023800 	.word	0x40023800
 8009170:	00f42400 	.word	0x00f42400
 8009174:	007a1200 	.word	0x007a1200

08009178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800917c:	4b03      	ldr	r3, [pc, #12]	; (800918c <HAL_RCC_GetHCLKFreq+0x14>)
 800917e:	681b      	ldr	r3, [r3, #0]
}
 8009180:	4618      	mov	r0, r3
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	2000006c 	.word	0x2000006c

08009190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009194:	f7ff fff0 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 8009198:	4602      	mov	r2, r0
 800919a:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	0a9b      	lsrs	r3, r3, #10
 80091a0:	f003 0307 	and.w	r3, r3, #7
 80091a4:	4903      	ldr	r1, [pc, #12]	; (80091b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091a6:	5ccb      	ldrb	r3, [r1, r3]
 80091a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	40023800 	.word	0x40023800
 80091b4:	0807bad0 	.word	0x0807bad0

080091b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80091bc:	f7ff ffdc 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 80091c0:	4602      	mov	r2, r0
 80091c2:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	0b5b      	lsrs	r3, r3, #13
 80091c8:	f003 0307 	and.w	r3, r3, #7
 80091cc:	4903      	ldr	r1, [pc, #12]	; (80091dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80091ce:	5ccb      	ldrb	r3, [r1, r3]
 80091d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	40023800 	.word	0x40023800
 80091dc:	0807bad0 	.word	0x0807bad0

080091e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	220f      	movs	r2, #15
 80091ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80091f0:	4b12      	ldr	r3, [pc, #72]	; (800923c <HAL_RCC_GetClockConfig+0x5c>)
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f003 0203 	and.w	r2, r3, #3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80091fc:	4b0f      	ldr	r3, [pc, #60]	; (800923c <HAL_RCC_GetClockConfig+0x5c>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009208:	4b0c      	ldr	r3, [pc, #48]	; (800923c <HAL_RCC_GetClockConfig+0x5c>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009214:	4b09      	ldr	r3, [pc, #36]	; (800923c <HAL_RCC_GetClockConfig+0x5c>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	08db      	lsrs	r3, r3, #3
 800921a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009222:	4b07      	ldr	r3, [pc, #28]	; (8009240 <HAL_RCC_GetClockConfig+0x60>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 020f 	and.w	r2, r3, #15
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	601a      	str	r2, [r3, #0]
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	40023800 	.word	0x40023800
 8009240:	40023c00 	.word	0x40023c00

08009244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10b      	bne.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009268:	2b00      	cmp	r3, #0
 800926a:	d105      	bne.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009274:	2b00      	cmp	r3, #0
 8009276:	d075      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009278:	4b91      	ldr	r3, [pc, #580]	; (80094c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800927e:	f7fb fb59 	bl	8004934 <HAL_GetTick>
 8009282:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009284:	e008      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009286:	f7fb fb55 	bl	8004934 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e189      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009298:	4b8a      	ldr	r3, [pc, #552]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1f0      	bne.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d009      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	019a      	lsls	r2, r3, #6
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	071b      	lsls	r3, r3, #28
 80092bc:	4981      	ldr	r1, [pc, #516]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d01f      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80092d0:	4b7c      	ldr	r3, [pc, #496]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d6:	0f1b      	lsrs	r3, r3, #28
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	019a      	lsls	r2, r3, #6
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	061b      	lsls	r3, r3, #24
 80092ea:	431a      	orrs	r2, r3
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	071b      	lsls	r3, r3, #28
 80092f0:	4974      	ldr	r1, [pc, #464]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80092f8:	4b72      	ldr	r3, [pc, #456]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092fe:	f023 021f 	bic.w	r2, r3, #31
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	3b01      	subs	r3, #1
 8009308:	496e      	ldr	r1, [pc, #440]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800930a:	4313      	orrs	r3, r2
 800930c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00d      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	019a      	lsls	r2, r3, #6
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	061b      	lsls	r3, r3, #24
 8009328:	431a      	orrs	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	071b      	lsls	r3, r3, #28
 8009330:	4964      	ldr	r1, [pc, #400]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009332:	4313      	orrs	r3, r2
 8009334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009338:	4b61      	ldr	r3, [pc, #388]	; (80094c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800933a:	2201      	movs	r2, #1
 800933c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800933e:	f7fb faf9 	bl	8004934 <HAL_GetTick>
 8009342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009344:	e008      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009346:	f7fb faf5 	bl	8004934 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b02      	cmp	r3, #2
 8009352:	d901      	bls.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e129      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009358:	4b5a      	ldr	r3, [pc, #360]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0f0      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b00      	cmp	r3, #0
 800936e:	d105      	bne.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009378:	2b00      	cmp	r3, #0
 800937a:	d079      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800937c:	4b52      	ldr	r3, [pc, #328]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009382:	f7fb fad7 	bl	8004934 <HAL_GetTick>
 8009386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009388:	e008      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800938a:	f7fb fad3 	bl	8004934 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	2b02      	cmp	r3, #2
 8009396:	d901      	bls.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e107      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800939c:	4b49      	ldr	r3, [pc, #292]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a8:	d0ef      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d020      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80093b6:	4b43      	ldr	r3, [pc, #268]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80093b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093bc:	0f1b      	lsrs	r3, r3, #28
 80093be:	f003 0307 	and.w	r3, r3, #7
 80093c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	019a      	lsls	r2, r3, #6
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	061b      	lsls	r3, r3, #24
 80093d0:	431a      	orrs	r2, r3
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	071b      	lsls	r3, r3, #28
 80093d6:	493b      	ldr	r1, [pc, #236]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80093de:	4b39      	ldr	r3, [pc, #228]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80093e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	3b01      	subs	r3, #1
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	4934      	ldr	r1, [pc, #208]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80093f2:	4313      	orrs	r3, r2
 80093f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b00      	cmp	r3, #0
 8009402:	d01e      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009404:	4b2f      	ldr	r3, [pc, #188]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800940a:	0e1b      	lsrs	r3, r3, #24
 800940c:	f003 030f 	and.w	r3, r3, #15
 8009410:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	019a      	lsls	r2, r3, #6
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	061b      	lsls	r3, r3, #24
 800941c:	431a      	orrs	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	071b      	lsls	r3, r3, #28
 8009424:	4927      	ldr	r1, [pc, #156]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009426:	4313      	orrs	r3, r2
 8009428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800942c:	4b25      	ldr	r3, [pc, #148]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800942e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009432:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	4922      	ldr	r1, [pc, #136]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800943c:	4313      	orrs	r3, r2
 800943e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009442:	4b21      	ldr	r3, [pc, #132]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009444:	2201      	movs	r2, #1
 8009446:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009448:	f7fb fa74 	bl	8004934 <HAL_GetTick>
 800944c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800944e:	e008      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009450:	f7fb fa70 	bl	8004934 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	2b02      	cmp	r3, #2
 800945c:	d901      	bls.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	e0a4      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009462:	4b18      	ldr	r3, [pc, #96]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800946a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800946e:	d1ef      	bne.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0320 	and.w	r3, r3, #32
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 808b 	beq.w	8009594 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800947e:	2300      	movs	r3, #0
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	4b10      	ldr	r3, [pc, #64]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	4a0f      	ldr	r2, [pc, #60]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800948c:	6413      	str	r3, [r2, #64]	; 0x40
 800948e:	4b0d      	ldr	r3, [pc, #52]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800949a:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a0b      	ldr	r2, [pc, #44]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80094a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094a6:	f7fb fa45 	bl	8004934 <HAL_GetTick>
 80094aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094ac:	e010      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80094ae:	f7fb fa41 	bl	8004934 <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d909      	bls.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e075      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x368>
 80094c0:	42470068 	.word	0x42470068
 80094c4:	40023800 	.word	0x40023800
 80094c8:	42470070 	.word	0x42470070
 80094cc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094d0:	4b38      	ldr	r3, [pc, #224]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d0e8      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80094dc:	4b36      	ldr	r3, [pc, #216]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80094de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d02f      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d028      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094fa:	4b2f      	ldr	r3, [pc, #188]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80094fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009502:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009504:	4b2d      	ldr	r3, [pc, #180]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009506:	2201      	movs	r2, #1
 8009508:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800950a:	4b2c      	ldr	r3, [pc, #176]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800950c:	2200      	movs	r2, #0
 800950e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009510:	4a29      	ldr	r2, [pc, #164]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009516:	4b28      	ldr	r3, [pc, #160]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b01      	cmp	r3, #1
 8009520:	d114      	bne.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009522:	f7fb fa07 	bl	8004934 <HAL_GetTick>
 8009526:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009528:	e00a      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800952a:	f7fb fa03 	bl	8004934 <HAL_GetTick>
 800952e:	4602      	mov	r2, r0
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	f241 3288 	movw	r2, #5000	; 0x1388
 8009538:	4293      	cmp	r3, r2
 800953a:	d901      	bls.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e035      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009540:	4b1d      	ldr	r3, [pc, #116]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0ee      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009558:	d10d      	bne.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800955a:	4b17      	ldr	r3, [pc, #92]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009566:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800956a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800956e:	4912      	ldr	r1, [pc, #72]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009570:	4313      	orrs	r3, r2
 8009572:	608b      	str	r3, [r1, #8]
 8009574:	e005      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8009576:	4b10      	ldr	r3, [pc, #64]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	4a0f      	ldr	r2, [pc, #60]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800957c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009580:	6093      	str	r3, [r2, #8]
 8009582:	4b0d      	ldr	r3, [pc, #52]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800958e:	490a      	ldr	r1, [pc, #40]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009590:	4313      	orrs	r3, r2
 8009592:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0310 	and.w	r3, r3, #16
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80095a6:	4b06      	ldr	r3, [pc, #24]	; (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80095a8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	40007000 	.word	0x40007000
 80095b8:	40023800 	.word	0x40023800
 80095bc:	42470e40 	.word	0x42470e40
 80095c0:	424711e0 	.word	0x424711e0

080095c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e025      	b.n	8009624 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7fa fdb1 	bl	8004154 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2202      	movs	r2, #2
 80095f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3304      	adds	r3, #4
 8009602:	4619      	mov	r1, r3
 8009604:	4610      	mov	r0, r2
 8009606:	f001 fd91 	bl	800b12c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	461a      	mov	r2, r3
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	f001 fde6 	bl	800b1e6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800963e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	2b02      	cmp	r3, #2
 8009644:	d101      	bne.n	800964a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009646:	2302      	movs	r3, #2
 8009648:	e021      	b.n	800968e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800964a:	7dfb      	ldrb	r3, [r7, #23]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d002      	beq.n	8009656 <HAL_SDRAM_SendCommand+0x2a>
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	2b05      	cmp	r3, #5
 8009654:	d118      	bne.n	8009688 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2202      	movs	r2, #2
 800965a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	4618      	mov	r0, r3
 8009668:	f001 fe26 	bl	800b2b8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b02      	cmp	r3, #2
 8009672:	d104      	bne.n	800967e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2205      	movs	r2, #5
 8009678:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800967c:	e006      	b.n	800968c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009686:	e001      	b.n	800968c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e000      	b.n	800968e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b082      	sub	sp, #8
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d101      	bne.n	80096b0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80096ac:	2302      	movs	r3, #2
 80096ae:	e016      	b.n	80096de <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d10f      	bne.n	80096dc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f001 fe31 	bl	800b332 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	e000      	b.n	80096de <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e07b      	b.n	80097f0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d108      	bne.n	8009712 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009708:	d009      	beq.n	800971e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	61da      	str	r2, [r3, #28]
 8009710:	e005      	b.n	800971e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d106      	bne.n	800973e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7fa fba9 	bl	8003e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2202      	movs	r2, #2
 8009742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009754:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009766:	431a      	orrs	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009770:	431a      	orrs	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	431a      	orrs	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800978e:	431a      	orrs	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009798:	431a      	orrs	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a2:	ea42 0103 	orr.w	r1, r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	430a      	orrs	r2, r1
 80097b4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	0c1b      	lsrs	r3, r3, #16
 80097bc:	f003 0104 	and.w	r1, r3, #4
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	f003 0210 	and.w	r2, r3, #16
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	69da      	ldr	r2, [r3, #28]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e01a      	b.n	8009840 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2202      	movs	r2, #2
 800980e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009820:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7fa fb7c 	bl	8003f20 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	603b      	str	r3, [r7, #0]
 8009854:	4613      	mov	r3, r2
 8009856:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009862:	2b01      	cmp	r3, #1
 8009864:	d101      	bne.n	800986a <HAL_SPI_Transmit+0x22>
 8009866:	2302      	movs	r3, #2
 8009868:	e126      	b.n	8009ab8 <HAL_SPI_Transmit+0x270>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009872:	f7fb f85f 	bl	8004934 <HAL_GetTick>
 8009876:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b01      	cmp	r3, #1
 8009886:	d002      	beq.n	800988e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009888:	2302      	movs	r3, #2
 800988a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800988c:	e10b      	b.n	8009aa6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <HAL_SPI_Transmit+0x52>
 8009894:	88fb      	ldrh	r3, [r7, #6]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d102      	bne.n	80098a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800989e:	e102      	b.n	8009aa6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2203      	movs	r2, #3
 80098a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	88fa      	ldrh	r2, [r7, #6]
 80098b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	88fa      	ldrh	r2, [r7, #6]
 80098be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2200      	movs	r2, #0
 80098c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098e6:	d10f      	bne.n	8009908 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009906:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009912:	2b40      	cmp	r3, #64	; 0x40
 8009914:	d007      	beq.n	8009926 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009924:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800992e:	d14b      	bne.n	80099c8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <HAL_SPI_Transmit+0xf6>
 8009938:	8afb      	ldrh	r3, [r7, #22]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d13e      	bne.n	80099bc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009942:	881a      	ldrh	r2, [r3, #0]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994e:	1c9a      	adds	r2, r3, #2
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009958:	b29b      	uxth	r3, r3
 800995a:	3b01      	subs	r3, #1
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009962:	e02b      	b.n	80099bc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b02      	cmp	r3, #2
 8009970:	d112      	bne.n	8009998 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009976:	881a      	ldrh	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009982:	1c9a      	adds	r2, r3, #2
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800998c:	b29b      	uxth	r3, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	86da      	strh	r2, [r3, #54]	; 0x36
 8009996:	e011      	b.n	80099bc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009998:	f7fa ffcc 	bl	8004934 <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d803      	bhi.n	80099b0 <HAL_SPI_Transmit+0x168>
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ae:	d102      	bne.n	80099b6 <HAL_SPI_Transmit+0x16e>
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d102      	bne.n	80099bc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80099ba:	e074      	b.n	8009aa6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1ce      	bne.n	8009964 <HAL_SPI_Transmit+0x11c>
 80099c6:	e04c      	b.n	8009a62 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <HAL_SPI_Transmit+0x18e>
 80099d0:	8afb      	ldrh	r3, [r7, #22]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d140      	bne.n	8009a58 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	330c      	adds	r3, #12
 80099e0:	7812      	ldrb	r2, [r2, #0]
 80099e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80099fc:	e02c      	b.n	8009a58 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f003 0302 	and.w	r3, r3, #2
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d113      	bne.n	8009a34 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	330c      	adds	r3, #12
 8009a16:	7812      	ldrb	r2, [r2, #0]
 8009a18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	86da      	strh	r2, [r3, #54]	; 0x36
 8009a32:	e011      	b.n	8009a58 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a34:	f7fa ff7e 	bl	8004934 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d803      	bhi.n	8009a4c <HAL_SPI_Transmit+0x204>
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4a:	d102      	bne.n	8009a52 <HAL_SPI_Transmit+0x20a>
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d102      	bne.n	8009a58 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009a56:	e026      	b.n	8009aa6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1cd      	bne.n	80099fe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 fbda 	bl	800a220 <SPI_EndRxTxTransaction>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2220      	movs	r2, #32
 8009a76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10a      	bne.n	8009a96 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a80:	2300      	movs	r3, #0
 8009a82:	613b      	str	r3, [r7, #16]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	613b      	str	r3, [r7, #16]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	613b      	str	r3, [r7, #16]
 8009a94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	77fb      	strb	r3, [r7, #31]
 8009aa2:	e000      	b.n	8009aa6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009aa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3720      	adds	r7, #32
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af02      	add	r7, sp, #8
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	603b      	str	r3, [r7, #0]
 8009acc:	4613      	mov	r3, r2
 8009ace:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009adc:	d112      	bne.n	8009b04 <HAL_SPI_Receive+0x44>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10e      	bne.n	8009b04 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2204      	movs	r2, #4
 8009aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009aee:	88fa      	ldrh	r2, [r7, #6]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	4613      	mov	r3, r2
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	68b9      	ldr	r1, [r7, #8]
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 f8f1 	bl	8009ce2 <HAL_SPI_TransmitReceive>
 8009b00:	4603      	mov	r3, r0
 8009b02:	e0ea      	b.n	8009cda <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d101      	bne.n	8009b12 <HAL_SPI_Receive+0x52>
 8009b0e:	2302      	movs	r3, #2
 8009b10:	e0e3      	b.n	8009cda <HAL_SPI_Receive+0x21a>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b1a:	f7fa ff0b 	bl	8004934 <HAL_GetTick>
 8009b1e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d002      	beq.n	8009b32 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009b30:	e0ca      	b.n	8009cc8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <HAL_SPI_Receive+0x7e>
 8009b38:	88fb      	ldrh	r3, [r7, #6]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009b42:	e0c1      	b.n	8009cc8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2204      	movs	r2, #4
 8009b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	88fa      	ldrh	r2, [r7, #6]
 8009b5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	88fa      	ldrh	r2, [r7, #6]
 8009b62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b8a:	d10f      	bne.n	8009bac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009baa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb6:	2b40      	cmp	r3, #64	; 0x40
 8009bb8:	d007      	beq.n	8009bca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d162      	bne.n	8009c98 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009bd2:	e02e      	b.n	8009c32 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d115      	bne.n	8009c0e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f103 020c 	add.w	r2, r3, #12
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bee:	7812      	ldrb	r2, [r2, #0]
 8009bf0:	b2d2      	uxtb	r2, r2
 8009bf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	3b01      	subs	r3, #1
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c0c:	e011      	b.n	8009c32 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c0e:	f7fa fe91 	bl	8004934 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d803      	bhi.n	8009c26 <HAL_SPI_Receive+0x166>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c24:	d102      	bne.n	8009c2c <HAL_SPI_Receive+0x16c>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009c30:	e04a      	b.n	8009cc8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1cb      	bne.n	8009bd4 <HAL_SPI_Receive+0x114>
 8009c3c:	e031      	b.n	8009ca2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d113      	bne.n	8009c74 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68da      	ldr	r2, [r3, #12]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c56:	b292      	uxth	r2, r2
 8009c58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5e:	1c9a      	adds	r2, r3, #2
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c72:	e011      	b.n	8009c98 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c74:	f7fa fe5e 	bl	8004934 <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d803      	bhi.n	8009c8c <HAL_SPI_Receive+0x1cc>
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8a:	d102      	bne.n	8009c92 <HAL_SPI_Receive+0x1d2>
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d102      	bne.n	8009c98 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009c96:	e017      	b.n	8009cc8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1cd      	bne.n	8009c3e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f000 fa54 	bl	800a154 <SPI_EndRxTransaction>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	75fb      	strb	r3, [r7, #23]
 8009cc4:	e000      	b.n	8009cc8 <HAL_SPI_Receive+0x208>
  }

error :
 8009cc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b08c      	sub	sp, #48	; 0x30
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	607a      	str	r2, [r7, #4]
 8009cee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d101      	bne.n	8009d08 <HAL_SPI_TransmitReceive+0x26>
 8009d04:	2302      	movs	r3, #2
 8009d06:	e18a      	b.n	800a01e <HAL_SPI_TransmitReceive+0x33c>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d10:	f7fa fe10 	bl	8004934 <HAL_GetTick>
 8009d14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009d26:	887b      	ldrh	r3, [r7, #2]
 8009d28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d00f      	beq.n	8009d52 <HAL_SPI_TransmitReceive+0x70>
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d38:	d107      	bne.n	8009d4a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d103      	bne.n	8009d4a <HAL_SPI_TransmitReceive+0x68>
 8009d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	d003      	beq.n	8009d52 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009d50:	e15b      	b.n	800a00a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d005      	beq.n	8009d64 <HAL_SPI_TransmitReceive+0x82>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <HAL_SPI_TransmitReceive+0x82>
 8009d5e:	887b      	ldrh	r3, [r7, #2]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d103      	bne.n	8009d6c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009d6a:	e14e      	b.n	800a00a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b04      	cmp	r3, #4
 8009d76:	d003      	beq.n	8009d80 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2205      	movs	r2, #5
 8009d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	887a      	ldrh	r2, [r7, #2]
 8009d90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	887a      	ldrh	r2, [r7, #2]
 8009d96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	887a      	ldrh	r2, [r7, #2]
 8009da2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	887a      	ldrh	r2, [r7, #2]
 8009da8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc0:	2b40      	cmp	r3, #64	; 0x40
 8009dc2:	d007      	beq.n	8009dd4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ddc:	d178      	bne.n	8009ed0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <HAL_SPI_TransmitReceive+0x10a>
 8009de6:	8b7b      	ldrh	r3, [r7, #26]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d166      	bne.n	8009eba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df0:	881a      	ldrh	r2, [r3, #0]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfc:	1c9a      	adds	r2, r3, #2
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e10:	e053      	b.n	8009eba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f003 0302 	and.w	r3, r3, #2
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d11b      	bne.n	8009e58 <HAL_SPI_TransmitReceive+0x176>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d016      	beq.n	8009e58 <HAL_SPI_TransmitReceive+0x176>
 8009e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d113      	bne.n	8009e58 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e34:	881a      	ldrh	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e40:	1c9a      	adds	r2, r3, #2
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d119      	bne.n	8009e9a <HAL_SPI_TransmitReceive+0x1b8>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d014      	beq.n	8009e9a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68da      	ldr	r2, [r3, #12]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7a:	b292      	uxth	r2, r2
 8009e7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e82:	1c9a      	adds	r2, r3, #2
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e96:	2301      	movs	r3, #1
 8009e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e9a:	f7fa fd4b 	bl	8004934 <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d807      	bhi.n	8009eba <HAL_SPI_TransmitReceive+0x1d8>
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb0:	d003      	beq.n	8009eba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009eb8:	e0a7      	b.n	800a00a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1a6      	bne.n	8009e12 <HAL_SPI_TransmitReceive+0x130>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1a1      	bne.n	8009e12 <HAL_SPI_TransmitReceive+0x130>
 8009ece:	e07c      	b.n	8009fca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <HAL_SPI_TransmitReceive+0x1fc>
 8009ed8:	8b7b      	ldrh	r3, [r7, #26]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d16b      	bne.n	8009fb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	330c      	adds	r3, #12
 8009ee8:	7812      	ldrb	r2, [r2, #0]
 8009eea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	3b01      	subs	r3, #1
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f04:	e057      	b.n	8009fb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	f003 0302 	and.w	r3, r3, #2
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d11c      	bne.n	8009f4e <HAL_SPI_TransmitReceive+0x26c>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d017      	beq.n	8009f4e <HAL_SPI_TransmitReceive+0x26c>
 8009f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d114      	bne.n	8009f4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	330c      	adds	r3, #12
 8009f2e:	7812      	ldrb	r2, [r2, #0]
 8009f30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	3b01      	subs	r3, #1
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f003 0301 	and.w	r3, r3, #1
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d119      	bne.n	8009f90 <HAL_SPI_TransmitReceive+0x2ae>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d014      	beq.n	8009f90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f70:	b2d2      	uxtb	r2, r2
 8009f72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	3b01      	subs	r3, #1
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f90:	f7fa fcd0 	bl	8004934 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d803      	bhi.n	8009fa8 <HAL_SPI_TransmitReceive+0x2c6>
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa6:	d102      	bne.n	8009fae <HAL_SPI_TransmitReceive+0x2cc>
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d103      	bne.n	8009fb6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009fb4:	e029      	b.n	800a00a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1a2      	bne.n	8009f06 <HAL_SPI_TransmitReceive+0x224>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d19d      	bne.n	8009f06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 f926 	bl	800a220 <SPI_EndRxTxTransaction>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d006      	beq.n	8009fe8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009fe6:	e010      	b.n	800a00a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10b      	bne.n	800a008 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	617b      	str	r3, [r7, #20]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	e000      	b.n	800a00a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a008:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a01a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3730      	adds	r7, #48	; 0x30
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a026:	b480      	push	{r7}
 800a028:	b083      	sub	sp, #12
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a034:	b2db      	uxtb	r3, r3
}
 800a036:	4618      	mov	r0, r3
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
	...

0800a044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b088      	sub	sp, #32
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	603b      	str	r3, [r7, #0]
 800a050:	4613      	mov	r3, r2
 800a052:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a054:	f7fa fc6e 	bl	8004934 <HAL_GetTick>
 800a058:	4602      	mov	r2, r0
 800a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05c:	1a9b      	subs	r3, r3, r2
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	4413      	add	r3, r2
 800a062:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a064:	f7fa fc66 	bl	8004934 <HAL_GetTick>
 800a068:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a06a:	4b39      	ldr	r3, [pc, #228]	; (800a150 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	015b      	lsls	r3, r3, #5
 800a070:	0d1b      	lsrs	r3, r3, #20
 800a072:	69fa      	ldr	r2, [r7, #28]
 800a074:	fb02 f303 	mul.w	r3, r2, r3
 800a078:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a07a:	e054      	b.n	800a126 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a082:	d050      	beq.n	800a126 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a084:	f7fa fc56 	bl	8004934 <HAL_GetTick>
 800a088:	4602      	mov	r2, r0
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	429a      	cmp	r2, r3
 800a092:	d902      	bls.n	800a09a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d13d      	bne.n	800a116 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0b2:	d111      	bne.n	800a0d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0bc:	d004      	beq.n	800a0c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0c6:	d107      	bne.n	800a0d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0e0:	d10f      	bne.n	800a102 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a100:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e017      	b.n	800a146 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a11c:	2300      	movs	r3, #0
 800a11e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	3b01      	subs	r3, #1
 800a124:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	689a      	ldr	r2, [r3, #8]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	4013      	ands	r3, r2
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	429a      	cmp	r2, r3
 800a134:	bf0c      	ite	eq
 800a136:	2301      	moveq	r3, #1
 800a138:	2300      	movne	r3, #0
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	461a      	mov	r2, r3
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	429a      	cmp	r2, r3
 800a142:	d19b      	bne.n	800a07c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3720      	adds	r7, #32
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	2000006c 	.word	0x2000006c

0800a154 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af02      	add	r7, sp, #8
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a168:	d111      	bne.n	800a18e <SPI_EndRxTransaction+0x3a>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a172:	d004      	beq.n	800a17e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a17c:	d107      	bne.n	800a18e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a18c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a196:	d12a      	bne.n	800a1ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1a0:	d012      	beq.n	800a1c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	2180      	movs	r1, #128	; 0x80
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7ff ff49 	bl	800a044 <SPI_WaitFlagStateUntilTimeout>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d02d      	beq.n	800a214 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1bc:	f043 0220 	orr.w	r2, r3, #32
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e026      	b.n	800a216 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f7ff ff36 	bl	800a044 <SPI_WaitFlagStateUntilTimeout>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d01a      	beq.n	800a214 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e2:	f043 0220 	orr.w	r2, r3, #32
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e013      	b.n	800a216 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f7ff ff23 	bl	800a044 <SPI_WaitFlagStateUntilTimeout>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d007      	beq.n	800a214 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a208:	f043 0220 	orr.w	r2, r3, #32
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a210:	2303      	movs	r3, #3
 800a212:	e000      	b.n	800a216 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
	...

0800a220 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b088      	sub	sp, #32
 800a224:	af02      	add	r7, sp, #8
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a22c:	4b1b      	ldr	r3, [pc, #108]	; (800a29c <SPI_EndRxTxTransaction+0x7c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a1b      	ldr	r2, [pc, #108]	; (800a2a0 <SPI_EndRxTxTransaction+0x80>)
 800a232:	fba2 2303 	umull	r2, r3, r2, r3
 800a236:	0d5b      	lsrs	r3, r3, #21
 800a238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a23c:	fb02 f303 	mul.w	r3, r2, r3
 800a240:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a24a:	d112      	bne.n	800a272 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2200      	movs	r2, #0
 800a254:	2180      	movs	r1, #128	; 0x80
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f7ff fef4 	bl	800a044 <SPI_WaitFlagStateUntilTimeout>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d016      	beq.n	800a290 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a266:	f043 0220 	orr.w	r2, r3, #32
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e00f      	b.n	800a292 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00a      	beq.n	800a28e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a288:	2b80      	cmp	r3, #128	; 0x80
 800a28a:	d0f2      	beq.n	800a272 <SPI_EndRxTxTransaction+0x52>
 800a28c:	e000      	b.n	800a290 <SPI_EndRxTxTransaction+0x70>
        break;
 800a28e:	bf00      	nop
  }

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	2000006c 	.word	0x2000006c
 800a2a0:	165e9f81 	.word	0x165e9f81

0800a2a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e041      	b.n	800a33a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d106      	bne.n	800a2d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7f9 fe46 	bl	8003f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3304      	adds	r3, #4
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	f000 fa96 	bl	800a814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b01      	cmp	r3, #1
 800a356:	d001      	beq.n	800a35c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e04e      	b.n	800a3fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68da      	ldr	r2, [r3, #12]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f042 0201 	orr.w	r2, r2, #1
 800a372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a23      	ldr	r2, [pc, #140]	; (800a408 <HAL_TIM_Base_Start_IT+0xc4>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d022      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0x80>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a386:	d01d      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0x80>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a1f      	ldr	r2, [pc, #124]	; (800a40c <HAL_TIM_Base_Start_IT+0xc8>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d018      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0x80>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a1e      	ldr	r2, [pc, #120]	; (800a410 <HAL_TIM_Base_Start_IT+0xcc>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d013      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0x80>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a1c      	ldr	r2, [pc, #112]	; (800a414 <HAL_TIM_Base_Start_IT+0xd0>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d00e      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0x80>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a1b      	ldr	r2, [pc, #108]	; (800a418 <HAL_TIM_Base_Start_IT+0xd4>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d009      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0x80>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a19      	ldr	r2, [pc, #100]	; (800a41c <HAL_TIM_Base_Start_IT+0xd8>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d004      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0x80>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a18      	ldr	r2, [pc, #96]	; (800a420 <HAL_TIM_Base_Start_IT+0xdc>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d111      	bne.n	800a3e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	f003 0307 	and.w	r3, r3, #7
 800a3ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b06      	cmp	r3, #6
 800a3d4:	d010      	beq.n	800a3f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f042 0201 	orr.w	r2, r2, #1
 800a3e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3e6:	e007      	b.n	800a3f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f042 0201 	orr.w	r2, r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	40010000 	.word	0x40010000
 800a40c:	40000400 	.word	0x40000400
 800a410:	40000800 	.word	0x40000800
 800a414:	40000c00 	.word	0x40000c00
 800a418:	40010400 	.word	0x40010400
 800a41c:	40014000 	.word	0x40014000
 800a420:	40001800 	.word	0x40001800

0800a424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	f003 0302 	and.w	r3, r3, #2
 800a436:	2b02      	cmp	r3, #2
 800a438:	d122      	bne.n	800a480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	f003 0302 	and.w	r3, r3, #2
 800a444:	2b02      	cmp	r3, #2
 800a446:	d11b      	bne.n	800a480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f06f 0202 	mvn.w	r2, #2
 800a450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2201      	movs	r2, #1
 800a456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	f003 0303 	and.w	r3, r3, #3
 800a462:	2b00      	cmp	r3, #0
 800a464:	d003      	beq.n	800a46e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f9b5 	bl	800a7d6 <HAL_TIM_IC_CaptureCallback>
 800a46c:	e005      	b.n	800a47a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f9a7 	bl	800a7c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f9b8 	bl	800a7ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	f003 0304 	and.w	r3, r3, #4
 800a48a:	2b04      	cmp	r3, #4
 800a48c:	d122      	bne.n	800a4d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	f003 0304 	and.w	r3, r3, #4
 800a498:	2b04      	cmp	r3, #4
 800a49a:	d11b      	bne.n	800a4d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f06f 0204 	mvn.w	r2, #4
 800a4a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f98b 	bl	800a7d6 <HAL_TIM_IC_CaptureCallback>
 800a4c0:	e005      	b.n	800a4ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f97d 	bl	800a7c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f98e 	bl	800a7ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	f003 0308 	and.w	r3, r3, #8
 800a4de:	2b08      	cmp	r3, #8
 800a4e0:	d122      	bne.n	800a528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	f003 0308 	and.w	r3, r3, #8
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	d11b      	bne.n	800a528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f06f 0208 	mvn.w	r2, #8
 800a4f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2204      	movs	r2, #4
 800a4fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	69db      	ldr	r3, [r3, #28]
 800a506:	f003 0303 	and.w	r3, r3, #3
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d003      	beq.n	800a516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f961 	bl	800a7d6 <HAL_TIM_IC_CaptureCallback>
 800a514:	e005      	b.n	800a522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f953 	bl	800a7c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f964 	bl	800a7ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	f003 0310 	and.w	r3, r3, #16
 800a532:	2b10      	cmp	r3, #16
 800a534:	d122      	bne.n	800a57c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	f003 0310 	and.w	r3, r3, #16
 800a540:	2b10      	cmp	r3, #16
 800a542:	d11b      	bne.n	800a57c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f06f 0210 	mvn.w	r2, #16
 800a54c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2208      	movs	r2, #8
 800a552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	69db      	ldr	r3, [r3, #28]
 800a55a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f937 	bl	800a7d6 <HAL_TIM_IC_CaptureCallback>
 800a568:	e005      	b.n	800a576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f929 	bl	800a7c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f93a 	bl	800a7ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b01      	cmp	r3, #1
 800a588:	d10e      	bne.n	800a5a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	f003 0301 	and.w	r3, r3, #1
 800a594:	2b01      	cmp	r3, #1
 800a596:	d107      	bne.n	800a5a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f06f 0201 	mvn.w	r2, #1
 800a5a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7f7 fcd2 	bl	8001f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5b2:	2b80      	cmp	r3, #128	; 0x80
 800a5b4:	d10e      	bne.n	800a5d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c0:	2b80      	cmp	r3, #128	; 0x80
 800a5c2:	d107      	bne.n	800a5d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a5cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fae0 	bl	800ab94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5de:	2b40      	cmp	r3, #64	; 0x40
 800a5e0:	d10e      	bne.n	800a600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ec:	2b40      	cmp	r3, #64	; 0x40
 800a5ee:	d107      	bne.n	800a600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f8ff 	bl	800a7fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	f003 0320 	and.w	r3, r3, #32
 800a60a:	2b20      	cmp	r3, #32
 800a60c:	d10e      	bne.n	800a62c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	f003 0320 	and.w	r3, r3, #32
 800a618:	2b20      	cmp	r3, #32
 800a61a:	d107      	bne.n	800a62c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f06f 0220 	mvn.w	r2, #32
 800a624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 faaa 	bl	800ab80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a62c:	bf00      	nop
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d101      	bne.n	800a650 <HAL_TIM_ConfigClockSource+0x1c>
 800a64c:	2302      	movs	r3, #2
 800a64e:	e0b4      	b.n	800a7ba <HAL_TIM_ConfigClockSource+0x186>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a66e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a688:	d03e      	beq.n	800a708 <HAL_TIM_ConfigClockSource+0xd4>
 800a68a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a68e:	f200 8087 	bhi.w	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a696:	f000 8086 	beq.w	800a7a6 <HAL_TIM_ConfigClockSource+0x172>
 800a69a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a69e:	d87f      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6a0:	2b70      	cmp	r3, #112	; 0x70
 800a6a2:	d01a      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0xa6>
 800a6a4:	2b70      	cmp	r3, #112	; 0x70
 800a6a6:	d87b      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6a8:	2b60      	cmp	r3, #96	; 0x60
 800a6aa:	d050      	beq.n	800a74e <HAL_TIM_ConfigClockSource+0x11a>
 800a6ac:	2b60      	cmp	r3, #96	; 0x60
 800a6ae:	d877      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6b0:	2b50      	cmp	r3, #80	; 0x50
 800a6b2:	d03c      	beq.n	800a72e <HAL_TIM_ConfigClockSource+0xfa>
 800a6b4:	2b50      	cmp	r3, #80	; 0x50
 800a6b6:	d873      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6b8:	2b40      	cmp	r3, #64	; 0x40
 800a6ba:	d058      	beq.n	800a76e <HAL_TIM_ConfigClockSource+0x13a>
 800a6bc:	2b40      	cmp	r3, #64	; 0x40
 800a6be:	d86f      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6c0:	2b30      	cmp	r3, #48	; 0x30
 800a6c2:	d064      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x15a>
 800a6c4:	2b30      	cmp	r3, #48	; 0x30
 800a6c6:	d86b      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6c8:	2b20      	cmp	r3, #32
 800a6ca:	d060      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x15a>
 800a6cc:	2b20      	cmp	r3, #32
 800a6ce:	d867      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d05c      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x15a>
 800a6d4:	2b10      	cmp	r3, #16
 800a6d6:	d05a      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x15a>
 800a6d8:	e062      	b.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	6899      	ldr	r1, [r3, #8]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f000 f9ad 	bl	800aa48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	609a      	str	r2, [r3, #8]
      break;
 800a706:	e04f      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6818      	ldr	r0, [r3, #0]
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	6899      	ldr	r1, [r3, #8]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	f000 f996 	bl	800aa48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689a      	ldr	r2, [r3, #8]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a72a:	609a      	str	r2, [r3, #8]
      break;
 800a72c:	e03c      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	6859      	ldr	r1, [r3, #4]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	461a      	mov	r2, r3
 800a73c:	f000 f90a 	bl	800a954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2150      	movs	r1, #80	; 0x50
 800a746:	4618      	mov	r0, r3
 800a748:	f000 f963 	bl	800aa12 <TIM_ITRx_SetConfig>
      break;
 800a74c:	e02c      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6818      	ldr	r0, [r3, #0]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	6859      	ldr	r1, [r3, #4]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	461a      	mov	r2, r3
 800a75c:	f000 f929 	bl	800a9b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2160      	movs	r1, #96	; 0x60
 800a766:	4618      	mov	r0, r3
 800a768:	f000 f953 	bl	800aa12 <TIM_ITRx_SetConfig>
      break;
 800a76c:	e01c      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	6859      	ldr	r1, [r3, #4]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	461a      	mov	r2, r3
 800a77c:	f000 f8ea 	bl	800a954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2140      	movs	r1, #64	; 0x40
 800a786:	4618      	mov	r0, r3
 800a788:	f000 f943 	bl	800aa12 <TIM_ITRx_SetConfig>
      break;
 800a78c:	e00c      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4619      	mov	r1, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	f000 f93a 	bl	800aa12 <TIM_ITRx_SetConfig>
      break;
 800a79e:	e003      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7a4:	e000      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a7a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7ca:	bf00      	nop
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7de:	bf00      	nop
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b083      	sub	sp, #12
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7f2:	bf00      	nop
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
	...

0800a814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a40      	ldr	r2, [pc, #256]	; (800a928 <TIM_Base_SetConfig+0x114>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d013      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a832:	d00f      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a3d      	ldr	r2, [pc, #244]	; (800a92c <TIM_Base_SetConfig+0x118>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d00b      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a3c      	ldr	r2, [pc, #240]	; (800a930 <TIM_Base_SetConfig+0x11c>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d007      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a3b      	ldr	r2, [pc, #236]	; (800a934 <TIM_Base_SetConfig+0x120>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d003      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a3a      	ldr	r2, [pc, #232]	; (800a938 <TIM_Base_SetConfig+0x124>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d108      	bne.n	800a866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a85a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	4313      	orrs	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a2f      	ldr	r2, [pc, #188]	; (800a928 <TIM_Base_SetConfig+0x114>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d02b      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a874:	d027      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a2c      	ldr	r2, [pc, #176]	; (800a92c <TIM_Base_SetConfig+0x118>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d023      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a2b      	ldr	r2, [pc, #172]	; (800a930 <TIM_Base_SetConfig+0x11c>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d01f      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a2a      	ldr	r2, [pc, #168]	; (800a934 <TIM_Base_SetConfig+0x120>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d01b      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a29      	ldr	r2, [pc, #164]	; (800a938 <TIM_Base_SetConfig+0x124>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d017      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a28      	ldr	r2, [pc, #160]	; (800a93c <TIM_Base_SetConfig+0x128>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d013      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a27      	ldr	r2, [pc, #156]	; (800a940 <TIM_Base_SetConfig+0x12c>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d00f      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a26      	ldr	r2, [pc, #152]	; (800a944 <TIM_Base_SetConfig+0x130>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d00b      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a25      	ldr	r2, [pc, #148]	; (800a948 <TIM_Base_SetConfig+0x134>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d007      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a24      	ldr	r2, [pc, #144]	; (800a94c <TIM_Base_SetConfig+0x138>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d003      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a23      	ldr	r2, [pc, #140]	; (800a950 <TIM_Base_SetConfig+0x13c>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d108      	bne.n	800a8d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	689a      	ldr	r2, [r3, #8]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a0a      	ldr	r2, [pc, #40]	; (800a928 <TIM_Base_SetConfig+0x114>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d003      	beq.n	800a90c <TIM_Base_SetConfig+0xf8>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a0c      	ldr	r2, [pc, #48]	; (800a938 <TIM_Base_SetConfig+0x124>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d103      	bne.n	800a914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	691a      	ldr	r2, [r3, #16]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	615a      	str	r2, [r3, #20]
}
 800a91a:	bf00      	nop
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	40010000 	.word	0x40010000
 800a92c:	40000400 	.word	0x40000400
 800a930:	40000800 	.word	0x40000800
 800a934:	40000c00 	.word	0x40000c00
 800a938:	40010400 	.word	0x40010400
 800a93c:	40014000 	.word	0x40014000
 800a940:	40014400 	.word	0x40014400
 800a944:	40014800 	.word	0x40014800
 800a948:	40001800 	.word	0x40001800
 800a94c:	40001c00 	.word	0x40001c00
 800a950:	40002000 	.word	0x40002000

0800a954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6a1b      	ldr	r3, [r3, #32]
 800a964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	f023 0201 	bic.w	r2, r3, #1
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a97e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	011b      	lsls	r3, r3, #4
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	4313      	orrs	r3, r2
 800a988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f023 030a 	bic.w	r3, r3, #10
 800a990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	4313      	orrs	r3, r2
 800a998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	621a      	str	r2, [r3, #32]
}
 800a9a6:	bf00      	nop
 800a9a8:	371c      	adds	r7, #28
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b087      	sub	sp, #28
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	60f8      	str	r0, [r7, #12]
 800a9ba:	60b9      	str	r1, [r7, #8]
 800a9bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	f023 0210 	bic.w	r2, r3, #16
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	031b      	lsls	r3, r3, #12
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a9ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	621a      	str	r2, [r3, #32]
}
 800aa06:	bf00      	nop
 800aa08:	371c      	adds	r7, #28
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b085      	sub	sp, #20
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	f043 0307 	orr.w	r3, r3, #7
 800aa34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	609a      	str	r2, [r3, #8]
}
 800aa3c:	bf00      	nop
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	607a      	str	r2, [r7, #4]
 800aa54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	021a      	lsls	r2, r3, #8
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	609a      	str	r2, [r3, #8]
}
 800aa7c:	bf00      	nop
 800aa7e:	371c      	adds	r7, #28
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d101      	bne.n	800aaa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	e05a      	b.n	800ab56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2202      	movs	r2, #2
 800aaac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4313      	orrs	r3, r2
 800aad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a21      	ldr	r2, [pc, #132]	; (800ab64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d022      	beq.n	800ab2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaec:	d01d      	beq.n	800ab2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a1d      	ldr	r2, [pc, #116]	; (800ab68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d018      	beq.n	800ab2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a1b      	ldr	r2, [pc, #108]	; (800ab6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d013      	beq.n	800ab2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a1a      	ldr	r2, [pc, #104]	; (800ab70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d00e      	beq.n	800ab2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a18      	ldr	r2, [pc, #96]	; (800ab74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d009      	beq.n	800ab2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a17      	ldr	r2, [pc, #92]	; (800ab78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d004      	beq.n	800ab2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a15      	ldr	r2, [pc, #84]	; (800ab7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d10c      	bne.n	800ab44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	40010000 	.word	0x40010000
 800ab68:	40000400 	.word	0x40000400
 800ab6c:	40000800 	.word	0x40000800
 800ab70:	40000c00 	.word	0x40000c00
 800ab74:	40010400 	.word	0x40010400
 800ab78:	40014000 	.word	0x40014000
 800ab7c:	40001800 	.word	0x40001800

0800ab80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e03f      	b.n	800ac3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d106      	bne.n	800abd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7f9 f9e6 	bl	8003fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2224      	movs	r2, #36	; 0x24
 800abd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68da      	ldr	r2, [r3, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800abea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 f829 	bl	800ac44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	691a      	ldr	r2, [r3, #16]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	695a      	ldr	r2, [r3, #20]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68da      	ldr	r2, [r3, #12]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2220      	movs	r2, #32
 800ac34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
	...

0800ac44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac48:	b0c0      	sub	sp, #256	; 0x100
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ac5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac60:	68d9      	ldr	r1, [r3, #12]
 800ac62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	ea40 0301 	orr.w	r3, r0, r1
 800ac6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ac6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac72:	689a      	ldr	r2, [r3, #8]
 800ac74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	431a      	orrs	r2, r3
 800ac7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	431a      	orrs	r2, r3
 800ac84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac88:	69db      	ldr	r3, [r3, #28]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ac90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ac9c:	f021 010c 	bic.w	r1, r1, #12
 800aca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800acaa:	430b      	orrs	r3, r1
 800acac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800acae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800acba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acbe:	6999      	ldr	r1, [r3, #24]
 800acc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	ea40 0301 	orr.w	r3, r0, r1
 800acca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800accc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	4b8f      	ldr	r3, [pc, #572]	; (800af10 <UART_SetConfig+0x2cc>)
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d005      	beq.n	800ace4 <UART_SetConfig+0xa0>
 800acd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	4b8d      	ldr	r3, [pc, #564]	; (800af14 <UART_SetConfig+0x2d0>)
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d104      	bne.n	800acee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ace4:	f7fe fa68 	bl	80091b8 <HAL_RCC_GetPCLK2Freq>
 800ace8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800acec:	e003      	b.n	800acf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800acee:	f7fe fa4f 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 800acf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acfa:	69db      	ldr	r3, [r3, #28]
 800acfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad00:	f040 810c 	bne.w	800af1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ad12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ad16:	4622      	mov	r2, r4
 800ad18:	462b      	mov	r3, r5
 800ad1a:	1891      	adds	r1, r2, r2
 800ad1c:	65b9      	str	r1, [r7, #88]	; 0x58
 800ad1e:	415b      	adcs	r3, r3
 800ad20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ad26:	4621      	mov	r1, r4
 800ad28:	eb12 0801 	adds.w	r8, r2, r1
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	eb43 0901 	adc.w	r9, r3, r1
 800ad32:	f04f 0200 	mov.w	r2, #0
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad46:	4690      	mov	r8, r2
 800ad48:	4699      	mov	r9, r3
 800ad4a:	4623      	mov	r3, r4
 800ad4c:	eb18 0303 	adds.w	r3, r8, r3
 800ad50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad54:	462b      	mov	r3, r5
 800ad56:	eb49 0303 	adc.w	r3, r9, r3
 800ad5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ad6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad72:	460b      	mov	r3, r1
 800ad74:	18db      	adds	r3, r3, r3
 800ad76:	653b      	str	r3, [r7, #80]	; 0x50
 800ad78:	4613      	mov	r3, r2
 800ad7a:	eb42 0303 	adc.w	r3, r2, r3
 800ad7e:	657b      	str	r3, [r7, #84]	; 0x54
 800ad80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ad84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ad88:	f7f5 fa8a 	bl	80002a0 <__aeabi_uldivmod>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4b61      	ldr	r3, [pc, #388]	; (800af18 <UART_SetConfig+0x2d4>)
 800ad92:	fba3 2302 	umull	r2, r3, r3, r2
 800ad96:	095b      	lsrs	r3, r3, #5
 800ad98:	011c      	lsls	r4, r3, #4
 800ad9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ada4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ada8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800adac:	4642      	mov	r2, r8
 800adae:	464b      	mov	r3, r9
 800adb0:	1891      	adds	r1, r2, r2
 800adb2:	64b9      	str	r1, [r7, #72]	; 0x48
 800adb4:	415b      	adcs	r3, r3
 800adb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800adbc:	4641      	mov	r1, r8
 800adbe:	eb12 0a01 	adds.w	sl, r2, r1
 800adc2:	4649      	mov	r1, r9
 800adc4:	eb43 0b01 	adc.w	fp, r3, r1
 800adc8:	f04f 0200 	mov.w	r2, #0
 800adcc:	f04f 0300 	mov.w	r3, #0
 800add0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800add4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800add8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800addc:	4692      	mov	sl, r2
 800adde:	469b      	mov	fp, r3
 800ade0:	4643      	mov	r3, r8
 800ade2:	eb1a 0303 	adds.w	r3, sl, r3
 800ade6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adea:	464b      	mov	r3, r9
 800adec:	eb4b 0303 	adc.w	r3, fp, r3
 800adf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800adf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ae04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	18db      	adds	r3, r3, r3
 800ae0c:	643b      	str	r3, [r7, #64]	; 0x40
 800ae0e:	4613      	mov	r3, r2
 800ae10:	eb42 0303 	adc.w	r3, r2, r3
 800ae14:	647b      	str	r3, [r7, #68]	; 0x44
 800ae16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ae1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ae1e:	f7f5 fa3f 	bl	80002a0 <__aeabi_uldivmod>
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	4611      	mov	r1, r2
 800ae28:	4b3b      	ldr	r3, [pc, #236]	; (800af18 <UART_SetConfig+0x2d4>)
 800ae2a:	fba3 2301 	umull	r2, r3, r3, r1
 800ae2e:	095b      	lsrs	r3, r3, #5
 800ae30:	2264      	movs	r2, #100	; 0x64
 800ae32:	fb02 f303 	mul.w	r3, r2, r3
 800ae36:	1acb      	subs	r3, r1, r3
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ae3e:	4b36      	ldr	r3, [pc, #216]	; (800af18 <UART_SetConfig+0x2d4>)
 800ae40:	fba3 2302 	umull	r2, r3, r3, r2
 800ae44:	095b      	lsrs	r3, r3, #5
 800ae46:	005b      	lsls	r3, r3, #1
 800ae48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ae4c:	441c      	add	r4, r3
 800ae4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae52:	2200      	movs	r2, #0
 800ae54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ae5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ae60:	4642      	mov	r2, r8
 800ae62:	464b      	mov	r3, r9
 800ae64:	1891      	adds	r1, r2, r2
 800ae66:	63b9      	str	r1, [r7, #56]	; 0x38
 800ae68:	415b      	adcs	r3, r3
 800ae6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ae70:	4641      	mov	r1, r8
 800ae72:	1851      	adds	r1, r2, r1
 800ae74:	6339      	str	r1, [r7, #48]	; 0x30
 800ae76:	4649      	mov	r1, r9
 800ae78:	414b      	adcs	r3, r1
 800ae7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae7c:	f04f 0200 	mov.w	r2, #0
 800ae80:	f04f 0300 	mov.w	r3, #0
 800ae84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ae88:	4659      	mov	r1, fp
 800ae8a:	00cb      	lsls	r3, r1, #3
 800ae8c:	4651      	mov	r1, sl
 800ae8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae92:	4651      	mov	r1, sl
 800ae94:	00ca      	lsls	r2, r1, #3
 800ae96:	4610      	mov	r0, r2
 800ae98:	4619      	mov	r1, r3
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	4642      	mov	r2, r8
 800ae9e:	189b      	adds	r3, r3, r2
 800aea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aea4:	464b      	mov	r3, r9
 800aea6:	460a      	mov	r2, r1
 800aea8:	eb42 0303 	adc.w	r3, r2, r3
 800aeac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aeb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aebc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aec4:	460b      	mov	r3, r1
 800aec6:	18db      	adds	r3, r3, r3
 800aec8:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeca:	4613      	mov	r3, r2
 800aecc:	eb42 0303 	adc.w	r3, r2, r3
 800aed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aeda:	f7f5 f9e1 	bl	80002a0 <__aeabi_uldivmod>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	4b0d      	ldr	r3, [pc, #52]	; (800af18 <UART_SetConfig+0x2d4>)
 800aee4:	fba3 1302 	umull	r1, r3, r3, r2
 800aee8:	095b      	lsrs	r3, r3, #5
 800aeea:	2164      	movs	r1, #100	; 0x64
 800aeec:	fb01 f303 	mul.w	r3, r1, r3
 800aef0:	1ad3      	subs	r3, r2, r3
 800aef2:	00db      	lsls	r3, r3, #3
 800aef4:	3332      	adds	r3, #50	; 0x32
 800aef6:	4a08      	ldr	r2, [pc, #32]	; (800af18 <UART_SetConfig+0x2d4>)
 800aef8:	fba2 2303 	umull	r2, r3, r2, r3
 800aefc:	095b      	lsrs	r3, r3, #5
 800aefe:	f003 0207 	and.w	r2, r3, #7
 800af02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4422      	add	r2, r4
 800af0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af0c:	e106      	b.n	800b11c <UART_SetConfig+0x4d8>
 800af0e:	bf00      	nop
 800af10:	40011000 	.word	0x40011000
 800af14:	40011400 	.word	0x40011400
 800af18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af20:	2200      	movs	r2, #0
 800af22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800af2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800af2e:	4642      	mov	r2, r8
 800af30:	464b      	mov	r3, r9
 800af32:	1891      	adds	r1, r2, r2
 800af34:	6239      	str	r1, [r7, #32]
 800af36:	415b      	adcs	r3, r3
 800af38:	627b      	str	r3, [r7, #36]	; 0x24
 800af3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af3e:	4641      	mov	r1, r8
 800af40:	1854      	adds	r4, r2, r1
 800af42:	4649      	mov	r1, r9
 800af44:	eb43 0501 	adc.w	r5, r3, r1
 800af48:	f04f 0200 	mov.w	r2, #0
 800af4c:	f04f 0300 	mov.w	r3, #0
 800af50:	00eb      	lsls	r3, r5, #3
 800af52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af56:	00e2      	lsls	r2, r4, #3
 800af58:	4614      	mov	r4, r2
 800af5a:	461d      	mov	r5, r3
 800af5c:	4643      	mov	r3, r8
 800af5e:	18e3      	adds	r3, r4, r3
 800af60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800af64:	464b      	mov	r3, r9
 800af66:	eb45 0303 	adc.w	r3, r5, r3
 800af6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800af6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af7e:	f04f 0200 	mov.w	r2, #0
 800af82:	f04f 0300 	mov.w	r3, #0
 800af86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800af8a:	4629      	mov	r1, r5
 800af8c:	008b      	lsls	r3, r1, #2
 800af8e:	4621      	mov	r1, r4
 800af90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af94:	4621      	mov	r1, r4
 800af96:	008a      	lsls	r2, r1, #2
 800af98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800af9c:	f7f5 f980 	bl	80002a0 <__aeabi_uldivmod>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	4b60      	ldr	r3, [pc, #384]	; (800b128 <UART_SetConfig+0x4e4>)
 800afa6:	fba3 2302 	umull	r2, r3, r3, r2
 800afaa:	095b      	lsrs	r3, r3, #5
 800afac:	011c      	lsls	r4, r3, #4
 800afae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afb2:	2200      	movs	r2, #0
 800afb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800afb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800afbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800afc0:	4642      	mov	r2, r8
 800afc2:	464b      	mov	r3, r9
 800afc4:	1891      	adds	r1, r2, r2
 800afc6:	61b9      	str	r1, [r7, #24]
 800afc8:	415b      	adcs	r3, r3
 800afca:	61fb      	str	r3, [r7, #28]
 800afcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afd0:	4641      	mov	r1, r8
 800afd2:	1851      	adds	r1, r2, r1
 800afd4:	6139      	str	r1, [r7, #16]
 800afd6:	4649      	mov	r1, r9
 800afd8:	414b      	adcs	r3, r1
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	f04f 0200 	mov.w	r2, #0
 800afe0:	f04f 0300 	mov.w	r3, #0
 800afe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800afe8:	4659      	mov	r1, fp
 800afea:	00cb      	lsls	r3, r1, #3
 800afec:	4651      	mov	r1, sl
 800afee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aff2:	4651      	mov	r1, sl
 800aff4:	00ca      	lsls	r2, r1, #3
 800aff6:	4610      	mov	r0, r2
 800aff8:	4619      	mov	r1, r3
 800affa:	4603      	mov	r3, r0
 800affc:	4642      	mov	r2, r8
 800affe:	189b      	adds	r3, r3, r2
 800b000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b004:	464b      	mov	r3, r9
 800b006:	460a      	mov	r2, r1
 800b008:	eb42 0303 	adc.w	r3, r2, r3
 800b00c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	67bb      	str	r3, [r7, #120]	; 0x78
 800b01a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b01c:	f04f 0200 	mov.w	r2, #0
 800b020:	f04f 0300 	mov.w	r3, #0
 800b024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b028:	4649      	mov	r1, r9
 800b02a:	008b      	lsls	r3, r1, #2
 800b02c:	4641      	mov	r1, r8
 800b02e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b032:	4641      	mov	r1, r8
 800b034:	008a      	lsls	r2, r1, #2
 800b036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b03a:	f7f5 f931 	bl	80002a0 <__aeabi_uldivmod>
 800b03e:	4602      	mov	r2, r0
 800b040:	460b      	mov	r3, r1
 800b042:	4611      	mov	r1, r2
 800b044:	4b38      	ldr	r3, [pc, #224]	; (800b128 <UART_SetConfig+0x4e4>)
 800b046:	fba3 2301 	umull	r2, r3, r3, r1
 800b04a:	095b      	lsrs	r3, r3, #5
 800b04c:	2264      	movs	r2, #100	; 0x64
 800b04e:	fb02 f303 	mul.w	r3, r2, r3
 800b052:	1acb      	subs	r3, r1, r3
 800b054:	011b      	lsls	r3, r3, #4
 800b056:	3332      	adds	r3, #50	; 0x32
 800b058:	4a33      	ldr	r2, [pc, #204]	; (800b128 <UART_SetConfig+0x4e4>)
 800b05a:	fba2 2303 	umull	r2, r3, r2, r3
 800b05e:	095b      	lsrs	r3, r3, #5
 800b060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b064:	441c      	add	r4, r3
 800b066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b06a:	2200      	movs	r2, #0
 800b06c:	673b      	str	r3, [r7, #112]	; 0x70
 800b06e:	677a      	str	r2, [r7, #116]	; 0x74
 800b070:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b074:	4642      	mov	r2, r8
 800b076:	464b      	mov	r3, r9
 800b078:	1891      	adds	r1, r2, r2
 800b07a:	60b9      	str	r1, [r7, #8]
 800b07c:	415b      	adcs	r3, r3
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b084:	4641      	mov	r1, r8
 800b086:	1851      	adds	r1, r2, r1
 800b088:	6039      	str	r1, [r7, #0]
 800b08a:	4649      	mov	r1, r9
 800b08c:	414b      	adcs	r3, r1
 800b08e:	607b      	str	r3, [r7, #4]
 800b090:	f04f 0200 	mov.w	r2, #0
 800b094:	f04f 0300 	mov.w	r3, #0
 800b098:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b09c:	4659      	mov	r1, fp
 800b09e:	00cb      	lsls	r3, r1, #3
 800b0a0:	4651      	mov	r1, sl
 800b0a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0a6:	4651      	mov	r1, sl
 800b0a8:	00ca      	lsls	r2, r1, #3
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	4642      	mov	r2, r8
 800b0b2:	189b      	adds	r3, r3, r2
 800b0b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0b6:	464b      	mov	r3, r9
 800b0b8:	460a      	mov	r2, r1
 800b0ba:	eb42 0303 	adc.w	r3, r2, r3
 800b0be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	663b      	str	r3, [r7, #96]	; 0x60
 800b0ca:	667a      	str	r2, [r7, #100]	; 0x64
 800b0cc:	f04f 0200 	mov.w	r2, #0
 800b0d0:	f04f 0300 	mov.w	r3, #0
 800b0d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b0d8:	4649      	mov	r1, r9
 800b0da:	008b      	lsls	r3, r1, #2
 800b0dc:	4641      	mov	r1, r8
 800b0de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0e2:	4641      	mov	r1, r8
 800b0e4:	008a      	lsls	r2, r1, #2
 800b0e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b0ea:	f7f5 f8d9 	bl	80002a0 <__aeabi_uldivmod>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4b0d      	ldr	r3, [pc, #52]	; (800b128 <UART_SetConfig+0x4e4>)
 800b0f4:	fba3 1302 	umull	r1, r3, r3, r2
 800b0f8:	095b      	lsrs	r3, r3, #5
 800b0fa:	2164      	movs	r1, #100	; 0x64
 800b0fc:	fb01 f303 	mul.w	r3, r1, r3
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	3332      	adds	r3, #50	; 0x32
 800b106:	4a08      	ldr	r2, [pc, #32]	; (800b128 <UART_SetConfig+0x4e4>)
 800b108:	fba2 2303 	umull	r2, r3, r2, r3
 800b10c:	095b      	lsrs	r3, r3, #5
 800b10e:	f003 020f 	and.w	r2, r3, #15
 800b112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4422      	add	r2, r4
 800b11a:	609a      	str	r2, [r3, #8]
}
 800b11c:	bf00      	nop
 800b11e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b122:	46bd      	mov	sp, r7
 800b124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b128:	51eb851f 	.word	0x51eb851f

0800b12c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d123      	bne.n	800b186 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b146:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	6851      	ldr	r1, [r2, #4]
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	6892      	ldr	r2, [r2, #8]
 800b152:	4311      	orrs	r1, r2
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	68d2      	ldr	r2, [r2, #12]
 800b158:	4311      	orrs	r1, r2
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	6912      	ldr	r2, [r2, #16]
 800b15e:	4311      	orrs	r1, r2
 800b160:	683a      	ldr	r2, [r7, #0]
 800b162:	6952      	ldr	r2, [r2, #20]
 800b164:	4311      	orrs	r1, r2
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	6992      	ldr	r2, [r2, #24]
 800b16a:	4311      	orrs	r1, r2
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	69d2      	ldr	r2, [r2, #28]
 800b170:	4311      	orrs	r1, r2
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	6a12      	ldr	r2, [r2, #32]
 800b176:	4311      	orrs	r1, r2
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b17c:	430a      	orrs	r2, r1
 800b17e:	431a      	orrs	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	e028      	b.n	800b1d8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	69d9      	ldr	r1, [r3, #28]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	6a1b      	ldr	r3, [r3, #32]
 800b196:	4319      	orrs	r1, r3
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19c:	430b      	orrs	r3, r1
 800b19e:	431a      	orrs	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b1ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	6851      	ldr	r1, [r2, #4]
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	6892      	ldr	r2, [r2, #8]
 800b1b8:	4311      	orrs	r1, r2
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	68d2      	ldr	r2, [r2, #12]
 800b1be:	4311      	orrs	r1, r2
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	6912      	ldr	r2, [r2, #16]
 800b1c4:	4311      	orrs	r1, r2
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	6952      	ldr	r2, [r2, #20]
 800b1ca:	4311      	orrs	r1, r2
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	6992      	ldr	r2, [r2, #24]
 800b1d0:	430a      	orrs	r2, r1
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b085      	sub	sp, #20
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	60f8      	str	r0, [r7, #12]
 800b1ee:	60b9      	str	r1, [r7, #8]
 800b1f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d128      	bne.n	800b24a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	1e59      	subs	r1, r3, #1
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	011b      	lsls	r3, r3, #4
 800b20e:	4319      	orrs	r1, r3
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	3b01      	subs	r3, #1
 800b216:	021b      	lsls	r3, r3, #8
 800b218:	4319      	orrs	r1, r3
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	3b01      	subs	r3, #1
 800b220:	031b      	lsls	r3, r3, #12
 800b222:	4319      	orrs	r1, r3
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	3b01      	subs	r3, #1
 800b22a:	041b      	lsls	r3, r3, #16
 800b22c:	4319      	orrs	r1, r3
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	3b01      	subs	r3, #1
 800b234:	051b      	lsls	r3, r3, #20
 800b236:	4319      	orrs	r1, r3
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	061b      	lsls	r3, r3, #24
 800b240:	430b      	orrs	r3, r1
 800b242:	431a      	orrs	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	609a      	str	r2, [r3, #8]
 800b248:	e02f      	b.n	800b2aa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b252:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	68d2      	ldr	r2, [r2, #12]
 800b25a:	3a01      	subs	r2, #1
 800b25c:	0311      	lsls	r1, r2, #12
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	6952      	ldr	r2, [r2, #20]
 800b262:	3a01      	subs	r2, #1
 800b264:	0512      	lsls	r2, r2, #20
 800b266:	430a      	orrs	r2, r1
 800b268:	431a      	orrs	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	1e59      	subs	r1, r3, #1
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	3b01      	subs	r3, #1
 800b282:	011b      	lsls	r3, r3, #4
 800b284:	4319      	orrs	r1, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	3b01      	subs	r3, #1
 800b28c:	021b      	lsls	r3, r3, #8
 800b28e:	4319      	orrs	r1, r3
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	3b01      	subs	r3, #1
 800b296:	041b      	lsls	r3, r3, #16
 800b298:	4319      	orrs	r1, r3
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	061b      	lsls	r3, r3, #24
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	431a      	orrs	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3714      	adds	r7, #20
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	0d9b      	lsrs	r3, r3, #22
 800b2ce:	059b      	lsls	r3, r3, #22
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	6811      	ldr	r1, [r2, #0]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	6852      	ldr	r2, [r2, #4]
 800b2d8:	4311      	orrs	r1, r2
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	6892      	ldr	r2, [r2, #8]
 800b2de:	3a01      	subs	r2, #1
 800b2e0:	0152      	lsls	r2, r2, #5
 800b2e2:	4311      	orrs	r1, r2
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	68d2      	ldr	r2, [r2, #12]
 800b2e8:	0252      	lsls	r2, r2, #9
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	431a      	orrs	r2, r3
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800b2f2:	f7f9 fb1f 	bl	8004934 <HAL_GetTick>
 800b2f6:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b2f8:	e010      	b.n	800b31c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b300:	d00c      	beq.n	800b31c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d007      	beq.n	800b318 <FMC_SDRAM_SendCommand+0x60>
 800b308:	f7f9 fb14 	bl	8004934 <HAL_GetTick>
 800b30c:	4602      	mov	r2, r0
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	429a      	cmp	r2, r3
 800b316:	d201      	bcs.n	800b31c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800b318:	2303      	movs	r3, #3
 800b31a:	e006      	b.n	800b32a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	f003 0320 	and.w	r3, r3, #32
 800b324:	2b20      	cmp	r3, #32
 800b326:	d0e8      	beq.n	800b2fa <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b332:	b480      	push	{r7}
 800b334:	b083      	sub	sp, #12
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b344:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	0052      	lsls	r2, r2, #1
 800b34c:	431a      	orrs	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b360:	b084      	sub	sp, #16
 800b362:	b580      	push	{r7, lr}
 800b364:	b084      	sub	sp, #16
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	f107 001c 	add.w	r0, r7, #28
 800b36e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	2b01      	cmp	r3, #1
 800b376:	d122      	bne.n	800b3be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b38c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d105      	bne.n	800b3b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f9c0 	bl	800b738 <USB_CoreReset>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	73fb      	strb	r3, [r7, #15]
 800b3bc:	e01a      	b.n	800b3f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f9b4 	bl	800b738 <USB_CoreReset>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b3d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d106      	bne.n	800b3e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	639a      	str	r2, [r3, #56]	; 0x38
 800b3e6:	e005      	b.n	800b3f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d10b      	bne.n	800b412 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f043 0206 	orr.w	r2, r3, #6
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	f043 0220 	orr.w	r2, r3, #32
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b41e:	b004      	add	sp, #16
 800b420:	4770      	bx	lr

0800b422 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b422:	b480      	push	{r7}
 800b424:	b083      	sub	sp, #12
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f043 0201 	orr.w	r2, r3, #1
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	f023 0201 	bic.w	r2, r3, #1
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b084      	sub	sp, #16
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	460b      	mov	r3, r1
 800b470:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b482:	78fb      	ldrb	r3, [r7, #3]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d115      	bne.n	800b4b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b494:	2001      	movs	r0, #1
 800b496:	f7f9 fa59 	bl	800494c <HAL_Delay>
      ms++;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	3301      	adds	r3, #1
 800b49e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f93a 	bl	800b71a <USB_GetMode>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d01e      	beq.n	800b4ea <USB_SetCurrentMode+0x84>
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2b31      	cmp	r3, #49	; 0x31
 800b4b0:	d9f0      	bls.n	800b494 <USB_SetCurrentMode+0x2e>
 800b4b2:	e01a      	b.n	800b4ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d115      	bne.n	800b4e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b4c6:	2001      	movs	r0, #1
 800b4c8:	f7f9 fa40 	bl	800494c <HAL_Delay>
      ms++;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f921 	bl	800b71a <USB_GetMode>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d005      	beq.n	800b4ea <USB_SetCurrentMode+0x84>
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2b31      	cmp	r3, #49	; 0x31
 800b4e2:	d9f0      	bls.n	800b4c6 <USB_SetCurrentMode+0x60>
 800b4e4:	e001      	b.n	800b4ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e005      	b.n	800b4f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b32      	cmp	r3, #50	; 0x32
 800b4ee:	d101      	bne.n	800b4f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e000      	b.n	800b4f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
	...

0800b500 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b50a:	2300      	movs	r3, #0
 800b50c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3301      	adds	r3, #1
 800b512:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4a13      	ldr	r2, [pc, #76]	; (800b564 <USB_FlushTxFifo+0x64>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d901      	bls.n	800b520 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e01b      	b.n	800b558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	daf2      	bge.n	800b50e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b528:	2300      	movs	r3, #0
 800b52a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	019b      	lsls	r3, r3, #6
 800b530:	f043 0220 	orr.w	r2, r3, #32
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	3301      	adds	r3, #1
 800b53c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	4a08      	ldr	r2, [pc, #32]	; (800b564 <USB_FlushTxFifo+0x64>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d901      	bls.n	800b54a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b546:	2303      	movs	r3, #3
 800b548:	e006      	b.n	800b558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	f003 0320 	and.w	r3, r3, #32
 800b552:	2b20      	cmp	r3, #32
 800b554:	d0f0      	beq.n	800b538 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	00030d40 	.word	0x00030d40

0800b568 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	3301      	adds	r3, #1
 800b578:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	4a11      	ldr	r2, [pc, #68]	; (800b5c4 <USB_FlushRxFifo+0x5c>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d901      	bls.n	800b586 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e018      	b.n	800b5b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	daf2      	bge.n	800b574 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b58e:	2300      	movs	r3, #0
 800b590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2210      	movs	r2, #16
 800b596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	3301      	adds	r3, #1
 800b59c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4a08      	ldr	r2, [pc, #32]	; (800b5c4 <USB_FlushRxFifo+0x5c>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d901      	bls.n	800b5aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	e006      	b.n	800b5b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	f003 0310 	and.w	r3, r3, #16
 800b5b2:	2b10      	cmp	r3, #16
 800b5b4:	d0f0      	beq.n	800b598 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3714      	adds	r7, #20
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	00030d40 	.word	0x00030d40

0800b5c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b089      	sub	sp, #36	; 0x24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	71fb      	strb	r3, [r7, #7]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b5e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d123      	bne.n	800b636 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b5ee:	88bb      	ldrh	r3, [r7, #4]
 800b5f0:	3303      	adds	r3, #3
 800b5f2:	089b      	lsrs	r3, r3, #2
 800b5f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	61bb      	str	r3, [r7, #24]
 800b5fa:	e018      	b.n	800b62e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b5fc:	79fb      	ldrb	r3, [r7, #7]
 800b5fe:	031a      	lsls	r2, r3, #12
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	4413      	add	r3, r2
 800b604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b608:	461a      	mov	r2, r3
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	3301      	adds	r3, #1
 800b614:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	3301      	adds	r3, #1
 800b61a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	3301      	adds	r3, #1
 800b620:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	3301      	adds	r3, #1
 800b626:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	3301      	adds	r3, #1
 800b62c:	61bb      	str	r3, [r7, #24]
 800b62e:	69ba      	ldr	r2, [r7, #24]
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	429a      	cmp	r2, r3
 800b634:	d3e2      	bcc.n	800b5fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3724      	adds	r7, #36	; 0x24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b644:	b480      	push	{r7}
 800b646:	b08b      	sub	sp, #44	; 0x2c
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	4613      	mov	r3, r2
 800b650:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b65a:	88fb      	ldrh	r3, [r7, #6]
 800b65c:	089b      	lsrs	r3, r3, #2
 800b65e:	b29b      	uxth	r3, r3
 800b660:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b662:	88fb      	ldrh	r3, [r7, #6]
 800b664:	f003 0303 	and.w	r3, r3, #3
 800b668:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b66a:	2300      	movs	r3, #0
 800b66c:	623b      	str	r3, [r7, #32]
 800b66e:	e014      	b.n	800b69a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67a:	601a      	str	r2, [r3, #0]
    pDest++;
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	3301      	adds	r3, #1
 800b680:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	3301      	adds	r3, #1
 800b686:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	3301      	adds	r3, #1
 800b68c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	3301      	adds	r3, #1
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	3301      	adds	r3, #1
 800b698:	623b      	str	r3, [r7, #32]
 800b69a:	6a3a      	ldr	r2, [r7, #32]
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d3e6      	bcc.n	800b670 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b6a2:	8bfb      	ldrh	r3, [r7, #30]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d01e      	beq.n	800b6e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	f107 0310 	add.w	r3, r7, #16
 800b6b8:	6812      	ldr	r2, [r2, #0]
 800b6ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b6bc:	693a      	ldr	r2, [r7, #16]
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	00db      	lsls	r3, r3, #3
 800b6c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	701a      	strb	r2, [r3, #0]
      i++;
 800b6ce:	6a3b      	ldr	r3, [r7, #32]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	623b      	str	r3, [r7, #32]
      pDest++;
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b6da:	8bfb      	ldrh	r3, [r7, #30]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b6e0:	8bfb      	ldrh	r3, [r7, #30]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1ea      	bne.n	800b6bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	372c      	adds	r7, #44	; 0x2c
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	695b      	ldr	r3, [r3, #20]
 800b700:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	4013      	ands	r3, r2
 800b70a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b70c:	68fb      	ldr	r3, [r7, #12]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3714      	adds	r7, #20
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b083      	sub	sp, #12
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	f003 0301 	and.w	r3, r3, #1
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
	...

0800b738 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b740:	2300      	movs	r3, #0
 800b742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3301      	adds	r3, #1
 800b748:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	4a13      	ldr	r2, [pc, #76]	; (800b79c <USB_CoreReset+0x64>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d901      	bls.n	800b756 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	e01b      	b.n	800b78e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	daf2      	bge.n	800b744 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b75e:	2300      	movs	r3, #0
 800b760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	f043 0201 	orr.w	r2, r3, #1
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3301      	adds	r3, #1
 800b772:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4a09      	ldr	r2, [pc, #36]	; (800b79c <USB_CoreReset+0x64>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d901      	bls.n	800b780 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b77c:	2303      	movs	r3, #3
 800b77e:	e006      	b.n	800b78e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d0f0      	beq.n	800b76e <USB_CoreReset+0x36>

  return HAL_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	00030d40 	.word	0x00030d40

0800b7a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b7a0:	b084      	sub	sp, #16
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b086      	sub	sp, #24
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b7ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d018      	beq.n	800b828 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d10a      	bne.n	800b812 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b80a:	f043 0304 	orr.w	r3, r3, #4
 800b80e:	6013      	str	r3, [r2, #0]
 800b810:	e014      	b.n	800b83c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b820:	f023 0304 	bic.w	r3, r3, #4
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	e009      	b.n	800b83c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b836:	f023 0304 	bic.w	r3, r3, #4
 800b83a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b83c:	2110      	movs	r1, #16
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff fe5e 	bl	800b500 <USB_FlushTxFifo>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff fe8a 	bl	800b568 <USB_FlushRxFifo>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d001      	beq.n	800b85e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b85e:	2300      	movs	r3, #0
 800b860:	613b      	str	r3, [r7, #16]
 800b862:	e015      	b.n	800b890 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	015a      	lsls	r2, r3, #5
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	4413      	add	r3, r2
 800b86c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b870:	461a      	mov	r2, r3
 800b872:	f04f 33ff 	mov.w	r3, #4294967295
 800b876:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	015a      	lsls	r2, r3, #5
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	4413      	add	r3, r2
 800b880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b884:	461a      	mov	r2, r3
 800b886:	2300      	movs	r3, #0
 800b888:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	3301      	adds	r3, #1
 800b88e:	613b      	str	r3, [r7, #16]
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	429a      	cmp	r2, r3
 800b896:	d3e5      	bcc.n	800b864 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00b      	beq.n	800b8ca <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a13      	ldr	r2, [pc, #76]	; (800b90c <USB_HostInit+0x16c>)
 800b8be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a13      	ldr	r2, [pc, #76]	; (800b910 <USB_HostInit+0x170>)
 800b8c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b8c8:	e009      	b.n	800b8de <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2280      	movs	r2, #128	; 0x80
 800b8ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a10      	ldr	r2, [pc, #64]	; (800b914 <USB_HostInit+0x174>)
 800b8d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a0f      	ldr	r2, [pc, #60]	; (800b918 <USB_HostInit+0x178>)
 800b8da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d105      	bne.n	800b8f0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	f043 0210 	orr.w	r2, r3, #16
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	699a      	ldr	r2, [r3, #24]
 800b8f4:	4b09      	ldr	r3, [pc, #36]	; (800b91c <USB_HostInit+0x17c>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3718      	adds	r7, #24
 800b902:	46bd      	mov	sp, r7
 800b904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b908:	b004      	add	sp, #16
 800b90a:	4770      	bx	lr
 800b90c:	01000200 	.word	0x01000200
 800b910:	00e00300 	.word	0x00e00300
 800b914:	00600080 	.word	0x00600080
 800b918:	004000e0 	.word	0x004000e0
 800b91c:	a3200008 	.word	0xa3200008

0800b920 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b93e:	f023 0303 	bic.w	r3, r3, #3
 800b942:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	78fb      	ldrb	r3, [r7, #3]
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	68f9      	ldr	r1, [r7, #12]
 800b954:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b958:	4313      	orrs	r3, r2
 800b95a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b95c:	78fb      	ldrb	r3, [r7, #3]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d107      	bne.n	800b972 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b968:	461a      	mov	r2, r3
 800b96a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b96e:	6053      	str	r3, [r2, #4]
 800b970:	e009      	b.n	800b986 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b972:	78fb      	ldrb	r3, [r7, #3]
 800b974:	2b02      	cmp	r3, #2
 800b976:	d106      	bne.n	800b986 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b97e:	461a      	mov	r2, r3
 800b980:	f241 7370 	movw	r3, #6000	; 0x1770
 800b984:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3714      	adds	r7, #20
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b9b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b9be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b9c4:	2064      	movs	r0, #100	; 0x64
 800b9c6:	f7f8 ffc1 	bl	800494c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b9d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b9d8:	200a      	movs	r0, #10
 800b9da:	f7f8 ffb7 	bl	800494c <HAL_Delay>

  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ba0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d109      	bne.n	800ba2c <USB_DriveVbus+0x44>
 800ba18:	78fb      	ldrb	r3, [r7, #3]
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d106      	bne.n	800ba2c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ba26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba2a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba36:	d109      	bne.n	800ba4c <USB_DriveVbus+0x64>
 800ba38:	78fb      	ldrb	r3, [r7, #3]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d106      	bne.n	800ba4c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ba46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba4a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b085      	sub	sp, #20
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ba66:	2300      	movs	r3, #0
 800ba68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	0c5b      	lsrs	r3, r3, #17
 800ba78:	f003 0303 	and.w	r3, r3, #3
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3714      	adds	r7, #20
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	b29b      	uxth	r3, r3
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr
	...

0800baac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	4608      	mov	r0, r1
 800bab6:	4611      	mov	r1, r2
 800bab8:	461a      	mov	r2, r3
 800baba:	4603      	mov	r3, r0
 800babc:	70fb      	strb	r3, [r7, #3]
 800babe:	460b      	mov	r3, r1
 800bac0:	70bb      	strb	r3, [r7, #2]
 800bac2:	4613      	mov	r3, r2
 800bac4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bace:	78fb      	ldrb	r3, [r7, #3]
 800bad0:	015a      	lsls	r2, r3, #5
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	4413      	add	r3, r2
 800bad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bada:	461a      	mov	r2, r3
 800badc:	f04f 33ff 	mov.w	r3, #4294967295
 800bae0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bae2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bae6:	2b03      	cmp	r3, #3
 800bae8:	d87e      	bhi.n	800bbe8 <USB_HC_Init+0x13c>
 800baea:	a201      	add	r2, pc, #4	; (adr r2, 800baf0 <USB_HC_Init+0x44>)
 800baec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf0:	0800bb01 	.word	0x0800bb01
 800baf4:	0800bbab 	.word	0x0800bbab
 800baf8:	0800bb01 	.word	0x0800bb01
 800bafc:	0800bb6d 	.word	0x0800bb6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bb00:	78fb      	ldrb	r3, [r7, #3]
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	f240 439d 	movw	r3, #1181	; 0x49d
 800bb12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800bb14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	da10      	bge.n	800bb3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bb1c:	78fb      	ldrb	r3, [r7, #3]
 800bb1e:	015a      	lsls	r2, r3, #5
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	4413      	add	r3, r2
 800bb24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	78fa      	ldrb	r2, [r7, #3]
 800bb2c:	0151      	lsls	r1, r2, #5
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	440a      	add	r2, r1
 800bb32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb3a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800bb3c:	e057      	b.n	800bbee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d051      	beq.n	800bbee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800bb4a:	78fb      	ldrb	r3, [r7, #3]
 800bb4c:	015a      	lsls	r2, r3, #5
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	4413      	add	r3, r2
 800bb52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	78fa      	ldrb	r2, [r7, #3]
 800bb5a:	0151      	lsls	r1, r2, #5
 800bb5c:	693a      	ldr	r2, [r7, #16]
 800bb5e:	440a      	add	r2, r1
 800bb60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bb68:	60d3      	str	r3, [r2, #12]
      break;
 800bb6a:	e040      	b.n	800bbee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bb6c:	78fb      	ldrb	r3, [r7, #3]
 800bb6e:	015a      	lsls	r2, r3, #5
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	4413      	add	r3, r2
 800bb74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb78:	461a      	mov	r2, r3
 800bb7a:	f240 639d 	movw	r3, #1693	; 0x69d
 800bb7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bb80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	da34      	bge.n	800bbf2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bb88:	78fb      	ldrb	r3, [r7, #3]
 800bb8a:	015a      	lsls	r2, r3, #5
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	78fa      	ldrb	r2, [r7, #3]
 800bb98:	0151      	lsls	r1, r2, #5
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	440a      	add	r2, r1
 800bb9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bba6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bba8:	e023      	b.n	800bbf2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bbaa:	78fb      	ldrb	r3, [r7, #3]
 800bbac:	015a      	lsls	r2, r3, #5
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f240 2325 	movw	r3, #549	; 0x225
 800bbbc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bbbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	da17      	bge.n	800bbf6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bbc6:	78fb      	ldrb	r3, [r7, #3]
 800bbc8:	015a      	lsls	r2, r3, #5
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	4413      	add	r3, r2
 800bbce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	78fa      	ldrb	r2, [r7, #3]
 800bbd6:	0151      	lsls	r1, r2, #5
 800bbd8:	693a      	ldr	r2, [r7, #16]
 800bbda:	440a      	add	r2, r1
 800bbdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbe0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bbe4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bbe6:	e006      	b.n	800bbf6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	77fb      	strb	r3, [r7, #31]
      break;
 800bbec:	e004      	b.n	800bbf8 <USB_HC_Init+0x14c>
      break;
 800bbee:	bf00      	nop
 800bbf0:	e002      	b.n	800bbf8 <USB_HC_Init+0x14c>
      break;
 800bbf2:	bf00      	nop
 800bbf4:	e000      	b.n	800bbf8 <USB_HC_Init+0x14c>
      break;
 800bbf6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800bbf8:	78fb      	ldrb	r3, [r7, #3]
 800bbfa:	015a      	lsls	r2, r3, #5
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	78fa      	ldrb	r2, [r7, #3]
 800bc08:	0151      	lsls	r1, r2, #5
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	440a      	add	r2, r1
 800bc0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc12:	f043 0302 	orr.w	r3, r3, #2
 800bc16:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc1e:	699a      	ldr	r2, [r3, #24]
 800bc20:	78fb      	ldrb	r3, [r7, #3]
 800bc22:	f003 030f 	and.w	r3, r3, #15
 800bc26:	2101      	movs	r1, #1
 800bc28:	fa01 f303 	lsl.w	r3, r1, r3
 800bc2c:	6939      	ldr	r1, [r7, #16]
 800bc2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bc32:	4313      	orrs	r3, r2
 800bc34:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bc42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	da03      	bge.n	800bc52 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bc4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc4e:	61bb      	str	r3, [r7, #24]
 800bc50:	e001      	b.n	800bc56 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800bc52:	2300      	movs	r3, #0
 800bc54:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f7ff feff 	bl	800ba5a <USB_GetHostSpeed>
 800bc5c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800bc5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d106      	bne.n	800bc74 <USB_HC_Init+0x1c8>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d003      	beq.n	800bc74 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bc6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bc70:	617b      	str	r3, [r7, #20]
 800bc72:	e001      	b.n	800bc78 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bc74:	2300      	movs	r3, #0
 800bc76:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bc78:	787b      	ldrb	r3, [r7, #1]
 800bc7a:	059b      	lsls	r3, r3, #22
 800bc7c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bc80:	78bb      	ldrb	r3, [r7, #2]
 800bc82:	02db      	lsls	r3, r3, #11
 800bc84:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bc88:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bc8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bc8e:	049b      	lsls	r3, r3, #18
 800bc90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bc94:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bc96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bc98:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bc9c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bca2:	78fb      	ldrb	r3, [r7, #3]
 800bca4:	0159      	lsls	r1, r3, #5
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	440b      	add	r3, r1
 800bcaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bcb4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800bcb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bcba:	2b03      	cmp	r3, #3
 800bcbc:	d003      	beq.n	800bcc6 <USB_HC_Init+0x21a>
 800bcbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d10f      	bne.n	800bce6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800bcc6:	78fb      	ldrb	r3, [r7, #3]
 800bcc8:	015a      	lsls	r2, r3, #5
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	4413      	add	r3, r2
 800bcce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	78fa      	ldrb	r2, [r7, #3]
 800bcd6:	0151      	lsls	r1, r2, #5
 800bcd8:	693a      	ldr	r2, [r7, #16]
 800bcda:	440a      	add	r2, r1
 800bcdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bce0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bce4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bce6:	7ffb      	ldrb	r3, [r7, #31]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3720      	adds	r7, #32
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08c      	sub	sp, #48	; 0x30
 800bcf4:	af02      	add	r7, sp, #8
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	785b      	ldrb	r3, [r3, #1]
 800bd06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bd08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd0c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d02d      	beq.n	800bd76 <USB_HC_StartXfer+0x86>
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	791b      	ldrb	r3, [r3, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d129      	bne.n	800bd76 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d117      	bne.n	800bd58 <USB_HC_StartXfer+0x68>
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	79db      	ldrb	r3, [r3, #7]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d003      	beq.n	800bd38 <USB_HC_StartXfer+0x48>
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	79db      	ldrb	r3, [r3, #7]
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d10f      	bne.n	800bd58 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	015a      	lsls	r2, r3, #5
 800bd3c:	6a3b      	ldr	r3, [r7, #32]
 800bd3e:	4413      	add	r3, r2
 800bd40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	69fa      	ldr	r2, [r7, #28]
 800bd48:	0151      	lsls	r1, r2, #5
 800bd4a:	6a3a      	ldr	r2, [r7, #32]
 800bd4c:	440a      	add	r2, r1
 800bd4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd56:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800bd58:	79fb      	ldrb	r3, [r7, #7]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10b      	bne.n	800bd76 <USB_HC_StartXfer+0x86>
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	795b      	ldrb	r3, [r3, #5]
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d107      	bne.n	800bd76 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	785b      	ldrb	r3, [r3, #1]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f000 fa0f 	bl	800c190 <USB_DoPing>
      return HAL_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	e0f8      	b.n	800bf68 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d018      	beq.n	800bdb0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	695b      	ldr	r3, [r3, #20]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	8912      	ldrh	r2, [r2, #8]
 800bd86:	4413      	add	r3, r2
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	8912      	ldrh	r2, [r2, #8]
 800bd8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd92:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bd94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bd96:	8b7b      	ldrh	r3, [r7, #26]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d90b      	bls.n	800bdb4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800bd9c:	8b7b      	ldrh	r3, [r7, #26]
 800bd9e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800bda0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	8912      	ldrh	r2, [r2, #8]
 800bda6:	fb03 f202 	mul.w	r2, r3, r2
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	611a      	str	r2, [r3, #16]
 800bdae:	e001      	b.n	800bdb4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	78db      	ldrb	r3, [r3, #3]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d007      	beq.n	800bdcc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800bdbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bdbe:	68ba      	ldr	r2, [r7, #8]
 800bdc0:	8912      	ldrh	r2, [r2, #8]
 800bdc2:	fb03 f202 	mul.w	r2, r3, r2
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	611a      	str	r2, [r3, #16]
 800bdca:	e003      	b.n	800bdd4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	695a      	ldr	r2, [r3, #20]
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bddc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bdde:	04d9      	lsls	r1, r3, #19
 800bde0:	4b63      	ldr	r3, [pc, #396]	; (800bf70 <USB_HC_StartXfer+0x280>)
 800bde2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bde4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	7a9b      	ldrb	r3, [r3, #10]
 800bdea:	075b      	lsls	r3, r3, #29
 800bdec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bdf0:	69f9      	ldr	r1, [r7, #28]
 800bdf2:	0148      	lsls	r0, r1, #5
 800bdf4:	6a39      	ldr	r1, [r7, #32]
 800bdf6:	4401      	add	r1, r0
 800bdf8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bdfc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bdfe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d009      	beq.n	800be1a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	68d9      	ldr	r1, [r3, #12]
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	015a      	lsls	r2, r3, #5
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	4413      	add	r3, r2
 800be12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be16:	460a      	mov	r2, r1
 800be18:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800be1a:	6a3b      	ldr	r3, [r7, #32]
 800be1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	2b00      	cmp	r3, #0
 800be28:	bf0c      	ite	eq
 800be2a:	2301      	moveq	r3, #1
 800be2c:	2300      	movne	r3, #0
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	015a      	lsls	r2, r3, #5
 800be36:	6a3b      	ldr	r3, [r7, #32]
 800be38:	4413      	add	r3, r2
 800be3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	69fa      	ldr	r2, [r7, #28]
 800be42:	0151      	lsls	r1, r2, #5
 800be44:	6a3a      	ldr	r2, [r7, #32]
 800be46:	440a      	add	r2, r1
 800be48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800be50:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	015a      	lsls	r2, r3, #5
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	4413      	add	r3, r2
 800be5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	7e7b      	ldrb	r3, [r7, #25]
 800be62:	075b      	lsls	r3, r3, #29
 800be64:	69f9      	ldr	r1, [r7, #28]
 800be66:	0148      	lsls	r0, r1, #5
 800be68:	6a39      	ldr	r1, [r7, #32]
 800be6a:	4401      	add	r1, r0
 800be6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800be70:	4313      	orrs	r3, r2
 800be72:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	015a      	lsls	r2, r3, #5
 800be78:	6a3b      	ldr	r3, [r7, #32]
 800be7a:	4413      	add	r3, r2
 800be7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be8a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	78db      	ldrb	r3, [r3, #3]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d004      	beq.n	800be9e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be9a:	613b      	str	r3, [r7, #16]
 800be9c:	e003      	b.n	800bea6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bea4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800beac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	015a      	lsls	r2, r3, #5
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	4413      	add	r3, r2
 800beb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beba:	461a      	mov	r2, r3
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800bec0:	79fb      	ldrb	r3, [r7, #7]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800bec6:	2300      	movs	r3, #0
 800bec8:	e04e      	b.n	800bf68 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	78db      	ldrb	r3, [r3, #3]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d149      	bne.n	800bf66 <USB_HC_StartXfer+0x276>
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d045      	beq.n	800bf66 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	79db      	ldrb	r3, [r3, #7]
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d830      	bhi.n	800bf44 <USB_HC_StartXfer+0x254>
 800bee2:	a201      	add	r2, pc, #4	; (adr r2, 800bee8 <USB_HC_StartXfer+0x1f8>)
 800bee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee8:	0800bef9 	.word	0x0800bef9
 800beec:	0800bf1d 	.word	0x0800bf1d
 800bef0:	0800bef9 	.word	0x0800bef9
 800bef4:	0800bf1d 	.word	0x0800bf1d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	3303      	adds	r3, #3
 800befe:	089b      	lsrs	r3, r3, #2
 800bf00:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bf02:	8afa      	ldrh	r2, [r7, #22]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d91c      	bls.n	800bf48 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	699b      	ldr	r3, [r3, #24]
 800bf12:	f043 0220 	orr.w	r2, r3, #32
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	619a      	str	r2, [r3, #24]
        }
        break;
 800bf1a:	e015      	b.n	800bf48 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	3303      	adds	r3, #3
 800bf22:	089b      	lsrs	r3, r3, #2
 800bf24:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bf26:	8afa      	ldrh	r2, [r7, #22]
 800bf28:	6a3b      	ldr	r3, [r7, #32]
 800bf2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d90a      	bls.n	800bf4c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	619a      	str	r2, [r3, #24]
        }
        break;
 800bf42:	e003      	b.n	800bf4c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800bf44:	bf00      	nop
 800bf46:	e002      	b.n	800bf4e <USB_HC_StartXfer+0x25e>
        break;
 800bf48:	bf00      	nop
 800bf4a:	e000      	b.n	800bf4e <USB_HC_StartXfer+0x25e>
        break;
 800bf4c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	68d9      	ldr	r1, [r3, #12]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	785a      	ldrb	r2, [r3, #1]
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	695b      	ldr	r3, [r3, #20]
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	9000      	str	r0, [sp, #0]
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f7ff fb31 	bl	800b5c8 <USB_WritePacket>
  }

  return HAL_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3728      	adds	r7, #40	; 0x28
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	1ff80000 	.word	0x1ff80000

0800bf74 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf86:	695b      	ldr	r3, [r3, #20]
 800bf88:	b29b      	uxth	r3, r3
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3714      	adds	r7, #20
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800bf96:	b480      	push	{r7}
 800bf98:	b089      	sub	sp, #36	; 0x24
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800bfa6:	78fb      	ldrb	r3, [r7, #3]
 800bfa8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	015a      	lsls	r2, r3, #5
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	0c9b      	lsrs	r3, r3, #18
 800bfbe:	f003 0303 	and.w	r3, r3, #3
 800bfc2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	015a      	lsls	r2, r3, #5
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	4413      	add	r3, r2
 800bfcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	0fdb      	lsrs	r3, r3, #31
 800bfd4:	f003 0301 	and.w	r3, r3, #1
 800bfd8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	f003 0320 	and.w	r3, r3, #32
 800bfe2:	2b20      	cmp	r3, #32
 800bfe4:	d104      	bne.n	800bff0 <USB_HC_Halt+0x5a>
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d101      	bne.n	800bff0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800bfec:	2300      	movs	r3, #0
 800bfee:	e0c8      	b.n	800c182 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d002      	beq.n	800bffc <USB_HC_Halt+0x66>
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d163      	bne.n	800c0c4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	4413      	add	r3, r2
 800c004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	69ba      	ldr	r2, [r7, #24]
 800c00c:	0151      	lsls	r1, r2, #5
 800c00e:	69fa      	ldr	r2, [r7, #28]
 800c010:	440a      	add	r2, r1
 800c012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c016:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c01a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f003 0320 	and.w	r3, r3, #32
 800c024:	2b00      	cmp	r3, #0
 800c026:	f040 80ab 	bne.w	800c180 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d133      	bne.n	800c09e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	015a      	lsls	r2, r3, #5
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	4413      	add	r3, r2
 800c03e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	0151      	lsls	r1, r2, #5
 800c048:	69fa      	ldr	r2, [r7, #28]
 800c04a:	440a      	add	r2, r1
 800c04c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c054:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	69ba      	ldr	r2, [r7, #24]
 800c066:	0151      	lsls	r1, r2, #5
 800c068:	69fa      	ldr	r2, [r7, #28]
 800c06a:	440a      	add	r2, r1
 800c06c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c074:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3301      	adds	r3, #1
 800c07a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c082:	d81d      	bhi.n	800c0c0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c09a:	d0ec      	beq.n	800c076 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c09c:	e070      	b.n	800c180 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	015a      	lsls	r2, r3, #5
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	69ba      	ldr	r2, [r7, #24]
 800c0ae:	0151      	lsls	r1, r2, #5
 800c0b0:	69fa      	ldr	r2, [r7, #28]
 800c0b2:	440a      	add	r2, r1
 800c0b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0bc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c0be:	e05f      	b.n	800c180 <USB_HC_Halt+0x1ea>
            break;
 800c0c0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c0c2:	e05d      	b.n	800c180 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	015a      	lsls	r2, r3, #5
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	0151      	lsls	r1, r2, #5
 800c0d6:	69fa      	ldr	r2, [r7, #28]
 800c0d8:	440a      	add	r2, r1
 800c0da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d133      	bne.n	800c15c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	69ba      	ldr	r2, [r7, #24]
 800c104:	0151      	lsls	r1, r2, #5
 800c106:	69fa      	ldr	r2, [r7, #28]
 800c108:	440a      	add	r2, r1
 800c10a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c10e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c112:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	0151      	lsls	r1, r2, #5
 800c126:	69fa      	ldr	r2, [r7, #28]
 800c128:	440a      	add	r2, r1
 800c12a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c12e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c132:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	3301      	adds	r3, #1
 800c138:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c140:	d81d      	bhi.n	800c17e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	015a      	lsls	r2, r3, #5
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	4413      	add	r3, r2
 800c14a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c158:	d0ec      	beq.n	800c134 <USB_HC_Halt+0x19e>
 800c15a:	e011      	b.n	800c180 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	015a      	lsls	r2, r3, #5
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	4413      	add	r3, r2
 800c164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	0151      	lsls	r1, r2, #5
 800c16e:	69fa      	ldr	r2, [r7, #28]
 800c170:	440a      	add	r2, r1
 800c172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c176:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c17a:	6013      	str	r3, [r2, #0]
 800c17c:	e000      	b.n	800c180 <USB_HC_Halt+0x1ea>
          break;
 800c17e:	bf00      	nop
    }
  }

  return HAL_OK;
 800c180:	2300      	movs	r3, #0
}
 800c182:	4618      	mov	r0, r3
 800c184:	3724      	adds	r7, #36	; 0x24
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
	...

0800c190 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c190:	b480      	push	{r7}
 800c192:	b087      	sub	sp, #28
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	460b      	mov	r3, r1
 800c19a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	04da      	lsls	r2, r3, #19
 800c1ac:	4b15      	ldr	r3, [pc, #84]	; (800c204 <USB_DoPing+0x74>)
 800c1ae:	4013      	ands	r3, r2
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	0151      	lsls	r1, r2, #5
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	440a      	add	r2, r1
 800c1b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	015a      	lsls	r2, r3, #5
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c1d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	015a      	lsls	r2, r3, #5
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	371c      	adds	r7, #28
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	1ff80000 	.word	0x1ff80000

0800c208 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c218:	2300      	movs	r3, #0
 800c21a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7ff f911 	bl	800b444 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c222:	2110      	movs	r1, #16
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7ff f96b 	bl	800b500 <USB_FlushTxFifo>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d001      	beq.n	800c234 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7ff f997 	bl	800b568 <USB_FlushRxFifo>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d001      	beq.n	800c244 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c244:	2300      	movs	r3, #0
 800c246:	61bb      	str	r3, [r7, #24]
 800c248:	e01f      	b.n	800c28a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	015a      	lsls	r2, r3, #5
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	4413      	add	r3, r2
 800c252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c260:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c268:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c270:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	015a      	lsls	r2, r3, #5
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	4413      	add	r3, r2
 800c27a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c27e:	461a      	mov	r2, r3
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	3301      	adds	r3, #1
 800c288:	61bb      	str	r3, [r7, #24]
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	2b0f      	cmp	r3, #15
 800c28e:	d9dc      	bls.n	800c24a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c290:	2300      	movs	r3, #0
 800c292:	61bb      	str	r3, [r7, #24]
 800c294:	e034      	b.n	800c300 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	015a      	lsls	r2, r3, #5
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	4413      	add	r3, r2
 800c29e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c2b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	015a      	lsls	r2, r3, #5
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2dc:	d80c      	bhi.n	800c2f8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2f4:	d0ec      	beq.n	800c2d0 <USB_StopHost+0xc8>
 800c2f6:	e000      	b.n	800c2fa <USB_StopHost+0xf2>
        break;
 800c2f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	61bb      	str	r3, [r7, #24]
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	2b0f      	cmp	r3, #15
 800c304:	d9c7      	bls.n	800c296 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c30c:	461a      	mov	r2, r3
 800c30e:	f04f 33ff 	mov.w	r3, #4294967295
 800c312:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f04f 32ff 	mov.w	r2, #4294967295
 800c31a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7ff f880 	bl	800b422 <USB_EnableGlobalInt>

  return ret;
 800c322:	7ffb      	ldrb	r3, [r7, #31]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3720      	adds	r7, #32
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c32c:	b590      	push	{r4, r7, lr}
 800c32e:	b089      	sub	sp, #36	; 0x24
 800c330:	af04      	add	r7, sp, #16
 800c332:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c334:	2301      	movs	r3, #1
 800c336:	2202      	movs	r2, #2
 800c338:	2102      	movs	r1, #2
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 fcb2 	bl	800cca4 <USBH_FindInterface>
 800c340:	4603      	mov	r3, r0
 800c342:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c344:	7bfb      	ldrb	r3, [r7, #15]
 800c346:	2bff      	cmp	r3, #255	; 0xff
 800c348:	d002      	beq.n	800c350 <USBH_CDC_InterfaceInit+0x24>
 800c34a:	7bfb      	ldrb	r3, [r7, #15]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d901      	bls.n	800c354 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c350:	2302      	movs	r3, #2
 800c352:	e13d      	b.n	800c5d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c354:	7bfb      	ldrb	r3, [r7, #15]
 800c356:	4619      	mov	r1, r3
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 fc87 	bl	800cc6c <USBH_SelectInterface>
 800c35e:	4603      	mov	r3, r0
 800c360:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c362:	7bbb      	ldrb	r3, [r7, #14]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c368:	2302      	movs	r3, #2
 800c36a:	e131      	b.n	800c5d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c372:	2050      	movs	r0, #80	; 0x50
 800c374:	f005 fcd6 	bl	8011d24 <malloc>
 800c378:	4603      	mov	r3, r0
 800c37a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c382:	69db      	ldr	r3, [r3, #28]
 800c384:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d101      	bne.n	800c390 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c38c:	2302      	movs	r3, #2
 800c38e:	e11f      	b.n	800c5d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c390:	2250      	movs	r2, #80	; 0x50
 800c392:	2100      	movs	r1, #0
 800c394:	68b8      	ldr	r0, [r7, #8]
 800c396:	f005 fda1 	bl	8011edc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	211a      	movs	r1, #26
 800c3a0:	fb01 f303 	mul.w	r3, r1, r3
 800c3a4:	4413      	add	r3, r2
 800c3a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	b25b      	sxtb	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	da15      	bge.n	800c3de <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	211a      	movs	r1, #26
 800c3b8:	fb01 f303 	mul.w	r3, r1, r3
 800c3bc:	4413      	add	r3, r2
 800c3be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c3c2:	781a      	ldrb	r2, [r3, #0]
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	211a      	movs	r1, #26
 800c3ce:	fb01 f303 	mul.w	r3, r1, r3
 800c3d2:	4413      	add	r3, r2
 800c3d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c3d8:	881a      	ldrh	r2, [r3, #0]
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	785b      	ldrb	r3, [r3, #1]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f002 f986 	bl	800e6f6 <USBH_AllocPipe>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	7819      	ldrb	r1, [r3, #0]
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	7858      	ldrb	r0, [r3, #1]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	8952      	ldrh	r2, [r2, #10]
 800c40a:	9202      	str	r2, [sp, #8]
 800c40c:	2203      	movs	r2, #3
 800c40e:	9201      	str	r2, [sp, #4]
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	4623      	mov	r3, r4
 800c414:	4602      	mov	r2, r0
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f002 f93e 	bl	800e698 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	2200      	movs	r2, #0
 800c422:	4619      	mov	r1, r3
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f005 fbf9 	bl	8011c1c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c42a:	2300      	movs	r3, #0
 800c42c:	2200      	movs	r2, #0
 800c42e:	210a      	movs	r1, #10
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fc37 	bl	800cca4 <USBH_FindInterface>
 800c436:	4603      	mov	r3, r0
 800c438:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
 800c43c:	2bff      	cmp	r3, #255	; 0xff
 800c43e:	d002      	beq.n	800c446 <USBH_CDC_InterfaceInit+0x11a>
 800c440:	7bfb      	ldrb	r3, [r7, #15]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d901      	bls.n	800c44a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c446:	2302      	movs	r3, #2
 800c448:	e0c2      	b.n	800c5d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c44a:	7bfb      	ldrb	r3, [r7, #15]
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	211a      	movs	r1, #26
 800c450:	fb01 f303 	mul.w	r3, r1, r3
 800c454:	4413      	add	r3, r2
 800c456:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	b25b      	sxtb	r3, r3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	da16      	bge.n	800c490 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c462:	7bfb      	ldrb	r3, [r7, #15]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	211a      	movs	r1, #26
 800c468:	fb01 f303 	mul.w	r3, r1, r3
 800c46c:	4413      	add	r3, r2
 800c46e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c472:	781a      	ldrb	r2, [r3, #0]
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	211a      	movs	r1, #26
 800c47e:	fb01 f303 	mul.w	r3, r1, r3
 800c482:	4413      	add	r3, r2
 800c484:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c488:	881a      	ldrh	r2, [r3, #0]
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	835a      	strh	r2, [r3, #26]
 800c48e:	e015      	b.n	800c4bc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c490:	7bfb      	ldrb	r3, [r7, #15]
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	211a      	movs	r1, #26
 800c496:	fb01 f303 	mul.w	r3, r1, r3
 800c49a:	4413      	add	r3, r2
 800c49c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c4a0:	781a      	ldrb	r2, [r3, #0]
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	211a      	movs	r1, #26
 800c4ac:	fb01 f303 	mul.w	r3, r1, r3
 800c4b0:	4413      	add	r3, r2
 800c4b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c4b6:	881a      	ldrh	r2, [r3, #0]
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	211a      	movs	r1, #26
 800c4c2:	fb01 f303 	mul.w	r3, r1, r3
 800c4c6:	4413      	add	r3, r2
 800c4c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	b25b      	sxtb	r3, r3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	da16      	bge.n	800c502 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c4d4:	7bfb      	ldrb	r3, [r7, #15]
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	211a      	movs	r1, #26
 800c4da:	fb01 f303 	mul.w	r3, r1, r3
 800c4de:	4413      	add	r3, r2
 800c4e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c4e4:	781a      	ldrb	r2, [r3, #0]
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	211a      	movs	r1, #26
 800c4f0:	fb01 f303 	mul.w	r3, r1, r3
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c4fa:	881a      	ldrh	r2, [r3, #0]
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	835a      	strh	r2, [r3, #26]
 800c500:	e015      	b.n	800c52e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c502:	7bfb      	ldrb	r3, [r7, #15]
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	211a      	movs	r1, #26
 800c508:	fb01 f303 	mul.w	r3, r1, r3
 800c50c:	4413      	add	r3, r2
 800c50e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c512:	781a      	ldrb	r2, [r3, #0]
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c518:	7bfb      	ldrb	r3, [r7, #15]
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	211a      	movs	r1, #26
 800c51e:	fb01 f303 	mul.w	r3, r1, r3
 800c522:	4413      	add	r3, r2
 800c524:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c528:	881a      	ldrh	r2, [r3, #0]
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	7b9b      	ldrb	r3, [r3, #14]
 800c532:	4619      	mov	r1, r3
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f002 f8de 	bl	800e6f6 <USBH_AllocPipe>
 800c53a:	4603      	mov	r3, r0
 800c53c:	461a      	mov	r2, r3
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	7bdb      	ldrb	r3, [r3, #15]
 800c546:	4619      	mov	r1, r3
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f002 f8d4 	bl	800e6f6 <USBH_AllocPipe>
 800c54e:	4603      	mov	r3, r0
 800c550:	461a      	mov	r2, r3
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	7b59      	ldrb	r1, [r3, #13]
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	7b98      	ldrb	r0, [r3, #14]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	8b12      	ldrh	r2, [r2, #24]
 800c56e:	9202      	str	r2, [sp, #8]
 800c570:	2202      	movs	r2, #2
 800c572:	9201      	str	r2, [sp, #4]
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	4623      	mov	r3, r4
 800c578:	4602      	mov	r2, r0
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f002 f88c 	bl	800e698 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	7b19      	ldrb	r1, [r3, #12]
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	7bd8      	ldrb	r0, [r3, #15]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	8b52      	ldrh	r2, [r2, #26]
 800c598:	9202      	str	r2, [sp, #8]
 800c59a:	2202      	movs	r2, #2
 800c59c:	9201      	str	r2, [sp, #4]
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	4623      	mov	r3, r4
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f002 f877 	bl	800e698 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	7b5b      	ldrb	r3, [r3, #13]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f005 fb2e 	bl	8011c1c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	7b1b      	ldrb	r3, [r3, #12]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f005 fb27 	bl	8011c1c <USBH_LL_SetToggle>

  return USBH_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3714      	adds	r7, #20
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd90      	pop	{r4, r7, pc}

0800c5d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5e6:	69db      	ldr	r3, [r3, #28]
 800c5e8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00e      	beq.n	800c610 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f002 f86c 	bl	800e6d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	4619      	mov	r1, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f002 f897 	bl	800e738 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2200      	movs	r2, #0
 800c60e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	7b1b      	ldrb	r3, [r3, #12]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00e      	beq.n	800c636 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	7b1b      	ldrb	r3, [r3, #12]
 800c61c:	4619      	mov	r1, r3
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f002 f859 	bl	800e6d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	7b1b      	ldrb	r3, [r3, #12]
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f002 f884 	bl	800e738 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	7b5b      	ldrb	r3, [r3, #13]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00e      	beq.n	800c65c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	7b5b      	ldrb	r3, [r3, #13]
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f002 f846 	bl	800e6d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	7b5b      	ldrb	r3, [r3, #13]
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f002 f871 	bl	800e738 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2200      	movs	r2, #0
 800c65a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c662:	69db      	ldr	r3, [r3, #28]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00b      	beq.n	800c680 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c66e:	69db      	ldr	r3, [r3, #28]
 800c670:	4618      	mov	r0, r3
 800c672:	f005 fb5f 	bl	8011d34 <free>
    phost->pActiveClass->pData = 0U;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c67c:	2200      	movs	r2, #0
 800c67e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b084      	sub	sp, #16
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	3340      	adds	r3, #64	; 0x40
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f8b1 	bl	800c80a <GetLineCoding>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c6ac:	7afb      	ldrb	r3, [r7, #11]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d105      	bne.n	800c6be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c6b8:	2102      	movs	r1, #2
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c6be:	7afb      	ldrb	r3, [r7, #11]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6de:	69db      	ldr	r3, [r3, #28]
 800c6e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c6e8:	2b04      	cmp	r3, #4
 800c6ea:	d877      	bhi.n	800c7dc <USBH_CDC_Process+0x114>
 800c6ec:	a201      	add	r2, pc, #4	; (adr r2, 800c6f4 <USBH_CDC_Process+0x2c>)
 800c6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f2:	bf00      	nop
 800c6f4:	0800c709 	.word	0x0800c709
 800c6f8:	0800c70f 	.word	0x0800c70f
 800c6fc:	0800c73f 	.word	0x0800c73f
 800c700:	0800c7b3 	.word	0x0800c7b3
 800c704:	0800c7c1 	.word	0x0800c7c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	73fb      	strb	r3, [r7, #15]
      break;
 800c70c:	e06d      	b.n	800c7ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c712:	4619      	mov	r1, r3
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f897 	bl	800c848 <SetLineCoding>
 800c71a:	4603      	mov	r3, r0
 800c71c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c71e:	7bbb      	ldrb	r3, [r7, #14]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d104      	bne.n	800c72e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	2202      	movs	r2, #2
 800c728:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c72c:	e058      	b.n	800c7e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c72e:	7bbb      	ldrb	r3, [r7, #14]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d055      	beq.n	800c7e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2204      	movs	r2, #4
 800c738:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c73c:	e050      	b.n	800c7e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	3340      	adds	r3, #64	; 0x40
 800c742:	4619      	mov	r1, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f860 	bl	800c80a <GetLineCoding>
 800c74a:	4603      	mov	r3, r0
 800c74c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c74e:	7bbb      	ldrb	r3, [r7, #14]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d126      	bne.n	800c7a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	2200      	movs	r2, #0
 800c758:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c766:	791b      	ldrb	r3, [r3, #4]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d13b      	bne.n	800c7e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c776:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c778:	429a      	cmp	r2, r3
 800c77a:	d133      	bne.n	800c7e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c786:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c788:	429a      	cmp	r2, r3
 800c78a:	d12b      	bne.n	800c7e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c794:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c796:	429a      	cmp	r2, r3
 800c798:	d124      	bne.n	800c7e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f982 	bl	800caa4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c7a0:	e020      	b.n	800c7e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c7a2:	7bbb      	ldrb	r3, [r7, #14]
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d01d      	beq.n	800c7e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	2204      	movs	r2, #4
 800c7ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c7b0:	e018      	b.n	800c7e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f867 	bl	800c886 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f8f6 	bl	800c9aa <CDC_ProcessReception>
      break;
 800c7be:	e014      	b.n	800c7ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f001 f957 	bl	800da76 <USBH_ClrFeature>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c7cc:	7bbb      	ldrb	r3, [r7, #14]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10a      	bne.n	800c7e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c7da:	e005      	b.n	800c7e8 <USBH_CDC_Process+0x120>

    default:
      break;
 800c7dc:	bf00      	nop
 800c7de:	e004      	b.n	800c7ea <USBH_CDC_Process+0x122>
      break;
 800c7e0:	bf00      	nop
 800c7e2:	e002      	b.n	800c7ea <USBH_CDC_Process+0x122>
      break;
 800c7e4:	bf00      	nop
 800c7e6:	e000      	b.n	800c7ea <USBH_CDC_Process+0x122>
      break;
 800c7e8:	bf00      	nop

  }

  return status;
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	370c      	adds	r7, #12
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b082      	sub	sp, #8
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	22a1      	movs	r2, #161	; 0xa1
 800c818:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2221      	movs	r2, #33	; 0x21
 800c81e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2207      	movs	r2, #7
 800c830:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	2207      	movs	r2, #7
 800c836:	4619      	mov	r1, r3
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f001 fbeb 	bl	800e014 <USBH_CtlReq>
 800c83e:	4603      	mov	r3, r0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2221      	movs	r2, #33	; 0x21
 800c856:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2220      	movs	r2, #32
 800c85c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2207      	movs	r2, #7
 800c86e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	2207      	movs	r2, #7
 800c874:	4619      	mov	r1, r3
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f001 fbcc 	bl	800e014 <USBH_CtlReq>
 800c87c:	4603      	mov	r3, r0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b086      	sub	sp, #24
 800c88a:	af02      	add	r7, sp, #8
 800c88c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c894:	69db      	ldr	r3, [r3, #28]
 800c896:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c898:	2300      	movs	r3, #0
 800c89a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d002      	beq.n	800c8ac <CDC_ProcessTransmission+0x26>
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d023      	beq.n	800c8f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c8aa:	e07a      	b.n	800c9a2 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	8b12      	ldrh	r2, [r2, #24]
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d90b      	bls.n	800c8d0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	69d9      	ldr	r1, [r3, #28]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	8b1a      	ldrh	r2, [r3, #24]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	7b5b      	ldrb	r3, [r3, #13]
 800c8c4:	2001      	movs	r0, #1
 800c8c6:	9000      	str	r0, [sp, #0]
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f001 fea2 	bl	800e612 <USBH_BulkSendData>
 800c8ce:	e00b      	b.n	800c8e8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	7b5b      	ldrb	r3, [r3, #13]
 800c8de:	2001      	movs	r0, #1
 800c8e0:	9000      	str	r0, [sp, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f001 fe95 	bl	800e612 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c8f0:	e057      	b.n	800c9a2 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	7b5b      	ldrb	r3, [r3, #13]
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f005 f965 	bl	8011bc8 <USBH_LL_GetURBState>
 800c8fe:	4603      	mov	r3, r0
 800c900:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c902:	7afb      	ldrb	r3, [r7, #11]
 800c904:	2b01      	cmp	r3, #1
 800c906:	d136      	bne.n	800c976 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	8b12      	ldrh	r2, [r2, #24]
 800c910:	4293      	cmp	r3, r2
 800c912:	d90e      	bls.n	800c932 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	8b12      	ldrh	r2, [r2, #24]
 800c91c:	1a9a      	subs	r2, r3, r2
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	69db      	ldr	r3, [r3, #28]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	8b12      	ldrh	r2, [r2, #24]
 800c92a:	441a      	add	r2, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	61da      	str	r2, [r3, #28]
 800c930:	e002      	b.n	800c938 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2200      	movs	r2, #0
 800c936:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d004      	beq.n	800c94a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c948:	e006      	b.n	800c958 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 f892 	bl	800ca7c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2204      	movs	r2, #4
 800c95c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c96c:	2300      	movs	r3, #0
 800c96e:	2200      	movs	r2, #0
 800c970:	f002 f8d2 	bl	800eb18 <osMessageQueuePut>
      break;
 800c974:	e014      	b.n	800c9a0 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800c976:	7afb      	ldrb	r3, [r7, #11]
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d111      	bne.n	800c9a0 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2201      	movs	r2, #1
 800c980:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2204      	movs	r2, #4
 800c988:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c998:	2300      	movs	r3, #0
 800c99a:	2200      	movs	r2, #0
 800c99c:	f002 f8bc 	bl	800eb18 <osMessageQueuePut>
      break;
 800c9a0:	bf00      	nop
  }
}
 800c9a2:	bf00      	nop
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b086      	sub	sp, #24
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c9c6:	2b03      	cmp	r3, #3
 800c9c8:	d002      	beq.n	800c9d0 <CDC_ProcessReception+0x26>
 800c9ca:	2b04      	cmp	r3, #4
 800c9cc:	d00e      	beq.n	800c9ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c9ce:	e051      	b.n	800ca74 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	6a19      	ldr	r1, [r3, #32]
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	8b5a      	ldrh	r2, [r3, #26]
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	7b1b      	ldrb	r3, [r3, #12]
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f001 fe3d 	bl	800e65c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	2204      	movs	r2, #4
 800c9e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c9ea:	e043      	b.n	800ca74 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	7b1b      	ldrb	r3, [r3, #12]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f005 f8e8 	bl	8011bc8 <USBH_LL_GetURBState>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c9fc:	7cfb      	ldrb	r3, [r7, #19]
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d137      	bne.n	800ca72 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	7b1b      	ldrb	r3, [r3, #12]
 800ca06:	4619      	mov	r1, r3
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f005 f84b 	bl	8011aa4 <USBH_LL_GetLastXferSize>
 800ca0e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d016      	beq.n	800ca48 <CDC_ProcessReception+0x9e>
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	8b5b      	ldrh	r3, [r3, #26]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d910      	bls.n	800ca48 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	1ad2      	subs	r2, r2, r3
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	6a1a      	ldr	r2, [r3, #32]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	441a      	add	r2, r3
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	2203      	movs	r2, #3
 800ca42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800ca46:	e006      	b.n	800ca56 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 f81d 	bl	800ca90 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2204      	movs	r2, #4
 800ca5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f002 f853 	bl	800eb18 <osMessageQueuePut>
      break;
 800ca72:	bf00      	nop
  }
}
 800ca74:	bf00      	nop
 800ca76:	3718      	adds	r7, #24
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800caac:	bf00      	nop
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	4613      	mov	r3, r2
 800cac4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d101      	bne.n	800cad0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cacc:	2302      	movs	r3, #2
 800cace:	e044      	b.n	800cb5a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	79fa      	ldrb	r2, [r7, #7]
 800cad4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f000 f841 	bl	800cb70 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d003      	beq.n	800cb1c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	2104      	movs	r1, #4
 800cb20:	2010      	movs	r0, #16
 800cb22:	f001 ff86 	bl	800ea32 <osMessageQueueNew>
 800cb26:	4602      	mov	r2, r0
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800cb2e:	4b0d      	ldr	r3, [pc, #52]	; (800cb64 <USBH_Init+0xac>)
 800cb30:	4a0d      	ldr	r2, [pc, #52]	; (800cb68 <USBH_Init+0xb0>)
 800cb32:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800cb34:	4b0b      	ldr	r3, [pc, #44]	; (800cb64 <USBH_Init+0xac>)
 800cb36:	2280      	movs	r2, #128	; 0x80
 800cb38:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800cb3a:	4b0a      	ldr	r3, [pc, #40]	; (800cb64 <USBH_Init+0xac>)
 800cb3c:	2218      	movs	r2, #24
 800cb3e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800cb40:	4a08      	ldr	r2, [pc, #32]	; (800cb64 <USBH_Init+0xac>)
 800cb42:	68f9      	ldr	r1, [r7, #12]
 800cb44:	4809      	ldr	r0, [pc, #36]	; (800cb6c <USBH_Init+0xb4>)
 800cb46:	f001 fec7 	bl	800e8d8 <osThreadNew>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f004 fee8 	bl	8011928 <USBH_LL_Init>

  return USBH_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20000650 	.word	0x20000650
 800cb68:	08012748 	.word	0x08012748
 800cb6c:	0800d7ed 	.word	0x0800d7ed

0800cb70 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	60fb      	str	r3, [r7, #12]
 800cb80:	e009      	b.n	800cb96 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	33e0      	adds	r3, #224	; 0xe0
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	4413      	add	r3, r2
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	3301      	adds	r3, #1
 800cb94:	60fb      	str	r3, [r7, #12]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b0f      	cmp	r3, #15
 800cb9a:	d9f2      	bls.n	800cb82 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	60fb      	str	r3, [r7, #12]
 800cba0:	e009      	b.n	800cbb6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	4413      	add	r3, r2
 800cba8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cbac:	2200      	movs	r2, #0
 800cbae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	60fb      	str	r3, [r7, #12]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbbc:	d3f1      	bcc.n	800cba2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2240      	movs	r2, #64	; 0x40
 800cbe2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800cc0a:	2300      	movs	r3, #0
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3714      	adds	r7, #20
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cc22:	2300      	movs	r3, #0
 800cc24:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d016      	beq.n	800cc5a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10e      	bne.n	800cc54 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cc3c:	1c59      	adds	r1, r3, #1
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	33de      	adds	r3, #222	; 0xde
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	73fb      	strb	r3, [r7, #15]
 800cc52:	e004      	b.n	800cc5e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cc54:	2302      	movs	r3, #2
 800cc56:	73fb      	strb	r3, [r7, #15]
 800cc58:	e001      	b.n	800cc5e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cc5a:	2302      	movs	r3, #2
 800cc5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	460b      	mov	r3, r1
 800cc76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800cc82:	78fa      	ldrb	r2, [r7, #3]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d204      	bcs.n	800cc92 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	78fa      	ldrb	r2, [r7, #3]
 800cc8c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800cc90:	e001      	b.n	800cc96 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cc92:	2302      	movs	r3, #2
 800cc94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b087      	sub	sp, #28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	4608      	mov	r0, r1
 800ccae:	4611      	mov	r1, r2
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	70fb      	strb	r3, [r7, #3]
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	70bb      	strb	r3, [r7, #2]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cccc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ccce:	e025      	b.n	800cd1c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ccd0:	7dfb      	ldrb	r3, [r7, #23]
 800ccd2:	221a      	movs	r2, #26
 800ccd4:	fb02 f303 	mul.w	r3, r2, r3
 800ccd8:	3308      	adds	r3, #8
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	4413      	add	r3, r2
 800ccde:	3302      	adds	r3, #2
 800cce0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	795b      	ldrb	r3, [r3, #5]
 800cce6:	78fa      	ldrb	r2, [r7, #3]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d002      	beq.n	800ccf2 <USBH_FindInterface+0x4e>
 800ccec:	78fb      	ldrb	r3, [r7, #3]
 800ccee:	2bff      	cmp	r3, #255	; 0xff
 800ccf0:	d111      	bne.n	800cd16 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ccf6:	78ba      	ldrb	r2, [r7, #2]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d002      	beq.n	800cd02 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ccfc:	78bb      	ldrb	r3, [r7, #2]
 800ccfe:	2bff      	cmp	r3, #255	; 0xff
 800cd00:	d109      	bne.n	800cd16 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cd06:	787a      	ldrb	r2, [r7, #1]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d002      	beq.n	800cd12 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd0c:	787b      	ldrb	r3, [r7, #1]
 800cd0e:	2bff      	cmp	r3, #255	; 0xff
 800cd10:	d101      	bne.n	800cd16 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cd12:	7dfb      	ldrb	r3, [r7, #23]
 800cd14:	e006      	b.n	800cd24 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cd16:	7dfb      	ldrb	r3, [r7, #23]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cd1c:	7dfb      	ldrb	r3, [r7, #23]
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d9d6      	bls.n	800ccd0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cd22:	23ff      	movs	r3, #255	; 0xff
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	371c      	adds	r7, #28
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f004 fe3b 	bl	80119b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800cd3e:	2101      	movs	r1, #1
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f004 ff54 	bl	8011bee <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b088      	sub	sp, #32
 800cd54:	af04      	add	r7, sp, #16
 800cd56:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cd58:	2302      	movs	r3, #2
 800cd5a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d102      	bne.n	800cd72 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2203      	movs	r2, #3
 800cd70:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b0b      	cmp	r3, #11
 800cd7a:	f200 8247 	bhi.w	800d20c <USBH_Process+0x4bc>
 800cd7e:	a201      	add	r2, pc, #4	; (adr r2, 800cd84 <USBH_Process+0x34>)
 800cd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd84:	0800cdb5 	.word	0x0800cdb5
 800cd88:	0800ce03 	.word	0x0800ce03
 800cd8c:	0800ce87 	.word	0x0800ce87
 800cd90:	0800d18b 	.word	0x0800d18b
 800cd94:	0800d20d 	.word	0x0800d20d
 800cd98:	0800cf47 	.word	0x0800cf47
 800cd9c:	0800d115 	.word	0x0800d115
 800cda0:	0800cf99 	.word	0x0800cf99
 800cda4:	0800cfd5 	.word	0x0800cfd5
 800cda8:	0800d00f 	.word	0x0800d00f
 800cdac:	0800d06d 	.word	0x0800d06d
 800cdb0:	0800d173 	.word	0x0800d173
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f000 8227 	beq.w	800d210 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cdc8:	20c8      	movs	r0, #200	; 0xc8
 800cdca:	f004 ff57 	bl	8011c7c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f004 fe4d 	bl	8011a6e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f001 fe8c 	bl	800eb18 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800ce00:	e206      	b.n	800d210 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d107      	bne.n	800ce1c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2202      	movs	r2, #2
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	e025      	b.n	800ce68 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ce22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce26:	d914      	bls.n	800ce52 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ce2e:	3301      	adds	r3, #1
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	d903      	bls.n	800ce4a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	220d      	movs	r2, #13
 800ce46:	701a      	strb	r2, [r3, #0]
 800ce48:	e00e      	b.n	800ce68 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	701a      	strb	r2, [r3, #0]
 800ce50:	e00a      	b.n	800ce68 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ce58:	f103 020a 	add.w	r2, r3, #10
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ce62:	200a      	movs	r0, #10
 800ce64:	f004 ff0a 	bl	8011c7c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f001 fe4a 	bl	800eb18 <osMessageQueuePut>
#endif
#endif
      break;
 800ce84:	e1cb      	b.n	800d21e <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d005      	beq.n	800ce9c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce96:	2104      	movs	r1, #4
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ce9c:	2064      	movs	r0, #100	; 0x64
 800ce9e:	f004 feed 	bl	8011c7c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f004 fdbc 	bl	8011a20 <USBH_LL_GetSpeed>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	461a      	mov	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2205      	movs	r2, #5
 800ceb6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ceb8:	2100      	movs	r1, #0
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f001 fc1b 	bl	800e6f6 <USBH_AllocPipe>
 800cec0:	4603      	mov	r3, r0
 800cec2:	461a      	mov	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cec8:	2180      	movs	r1, #128	; 0x80
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f001 fc13 	bl	800e6f6 <USBH_AllocPipe>
 800ced0:	4603      	mov	r3, r0
 800ced2:	461a      	mov	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	7919      	ldrb	r1, [r3, #4]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ceec:	b292      	uxth	r2, r2
 800ceee:	9202      	str	r2, [sp, #8]
 800cef0:	2200      	movs	r2, #0
 800cef2:	9201      	str	r2, [sp, #4]
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	4603      	mov	r3, r0
 800cef8:	2280      	movs	r2, #128	; 0x80
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f001 fbcc 	bl	800e698 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	7959      	ldrb	r1, [r3, #5]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cf14:	b292      	uxth	r2, r2
 800cf16:	9202      	str	r2, [sp, #8]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	9201      	str	r2, [sp, #4]
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2200      	movs	r2, #0
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f001 fbb8 	bl	800e698 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f001 fdea 	bl	800eb18 <osMessageQueuePut>
#endif
#endif
      break;
 800cf44:	e16b      	b.n	800d21e <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 f96e 	bl	800d228 <USBH_HandleEnum>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cf50:	7bbb      	ldrb	r3, [r7, #14]
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f040 815d 	bne.w	800d214 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d103      	bne.n	800cf74 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2208      	movs	r2, #8
 800cf70:	701a      	strb	r2, [r3, #0]
 800cf72:	e002      	b.n	800cf7a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2207      	movs	r2, #7
 800cf78:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2205      	movs	r2, #5
 800cf7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf8e:	2300      	movs	r3, #0
 800cf90:	2200      	movs	r2, #0
 800cf92:	f001 fdc1 	bl	800eb18 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800cf96:	e13d      	b.n	800d214 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f000 813a 	beq.w	800d218 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfaa:	2101      	movs	r1, #1
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2208      	movs	r2, #8
 800cfb4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2205      	movs	r2, #5
 800cfba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfca:	2300      	movs	r3, #0
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f001 fda3 	bl	800eb18 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800cfd2:	e121      	b.n	800d218 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fd02 	bl	800d9e8 <USBH_SetCfg>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d102      	bne.n	800cff0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2209      	movs	r2, #9
 800cfee:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2201      	movs	r2, #1
 800cff4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d004:	2300      	movs	r3, #0
 800d006:	2200      	movs	r2, #0
 800d008:	f001 fd86 	bl	800eb18 <osMessageQueuePut>
#endif
#endif
      break;
 800d00c:	e107      	b.n	800d21e <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d014:	f003 0320 	and.w	r3, r3, #32
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d015      	beq.n	800d048 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d01c:	2101      	movs	r1, #1
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fd05 	bl	800da2e <USBH_SetFeature>
 800d024:	4603      	mov	r3, r0
 800d026:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d028:	7bbb      	ldrb	r3, [r7, #14]
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d103      	bne.n	800d038 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	220a      	movs	r2, #10
 800d034:	701a      	strb	r2, [r3, #0]
 800d036:	e00a      	b.n	800d04e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800d038:	7bbb      	ldrb	r3, [r7, #14]
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	2b03      	cmp	r3, #3
 800d03e:	d106      	bne.n	800d04e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	220a      	movs	r2, #10
 800d044:	701a      	strb	r2, [r3, #0]
 800d046:	e002      	b.n	800d04e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	220a      	movs	r2, #10
 800d04c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2201      	movs	r2, #1
 800d052:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d062:	2300      	movs	r3, #0
 800d064:	2200      	movs	r2, #0
 800d066:	f001 fd57 	bl	800eb18 <osMessageQueuePut>
#endif
#endif
      break;
 800d06a:	e0d8      	b.n	800d21e <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d072:	2b00      	cmp	r3, #0
 800d074:	d03f      	beq.n	800d0f6 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d07e:	2300      	movs	r3, #0
 800d080:	73fb      	strb	r3, [r7, #15]
 800d082:	e016      	b.n	800d0b2 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d084:	7bfa      	ldrb	r2, [r7, #15]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	32de      	adds	r2, #222	; 0xde
 800d08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d08e:	791a      	ldrb	r2, [r3, #4]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d096:	429a      	cmp	r2, r3
 800d098:	d108      	bne.n	800d0ac <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d09a:	7bfa      	ldrb	r2, [r7, #15]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	32de      	adds	r2, #222	; 0xde
 800d0a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d0aa:	e005      	b.n	800d0b8 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d0ac:	7bfb      	ldrb	r3, [r7, #15]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	73fb      	strb	r3, [r7, #15]
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d0e5      	beq.n	800d084 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d016      	beq.n	800d0f0 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	4798      	blx	r3
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d109      	bne.n	800d0e8 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2206      	movs	r2, #6
 800d0d8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0e0:	2103      	movs	r1, #3
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	4798      	blx	r3
 800d0e6:	e006      	b.n	800d0f6 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	220d      	movs	r2, #13
 800d0ec:	701a      	strb	r2, [r3, #0]
 800d0ee:	e002      	b.n	800d0f6 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	220d      	movs	r2, #13
 800d0f4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2205      	movs	r2, #5
 800d0fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d10a:	2300      	movs	r3, #0
 800d10c:	2200      	movs	r2, #0
 800d10e:	f001 fd03 	bl	800eb18 <osMessageQueuePut>
#endif
#endif
      break;
 800d112:	e084      	b.n	800d21e <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d017      	beq.n	800d14e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	4798      	blx	r3
 800d12a:	4603      	mov	r3, r0
 800d12c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d12e:	7bbb      	ldrb	r3, [r7, #14]
 800d130:	b2db      	uxtb	r3, r3
 800d132:	2b00      	cmp	r3, #0
 800d134:	d103      	bne.n	800d13e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	220b      	movs	r2, #11
 800d13a:	701a      	strb	r2, [r3, #0]
 800d13c:	e00a      	b.n	800d154 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800d13e:	7bbb      	ldrb	r3, [r7, #14]
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b02      	cmp	r3, #2
 800d144:	d106      	bne.n	800d154 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	220d      	movs	r2, #13
 800d14a:	701a      	strb	r2, [r3, #0]
 800d14c:	e002      	b.n	800d154 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	220d      	movs	r2, #13
 800d152:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2205      	movs	r2, #5
 800d158:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d168:	2300      	movs	r3, #0
 800d16a:	2200      	movs	r2, #0
 800d16c:	f001 fcd4 	bl	800eb18 <osMessageQueuePut>
#endif
#endif
      break;
 800d170:	e055      	b.n	800d21e <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d04f      	beq.n	800d21c <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d182:	695b      	ldr	r3, [r3, #20]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	4798      	blx	r3
      }
      break;
 800d188:	e048      	b.n	800d21c <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f7ff fcec 	bl	800cb70 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d009      	beq.n	800d1b6 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d005      	beq.n	800d1cc <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1c6:	2105      	movs	r1, #5
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d107      	bne.n	800d1e8 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7ff fda5 	bl	800cd30 <USBH_Start>
 800d1e6:	e002      	b.n	800d1ee <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f004 fbe3 	bl	80119b4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d202:	2300      	movs	r3, #0
 800d204:	2200      	movs	r2, #0
 800d206:	f001 fc87 	bl	800eb18 <osMessageQueuePut>
#endif
#endif
      break;
 800d20a:	e008      	b.n	800d21e <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800d20c:	bf00      	nop
 800d20e:	e006      	b.n	800d21e <USBH_Process+0x4ce>
      break;
 800d210:	bf00      	nop
 800d212:	e004      	b.n	800d21e <USBH_Process+0x4ce>
      break;
 800d214:	bf00      	nop
 800d216:	e002      	b.n	800d21e <USBH_Process+0x4ce>
    break;
 800d218:	bf00      	nop
 800d21a:	e000      	b.n	800d21e <USBH_Process+0x4ce>
      break;
 800d21c:	bf00      	nop
  }
  return USBH_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b088      	sub	sp, #32
 800d22c:	af04      	add	r7, sp, #16
 800d22e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d230:	2301      	movs	r3, #1
 800d232:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d234:	2301      	movs	r3, #1
 800d236:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	785b      	ldrb	r3, [r3, #1]
 800d23c:	2b07      	cmp	r3, #7
 800d23e:	f200 8208 	bhi.w	800d652 <USBH_HandleEnum+0x42a>
 800d242:	a201      	add	r2, pc, #4	; (adr r2, 800d248 <USBH_HandleEnum+0x20>)
 800d244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d248:	0800d269 	.word	0x0800d269
 800d24c:	0800d327 	.word	0x0800d327
 800d250:	0800d391 	.word	0x0800d391
 800d254:	0800d41f 	.word	0x0800d41f
 800d258:	0800d489 	.word	0x0800d489
 800d25c:	0800d4f9 	.word	0x0800d4f9
 800d260:	0800d595 	.word	0x0800d595
 800d264:	0800d613 	.word	0x0800d613
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d268:	2108      	movs	r1, #8
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 faec 	bl	800d848 <USBH_Get_DevDesc>
 800d270:	4603      	mov	r3, r0
 800d272:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d274:	7bbb      	ldrb	r3, [r7, #14]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d130      	bne.n	800d2dc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	7919      	ldrb	r1, [r3, #4]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d29e:	b292      	uxth	r2, r2
 800d2a0:	9202      	str	r2, [sp, #8]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	9201      	str	r2, [sp, #4]
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2280      	movs	r2, #128	; 0x80
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f001 f9f3 	bl	800e698 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	7959      	ldrb	r1, [r3, #5]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d2c6:	b292      	uxth	r2, r2
 800d2c8:	9202      	str	r2, [sp, #8]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	9201      	str	r2, [sp, #4]
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f001 f9df 	bl	800e698 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d2da:	e1bc      	b.n	800d656 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d2dc:	7bbb      	ldrb	r3, [r7, #14]
 800d2de:	2b03      	cmp	r3, #3
 800d2e0:	f040 81b9 	bne.w	800d656 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d2fa:	2b03      	cmp	r3, #3
 800d2fc:	d903      	bls.n	800d306 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	220d      	movs	r2, #13
 800d302:	701a      	strb	r2, [r3, #0]
      break;
 800d304:	e1a7      	b.n	800d656 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	795b      	ldrb	r3, [r3, #5]
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f001 fa13 	bl	800e738 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	791b      	ldrb	r3, [r3, #4]
 800d316:	4619      	mov	r1, r3
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f001 fa0d 	bl	800e738 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	701a      	strb	r2, [r3, #0]
      break;
 800d324:	e197      	b.n	800d656 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d326:	2112      	movs	r1, #18
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 fa8d 	bl	800d848 <USBH_Get_DevDesc>
 800d32e:	4603      	mov	r3, r0
 800d330:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d332:	7bbb      	ldrb	r3, [r7, #14]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d103      	bne.n	800d340 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2202      	movs	r2, #2
 800d33c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d33e:	e18c      	b.n	800d65a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d340:	7bbb      	ldrb	r3, [r7, #14]
 800d342:	2b03      	cmp	r3, #3
 800d344:	f040 8189 	bne.w	800d65a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d34e:	3301      	adds	r3, #1
 800d350:	b2da      	uxtb	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d35e:	2b03      	cmp	r3, #3
 800d360:	d903      	bls.n	800d36a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	220d      	movs	r2, #13
 800d366:	701a      	strb	r2, [r3, #0]
      break;
 800d368:	e177      	b.n	800d65a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	795b      	ldrb	r3, [r3, #5]
 800d36e:	4619      	mov	r1, r3
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f001 f9e1 	bl	800e738 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	791b      	ldrb	r3, [r3, #4]
 800d37a:	4619      	mov	r1, r3
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f001 f9db 	bl	800e738 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	701a      	strb	r2, [r3, #0]
      break;
 800d38e:	e164      	b.n	800d65a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d390:	2101      	movs	r1, #1
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 fb04 	bl	800d9a0 <USBH_SetAddress>
 800d398:	4603      	mov	r3, r0
 800d39a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d39c:	7bbb      	ldrb	r3, [r7, #14]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d132      	bne.n	800d408 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d3a2:	2002      	movs	r0, #2
 800d3a4:	f004 fc6a 	bl	8011c7c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2203      	movs	r2, #3
 800d3b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	7919      	ldrb	r1, [r3, #4]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d3ca:	b292      	uxth	r2, r2
 800d3cc:	9202      	str	r2, [sp, #8]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	9201      	str	r2, [sp, #4]
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2280      	movs	r2, #128	; 0x80
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f001 f95d 	bl	800e698 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	7959      	ldrb	r1, [r3, #5]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d3f2:	b292      	uxth	r2, r2
 800d3f4:	9202      	str	r2, [sp, #8]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	9201      	str	r2, [sp, #4]
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2200      	movs	r2, #0
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f001 f949 	bl	800e698 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d406:	e12a      	b.n	800d65e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d408:	7bbb      	ldrb	r3, [r7, #14]
 800d40a:	2b03      	cmp	r3, #3
 800d40c:	f040 8127 	bne.w	800d65e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	220d      	movs	r2, #13
 800d414:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	705a      	strb	r2, [r3, #1]
      break;
 800d41c:	e11f      	b.n	800d65e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d41e:	2109      	movs	r1, #9
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 fa39 	bl	800d898 <USBH_Get_CfgDesc>
 800d426:	4603      	mov	r3, r0
 800d428:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d42a:	7bbb      	ldrb	r3, [r7, #14]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d103      	bne.n	800d438 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2204      	movs	r2, #4
 800d434:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d436:	e114      	b.n	800d662 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d438:	7bbb      	ldrb	r3, [r7, #14]
 800d43a:	2b03      	cmp	r3, #3
 800d43c:	f040 8111 	bne.w	800d662 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d446:	3301      	adds	r3, #1
 800d448:	b2da      	uxtb	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d456:	2b03      	cmp	r3, #3
 800d458:	d903      	bls.n	800d462 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	220d      	movs	r2, #13
 800d45e:	701a      	strb	r2, [r3, #0]
      break;
 800d460:	e0ff      	b.n	800d662 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	795b      	ldrb	r3, [r3, #5]
 800d466:	4619      	mov	r1, r3
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f001 f965 	bl	800e738 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	791b      	ldrb	r3, [r3, #4]
 800d472:	4619      	mov	r1, r3
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f001 f95f 	bl	800e738 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	701a      	strb	r2, [r3, #0]
      break;
 800d486:	e0ec      	b.n	800d662 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d48e:	4619      	mov	r1, r3
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 fa01 	bl	800d898 <USBH_Get_CfgDesc>
 800d496:	4603      	mov	r3, r0
 800d498:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d49a:	7bbb      	ldrb	r3, [r7, #14]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d103      	bne.n	800d4a8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2205      	movs	r2, #5
 800d4a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d4a6:	e0de      	b.n	800d666 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4a8:	7bbb      	ldrb	r3, [r7, #14]
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	f040 80db 	bne.w	800d666 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	d903      	bls.n	800d4d2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	220d      	movs	r2, #13
 800d4ce:	701a      	strb	r2, [r3, #0]
      break;
 800d4d0:	e0c9      	b.n	800d666 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	795b      	ldrb	r3, [r3, #5]
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f001 f92d 	bl	800e738 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	791b      	ldrb	r3, [r3, #4]
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f001 f927 	bl	800e738 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]
      break;
 800d4f6:	e0b6      	b.n	800d666 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d036      	beq.n	800d570 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d50e:	23ff      	movs	r3, #255	; 0xff
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f9e5 	bl	800d8e0 <USBH_Get_StringDesc>
 800d516:	4603      	mov	r3, r0
 800d518:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d51a:	7bbb      	ldrb	r3, [r7, #14]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d111      	bne.n	800d544 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2206      	movs	r2, #6
 800d524:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2205      	movs	r2, #5
 800d52a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d53a:	2300      	movs	r3, #0
 800d53c:	2200      	movs	r2, #0
 800d53e:	f001 faeb 	bl	800eb18 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d542:	e092      	b.n	800d66a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d544:	7bbb      	ldrb	r3, [r7, #14]
 800d546:	2b03      	cmp	r3, #3
 800d548:	f040 808f 	bne.w	800d66a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2206      	movs	r2, #6
 800d550:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2205      	movs	r2, #5
 800d556:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d566:	2300      	movs	r3, #0
 800d568:	2200      	movs	r2, #0
 800d56a:	f001 fad5 	bl	800eb18 <osMessageQueuePut>
      break;
 800d56e:	e07c      	b.n	800d66a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2206      	movs	r2, #6
 800d574:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2205      	movs	r2, #5
 800d57a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d58a:	2300      	movs	r3, #0
 800d58c:	2200      	movs	r2, #0
 800d58e:	f001 fac3 	bl	800eb18 <osMessageQueuePut>
      break;
 800d592:	e06a      	b.n	800d66a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d027      	beq.n	800d5ee <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d5aa:	23ff      	movs	r3, #255	; 0xff
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f997 	bl	800d8e0 <USBH_Get_StringDesc>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d5b6:	7bbb      	ldrb	r3, [r7, #14]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d103      	bne.n	800d5c4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2207      	movs	r2, #7
 800d5c0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d5c2:	e054      	b.n	800d66e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d5c4:	7bbb      	ldrb	r3, [r7, #14]
 800d5c6:	2b03      	cmp	r3, #3
 800d5c8:	d151      	bne.n	800d66e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2207      	movs	r2, #7
 800d5ce:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2205      	movs	r2, #5
 800d5d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f001 fa96 	bl	800eb18 <osMessageQueuePut>
      break;
 800d5ec:	e03f      	b.n	800d66e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2207      	movs	r2, #7
 800d5f2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2205      	movs	r2, #5
 800d5f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d608:	2300      	movs	r3, #0
 800d60a:	2200      	movs	r2, #0
 800d60c:	f001 fa84 	bl	800eb18 <osMessageQueuePut>
      break;
 800d610:	e02d      	b.n	800d66e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d017      	beq.n	800d64c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d628:	23ff      	movs	r3, #255	; 0xff
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f958 	bl	800d8e0 <USBH_Get_StringDesc>
 800d630:	4603      	mov	r3, r0
 800d632:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d634:	7bbb      	ldrb	r3, [r7, #14]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d102      	bne.n	800d640 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d63a:	2300      	movs	r3, #0
 800d63c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d63e:	e018      	b.n	800d672 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d640:	7bbb      	ldrb	r3, [r7, #14]
 800d642:	2b03      	cmp	r3, #3
 800d644:	d115      	bne.n	800d672 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d646:	2300      	movs	r3, #0
 800d648:	73fb      	strb	r3, [r7, #15]
      break;
 800d64a:	e012      	b.n	800d672 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	73fb      	strb	r3, [r7, #15]
      break;
 800d650:	e00f      	b.n	800d672 <USBH_HandleEnum+0x44a>

    default:
      break;
 800d652:	bf00      	nop
 800d654:	e00e      	b.n	800d674 <USBH_HandleEnum+0x44c>
      break;
 800d656:	bf00      	nop
 800d658:	e00c      	b.n	800d674 <USBH_HandleEnum+0x44c>
      break;
 800d65a:	bf00      	nop
 800d65c:	e00a      	b.n	800d674 <USBH_HandleEnum+0x44c>
      break;
 800d65e:	bf00      	nop
 800d660:	e008      	b.n	800d674 <USBH_HandleEnum+0x44c>
      break;
 800d662:	bf00      	nop
 800d664:	e006      	b.n	800d674 <USBH_HandleEnum+0x44c>
      break;
 800d666:	bf00      	nop
 800d668:	e004      	b.n	800d674 <USBH_HandleEnum+0x44c>
      break;
 800d66a:	bf00      	nop
 800d66c:	e002      	b.n	800d674 <USBH_HandleEnum+0x44c>
      break;
 800d66e:	bf00      	nop
 800d670:	e000      	b.n	800d674 <USBH_HandleEnum+0x44c>
      break;
 800d672:	bf00      	nop
  }
  return Status;
 800d674:	7bfb      	ldrb	r3, [r7, #15]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop

0800d680 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	683a      	ldr	r2, [r7, #0]
 800d68e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d692:	bf00      	nop
 800d694:	370c      	adds	r7, #12
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr

0800d69e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b082      	sub	sp, #8
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d6ac:	1c5a      	adds	r2, r3, #1
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 f804 	bl	800d6c2 <USBH_HandleSof>
}
 800d6ba:	bf00      	nop
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b082      	sub	sp, #8
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	2b0b      	cmp	r3, #11
 800d6d2:	d10a      	bne.n	800d6ea <USBH_HandleSof+0x28>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d005      	beq.n	800d6ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6e4:	699b      	ldr	r3, [r3, #24]
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	4798      	blx	r3
  }
}
 800d6ea:	bf00      	nop
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b082      	sub	sp, #8
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2201      	movs	r2, #1
 800d706:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d716:	2300      	movs	r3, #0
 800d718:	2200      	movs	r2, #0
 800d71a:	f001 f9fd 	bl	800eb18 <osMessageQueuePut>
#endif
#endif

  return;
 800d71e:	bf00      	nop
}
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d726:	b480      	push	{r7}
 800d728:	b083      	sub	sp, #12
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d736:	bf00      	nop
}
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b082      	sub	sp, #8
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2201      	movs	r2, #1
 800d74e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2200      	movs	r2, #0
 800d75e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2201      	movs	r2, #1
 800d766:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d776:	2300      	movs	r3, #0
 800d778:	2200      	movs	r2, #0
 800d77a:	f001 f9cd 	bl	800eb18 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f004 f91e 	bl	80119ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	791b      	ldrb	r3, [r3, #4]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 ffbf 	bl	800e738 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	795b      	ldrb	r3, [r3, #5]
 800d7be:	4619      	mov	r1, r3
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 ffb9 	bl	800e738 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7da:	2300      	movs	r3, #0
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f001 f99b 	bl	800eb18 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d7e2:	2300      	movs	r3, #0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d800:	f04f 33ff 	mov.w	r3, #4294967295
 800d804:	2200      	movs	r2, #0
 800d806:	f001 f9e7 	bl	800ebd8 <osMessageQueueGet>
 800d80a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1f0      	bne.n	800d7f4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7ff fa9c 	bl	800cd50 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d818:	e7ec      	b.n	800d7f4 <USBH_Process_OS+0x8>

0800d81a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b082      	sub	sp, #8
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2201      	movs	r2, #1
 800d826:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d836:	2300      	movs	r3, #0
 800d838:	2200      	movs	r2, #0
 800d83a:	f001 f96d 	bl	800eb18 <osMessageQueuePut>
#endif

  return USBH_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af02      	add	r7, sp, #8
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	460b      	mov	r3, r1
 800d852:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	9300      	str	r3, [sp, #0]
 800d860:	4613      	mov	r3, r2
 800d862:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d866:	2100      	movs	r1, #0
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f864 	bl	800d936 <USBH_GetDescriptor>
 800d86e:	4603      	mov	r3, r0
 800d870:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800d872:	7bfb      	ldrb	r3, [r7, #15]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d10a      	bne.n	800d88e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d884:	78fa      	ldrb	r2, [r7, #3]
 800d886:	b292      	uxth	r2, r2
 800d888:	4619      	mov	r1, r3
 800d88a:	f000 f919 	bl	800dac0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af02      	add	r7, sp, #8
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	331c      	adds	r3, #28
 800d8a8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d8aa:	887b      	ldrh	r3, [r7, #2]
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f83d 	bl	800d936 <USBH_GetDescriptor>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d107      	bne.n	800d8d6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d8c6:	887b      	ldrh	r3, [r7, #2]
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	68b9      	ldr	r1, [r7, #8]
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 f989 	bl	800dbe4 <USBH_ParseCfgDesc>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	af02      	add	r7, sp, #8
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	607a      	str	r2, [r7, #4]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	72fb      	strb	r3, [r7, #11]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800d8f4:	7afb      	ldrb	r3, [r7, #11]
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d8fc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d904:	893b      	ldrh	r3, [r7, #8]
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	460b      	mov	r3, r1
 800d90a:	2100      	movs	r1, #0
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f000 f812 	bl	800d936 <USBH_GetDescriptor>
 800d912:	4603      	mov	r3, r0
 800d914:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d916:	7dfb      	ldrb	r3, [r7, #23]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d107      	bne.n	800d92c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d922:	893a      	ldrh	r2, [r7, #8]
 800d924:	6879      	ldr	r1, [r7, #4]
 800d926:	4618      	mov	r0, r3
 800d928:	f000 fb26 	bl	800df78 <USBH_ParseStringDesc>
  }

  return status;
 800d92c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3718      	adds	r7, #24
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b084      	sub	sp, #16
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	60f8      	str	r0, [r7, #12]
 800d93e:	607b      	str	r3, [r7, #4]
 800d940:	460b      	mov	r3, r1
 800d942:	72fb      	strb	r3, [r7, #11]
 800d944:	4613      	mov	r3, r2
 800d946:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	789b      	ldrb	r3, [r3, #2]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d11c      	bne.n	800d98a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d950:	7afb      	ldrb	r3, [r7, #11]
 800d952:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d956:	b2da      	uxtb	r2, r3
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2206      	movs	r2, #6
 800d960:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	893a      	ldrh	r2, [r7, #8]
 800d966:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d968:	893b      	ldrh	r3, [r7, #8]
 800d96a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d96e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d972:	d104      	bne.n	800d97e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f240 4209 	movw	r2, #1033	; 0x409
 800d97a:	829a      	strh	r2, [r3, #20]
 800d97c:	e002      	b.n	800d984 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2200      	movs	r2, #0
 800d982:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	8b3a      	ldrh	r2, [r7, #24]
 800d988:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d98a:	8b3b      	ldrh	r3, [r7, #24]
 800d98c:	461a      	mov	r2, r3
 800d98e:	6879      	ldr	r1, [r7, #4]
 800d990:	68f8      	ldr	r0, [r7, #12]
 800d992:	f000 fb3f 	bl	800e014 <USBH_CtlReq>
 800d996:	4603      	mov	r3, r0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	789b      	ldrb	r3, [r3, #2]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d10f      	bne.n	800d9d4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2205      	movs	r2, #5
 800d9be:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d9c0:	78fb      	ldrb	r3, [r7, #3]
 800d9c2:	b29a      	uxth	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 fb1b 	bl	800e014 <USBH_CtlReq>
 800d9de:	4603      	mov	r3, r0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3708      	adds	r7, #8
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	789b      	ldrb	r3, [r3, #2]
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d10e      	bne.n	800da1a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2209      	movs	r2, #9
 800da06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	887a      	ldrh	r2, [r7, #2]
 800da0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800da1a:	2200      	movs	r2, #0
 800da1c:	2100      	movs	r1, #0
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 faf8 	bl	800e014 <USBH_CtlReq>
 800da24:	4603      	mov	r3, r0
}
 800da26:	4618      	mov	r0, r3
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b082      	sub	sp, #8
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	460b      	mov	r3, r1
 800da38:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	789b      	ldrb	r3, [r3, #2]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d10f      	bne.n	800da62 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2203      	movs	r2, #3
 800da4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800da4e:	78fb      	ldrb	r3, [r7, #3]
 800da50:	b29a      	uxth	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2200      	movs	r2, #0
 800da5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800da62:	2200      	movs	r2, #0
 800da64:	2100      	movs	r1, #0
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 fad4 	bl	800e014 <USBH_CtlReq>
 800da6c:	4603      	mov	r3, r0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b082      	sub	sp, #8
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	460b      	mov	r3, r1
 800da80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	789b      	ldrb	r3, [r3, #2]
 800da86:	2b01      	cmp	r3, #1
 800da88:	d10f      	bne.n	800daaa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2202      	movs	r2, #2
 800da8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2201      	movs	r2, #1
 800da94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800da9c:	78fb      	ldrb	r3, [r7, #3]
 800da9e:	b29a      	uxth	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800daaa:	2200      	movs	r2, #0
 800daac:	2100      	movs	r1, #0
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 fab0 	bl	800e014 <USBH_CtlReq>
 800dab4:	4603      	mov	r3, r0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
	...

0800dac0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b085      	sub	sp, #20
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	4613      	mov	r3, r2
 800dacc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	781a      	ldrb	r2, [r3, #0]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	785a      	ldrb	r2, [r3, #1]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	3302      	adds	r3, #2
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	3303      	adds	r3, #3
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	b29b      	uxth	r3, r3
 800daee:	021b      	lsls	r3, r3, #8
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	4313      	orrs	r3, r2
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	791a      	ldrb	r2, [r3, #4]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	795a      	ldrb	r2, [r3, #5]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	799a      	ldrb	r2, [r3, #6]
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	79da      	ldrb	r2, [r3, #7]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	79db      	ldrb	r3, [r3, #7]
 800db1e:	2b20      	cmp	r3, #32
 800db20:	dc0f      	bgt.n	800db42 <USBH_ParseDevDesc+0x82>
 800db22:	2b08      	cmp	r3, #8
 800db24:	db14      	blt.n	800db50 <USBH_ParseDevDesc+0x90>
 800db26:	3b08      	subs	r3, #8
 800db28:	4a2d      	ldr	r2, [pc, #180]	; (800dbe0 <USBH_ParseDevDesc+0x120>)
 800db2a:	fa22 f303 	lsr.w	r3, r2, r3
 800db2e:	f003 0301 	and.w	r3, r3, #1
 800db32:	2b00      	cmp	r3, #0
 800db34:	bf14      	ite	ne
 800db36:	2301      	movne	r3, #1
 800db38:	2300      	moveq	r3, #0
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d102      	bne.n	800db46 <USBH_ParseDevDesc+0x86>
 800db40:	e006      	b.n	800db50 <USBH_ParseDevDesc+0x90>
 800db42:	2b40      	cmp	r3, #64	; 0x40
 800db44:	d104      	bne.n	800db50 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	79da      	ldrb	r2, [r3, #7]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	71da      	strb	r2, [r3, #7]
      break;
 800db4e:	e003      	b.n	800db58 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2240      	movs	r2, #64	; 0x40
 800db54:	71da      	strb	r2, [r3, #7]
      break;
 800db56:	bf00      	nop
  }

  if (length > 8U)
 800db58:	88fb      	ldrh	r3, [r7, #6]
 800db5a:	2b08      	cmp	r3, #8
 800db5c:	d939      	bls.n	800dbd2 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	3308      	adds	r3, #8
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	b29a      	uxth	r2, r3
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	3309      	adds	r3, #9
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	021b      	lsls	r3, r3, #8
 800db70:	b29b      	uxth	r3, r3
 800db72:	4313      	orrs	r3, r2
 800db74:	b29a      	uxth	r2, r3
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	330a      	adds	r3, #10
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	b29a      	uxth	r2, r3
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	330b      	adds	r3, #11
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	b29b      	uxth	r3, r3
 800db8a:	021b      	lsls	r3, r3, #8
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	4313      	orrs	r3, r2
 800db90:	b29a      	uxth	r2, r3
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	330c      	adds	r3, #12
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	330d      	adds	r3, #13
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	021b      	lsls	r3, r3, #8
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	7b9a      	ldrb	r2, [r3, #14]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	7bda      	ldrb	r2, [r3, #15]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	7c1a      	ldrb	r2, [r3, #16]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	7c5a      	ldrb	r2, [r3, #17]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	745a      	strb	r2, [r3, #17]
  }
}
 800dbd2:	bf00      	nop
 800dbd4:	3714      	adds	r7, #20
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	01000101 	.word	0x01000101

0800dbe4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b08c      	sub	sp, #48	; 0x30
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	4613      	mov	r3, r2
 800dbf0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800dbf8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800dc04:	2300      	movs	r3, #0
 800dc06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	781a      	ldrb	r2, [r3, #0]
 800dc18:	6a3b      	ldr	r3, [r7, #32]
 800dc1a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	785a      	ldrb	r2, [r3, #1]
 800dc20:	6a3b      	ldr	r3, [r7, #32]
 800dc22:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	3302      	adds	r3, #2
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	3303      	adds	r3, #3
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	021b      	lsls	r3, r3, #8
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc40:	bf28      	it	cs
 800dc42:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	6a3b      	ldr	r3, [r7, #32]
 800dc4a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	791a      	ldrb	r2, [r3, #4]
 800dc50:	6a3b      	ldr	r3, [r7, #32]
 800dc52:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	795a      	ldrb	r2, [r3, #5]
 800dc58:	6a3b      	ldr	r3, [r7, #32]
 800dc5a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	799a      	ldrb	r2, [r3, #6]
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	79da      	ldrb	r2, [r3, #7]
 800dc68:	6a3b      	ldr	r3, [r7, #32]
 800dc6a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	7a1a      	ldrb	r2, [r3, #8]
 800dc70:	6a3b      	ldr	r3, [r7, #32]
 800dc72:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800dc74:	6a3b      	ldr	r3, [r7, #32]
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b09      	cmp	r3, #9
 800dc7a:	d002      	beq.n	800dc82 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800dc7c:	6a3b      	ldr	r3, [r7, #32]
 800dc7e:	2209      	movs	r2, #9
 800dc80:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800dc82:	88fb      	ldrh	r3, [r7, #6]
 800dc84:	2b09      	cmp	r3, #9
 800dc86:	f240 809d 	bls.w	800ddc4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800dc8a:	2309      	movs	r3, #9
 800dc8c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dc92:	e081      	b.n	800dd98 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dc94:	f107 0316 	add.w	r3, r7, #22
 800dc98:	4619      	mov	r1, r3
 800dc9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc9c:	f000 f99f 	bl	800dfde <USBH_GetNextDesc>
 800dca0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800dca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca4:	785b      	ldrb	r3, [r3, #1]
 800dca6:	2b04      	cmp	r3, #4
 800dca8:	d176      	bne.n	800dd98 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800dcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	2b09      	cmp	r3, #9
 800dcb0:	d002      	beq.n	800dcb8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800dcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb4:	2209      	movs	r2, #9
 800dcb6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800dcb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcbc:	221a      	movs	r2, #26
 800dcbe:	fb02 f303 	mul.w	r3, r2, r3
 800dcc2:	3308      	adds	r3, #8
 800dcc4:	6a3a      	ldr	r2, [r7, #32]
 800dcc6:	4413      	add	r3, r2
 800dcc8:	3302      	adds	r3, #2
 800dcca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800dccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dcce:	69f8      	ldr	r0, [r7, #28]
 800dcd0:	f000 f87e 	bl	800ddd0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dcde:	e043      	b.n	800dd68 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dce0:	f107 0316 	add.w	r3, r7, #22
 800dce4:	4619      	mov	r1, r3
 800dce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dce8:	f000 f979 	bl	800dfde <USBH_GetNextDesc>
 800dcec:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf0:	785b      	ldrb	r3, [r3, #1]
 800dcf2:	2b05      	cmp	r3, #5
 800dcf4:	d138      	bne.n	800dd68 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	795b      	ldrb	r3, [r3, #5]
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d10f      	bne.n	800dd1e <USBH_ParseCfgDesc+0x13a>
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	799b      	ldrb	r3, [r3, #6]
 800dd02:	2b02      	cmp	r3, #2
 800dd04:	d10b      	bne.n	800dd1e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	79db      	ldrb	r3, [r3, #7]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10f      	bne.n	800dd2e <USBH_ParseCfgDesc+0x14a>
 800dd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	2b09      	cmp	r3, #9
 800dd14:	d00b      	beq.n	800dd2e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800dd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd18:	2209      	movs	r2, #9
 800dd1a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dd1c:	e007      	b.n	800dd2e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800dd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	2b07      	cmp	r3, #7
 800dd24:	d004      	beq.n	800dd30 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800dd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd28:	2207      	movs	r2, #7
 800dd2a:	701a      	strb	r2, [r3, #0]
 800dd2c:	e000      	b.n	800dd30 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dd2e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800dd30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd34:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800dd38:	3201      	adds	r2, #1
 800dd3a:	00d2      	lsls	r2, r2, #3
 800dd3c:	211a      	movs	r1, #26
 800dd3e:	fb01 f303 	mul.w	r3, r1, r3
 800dd42:	4413      	add	r3, r2
 800dd44:	3308      	adds	r3, #8
 800dd46:	6a3a      	ldr	r2, [r7, #32]
 800dd48:	4413      	add	r3, r2
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800dd4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd50:	69b9      	ldr	r1, [r7, #24]
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f000 f86b 	bl	800de2e <USBH_ParseEPDesc>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800dd5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd62:	3301      	adds	r3, #1
 800dd64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	791b      	ldrb	r3, [r3, #4]
 800dd6c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d204      	bcs.n	800dd7e <USBH_ParseCfgDesc+0x19a>
 800dd74:	6a3b      	ldr	r3, [r7, #32]
 800dd76:	885a      	ldrh	r2, [r3, #2]
 800dd78:	8afb      	ldrh	r3, [r7, #22]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d8b0      	bhi.n	800dce0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	791b      	ldrb	r3, [r3, #4]
 800dd82:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d201      	bcs.n	800dd8e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800dd8a:	2303      	movs	r3, #3
 800dd8c:	e01c      	b.n	800ddc8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800dd8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd92:	3301      	adds	r3, #1
 800dd94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dd98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d805      	bhi.n	800ddac <USBH_ParseCfgDesc+0x1c8>
 800dda0:	6a3b      	ldr	r3, [r7, #32]
 800dda2:	885a      	ldrh	r2, [r3, #2]
 800dda4:	8afb      	ldrh	r3, [r7, #22]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	f63f af74 	bhi.w	800dc94 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	791b      	ldrb	r3, [r3, #4]
 800ddb0:	2b02      	cmp	r3, #2
 800ddb2:	bf28      	it	cs
 800ddb4:	2302      	movcs	r3, #2
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d201      	bcs.n	800ddc4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ddc0:	2303      	movs	r3, #3
 800ddc2:	e001      	b.n	800ddc8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ddc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3730      	adds	r7, #48	; 0x30
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	781a      	ldrb	r2, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	785a      	ldrb	r2, [r3, #1]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	789a      	ldrb	r2, [r3, #2]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	78da      	ldrb	r2, [r3, #3]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	791a      	ldrb	r2, [r3, #4]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	795a      	ldrb	r2, [r3, #5]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	799a      	ldrb	r2, [r3, #6]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	79da      	ldrb	r2, [r3, #7]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	7a1a      	ldrb	r2, [r3, #8]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	721a      	strb	r2, [r3, #8]
}
 800de22:	bf00      	nop
 800de24:	370c      	adds	r7, #12
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr

0800de2e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800de2e:	b480      	push	{r7}
 800de30:	b087      	sub	sp, #28
 800de32:	af00      	add	r7, sp, #0
 800de34:	60f8      	str	r0, [r7, #12]
 800de36:	60b9      	str	r1, [r7, #8]
 800de38:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800de3a:	2300      	movs	r3, #0
 800de3c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	781a      	ldrb	r2, [r3, #0]
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	785a      	ldrb	r2, [r3, #1]
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	789a      	ldrb	r2, [r3, #2]
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	78da      	ldrb	r2, [r3, #3]
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	3304      	adds	r3, #4
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	b29a      	uxth	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	3305      	adds	r3, #5
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	021b      	lsls	r3, r3, #8
 800de70:	b29b      	uxth	r3, r3
 800de72:	4313      	orrs	r3, r2
 800de74:	b29a      	uxth	r2, r3
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	799a      	ldrb	r2, [r3, #6]
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	889b      	ldrh	r3, [r3, #4]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d102      	bne.n	800de90 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800de8a:	2303      	movs	r3, #3
 800de8c:	75fb      	strb	r3, [r7, #23]
 800de8e:	e033      	b.n	800def8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	889b      	ldrh	r3, [r3, #4]
 800de94:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800de98:	f023 0307 	bic.w	r3, r3, #7
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	889b      	ldrh	r3, [r3, #4]
 800dea6:	b21a      	sxth	r2, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	3304      	adds	r3, #4
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	b299      	uxth	r1, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	3305      	adds	r3, #5
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	021b      	lsls	r3, r3, #8
 800deba:	b29b      	uxth	r3, r3
 800debc:	430b      	orrs	r3, r1
 800debe:	b29b      	uxth	r3, r3
 800dec0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d110      	bne.n	800deea <USBH_ParseEPDesc+0xbc>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	3304      	adds	r3, #4
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	b299      	uxth	r1, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	3305      	adds	r3, #5
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	021b      	lsls	r3, r3, #8
 800deda:	b29b      	uxth	r3, r3
 800dedc:	430b      	orrs	r3, r1
 800dede:	b29b      	uxth	r3, r3
 800dee0:	b21b      	sxth	r3, r3
 800dee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dee6:	b21b      	sxth	r3, r3
 800dee8:	e001      	b.n	800deee <USBH_ParseEPDesc+0xc0>
 800deea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800deee:	4313      	orrs	r3, r2
 800def0:	b21b      	sxth	r3, r3
 800def2:	b29a      	uxth	r2, r3
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800defe:	2b00      	cmp	r3, #0
 800df00:	d116      	bne.n	800df30 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	78db      	ldrb	r3, [r3, #3]
 800df06:	f003 0303 	and.w	r3, r3, #3
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d005      	beq.n	800df1a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	78db      	ldrb	r3, [r3, #3]
 800df12:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800df16:	2b03      	cmp	r3, #3
 800df18:	d127      	bne.n	800df6a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	799b      	ldrb	r3, [r3, #6]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d003      	beq.n	800df2a <USBH_ParseEPDesc+0xfc>
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	799b      	ldrb	r3, [r3, #6]
 800df26:	2b10      	cmp	r3, #16
 800df28:	d91f      	bls.n	800df6a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800df2a:	2303      	movs	r3, #3
 800df2c:	75fb      	strb	r3, [r7, #23]
 800df2e:	e01c      	b.n	800df6a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	78db      	ldrb	r3, [r3, #3]
 800df34:	f003 0303 	and.w	r3, r3, #3
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d10a      	bne.n	800df52 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	799b      	ldrb	r3, [r3, #6]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d003      	beq.n	800df4c <USBH_ParseEPDesc+0x11e>
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	799b      	ldrb	r3, [r3, #6]
 800df48:	2b10      	cmp	r3, #16
 800df4a:	d90e      	bls.n	800df6a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800df4c:	2303      	movs	r3, #3
 800df4e:	75fb      	strb	r3, [r7, #23]
 800df50:	e00b      	b.n	800df6a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	78db      	ldrb	r3, [r3, #3]
 800df56:	f003 0303 	and.w	r3, r3, #3
 800df5a:	2b03      	cmp	r3, #3
 800df5c:	d105      	bne.n	800df6a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	799b      	ldrb	r3, [r3, #6]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d101      	bne.n	800df6a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800df66:	2303      	movs	r3, #3
 800df68:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	371c      	adds	r7, #28
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr

0800df78 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800df78:	b480      	push	{r7}
 800df7a:	b087      	sub	sp, #28
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	4613      	mov	r3, r2
 800df84:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	3301      	adds	r3, #1
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	2b03      	cmp	r3, #3
 800df8e:	d120      	bne.n	800dfd2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	1e9a      	subs	r2, r3, #2
 800df96:	88fb      	ldrh	r3, [r7, #6]
 800df98:	4293      	cmp	r3, r2
 800df9a:	bf28      	it	cs
 800df9c:	4613      	movcs	r3, r2
 800df9e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	3302      	adds	r3, #2
 800dfa4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	82fb      	strh	r3, [r7, #22]
 800dfaa:	e00b      	b.n	800dfc4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dfac:	8afb      	ldrh	r3, [r7, #22]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	4413      	add	r3, r2
 800dfb2:	781a      	ldrb	r2, [r3, #0]
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dfbe:	8afb      	ldrh	r3, [r7, #22]
 800dfc0:	3302      	adds	r3, #2
 800dfc2:	82fb      	strh	r3, [r7, #22]
 800dfc4:	8afa      	ldrh	r2, [r7, #22]
 800dfc6:	8abb      	ldrh	r3, [r7, #20]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d3ef      	bcc.n	800dfac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	701a      	strb	r2, [r3, #0]
  }
}
 800dfd2:	bf00      	nop
 800dfd4:	371c      	adds	r7, #28
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr

0800dfde <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800dfde:	b480      	push	{r7}
 800dfe0:	b085      	sub	sp, #20
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
 800dfe6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	881a      	ldrh	r2, [r3, #0]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	4413      	add	r3, r2
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	4413      	add	r3, r2
 800e004:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e006:	68fb      	ldr	r3, [r7, #12]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b086      	sub	sp, #24
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	4613      	mov	r3, r2
 800e020:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e022:	2301      	movs	r3, #1
 800e024:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	789b      	ldrb	r3, [r3, #2]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d002      	beq.n	800e034 <USBH_CtlReq+0x20>
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d01d      	beq.n	800e06e <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800e032:	e043      	b.n	800e0bc <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	68ba      	ldr	r2, [r7, #8]
 800e038:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	88fa      	ldrh	r2, [r7, #6]
 800e03e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2201      	movs	r2, #1
 800e044:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2202      	movs	r2, #2
 800e04a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e04c:	2301      	movs	r3, #1
 800e04e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2203      	movs	r2, #3
 800e054:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e064:	2300      	movs	r3, #0
 800e066:	2200      	movs	r2, #0
 800e068:	f000 fd56 	bl	800eb18 <osMessageQueuePut>
      break;
 800e06c:	e026      	b.n	800e0bc <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f000 f82a 	bl	800e0c8 <USBH_HandleControl>
 800e074:	4603      	mov	r3, r0
 800e076:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e078:	7dfb      	ldrb	r3, [r7, #23]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d002      	beq.n	800e084 <USBH_CtlReq+0x70>
 800e07e:	7dfb      	ldrb	r3, [r7, #23]
 800e080:	2b03      	cmp	r3, #3
 800e082:	d106      	bne.n	800e092 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2201      	movs	r2, #1
 800e088:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	761a      	strb	r2, [r3, #24]
 800e090:	e005      	b.n	800e09e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800e092:	7dfb      	ldrb	r3, [r7, #23]
 800e094:	2b02      	cmp	r3, #2
 800e096:	d102      	bne.n	800e09e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2201      	movs	r2, #1
 800e09c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2203      	movs	r2, #3
 800e0a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	f000 fd2f 	bl	800eb18 <osMessageQueuePut>
      break;
 800e0ba:	bf00      	nop
  }
  return status;
 800e0bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3718      	adds	r7, #24
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
	...

0800e0c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b086      	sub	sp, #24
 800e0cc:	af02      	add	r7, sp, #8
 800e0ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	7e1b      	ldrb	r3, [r3, #24]
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	2b0a      	cmp	r3, #10
 800e0e0:	f200 8229 	bhi.w	800e536 <USBH_HandleControl+0x46e>
 800e0e4:	a201      	add	r2, pc, #4	; (adr r2, 800e0ec <USBH_HandleControl+0x24>)
 800e0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ea:	bf00      	nop
 800e0ec:	0800e119 	.word	0x0800e119
 800e0f0:	0800e133 	.word	0x0800e133
 800e0f4:	0800e1d5 	.word	0x0800e1d5
 800e0f8:	0800e1fb 	.word	0x0800e1fb
 800e0fc:	0800e287 	.word	0x0800e287
 800e100:	0800e2b1 	.word	0x0800e2b1
 800e104:	0800e373 	.word	0x0800e373
 800e108:	0800e395 	.word	0x0800e395
 800e10c:	0800e427 	.word	0x0800e427
 800e110:	0800e44d 	.word	0x0800e44d
 800e114:	0800e4df 	.word	0x0800e4df
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f103 0110 	add.w	r1, r3, #16
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	795b      	ldrb	r3, [r3, #5]
 800e122:	461a      	mov	r2, r3
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 fa17 	bl	800e558 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2202      	movs	r2, #2
 800e12e:	761a      	strb	r2, [r3, #24]
      break;
 800e130:	e20c      	b.n	800e54c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	795b      	ldrb	r3, [r3, #5]
 800e136:	4619      	mov	r1, r3
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f003 fd45 	bl	8011bc8 <USBH_LL_GetURBState>
 800e13e:	4603      	mov	r3, r0
 800e140:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e142:	7bbb      	ldrb	r3, [r7, #14]
 800e144:	2b01      	cmp	r3, #1
 800e146:	d12c      	bne.n	800e1a2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	7c1b      	ldrb	r3, [r3, #16]
 800e14c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e150:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	8adb      	ldrh	r3, [r3, #22]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d00a      	beq.n	800e170 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e15a:	7b7b      	ldrb	r3, [r7, #13]
 800e15c:	2b80      	cmp	r3, #128	; 0x80
 800e15e:	d103      	bne.n	800e168 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2203      	movs	r2, #3
 800e164:	761a      	strb	r2, [r3, #24]
 800e166:	e00d      	b.n	800e184 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2205      	movs	r2, #5
 800e16c:	761a      	strb	r2, [r3, #24]
 800e16e:	e009      	b.n	800e184 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800e170:	7b7b      	ldrb	r3, [r7, #13]
 800e172:	2b80      	cmp	r3, #128	; 0x80
 800e174:	d103      	bne.n	800e17e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2209      	movs	r2, #9
 800e17a:	761a      	strb	r2, [r3, #24]
 800e17c:	e002      	b.n	800e184 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2207      	movs	r2, #7
 800e182:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2203      	movs	r2, #3
 800e188:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e198:	2300      	movs	r3, #0
 800e19a:	2200      	movs	r2, #0
 800e19c:	f000 fcbc 	bl	800eb18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e1a0:	e1cb      	b.n	800e53a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e1a2:	7bbb      	ldrb	r3, [r7, #14]
 800e1a4:	2b04      	cmp	r3, #4
 800e1a6:	d003      	beq.n	800e1b0 <USBH_HandleControl+0xe8>
 800e1a8:	7bbb      	ldrb	r3, [r7, #14]
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	f040 81c5 	bne.w	800e53a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	220b      	movs	r2, #11
 800e1b4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2203      	movs	r2, #3
 800e1ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f000 fca3 	bl	800eb18 <osMessageQueuePut>
      break;
 800e1d2:	e1b2      	b.n	800e53a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6899      	ldr	r1, [r3, #8]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	899a      	ldrh	r2, [r3, #12]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	791b      	ldrb	r3, [r3, #4]
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 f9f2 	bl	800e5d6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2204      	movs	r2, #4
 800e1f6:	761a      	strb	r2, [r3, #24]
      break;
 800e1f8:	e1a8      	b.n	800e54c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	791b      	ldrb	r3, [r3, #4]
 800e1fe:	4619      	mov	r1, r3
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f003 fce1 	bl	8011bc8 <USBH_LL_GetURBState>
 800e206:	4603      	mov	r3, r0
 800e208:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e20a:	7bbb      	ldrb	r3, [r7, #14]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d110      	bne.n	800e232 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2209      	movs	r2, #9
 800e214:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2203      	movs	r2, #3
 800e21a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e22a:	2300      	movs	r3, #0
 800e22c:	2200      	movs	r2, #0
 800e22e:	f000 fc73 	bl	800eb18 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e232:	7bbb      	ldrb	r3, [r7, #14]
 800e234:	2b05      	cmp	r3, #5
 800e236:	d110      	bne.n	800e25a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e238:	2303      	movs	r3, #3
 800e23a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2203      	movs	r2, #3
 800e240:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e250:	2300      	movs	r3, #0
 800e252:	2200      	movs	r2, #0
 800e254:	f000 fc60 	bl	800eb18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e258:	e171      	b.n	800e53e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800e25a:	7bbb      	ldrb	r3, [r7, #14]
 800e25c:	2b04      	cmp	r3, #4
 800e25e:	f040 816e 	bne.w	800e53e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	220b      	movs	r2, #11
 800e266:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2203      	movs	r2, #3
 800e26c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e27c:	2300      	movs	r3, #0
 800e27e:	2200      	movs	r2, #0
 800e280:	f000 fc4a 	bl	800eb18 <osMessageQueuePut>
      break;
 800e284:	e15b      	b.n	800e53e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6899      	ldr	r1, [r3, #8]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	899a      	ldrh	r2, [r3, #12]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	795b      	ldrb	r3, [r3, #5]
 800e292:	2001      	movs	r0, #1
 800e294:	9000      	str	r0, [sp, #0]
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 f978 	bl	800e58c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2206      	movs	r2, #6
 800e2ac:	761a      	strb	r2, [r3, #24]
      break;
 800e2ae:	e14d      	b.n	800e54c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	795b      	ldrb	r3, [r3, #5]
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f003 fc86 	bl	8011bc8 <USBH_LL_GetURBState>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e2c0:	7bbb      	ldrb	r3, [r7, #14]
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d111      	bne.n	800e2ea <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2207      	movs	r2, #7
 800e2ca:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2203      	movs	r2, #3
 800e2d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f000 fc18 	bl	800eb18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e2e8:	e12b      	b.n	800e542 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800e2ea:	7bbb      	ldrb	r3, [r7, #14]
 800e2ec:	2b05      	cmp	r3, #5
 800e2ee:	d113      	bne.n	800e318 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	220c      	movs	r2, #12
 800e2f4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e2f6:	2303      	movs	r3, #3
 800e2f8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2203      	movs	r2, #3
 800e2fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e30e:	2300      	movs	r3, #0
 800e310:	2200      	movs	r2, #0
 800e312:	f000 fc01 	bl	800eb18 <osMessageQueuePut>
      break;
 800e316:	e114      	b.n	800e542 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e318:	7bbb      	ldrb	r3, [r7, #14]
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d111      	bne.n	800e342 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2205      	movs	r2, #5
 800e322:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2203      	movs	r2, #3
 800e328:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e338:	2300      	movs	r3, #0
 800e33a:	2200      	movs	r2, #0
 800e33c:	f000 fbec 	bl	800eb18 <osMessageQueuePut>
      break;
 800e340:	e0ff      	b.n	800e542 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800e342:	7bbb      	ldrb	r3, [r7, #14]
 800e344:	2b04      	cmp	r3, #4
 800e346:	f040 80fc 	bne.w	800e542 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	220b      	movs	r2, #11
 800e34e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e350:	2302      	movs	r3, #2
 800e352:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2203      	movs	r2, #3
 800e358:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e368:	2300      	movs	r3, #0
 800e36a:	2200      	movs	r2, #0
 800e36c:	f000 fbd4 	bl	800eb18 <osMessageQueuePut>
      break;
 800e370:	e0e7      	b.n	800e542 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	791b      	ldrb	r3, [r3, #4]
 800e376:	2200      	movs	r2, #0
 800e378:	2100      	movs	r1, #0
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f92b 	bl	800e5d6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e386:	b29a      	uxth	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2208      	movs	r2, #8
 800e390:	761a      	strb	r2, [r3, #24]

      break;
 800e392:	e0db      	b.n	800e54c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	791b      	ldrb	r3, [r3, #4]
 800e398:	4619      	mov	r1, r3
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f003 fc14 	bl	8011bc8 <USBH_LL_GetURBState>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e3a4:	7bbb      	ldrb	r3, [r7, #14]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d113      	bne.n	800e3d2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	220d      	movs	r2, #13
 800e3ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2203      	movs	r2, #3
 800e3b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f000 fba4 	bl	800eb18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e3d0:	e0b9      	b.n	800e546 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800e3d2:	7bbb      	ldrb	r3, [r7, #14]
 800e3d4:	2b04      	cmp	r3, #4
 800e3d6:	d111      	bne.n	800e3fc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	220b      	movs	r2, #11
 800e3dc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2203      	movs	r2, #3
 800e3e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f000 fb8f 	bl	800eb18 <osMessageQueuePut>
      break;
 800e3fa:	e0a4      	b.n	800e546 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800e3fc:	7bbb      	ldrb	r3, [r7, #14]
 800e3fe:	2b05      	cmp	r3, #5
 800e400:	f040 80a1 	bne.w	800e546 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800e404:	2303      	movs	r3, #3
 800e406:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2203      	movs	r2, #3
 800e40c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e41c:	2300      	movs	r3, #0
 800e41e:	2200      	movs	r2, #0
 800e420:	f000 fb7a 	bl	800eb18 <osMessageQueuePut>
      break;
 800e424:	e08f      	b.n	800e546 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	795b      	ldrb	r3, [r3, #5]
 800e42a:	2201      	movs	r2, #1
 800e42c:	9200      	str	r2, [sp, #0]
 800e42e:	2200      	movs	r2, #0
 800e430:	2100      	movs	r1, #0
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 f8aa 	bl	800e58c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e43e:	b29a      	uxth	r2, r3
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	220a      	movs	r2, #10
 800e448:	761a      	strb	r2, [r3, #24]
      break;
 800e44a:	e07f      	b.n	800e54c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	795b      	ldrb	r3, [r3, #5]
 800e450:	4619      	mov	r1, r3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f003 fbb8 	bl	8011bc8 <USBH_LL_GetURBState>
 800e458:	4603      	mov	r3, r0
 800e45a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e45c:	7bbb      	ldrb	r3, [r7, #14]
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d113      	bne.n	800e48a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	220d      	movs	r2, #13
 800e46a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2203      	movs	r2, #3
 800e470:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e480:	2300      	movs	r3, #0
 800e482:	2200      	movs	r2, #0
 800e484:	f000 fb48 	bl	800eb18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e488:	e05f      	b.n	800e54a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e48a:	7bbb      	ldrb	r3, [r7, #14]
 800e48c:	2b02      	cmp	r3, #2
 800e48e:	d111      	bne.n	800e4b4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2209      	movs	r2, #9
 800e494:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2203      	movs	r2, #3
 800e49a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f000 fb33 	bl	800eb18 <osMessageQueuePut>
      break;
 800e4b2:	e04a      	b.n	800e54a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800e4b4:	7bbb      	ldrb	r3, [r7, #14]
 800e4b6:	2b04      	cmp	r3, #4
 800e4b8:	d147      	bne.n	800e54a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	220b      	movs	r2, #11
 800e4be:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2203      	movs	r2, #3
 800e4c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f000 fb1e 	bl	800eb18 <osMessageQueuePut>
      break;
 800e4dc:	e035      	b.n	800e54a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	7e5b      	ldrb	r3, [r3, #25]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	b2da      	uxtb	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	765a      	strb	r2, [r3, #25]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	7e5b      	ldrb	r3, [r3, #25]
 800e4ee:	2b02      	cmp	r3, #2
 800e4f0:	d806      	bhi.n	800e500 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e4fe:	e025      	b.n	800e54c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e506:	2106      	movs	r1, #6
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	795b      	ldrb	r3, [r3, #5]
 800e516:	4619      	mov	r1, r3
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f90d 	bl	800e738 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	791b      	ldrb	r3, [r3, #4]
 800e522:	4619      	mov	r1, r3
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 f907 	bl	800e738 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2200      	movs	r2, #0
 800e52e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e530:	2302      	movs	r3, #2
 800e532:	73fb      	strb	r3, [r7, #15]
      break;
 800e534:	e00a      	b.n	800e54c <USBH_HandleControl+0x484>

    default:
      break;
 800e536:	bf00      	nop
 800e538:	e008      	b.n	800e54c <USBH_HandleControl+0x484>
      break;
 800e53a:	bf00      	nop
 800e53c:	e006      	b.n	800e54c <USBH_HandleControl+0x484>
      break;
 800e53e:	bf00      	nop
 800e540:	e004      	b.n	800e54c <USBH_HandleControl+0x484>
      break;
 800e542:	bf00      	nop
 800e544:	e002      	b.n	800e54c <USBH_HandleControl+0x484>
      break;
 800e546:	bf00      	nop
 800e548:	e000      	b.n	800e54c <USBH_HandleControl+0x484>
      break;
 800e54a:	bf00      	nop
  }

  return status;
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3710      	adds	r7, #16
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop

0800e558 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af04      	add	r7, sp, #16
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	4613      	mov	r3, r2
 800e564:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e566:	79f9      	ldrb	r1, [r7, #7]
 800e568:	2300      	movs	r3, #0
 800e56a:	9303      	str	r3, [sp, #12]
 800e56c:	2308      	movs	r3, #8
 800e56e:	9302      	str	r3, [sp, #8]
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	9301      	str	r3, [sp, #4]
 800e574:	2300      	movs	r3, #0
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	2300      	movs	r3, #0
 800e57a:	2200      	movs	r2, #0
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	f003 faf2 	bl	8011b66 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e582:	2300      	movs	r3, #0
}
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b088      	sub	sp, #32
 800e590:	af04      	add	r7, sp, #16
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	4611      	mov	r1, r2
 800e598:	461a      	mov	r2, r3
 800e59a:	460b      	mov	r3, r1
 800e59c:	80fb      	strh	r3, [r7, #6]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d001      	beq.n	800e5b0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e5b0:	7979      	ldrb	r1, [r7, #5]
 800e5b2:	7e3b      	ldrb	r3, [r7, #24]
 800e5b4:	9303      	str	r3, [sp, #12]
 800e5b6:	88fb      	ldrh	r3, [r7, #6]
 800e5b8:	9302      	str	r3, [sp, #8]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	9301      	str	r3, [sp, #4]
 800e5be:	2301      	movs	r3, #1
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f003 facd 	bl	8011b66 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b088      	sub	sp, #32
 800e5da:	af04      	add	r7, sp, #16
 800e5dc:	60f8      	str	r0, [r7, #12]
 800e5de:	60b9      	str	r1, [r7, #8]
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	80fb      	strh	r3, [r7, #6]
 800e5e8:	4613      	mov	r3, r2
 800e5ea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e5ec:	7979      	ldrb	r1, [r7, #5]
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	9303      	str	r3, [sp, #12]
 800e5f2:	88fb      	ldrh	r3, [r7, #6]
 800e5f4:	9302      	str	r3, [sp, #8]
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	9301      	str	r3, [sp, #4]
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	2300      	movs	r3, #0
 800e600:	2201      	movs	r2, #1
 800e602:	68f8      	ldr	r0, [r7, #12]
 800e604:	f003 faaf 	bl	8011b66 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e608:	2300      	movs	r3, #0

}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b088      	sub	sp, #32
 800e616:	af04      	add	r7, sp, #16
 800e618:	60f8      	str	r0, [r7, #12]
 800e61a:	60b9      	str	r1, [r7, #8]
 800e61c:	4611      	mov	r1, r2
 800e61e:	461a      	mov	r2, r3
 800e620:	460b      	mov	r3, r1
 800e622:	80fb      	strh	r3, [r7, #6]
 800e624:	4613      	mov	r3, r2
 800e626:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d001      	beq.n	800e636 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e632:	2300      	movs	r3, #0
 800e634:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e636:	7979      	ldrb	r1, [r7, #5]
 800e638:	7e3b      	ldrb	r3, [r7, #24]
 800e63a:	9303      	str	r3, [sp, #12]
 800e63c:	88fb      	ldrh	r3, [r7, #6]
 800e63e:	9302      	str	r3, [sp, #8]
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	9301      	str	r3, [sp, #4]
 800e644:	2301      	movs	r3, #1
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	2302      	movs	r3, #2
 800e64a:	2200      	movs	r2, #0
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f003 fa8a 	bl	8011b66 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b088      	sub	sp, #32
 800e660:	af04      	add	r7, sp, #16
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	4611      	mov	r1, r2
 800e668:	461a      	mov	r2, r3
 800e66a:	460b      	mov	r3, r1
 800e66c:	80fb      	strh	r3, [r7, #6]
 800e66e:	4613      	mov	r3, r2
 800e670:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e672:	7979      	ldrb	r1, [r7, #5]
 800e674:	2300      	movs	r3, #0
 800e676:	9303      	str	r3, [sp, #12]
 800e678:	88fb      	ldrh	r3, [r7, #6]
 800e67a:	9302      	str	r3, [sp, #8]
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	9301      	str	r3, [sp, #4]
 800e680:	2301      	movs	r3, #1
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	2302      	movs	r3, #2
 800e686:	2201      	movs	r2, #1
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f003 fa6c 	bl	8011b66 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b086      	sub	sp, #24
 800e69c:	af04      	add	r7, sp, #16
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	4608      	mov	r0, r1
 800e6a2:	4611      	mov	r1, r2
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	70fb      	strb	r3, [r7, #3]
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	70bb      	strb	r3, [r7, #2]
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e6b2:	7878      	ldrb	r0, [r7, #1]
 800e6b4:	78ba      	ldrb	r2, [r7, #2]
 800e6b6:	78f9      	ldrb	r1, [r7, #3]
 800e6b8:	8b3b      	ldrh	r3, [r7, #24]
 800e6ba:	9302      	str	r3, [sp, #8]
 800e6bc:	7d3b      	ldrb	r3, [r7, #20]
 800e6be:	9301      	str	r3, [sp, #4]
 800e6c0:	7c3b      	ldrb	r3, [r7, #16]
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f003 f9ff 	bl	8011aca <USBH_LL_OpenPipe>

  return USBH_OK;
 800e6cc:	2300      	movs	r3, #0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b082      	sub	sp, #8
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
 800e6de:	460b      	mov	r3, r1
 800e6e0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e6e2:	78fb      	ldrb	r3, [r7, #3]
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f003 fa1e 	bl	8011b28 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e6ec:	2300      	movs	r3, #0
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b084      	sub	sp, #16
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	460b      	mov	r3, r1
 800e700:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 f836 	bl	800e774 <USBH_GetFreePipe>
 800e708:	4603      	mov	r3, r0
 800e70a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e70c:	89fb      	ldrh	r3, [r7, #14]
 800e70e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e712:	4293      	cmp	r3, r2
 800e714:	d00a      	beq.n	800e72c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e716:	78fa      	ldrb	r2, [r7, #3]
 800e718:	89fb      	ldrh	r3, [r7, #14]
 800e71a:	f003 030f 	and.w	r3, r3, #15
 800e71e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e722:	6879      	ldr	r1, [r7, #4]
 800e724:	33e0      	adds	r3, #224	; 0xe0
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	440b      	add	r3, r1
 800e72a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e72c:	89fb      	ldrh	r3, [r7, #14]
 800e72e:	b2db      	uxtb	r3, r3
}
 800e730:	4618      	mov	r0, r3
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	460b      	mov	r3, r1
 800e742:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e744:	78fb      	ldrb	r3, [r7, #3]
 800e746:	2b0f      	cmp	r3, #15
 800e748:	d80d      	bhi.n	800e766 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e74a:	78fb      	ldrb	r3, [r7, #3]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	33e0      	adds	r3, #224	; 0xe0
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	4413      	add	r3, r2
 800e754:	685a      	ldr	r2, [r3, #4]
 800e756:	78fb      	ldrb	r3, [r7, #3]
 800e758:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e75c:	6879      	ldr	r1, [r7, #4]
 800e75e:	33e0      	adds	r3, #224	; 0xe0
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	440b      	add	r3, r1
 800e764:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e766:	2300      	movs	r3, #0
}
 800e768:	4618      	mov	r0, r3
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e774:	b480      	push	{r7}
 800e776:	b085      	sub	sp, #20
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e77c:	2300      	movs	r3, #0
 800e77e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e780:	2300      	movs	r3, #0
 800e782:	73fb      	strb	r3, [r7, #15]
 800e784:	e00f      	b.n	800e7a6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e786:	7bfb      	ldrb	r3, [r7, #15]
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	33e0      	adds	r3, #224	; 0xe0
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	4413      	add	r3, r2
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e796:	2b00      	cmp	r3, #0
 800e798:	d102      	bne.n	800e7a0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e79a:	7bfb      	ldrb	r3, [r7, #15]
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	e007      	b.n	800e7b0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e7a0:	7bfb      	ldrb	r3, [r7, #15]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	73fb      	strb	r3, [r7, #15]
 800e7a6:	7bfb      	ldrb	r3, [r7, #15]
 800e7a8:	2b0f      	cmp	r3, #15
 800e7aa:	d9ec      	bls.n	800e786 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e7ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3714      	adds	r7, #20
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <__NVIC_SetPriority>:
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	6039      	str	r1, [r7, #0]
 800e7c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	db0a      	blt.n	800e7e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	490c      	ldr	r1, [pc, #48]	; (800e808 <__NVIC_SetPriority+0x4c>)
 800e7d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7da:	0112      	lsls	r2, r2, #4
 800e7dc:	b2d2      	uxtb	r2, r2
 800e7de:	440b      	add	r3, r1
 800e7e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e7e4:	e00a      	b.n	800e7fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	4908      	ldr	r1, [pc, #32]	; (800e80c <__NVIC_SetPriority+0x50>)
 800e7ec:	79fb      	ldrb	r3, [r7, #7]
 800e7ee:	f003 030f 	and.w	r3, r3, #15
 800e7f2:	3b04      	subs	r3, #4
 800e7f4:	0112      	lsls	r2, r2, #4
 800e7f6:	b2d2      	uxtb	r2, r2
 800e7f8:	440b      	add	r3, r1
 800e7fa:	761a      	strb	r2, [r3, #24]
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr
 800e808:	e000e100 	.word	0xe000e100
 800e80c:	e000ed00 	.word	0xe000ed00

0800e810 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e810:	b580      	push	{r7, lr}
 800e812:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e814:	4b05      	ldr	r3, [pc, #20]	; (800e82c <SysTick_Handler+0x1c>)
 800e816:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e818:	f001 ff10 	bl	801063c <xTaskGetSchedulerState>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d001      	beq.n	800e826 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e822:	f002 fcf9 	bl	8011218 <xPortSysTickHandler>
  }
}
 800e826:	bf00      	nop
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	e000e010 	.word	0xe000e010

0800e830 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e830:	b580      	push	{r7, lr}
 800e832:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e834:	2100      	movs	r1, #0
 800e836:	f06f 0004 	mvn.w	r0, #4
 800e83a:	f7ff ffbf 	bl	800e7bc <__NVIC_SetPriority>
#endif
}
 800e83e:	bf00      	nop
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e84a:	f3ef 8305 	mrs	r3, IPSR
 800e84e:	603b      	str	r3, [r7, #0]
  return(result);
 800e850:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e852:	2b00      	cmp	r3, #0
 800e854:	d003      	beq.n	800e85e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e856:	f06f 0305 	mvn.w	r3, #5
 800e85a:	607b      	str	r3, [r7, #4]
 800e85c:	e00c      	b.n	800e878 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e85e:	4b0a      	ldr	r3, [pc, #40]	; (800e888 <osKernelInitialize+0x44>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d105      	bne.n	800e872 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e866:	4b08      	ldr	r3, [pc, #32]	; (800e888 <osKernelInitialize+0x44>)
 800e868:	2201      	movs	r2, #1
 800e86a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e86c:	2300      	movs	r3, #0
 800e86e:	607b      	str	r3, [r7, #4]
 800e870:	e002      	b.n	800e878 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e872:	f04f 33ff 	mov.w	r3, #4294967295
 800e876:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e878:	687b      	ldr	r3, [r7, #4]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	370c      	adds	r7, #12
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	20000674 	.word	0x20000674

0800e88c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e892:	f3ef 8305 	mrs	r3, IPSR
 800e896:	603b      	str	r3, [r7, #0]
  return(result);
 800e898:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d003      	beq.n	800e8a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e89e:	f06f 0305 	mvn.w	r3, #5
 800e8a2:	607b      	str	r3, [r7, #4]
 800e8a4:	e010      	b.n	800e8c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e8a6:	4b0b      	ldr	r3, [pc, #44]	; (800e8d4 <osKernelStart+0x48>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d109      	bne.n	800e8c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e8ae:	f7ff ffbf 	bl	800e830 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e8b2:	4b08      	ldr	r3, [pc, #32]	; (800e8d4 <osKernelStart+0x48>)
 800e8b4:	2202      	movs	r2, #2
 800e8b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e8b8:	f001 fa52 	bl	800fd60 <vTaskStartScheduler>
      stat = osOK;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	607b      	str	r3, [r7, #4]
 800e8c0:	e002      	b.n	800e8c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e8c8:	687b      	ldr	r3, [r7, #4]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3708      	adds	r7, #8
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	20000674 	.word	0x20000674

0800e8d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08e      	sub	sp, #56	; 0x38
 800e8dc:	af04      	add	r7, sp, #16
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8e8:	f3ef 8305 	mrs	r3, IPSR
 800e8ec:	617b      	str	r3, [r7, #20]
  return(result);
 800e8ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d17e      	bne.n	800e9f2 <osThreadNew+0x11a>
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d07b      	beq.n	800e9f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e8fa:	2380      	movs	r3, #128	; 0x80
 800e8fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e8fe:	2318      	movs	r3, #24
 800e900:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e902:	2300      	movs	r3, #0
 800e904:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e906:	f04f 33ff 	mov.w	r3, #4294967295
 800e90a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d045      	beq.n	800e99e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d002      	beq.n	800e920 <osThreadNew+0x48>
        name = attr->name;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	699b      	ldr	r3, [r3, #24]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	699b      	ldr	r3, [r3, #24]
 800e92c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d008      	beq.n	800e946 <osThreadNew+0x6e>
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	2b38      	cmp	r3, #56	; 0x38
 800e938:	d805      	bhi.n	800e946 <osThreadNew+0x6e>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	f003 0301 	and.w	r3, r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	d001      	beq.n	800e94a <osThreadNew+0x72>
        return (NULL);
 800e946:	2300      	movs	r3, #0
 800e948:	e054      	b.n	800e9f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	695b      	ldr	r3, [r3, #20]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d003      	beq.n	800e95a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	089b      	lsrs	r3, r3, #2
 800e958:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00e      	beq.n	800e980 <osThreadNew+0xa8>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	2b5f      	cmp	r3, #95	; 0x5f
 800e968:	d90a      	bls.n	800e980 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d006      	beq.n	800e980 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	695b      	ldr	r3, [r3, #20]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d002      	beq.n	800e980 <osThreadNew+0xa8>
        mem = 1;
 800e97a:	2301      	movs	r3, #1
 800e97c:	61bb      	str	r3, [r7, #24]
 800e97e:	e010      	b.n	800e9a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10c      	bne.n	800e9a2 <osThreadNew+0xca>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d108      	bne.n	800e9a2 <osThreadNew+0xca>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d104      	bne.n	800e9a2 <osThreadNew+0xca>
          mem = 0;
 800e998:	2300      	movs	r3, #0
 800e99a:	61bb      	str	r3, [r7, #24]
 800e99c:	e001      	b.n	800e9a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d110      	bne.n	800e9ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9b0:	9202      	str	r2, [sp, #8]
 800e9b2:	9301      	str	r3, [sp, #4]
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	6a3a      	ldr	r2, [r7, #32]
 800e9bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f000 fff6 	bl	800f9b0 <xTaskCreateStatic>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	613b      	str	r3, [r7, #16]
 800e9c8:	e013      	b.n	800e9f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d110      	bne.n	800e9f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	b29a      	uxth	r2, r3
 800e9d4:	f107 0310 	add.w	r3, r7, #16
 800e9d8:	9301      	str	r3, [sp, #4]
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	f001 f841 	bl	800fa6a <xTaskCreate>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d001      	beq.n	800e9f2 <osThreadNew+0x11a>
            hTask = NULL;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e9f2:	693b      	ldr	r3, [r7, #16]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3728      	adds	r7, #40	; 0x28
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea04:	f3ef 8305 	mrs	r3, IPSR
 800ea08:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d003      	beq.n	800ea18 <osDelay+0x1c>
    stat = osErrorISR;
 800ea10:	f06f 0305 	mvn.w	r3, #5
 800ea14:	60fb      	str	r3, [r7, #12]
 800ea16:	e007      	b.n	800ea28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d002      	beq.n	800ea28 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f001 f968 	bl	800fcf8 <vTaskDelay>
    }
  }

  return (stat);
 800ea28:	68fb      	ldr	r3, [r7, #12]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b08a      	sub	sp, #40	; 0x28
 800ea36:	af02      	add	r7, sp, #8
 800ea38:	60f8      	str	r0, [r7, #12]
 800ea3a:	60b9      	str	r1, [r7, #8]
 800ea3c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea42:	f3ef 8305 	mrs	r3, IPSR
 800ea46:	613b      	str	r3, [r7, #16]
  return(result);
 800ea48:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d15f      	bne.n	800eb0e <osMessageQueueNew+0xdc>
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d05c      	beq.n	800eb0e <osMessageQueueNew+0xdc>
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d059      	beq.n	800eb0e <osMessageQueueNew+0xdc>
    mem = -1;
 800ea5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ea5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d029      	beq.n	800eaba <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d012      	beq.n	800ea94 <osMessageQueueNew+0x62>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	2b4f      	cmp	r3, #79	; 0x4f
 800ea74:	d90e      	bls.n	800ea94 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00a      	beq.n	800ea94 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	695a      	ldr	r2, [r3, #20]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	68b9      	ldr	r1, [r7, #8]
 800ea86:	fb01 f303 	mul.w	r3, r1, r3
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d302      	bcc.n	800ea94 <osMessageQueueNew+0x62>
        mem = 1;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	61bb      	str	r3, [r7, #24]
 800ea92:	e014      	b.n	800eabe <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d110      	bne.n	800eabe <osMessageQueueNew+0x8c>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10c      	bne.n	800eabe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d108      	bne.n	800eabe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	695b      	ldr	r3, [r3, #20]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d104      	bne.n	800eabe <osMessageQueueNew+0x8c>
          mem = 0;
 800eab4:	2300      	movs	r3, #0
 800eab6:	61bb      	str	r3, [r7, #24]
 800eab8:	e001      	b.n	800eabe <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800eaba:	2300      	movs	r3, #0
 800eabc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d10b      	bne.n	800eadc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	691a      	ldr	r2, [r3, #16]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	2100      	movs	r1, #0
 800eace:	9100      	str	r1, [sp, #0]
 800ead0:	68b9      	ldr	r1, [r7, #8]
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f000 fa2e 	bl	800ef34 <xQueueGenericCreateStatic>
 800ead8:	61f8      	str	r0, [r7, #28]
 800eada:	e008      	b.n	800eaee <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d105      	bne.n	800eaee <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800eae2:	2200      	movs	r2, #0
 800eae4:	68b9      	ldr	r1, [r7, #8]
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f000 fa9c 	bl	800f024 <xQueueGenericCreate>
 800eaec:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00c      	beq.n	800eb0e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d003      	beq.n	800eb02 <osMessageQueueNew+0xd0>
        name = attr->name;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	617b      	str	r3, [r7, #20]
 800eb00:	e001      	b.n	800eb06 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800eb02:	2300      	movs	r3, #0
 800eb04:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800eb06:	6979      	ldr	r1, [r7, #20]
 800eb08:	69f8      	ldr	r0, [r7, #28]
 800eb0a:	f000 fef3 	bl	800f8f4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800eb0e:	69fb      	ldr	r3, [r7, #28]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3720      	adds	r7, #32
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b088      	sub	sp, #32
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	603b      	str	r3, [r7, #0]
 800eb24:	4613      	mov	r3, r2
 800eb26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb30:	f3ef 8305 	mrs	r3, IPSR
 800eb34:	617b      	str	r3, [r7, #20]
  return(result);
 800eb36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d028      	beq.n	800eb8e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d005      	beq.n	800eb4e <osMessageQueuePut+0x36>
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <osMessageQueuePut+0x36>
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d003      	beq.n	800eb56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800eb4e:	f06f 0303 	mvn.w	r3, #3
 800eb52:	61fb      	str	r3, [r7, #28]
 800eb54:	e038      	b.n	800ebc8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800eb56:	2300      	movs	r3, #0
 800eb58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800eb5a:	f107 0210 	add.w	r2, r7, #16
 800eb5e:	2300      	movs	r3, #0
 800eb60:	68b9      	ldr	r1, [r7, #8]
 800eb62:	69b8      	ldr	r0, [r7, #24]
 800eb64:	f000 fbba 	bl	800f2dc <xQueueGenericSendFromISR>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d003      	beq.n	800eb76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800eb6e:	f06f 0302 	mvn.w	r3, #2
 800eb72:	61fb      	str	r3, [r7, #28]
 800eb74:	e028      	b.n	800ebc8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d025      	beq.n	800ebc8 <osMessageQueuePut+0xb0>
 800eb7c:	4b15      	ldr	r3, [pc, #84]	; (800ebd4 <osMessageQueuePut+0xbc>)
 800eb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb82:	601a      	str	r2, [r3, #0]
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	f3bf 8f6f 	isb	sy
 800eb8c:	e01c      	b.n	800ebc8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d002      	beq.n	800eb9a <osMessageQueuePut+0x82>
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d103      	bne.n	800eba2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800eb9a:	f06f 0303 	mvn.w	r3, #3
 800eb9e:	61fb      	str	r3, [r7, #28]
 800eba0:	e012      	b.n	800ebc8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eba2:	2300      	movs	r3, #0
 800eba4:	683a      	ldr	r2, [r7, #0]
 800eba6:	68b9      	ldr	r1, [r7, #8]
 800eba8:	69b8      	ldr	r0, [r7, #24]
 800ebaa:	f000 fa99 	bl	800f0e0 <xQueueGenericSend>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d009      	beq.n	800ebc8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d003      	beq.n	800ebc2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ebba:	f06f 0301 	mvn.w	r3, #1
 800ebbe:	61fb      	str	r3, [r7, #28]
 800ebc0:	e002      	b.n	800ebc8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ebc2:	f06f 0302 	mvn.w	r3, #2
 800ebc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ebc8:	69fb      	ldr	r3, [r7, #28]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3720      	adds	r7, #32
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	e000ed04 	.word	0xe000ed04

0800ebd8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b088      	sub	sp, #32
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
 800ebe4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ebea:	2300      	movs	r3, #0
 800ebec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebee:	f3ef 8305 	mrs	r3, IPSR
 800ebf2:	617b      	str	r3, [r7, #20]
  return(result);
 800ebf4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d028      	beq.n	800ec4c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d005      	beq.n	800ec0c <osMessageQueueGet+0x34>
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d002      	beq.n	800ec0c <osMessageQueueGet+0x34>
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d003      	beq.n	800ec14 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ec0c:	f06f 0303 	mvn.w	r3, #3
 800ec10:	61fb      	str	r3, [r7, #28]
 800ec12:	e037      	b.n	800ec84 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ec14:	2300      	movs	r3, #0
 800ec16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ec18:	f107 0310 	add.w	r3, r7, #16
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	68b9      	ldr	r1, [r7, #8]
 800ec20:	69b8      	ldr	r0, [r7, #24]
 800ec22:	f000 fcd7 	bl	800f5d4 <xQueueReceiveFromISR>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d003      	beq.n	800ec34 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ec2c:	f06f 0302 	mvn.w	r3, #2
 800ec30:	61fb      	str	r3, [r7, #28]
 800ec32:	e027      	b.n	800ec84 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d024      	beq.n	800ec84 <osMessageQueueGet+0xac>
 800ec3a:	4b15      	ldr	r3, [pc, #84]	; (800ec90 <osMessageQueueGet+0xb8>)
 800ec3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec40:	601a      	str	r2, [r3, #0]
 800ec42:	f3bf 8f4f 	dsb	sy
 800ec46:	f3bf 8f6f 	isb	sy
 800ec4a:	e01b      	b.n	800ec84 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d002      	beq.n	800ec58 <osMessageQueueGet+0x80>
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d103      	bne.n	800ec60 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ec58:	f06f 0303 	mvn.w	r3, #3
 800ec5c:	61fb      	str	r3, [r7, #28]
 800ec5e:	e011      	b.n	800ec84 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ec60:	683a      	ldr	r2, [r7, #0]
 800ec62:	68b9      	ldr	r1, [r7, #8]
 800ec64:	69b8      	ldr	r0, [r7, #24]
 800ec66:	f000 fbd5 	bl	800f414 <xQueueReceive>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d009      	beq.n	800ec84 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d003      	beq.n	800ec7e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ec76:	f06f 0301 	mvn.w	r3, #1
 800ec7a:	61fb      	str	r3, [r7, #28]
 800ec7c:	e002      	b.n	800ec84 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ec7e:	f06f 0302 	mvn.w	r3, #2
 800ec82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ec84:	69fb      	ldr	r3, [r7, #28]
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3720      	adds	r7, #32
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	e000ed04 	.word	0xe000ed04

0800ec94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ec94:	b480      	push	{r7}
 800ec96:	b085      	sub	sp, #20
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4a07      	ldr	r2, [pc, #28]	; (800ecc0 <vApplicationGetIdleTaskMemory+0x2c>)
 800eca4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	4a06      	ldr	r2, [pc, #24]	; (800ecc4 <vApplicationGetIdleTaskMemory+0x30>)
 800ecaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2280      	movs	r2, #128	; 0x80
 800ecb0:	601a      	str	r2, [r3, #0]
}
 800ecb2:	bf00      	nop
 800ecb4:	3714      	adds	r7, #20
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr
 800ecbe:	bf00      	nop
 800ecc0:	20000678 	.word	0x20000678
 800ecc4:	200006d8 	.word	0x200006d8

0800ecc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	4a07      	ldr	r2, [pc, #28]	; (800ecf4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ecd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	4a06      	ldr	r2, [pc, #24]	; (800ecf8 <vApplicationGetTimerTaskMemory+0x30>)
 800ecde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ece6:	601a      	str	r2, [r3, #0]
}
 800ece8:	bf00      	nop
 800ecea:	3714      	adds	r7, #20
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr
 800ecf4:	200008d8 	.word	0x200008d8
 800ecf8:	20000938 	.word	0x20000938

0800ecfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f103 0208 	add.w	r2, r3, #8
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f04f 32ff 	mov.w	r2, #4294967295
 800ed14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f103 0208 	add.w	r2, r3, #8
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f103 0208 	add.w	r2, r3, #8
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ed30:	bf00      	nop
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ed4a:	bf00      	nop
 800ed4c:	370c      	adds	r7, #12
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed56:	b480      	push	{r7}
 800ed58:	b085      	sub	sp, #20
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	68fa      	ldr	r2, [r7, #12]
 800ed6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	689a      	ldr	r2, [r3, #8]
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	683a      	ldr	r2, [r7, #0]
 800ed7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	683a      	ldr	r2, [r7, #0]
 800ed80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	1c5a      	adds	r2, r3, #1
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	601a      	str	r2, [r3, #0]
}
 800ed92:	bf00      	nop
 800ed94:	3714      	adds	r7, #20
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr

0800ed9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed9e:	b480      	push	{r7}
 800eda0:	b085      	sub	sp, #20
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb4:	d103      	bne.n	800edbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	691b      	ldr	r3, [r3, #16]
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	e00c      	b.n	800edd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	3308      	adds	r3, #8
 800edc2:	60fb      	str	r3, [r7, #12]
 800edc4:	e002      	b.n	800edcc <vListInsert+0x2e>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	60fb      	str	r3, [r7, #12]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d2f6      	bcs.n	800edc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	685a      	ldr	r2, [r3, #4]
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	683a      	ldr	r2, [r7, #0]
 800edf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	1c5a      	adds	r2, r3, #1
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	601a      	str	r2, [r3, #0]
}
 800ee04:	bf00      	nop
 800ee06:	3714      	adds	r7, #20
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ee10:	b480      	push	{r7}
 800ee12:	b085      	sub	sp, #20
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	691b      	ldr	r3, [r3, #16]
 800ee1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	687a      	ldr	r2, [r7, #4]
 800ee24:	6892      	ldr	r2, [r2, #8]
 800ee26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	6852      	ldr	r2, [r2, #4]
 800ee30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d103      	bne.n	800ee44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	689a      	ldr	r2, [r3, #8]
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	1e5a      	subs	r2, r3, #1
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3714      	adds	r7, #20
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d10a      	bne.n	800ee8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ee78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7c:	f383 8811 	msr	BASEPRI, r3
 800ee80:	f3bf 8f6f 	isb	sy
 800ee84:	f3bf 8f4f 	dsb	sy
 800ee88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ee8a:	bf00      	nop
 800ee8c:	e7fe      	b.n	800ee8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ee8e:	f002 f931 	bl	80110f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee9a:	68f9      	ldr	r1, [r7, #12]
 800ee9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee9e:	fb01 f303 	mul.w	r3, r1, r3
 800eea2:	441a      	add	r2, r3
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eebe:	3b01      	subs	r3, #1
 800eec0:	68f9      	ldr	r1, [r7, #12]
 800eec2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eec4:	fb01 f303 	mul.w	r3, r1, r3
 800eec8:	441a      	add	r2, r3
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	22ff      	movs	r2, #255	; 0xff
 800eed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	22ff      	movs	r2, #255	; 0xff
 800eeda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d114      	bne.n	800ef0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	691b      	ldr	r3, [r3, #16]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d01a      	beq.n	800ef22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	3310      	adds	r3, #16
 800eef0:	4618      	mov	r0, r3
 800eef2:	f001 f9e3 	bl	80102bc <xTaskRemoveFromEventList>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d012      	beq.n	800ef22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eefc:	4b0c      	ldr	r3, [pc, #48]	; (800ef30 <xQueueGenericReset+0xcc>)
 800eefe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef02:	601a      	str	r2, [r3, #0]
 800ef04:	f3bf 8f4f 	dsb	sy
 800ef08:	f3bf 8f6f 	isb	sy
 800ef0c:	e009      	b.n	800ef22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	3310      	adds	r3, #16
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7ff fef2 	bl	800ecfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	3324      	adds	r3, #36	; 0x24
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7ff feed 	bl	800ecfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ef22:	f002 f917 	bl	8011154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ef26:	2301      	movs	r3, #1
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3710      	adds	r7, #16
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	e000ed04 	.word	0xe000ed04

0800ef34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b08e      	sub	sp, #56	; 0x38
 800ef38:	af02      	add	r7, sp, #8
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
 800ef40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d10a      	bne.n	800ef5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ef48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4c:	f383 8811 	msr	BASEPRI, r3
 800ef50:	f3bf 8f6f 	isb	sy
 800ef54:	f3bf 8f4f 	dsb	sy
 800ef58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ef5a:	bf00      	nop
 800ef5c:	e7fe      	b.n	800ef5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d10a      	bne.n	800ef7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ef64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef68:	f383 8811 	msr	BASEPRI, r3
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f3bf 8f4f 	dsb	sy
 800ef74:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef76:	bf00      	nop
 800ef78:	e7fe      	b.n	800ef78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d002      	beq.n	800ef86 <xQueueGenericCreateStatic+0x52>
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d001      	beq.n	800ef8a <xQueueGenericCreateStatic+0x56>
 800ef86:	2301      	movs	r3, #1
 800ef88:	e000      	b.n	800ef8c <xQueueGenericCreateStatic+0x58>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d10a      	bne.n	800efa6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ef90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef94:	f383 8811 	msr	BASEPRI, r3
 800ef98:	f3bf 8f6f 	isb	sy
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	623b      	str	r3, [r7, #32]
}
 800efa2:	bf00      	nop
 800efa4:	e7fe      	b.n	800efa4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d102      	bne.n	800efb2 <xQueueGenericCreateStatic+0x7e>
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d101      	bne.n	800efb6 <xQueueGenericCreateStatic+0x82>
 800efb2:	2301      	movs	r3, #1
 800efb4:	e000      	b.n	800efb8 <xQueueGenericCreateStatic+0x84>
 800efb6:	2300      	movs	r3, #0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d10a      	bne.n	800efd2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800efbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc0:	f383 8811 	msr	BASEPRI, r3
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	61fb      	str	r3, [r7, #28]
}
 800efce:	bf00      	nop
 800efd0:	e7fe      	b.n	800efd0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800efd2:	2350      	movs	r3, #80	; 0x50
 800efd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	2b50      	cmp	r3, #80	; 0x50
 800efda:	d00a      	beq.n	800eff2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800efdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe0:	f383 8811 	msr	BASEPRI, r3
 800efe4:	f3bf 8f6f 	isb	sy
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	61bb      	str	r3, [r7, #24]
}
 800efee:	bf00      	nop
 800eff0:	e7fe      	b.n	800eff0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800eff2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00d      	beq.n	800f01a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800effe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f000:	2201      	movs	r2, #1
 800f002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f006:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	4613      	mov	r3, r2
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	68b9      	ldr	r1, [r7, #8]
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f000 f83f 	bl	800f098 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3730      	adds	r7, #48	; 0x30
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08a      	sub	sp, #40	; 0x28
 800f028:	af02      	add	r7, sp, #8
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	4613      	mov	r3, r2
 800f030:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10a      	bne.n	800f04e <xQueueGenericCreate+0x2a>
	__asm volatile
 800f038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	613b      	str	r3, [r7, #16]
}
 800f04a:	bf00      	nop
 800f04c:	e7fe      	b.n	800f04c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	68ba      	ldr	r2, [r7, #8]
 800f052:	fb02 f303 	mul.w	r3, r2, r3
 800f056:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	3350      	adds	r3, #80	; 0x50
 800f05c:	4618      	mov	r0, r3
 800f05e:	f002 f96b 	bl	8011338 <pvPortMalloc>
 800f062:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f064:	69bb      	ldr	r3, [r7, #24]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d011      	beq.n	800f08e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	3350      	adds	r3, #80	; 0x50
 800f072:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f074:	69bb      	ldr	r3, [r7, #24]
 800f076:	2200      	movs	r2, #0
 800f078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f07c:	79fa      	ldrb	r2, [r7, #7]
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	9300      	str	r3, [sp, #0]
 800f082:	4613      	mov	r3, r2
 800f084:	697a      	ldr	r2, [r7, #20]
 800f086:	68b9      	ldr	r1, [r7, #8]
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f000 f805 	bl	800f098 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f08e:	69bb      	ldr	r3, [r7, #24]
	}
 800f090:	4618      	mov	r0, r3
 800f092:	3720      	adds	r7, #32
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
 800f0a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d103      	bne.n	800f0b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	69ba      	ldr	r2, [r7, #24]
 800f0b0:	601a      	str	r2, [r3, #0]
 800f0b2:	e002      	b.n	800f0ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	68fa      	ldr	r2, [r7, #12]
 800f0be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f0c0:	69bb      	ldr	r3, [r7, #24]
 800f0c2:	68ba      	ldr	r2, [r7, #8]
 800f0c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f0c6:	2101      	movs	r1, #1
 800f0c8:	69b8      	ldr	r0, [r7, #24]
 800f0ca:	f7ff fecb 	bl	800ee64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f0ce:	69bb      	ldr	r3, [r7, #24]
 800f0d0:	78fa      	ldrb	r2, [r7, #3]
 800f0d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f0d6:	bf00      	nop
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
	...

0800f0e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b08e      	sub	sp, #56	; 0x38
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	607a      	str	r2, [r7, #4]
 800f0ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d10a      	bne.n	800f112 <xQueueGenericSend+0x32>
	__asm volatile
 800f0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f100:	f383 8811 	msr	BASEPRI, r3
 800f104:	f3bf 8f6f 	isb	sy
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f10e:	bf00      	nop
 800f110:	e7fe      	b.n	800f110 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d103      	bne.n	800f120 <xQueueGenericSend+0x40>
 800f118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d101      	bne.n	800f124 <xQueueGenericSend+0x44>
 800f120:	2301      	movs	r3, #1
 800f122:	e000      	b.n	800f126 <xQueueGenericSend+0x46>
 800f124:	2300      	movs	r3, #0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d10a      	bne.n	800f140 <xQueueGenericSend+0x60>
	__asm volatile
 800f12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12e:	f383 8811 	msr	BASEPRI, r3
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f13c:	bf00      	nop
 800f13e:	e7fe      	b.n	800f13e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b02      	cmp	r3, #2
 800f144:	d103      	bne.n	800f14e <xQueueGenericSend+0x6e>
 800f146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d101      	bne.n	800f152 <xQueueGenericSend+0x72>
 800f14e:	2301      	movs	r3, #1
 800f150:	e000      	b.n	800f154 <xQueueGenericSend+0x74>
 800f152:	2300      	movs	r3, #0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10a      	bne.n	800f16e <xQueueGenericSend+0x8e>
	__asm volatile
 800f158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15c:	f383 8811 	msr	BASEPRI, r3
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	f3bf 8f4f 	dsb	sy
 800f168:	623b      	str	r3, [r7, #32]
}
 800f16a:	bf00      	nop
 800f16c:	e7fe      	b.n	800f16c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f16e:	f001 fa65 	bl	801063c <xTaskGetSchedulerState>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d102      	bne.n	800f17e <xQueueGenericSend+0x9e>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d101      	bne.n	800f182 <xQueueGenericSend+0xa2>
 800f17e:	2301      	movs	r3, #1
 800f180:	e000      	b.n	800f184 <xQueueGenericSend+0xa4>
 800f182:	2300      	movs	r3, #0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d10a      	bne.n	800f19e <xQueueGenericSend+0xbe>
	__asm volatile
 800f188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18c:	f383 8811 	msr	BASEPRI, r3
 800f190:	f3bf 8f6f 	isb	sy
 800f194:	f3bf 8f4f 	dsb	sy
 800f198:	61fb      	str	r3, [r7, #28]
}
 800f19a:	bf00      	nop
 800f19c:	e7fe      	b.n	800f19c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f19e:	f001 ffa9 	bl	80110f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d302      	bcc.n	800f1b4 <xQueueGenericSend+0xd4>
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d129      	bne.n	800f208 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1b4:	683a      	ldr	r2, [r7, #0]
 800f1b6:	68b9      	ldr	r1, [r7, #8]
 800f1b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1ba:	f000 fa8b 	bl	800f6d4 <prvCopyDataToQueue>
 800f1be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d010      	beq.n	800f1ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ca:	3324      	adds	r3, #36	; 0x24
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f001 f875 	bl	80102bc <xTaskRemoveFromEventList>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d013      	beq.n	800f200 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f1d8:	4b3f      	ldr	r3, [pc, #252]	; (800f2d8 <xQueueGenericSend+0x1f8>)
 800f1da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1de:	601a      	str	r2, [r3, #0]
 800f1e0:	f3bf 8f4f 	dsb	sy
 800f1e4:	f3bf 8f6f 	isb	sy
 800f1e8:	e00a      	b.n	800f200 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d007      	beq.n	800f200 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f1f0:	4b39      	ldr	r3, [pc, #228]	; (800f2d8 <xQueueGenericSend+0x1f8>)
 800f1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1f6:	601a      	str	r2, [r3, #0]
 800f1f8:	f3bf 8f4f 	dsb	sy
 800f1fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f200:	f001 ffa8 	bl	8011154 <vPortExitCritical>
				return pdPASS;
 800f204:	2301      	movs	r3, #1
 800f206:	e063      	b.n	800f2d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d103      	bne.n	800f216 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f20e:	f001 ffa1 	bl	8011154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f212:	2300      	movs	r3, #0
 800f214:	e05c      	b.n	800f2d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d106      	bne.n	800f22a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f21c:	f107 0314 	add.w	r3, r7, #20
 800f220:	4618      	mov	r0, r3
 800f222:	f001 f8af 	bl	8010384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f226:	2301      	movs	r3, #1
 800f228:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f22a:	f001 ff93 	bl	8011154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f22e:	f000 fdfd 	bl	800fe2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f232:	f001 ff5f 	bl	80110f4 <vPortEnterCritical>
 800f236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f23c:	b25b      	sxtb	r3, r3
 800f23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f242:	d103      	bne.n	800f24c <xQueueGenericSend+0x16c>
 800f244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f246:	2200      	movs	r2, #0
 800f248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f252:	b25b      	sxtb	r3, r3
 800f254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f258:	d103      	bne.n	800f262 <xQueueGenericSend+0x182>
 800f25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f25c:	2200      	movs	r2, #0
 800f25e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f262:	f001 ff77 	bl	8011154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f266:	1d3a      	adds	r2, r7, #4
 800f268:	f107 0314 	add.w	r3, r7, #20
 800f26c:	4611      	mov	r1, r2
 800f26e:	4618      	mov	r0, r3
 800f270:	f001 f89e 	bl	80103b0 <xTaskCheckForTimeOut>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d124      	bne.n	800f2c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f27a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f27c:	f000 fb22 	bl	800f8c4 <prvIsQueueFull>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d018      	beq.n	800f2b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f288:	3310      	adds	r3, #16
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	4611      	mov	r1, r2
 800f28e:	4618      	mov	r0, r3
 800f290:	f000 ffc4 	bl	801021c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f296:	f000 faad 	bl	800f7f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f29a:	f000 fdd5 	bl	800fe48 <xTaskResumeAll>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	f47f af7c 	bne.w	800f19e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f2a6:	4b0c      	ldr	r3, [pc, #48]	; (800f2d8 <xQueueGenericSend+0x1f8>)
 800f2a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2ac:	601a      	str	r2, [r3, #0]
 800f2ae:	f3bf 8f4f 	dsb	sy
 800f2b2:	f3bf 8f6f 	isb	sy
 800f2b6:	e772      	b.n	800f19e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f2b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2ba:	f000 fa9b 	bl	800f7f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2be:	f000 fdc3 	bl	800fe48 <xTaskResumeAll>
 800f2c2:	e76c      	b.n	800f19e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f2c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2c6:	f000 fa95 	bl	800f7f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2ca:	f000 fdbd 	bl	800fe48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f2ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3738      	adds	r7, #56	; 0x38
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	e000ed04 	.word	0xe000ed04

0800f2dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b090      	sub	sp, #64	; 0x40
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
 800f2e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d10a      	bne.n	800f30a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f8:	f383 8811 	msr	BASEPRI, r3
 800f2fc:	f3bf 8f6f 	isb	sy
 800f300:	f3bf 8f4f 	dsb	sy
 800f304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f306:	bf00      	nop
 800f308:	e7fe      	b.n	800f308 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d103      	bne.n	800f318 <xQueueGenericSendFromISR+0x3c>
 800f310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f314:	2b00      	cmp	r3, #0
 800f316:	d101      	bne.n	800f31c <xQueueGenericSendFromISR+0x40>
 800f318:	2301      	movs	r3, #1
 800f31a:	e000      	b.n	800f31e <xQueueGenericSendFromISR+0x42>
 800f31c:	2300      	movs	r3, #0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10a      	bne.n	800f338 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f326:	f383 8811 	msr	BASEPRI, r3
 800f32a:	f3bf 8f6f 	isb	sy
 800f32e:	f3bf 8f4f 	dsb	sy
 800f332:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f334:	bf00      	nop
 800f336:	e7fe      	b.n	800f336 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	2b02      	cmp	r3, #2
 800f33c:	d103      	bne.n	800f346 <xQueueGenericSendFromISR+0x6a>
 800f33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f342:	2b01      	cmp	r3, #1
 800f344:	d101      	bne.n	800f34a <xQueueGenericSendFromISR+0x6e>
 800f346:	2301      	movs	r3, #1
 800f348:	e000      	b.n	800f34c <xQueueGenericSendFromISR+0x70>
 800f34a:	2300      	movs	r3, #0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d10a      	bne.n	800f366 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f354:	f383 8811 	msr	BASEPRI, r3
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	623b      	str	r3, [r7, #32]
}
 800f362:	bf00      	nop
 800f364:	e7fe      	b.n	800f364 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f366:	f001 ffa7 	bl	80112b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f36a:	f3ef 8211 	mrs	r2, BASEPRI
 800f36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f372:	f383 8811 	msr	BASEPRI, r3
 800f376:	f3bf 8f6f 	isb	sy
 800f37a:	f3bf 8f4f 	dsb	sy
 800f37e:	61fa      	str	r2, [r7, #28]
 800f380:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f382:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f384:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f38e:	429a      	cmp	r2, r3
 800f390:	d302      	bcc.n	800f398 <xQueueGenericSendFromISR+0xbc>
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	2b02      	cmp	r3, #2
 800f396:	d12f      	bne.n	800f3f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f3a8:	683a      	ldr	r2, [r7, #0]
 800f3aa:	68b9      	ldr	r1, [r7, #8]
 800f3ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f3ae:	f000 f991 	bl	800f6d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f3b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ba:	d112      	bne.n	800f3e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d016      	beq.n	800f3f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c6:	3324      	adds	r3, #36	; 0x24
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f000 ff77 	bl	80102bc <xTaskRemoveFromEventList>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d00e      	beq.n	800f3f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d00b      	beq.n	800f3f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2201      	movs	r2, #1
 800f3de:	601a      	str	r2, [r3, #0]
 800f3e0:	e007      	b.n	800f3f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f3e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	b25a      	sxtb	r2, r3
 800f3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f3f6:	e001      	b.n	800f3fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f406:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3740      	adds	r7, #64	; 0x40
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
	...

0800f414 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b08c      	sub	sp, #48	; 0x30
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	60b9      	str	r1, [r7, #8]
 800f41e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f420:	2300      	movs	r3, #0
 800f422:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d10a      	bne.n	800f444 <xQueueReceive+0x30>
	__asm volatile
 800f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f432:	f383 8811 	msr	BASEPRI, r3
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	623b      	str	r3, [r7, #32]
}
 800f440:	bf00      	nop
 800f442:	e7fe      	b.n	800f442 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d103      	bne.n	800f452 <xQueueReceive+0x3e>
 800f44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d101      	bne.n	800f456 <xQueueReceive+0x42>
 800f452:	2301      	movs	r3, #1
 800f454:	e000      	b.n	800f458 <xQueueReceive+0x44>
 800f456:	2300      	movs	r3, #0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d10a      	bne.n	800f472 <xQueueReceive+0x5e>
	__asm volatile
 800f45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f460:	f383 8811 	msr	BASEPRI, r3
 800f464:	f3bf 8f6f 	isb	sy
 800f468:	f3bf 8f4f 	dsb	sy
 800f46c:	61fb      	str	r3, [r7, #28]
}
 800f46e:	bf00      	nop
 800f470:	e7fe      	b.n	800f470 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f472:	f001 f8e3 	bl	801063c <xTaskGetSchedulerState>
 800f476:	4603      	mov	r3, r0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d102      	bne.n	800f482 <xQueueReceive+0x6e>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d101      	bne.n	800f486 <xQueueReceive+0x72>
 800f482:	2301      	movs	r3, #1
 800f484:	e000      	b.n	800f488 <xQueueReceive+0x74>
 800f486:	2300      	movs	r3, #0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d10a      	bne.n	800f4a2 <xQueueReceive+0x8e>
	__asm volatile
 800f48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f490:	f383 8811 	msr	BASEPRI, r3
 800f494:	f3bf 8f6f 	isb	sy
 800f498:	f3bf 8f4f 	dsb	sy
 800f49c:	61bb      	str	r3, [r7, #24]
}
 800f49e:	bf00      	nop
 800f4a0:	e7fe      	b.n	800f4a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f4a2:	f001 fe27 	bl	80110f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d01f      	beq.n	800f4f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f4b2:	68b9      	ldr	r1, [r7, #8]
 800f4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4b6:	f000 f977 	bl	800f7a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4bc:	1e5a      	subs	r2, r3, #1
 800f4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c4:	691b      	ldr	r3, [r3, #16]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d00f      	beq.n	800f4ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4cc:	3310      	adds	r3, #16
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f000 fef4 	bl	80102bc <xTaskRemoveFromEventList>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d007      	beq.n	800f4ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f4da:	4b3d      	ldr	r3, [pc, #244]	; (800f5d0 <xQueueReceive+0x1bc>)
 800f4dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4e0:	601a      	str	r2, [r3, #0]
 800f4e2:	f3bf 8f4f 	dsb	sy
 800f4e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f4ea:	f001 fe33 	bl	8011154 <vPortExitCritical>
				return pdPASS;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e069      	b.n	800f5c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d103      	bne.n	800f500 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f4f8:	f001 fe2c 	bl	8011154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	e062      	b.n	800f5c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f502:	2b00      	cmp	r3, #0
 800f504:	d106      	bne.n	800f514 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f506:	f107 0310 	add.w	r3, r7, #16
 800f50a:	4618      	mov	r0, r3
 800f50c:	f000 ff3a 	bl	8010384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f510:	2301      	movs	r3, #1
 800f512:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f514:	f001 fe1e 	bl	8011154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f518:	f000 fc88 	bl	800fe2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f51c:	f001 fdea 	bl	80110f4 <vPortEnterCritical>
 800f520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f522:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f526:	b25b      	sxtb	r3, r3
 800f528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f52c:	d103      	bne.n	800f536 <xQueueReceive+0x122>
 800f52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f530:	2200      	movs	r2, #0
 800f532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f53c:	b25b      	sxtb	r3, r3
 800f53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f542:	d103      	bne.n	800f54c <xQueueReceive+0x138>
 800f544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f546:	2200      	movs	r2, #0
 800f548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f54c:	f001 fe02 	bl	8011154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f550:	1d3a      	adds	r2, r7, #4
 800f552:	f107 0310 	add.w	r3, r7, #16
 800f556:	4611      	mov	r1, r2
 800f558:	4618      	mov	r0, r3
 800f55a:	f000 ff29 	bl	80103b0 <xTaskCheckForTimeOut>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d123      	bne.n	800f5ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f566:	f000 f997 	bl	800f898 <prvIsQueueEmpty>
 800f56a:	4603      	mov	r3, r0
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d017      	beq.n	800f5a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f572:	3324      	adds	r3, #36	; 0x24
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	4611      	mov	r1, r2
 800f578:	4618      	mov	r0, r3
 800f57a:	f000 fe4f 	bl	801021c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f57e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f580:	f000 f938 	bl	800f7f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f584:	f000 fc60 	bl	800fe48 <xTaskResumeAll>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d189      	bne.n	800f4a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f58e:	4b10      	ldr	r3, [pc, #64]	; (800f5d0 <xQueueReceive+0x1bc>)
 800f590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f594:	601a      	str	r2, [r3, #0]
 800f596:	f3bf 8f4f 	dsb	sy
 800f59a:	f3bf 8f6f 	isb	sy
 800f59e:	e780      	b.n	800f4a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f5a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5a2:	f000 f927 	bl	800f7f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f5a6:	f000 fc4f 	bl	800fe48 <xTaskResumeAll>
 800f5aa:	e77a      	b.n	800f4a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f5ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5ae:	f000 f921 	bl	800f7f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f5b2:	f000 fc49 	bl	800fe48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f5b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5b8:	f000 f96e 	bl	800f898 <prvIsQueueEmpty>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	f43f af6f 	beq.w	800f4a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f5c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3730      	adds	r7, #48	; 0x30
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	e000ed04 	.word	0xe000ed04

0800f5d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b08e      	sub	sp, #56	; 0x38
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d10a      	bne.n	800f600 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ee:	f383 8811 	msr	BASEPRI, r3
 800f5f2:	f3bf 8f6f 	isb	sy
 800f5f6:	f3bf 8f4f 	dsb	sy
 800f5fa:	623b      	str	r3, [r7, #32]
}
 800f5fc:	bf00      	nop
 800f5fe:	e7fe      	b.n	800f5fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d103      	bne.n	800f60e <xQueueReceiveFromISR+0x3a>
 800f606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d101      	bne.n	800f612 <xQueueReceiveFromISR+0x3e>
 800f60e:	2301      	movs	r3, #1
 800f610:	e000      	b.n	800f614 <xQueueReceiveFromISR+0x40>
 800f612:	2300      	movs	r3, #0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d10a      	bne.n	800f62e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61c:	f383 8811 	msr	BASEPRI, r3
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	f3bf 8f4f 	dsb	sy
 800f628:	61fb      	str	r3, [r7, #28]
}
 800f62a:	bf00      	nop
 800f62c:	e7fe      	b.n	800f62c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f62e:	f001 fe43 	bl	80112b8 <vPortValidateInterruptPriority>
	__asm volatile
 800f632:	f3ef 8211 	mrs	r2, BASEPRI
 800f636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f63a:	f383 8811 	msr	BASEPRI, r3
 800f63e:	f3bf 8f6f 	isb	sy
 800f642:	f3bf 8f4f 	dsb	sy
 800f646:	61ba      	str	r2, [r7, #24]
 800f648:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f64a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f64c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f652:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f656:	2b00      	cmp	r3, #0
 800f658:	d02f      	beq.n	800f6ba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f664:	68b9      	ldr	r1, [r7, #8]
 800f666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f668:	f000 f89e 	bl	800f7a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66e:	1e5a      	subs	r2, r3, #1
 800f670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f672:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f674:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f67c:	d112      	bne.n	800f6a4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	691b      	ldr	r3, [r3, #16]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d016      	beq.n	800f6b4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f688:	3310      	adds	r3, #16
 800f68a:	4618      	mov	r0, r3
 800f68c:	f000 fe16 	bl	80102bc <xTaskRemoveFromEventList>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00e      	beq.n	800f6b4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d00b      	beq.n	800f6b4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	601a      	str	r2, [r3, #0]
 800f6a2:	e007      	b.n	800f6b4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	b25a      	sxtb	r2, r3
 800f6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	637b      	str	r3, [r7, #52]	; 0x34
 800f6b8:	e001      	b.n	800f6be <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	f383 8811 	msr	BASEPRI, r3
}
 800f6c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3738      	adds	r7, #56	; 0x38
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b086      	sub	sp, #24
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d10d      	bne.n	800f70e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d14d      	bne.n	800f796 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	689b      	ldr	r3, [r3, #8]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f000 ffba 	bl	8010678 <xTaskPriorityDisinherit>
 800f704:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2200      	movs	r2, #0
 800f70a:	609a      	str	r2, [r3, #8]
 800f70c:	e043      	b.n	800f796 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d119      	bne.n	800f748 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6858      	ldr	r0, [r3, #4]
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f71c:	461a      	mov	r2, r3
 800f71e:	68b9      	ldr	r1, [r7, #8]
 800f720:	f002 fc28 	bl	8011f74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	685a      	ldr	r2, [r3, #4]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f72c:	441a      	add	r2, r3
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	685a      	ldr	r2, [r3, #4]
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d32b      	bcc.n	800f796 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	605a      	str	r2, [r3, #4]
 800f746:	e026      	b.n	800f796 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	68d8      	ldr	r0, [r3, #12]
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f750:	461a      	mov	r2, r3
 800f752:	68b9      	ldr	r1, [r7, #8]
 800f754:	f002 fc0e 	bl	8011f74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	68da      	ldr	r2, [r3, #12]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f760:	425b      	negs	r3, r3
 800f762:	441a      	add	r2, r3
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	68da      	ldr	r2, [r3, #12]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	429a      	cmp	r2, r3
 800f772:	d207      	bcs.n	800f784 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	689a      	ldr	r2, [r3, #8]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f77c:	425b      	negs	r3, r3
 800f77e:	441a      	add	r2, r3
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2b02      	cmp	r3, #2
 800f788:	d105      	bne.n	800f796 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d002      	beq.n	800f796 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	3b01      	subs	r3, #1
 800f794:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	1c5a      	adds	r2, r3, #1
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f79e:	697b      	ldr	r3, [r7, #20]
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3718      	adds	r7, #24
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d018      	beq.n	800f7ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	68da      	ldr	r2, [r3, #12]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7c2:	441a      	add	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	68da      	ldr	r2, [r3, #12]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	689b      	ldr	r3, [r3, #8]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d303      	bcc.n	800f7dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	68d9      	ldr	r1, [r3, #12]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	6838      	ldr	r0, [r7, #0]
 800f7e8:	f002 fbc4 	bl	8011f74 <memcpy>
	}
}
 800f7ec:	bf00      	nop
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f7fc:	f001 fc7a 	bl	80110f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f806:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f808:	e011      	b.n	800f82e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d012      	beq.n	800f838 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	3324      	adds	r3, #36	; 0x24
 800f816:	4618      	mov	r0, r3
 800f818:	f000 fd50 	bl	80102bc <xTaskRemoveFromEventList>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d001      	beq.n	800f826 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f822:	f000 fe27 	bl	8010474 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f826:	7bfb      	ldrb	r3, [r7, #15]
 800f828:	3b01      	subs	r3, #1
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f82e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f832:	2b00      	cmp	r3, #0
 800f834:	dce9      	bgt.n	800f80a <prvUnlockQueue+0x16>
 800f836:	e000      	b.n	800f83a <prvUnlockQueue+0x46>
					break;
 800f838:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	22ff      	movs	r2, #255	; 0xff
 800f83e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f842:	f001 fc87 	bl	8011154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f846:	f001 fc55 	bl	80110f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f850:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f852:	e011      	b.n	800f878 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	691b      	ldr	r3, [r3, #16]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d012      	beq.n	800f882 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	3310      	adds	r3, #16
 800f860:	4618      	mov	r0, r3
 800f862:	f000 fd2b 	bl	80102bc <xTaskRemoveFromEventList>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f86c:	f000 fe02 	bl	8010474 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f870:	7bbb      	ldrb	r3, [r7, #14]
 800f872:	3b01      	subs	r3, #1
 800f874:	b2db      	uxtb	r3, r3
 800f876:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	dce9      	bgt.n	800f854 <prvUnlockQueue+0x60>
 800f880:	e000      	b.n	800f884 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f882:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	22ff      	movs	r2, #255	; 0xff
 800f888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f88c:	f001 fc62 	bl	8011154 <vPortExitCritical>
}
 800f890:	bf00      	nop
 800f892:	3710      	adds	r7, #16
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f8a0:	f001 fc28 	bl	80110f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d102      	bne.n	800f8b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	60fb      	str	r3, [r7, #12]
 800f8b0:	e001      	b.n	800f8b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f8b6:	f001 fc4d 	bl	8011154 <vPortExitCritical>

	return xReturn;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3710      	adds	r7, #16
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f8cc:	f001 fc12 	bl	80110f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d102      	bne.n	800f8e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	60fb      	str	r3, [r7, #12]
 800f8e0:	e001      	b.n	800f8e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f8e6:	f001 fc35 	bl	8011154 <vPortExitCritical>

	return xReturn;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3710      	adds	r7, #16
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f8fe:	2300      	movs	r3, #0
 800f900:	60fb      	str	r3, [r7, #12]
 800f902:	e014      	b.n	800f92e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f904:	4a0f      	ldr	r2, [pc, #60]	; (800f944 <vQueueAddToRegistry+0x50>)
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d10b      	bne.n	800f928 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f910:	490c      	ldr	r1, [pc, #48]	; (800f944 <vQueueAddToRegistry+0x50>)
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	683a      	ldr	r2, [r7, #0]
 800f916:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f91a:	4a0a      	ldr	r2, [pc, #40]	; (800f944 <vQueueAddToRegistry+0x50>)
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	00db      	lsls	r3, r3, #3
 800f920:	4413      	add	r3, r2
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f926:	e006      	b.n	800f936 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	3301      	adds	r3, #1
 800f92c:	60fb      	str	r3, [r7, #12]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2b07      	cmp	r3, #7
 800f932:	d9e7      	bls.n	800f904 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f934:	bf00      	nop
 800f936:	bf00      	nop
 800f938:	3714      	adds	r7, #20
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr
 800f942:	bf00      	nop
 800f944:	20000d38 	.word	0x20000d38

0800f948 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b086      	sub	sp, #24
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f958:	f001 fbcc 	bl	80110f4 <vPortEnterCritical>
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f962:	b25b      	sxtb	r3, r3
 800f964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f968:	d103      	bne.n	800f972 <vQueueWaitForMessageRestricted+0x2a>
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	2200      	movs	r2, #0
 800f96e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f978:	b25b      	sxtb	r3, r3
 800f97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f97e:	d103      	bne.n	800f988 <vQueueWaitForMessageRestricted+0x40>
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	2200      	movs	r2, #0
 800f984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f988:	f001 fbe4 	bl	8011154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f990:	2b00      	cmp	r3, #0
 800f992:	d106      	bne.n	800f9a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	3324      	adds	r3, #36	; 0x24
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	68b9      	ldr	r1, [r7, #8]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f000 fc61 	bl	8010264 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f9a2:	6978      	ldr	r0, [r7, #20]
 800f9a4:	f7ff ff26 	bl	800f7f4 <prvUnlockQueue>
	}
 800f9a8:	bf00      	nop
 800f9aa:	3718      	adds	r7, #24
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b08e      	sub	sp, #56	; 0x38
 800f9b4:	af04      	add	r7, sp, #16
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	607a      	str	r2, [r7, #4]
 800f9bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d10a      	bne.n	800f9da <xTaskCreateStatic+0x2a>
	__asm volatile
 800f9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c8:	f383 8811 	msr	BASEPRI, r3
 800f9cc:	f3bf 8f6f 	isb	sy
 800f9d0:	f3bf 8f4f 	dsb	sy
 800f9d4:	623b      	str	r3, [r7, #32]
}
 800f9d6:	bf00      	nop
 800f9d8:	e7fe      	b.n	800f9d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d10a      	bne.n	800f9f6 <xTaskCreateStatic+0x46>
	__asm volatile
 800f9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e4:	f383 8811 	msr	BASEPRI, r3
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	61fb      	str	r3, [r7, #28]
}
 800f9f2:	bf00      	nop
 800f9f4:	e7fe      	b.n	800f9f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f9f6:	2360      	movs	r3, #96	; 0x60
 800f9f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	2b60      	cmp	r3, #96	; 0x60
 800f9fe:	d00a      	beq.n	800fa16 <xTaskCreateStatic+0x66>
	__asm volatile
 800fa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa04:	f383 8811 	msr	BASEPRI, r3
 800fa08:	f3bf 8f6f 	isb	sy
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	61bb      	str	r3, [r7, #24]
}
 800fa12:	bf00      	nop
 800fa14:	e7fe      	b.n	800fa14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fa16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d01e      	beq.n	800fa5c <xTaskCreateStatic+0xac>
 800fa1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d01b      	beq.n	800fa5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa30:	2202      	movs	r2, #2
 800fa32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fa36:	2300      	movs	r3, #0
 800fa38:	9303      	str	r3, [sp, #12]
 800fa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3c:	9302      	str	r3, [sp, #8]
 800fa3e:	f107 0314 	add.w	r3, r7, #20
 800fa42:	9301      	str	r3, [sp, #4]
 800fa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa46:	9300      	str	r3, [sp, #0]
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	68b9      	ldr	r1, [r7, #8]
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	f000 f850 	bl	800faf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa56:	f000 f8df 	bl	800fc18 <prvAddNewTaskToReadyList>
 800fa5a:	e001      	b.n	800fa60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fa60:	697b      	ldr	r3, [r7, #20]
	}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3728      	adds	r7, #40	; 0x28
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b08c      	sub	sp, #48	; 0x30
 800fa6e:	af04      	add	r7, sp, #16
 800fa70:	60f8      	str	r0, [r7, #12]
 800fa72:	60b9      	str	r1, [r7, #8]
 800fa74:	603b      	str	r3, [r7, #0]
 800fa76:	4613      	mov	r3, r2
 800fa78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fa7a:	88fb      	ldrh	r3, [r7, #6]
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f001 fc5a 	bl	8011338 <pvPortMalloc>
 800fa84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d00e      	beq.n	800faaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fa8c:	2060      	movs	r0, #96	; 0x60
 800fa8e:	f001 fc53 	bl	8011338 <pvPortMalloc>
 800fa92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d003      	beq.n	800faa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	697a      	ldr	r2, [r7, #20]
 800fa9e:	631a      	str	r2, [r3, #48]	; 0x30
 800faa0:	e005      	b.n	800faae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800faa2:	6978      	ldr	r0, [r7, #20]
 800faa4:	f001 fd18 	bl	80114d8 <vPortFree>
 800faa8:	e001      	b.n	800faae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800faaa:	2300      	movs	r3, #0
 800faac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d017      	beq.n	800fae4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fabc:	88fa      	ldrh	r2, [r7, #6]
 800fabe:	2300      	movs	r3, #0
 800fac0:	9303      	str	r3, [sp, #12]
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	9302      	str	r3, [sp, #8]
 800fac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac8:	9301      	str	r3, [sp, #4]
 800faca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800facc:	9300      	str	r3, [sp, #0]
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	68b9      	ldr	r1, [r7, #8]
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f000 f80e 	bl	800faf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fad8:	69f8      	ldr	r0, [r7, #28]
 800fada:	f000 f89d 	bl	800fc18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fade:	2301      	movs	r3, #1
 800fae0:	61bb      	str	r3, [r7, #24]
 800fae2:	e002      	b.n	800faea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fae4:	f04f 33ff 	mov.w	r3, #4294967295
 800fae8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800faea:	69bb      	ldr	r3, [r7, #24]
	}
 800faec:	4618      	mov	r0, r3
 800faee:	3720      	adds	r7, #32
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b088      	sub	sp, #32
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	607a      	str	r2, [r7, #4]
 800fb00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	009b      	lsls	r3, r3, #2
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	21a5      	movs	r1, #165	; 0xa5
 800fb0e:	f002 f9e5 	bl	8011edc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fb1c:	3b01      	subs	r3, #1
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	4413      	add	r3, r2
 800fb22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	f023 0307 	bic.w	r3, r3, #7
 800fb2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fb2c:	69bb      	ldr	r3, [r7, #24]
 800fb2e:	f003 0307 	and.w	r3, r3, #7
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d00a      	beq.n	800fb4c <prvInitialiseNewTask+0x58>
	__asm volatile
 800fb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3a:	f383 8811 	msr	BASEPRI, r3
 800fb3e:	f3bf 8f6f 	isb	sy
 800fb42:	f3bf 8f4f 	dsb	sy
 800fb46:	617b      	str	r3, [r7, #20]
}
 800fb48:	bf00      	nop
 800fb4a:	e7fe      	b.n	800fb4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d01f      	beq.n	800fb92 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb52:	2300      	movs	r3, #0
 800fb54:	61fb      	str	r3, [r7, #28]
 800fb56:	e012      	b.n	800fb7e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fb58:	68ba      	ldr	r2, [r7, #8]
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	7819      	ldrb	r1, [r3, #0]
 800fb60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	4413      	add	r3, r2
 800fb66:	3334      	adds	r3, #52	; 0x34
 800fb68:	460a      	mov	r2, r1
 800fb6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fb6c:	68ba      	ldr	r2, [r7, #8]
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	4413      	add	r3, r2
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d006      	beq.n	800fb86 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	61fb      	str	r3, [r7, #28]
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	2b0f      	cmp	r3, #15
 800fb82:	d9e9      	bls.n	800fb58 <prvInitialiseNewTask+0x64>
 800fb84:	e000      	b.n	800fb88 <prvInitialiseNewTask+0x94>
			{
				break;
 800fb86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fb90:	e003      	b.n	800fb9a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb94:	2200      	movs	r2, #0
 800fb96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9c:	2b37      	cmp	r3, #55	; 0x37
 800fb9e:	d901      	bls.n	800fba4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fba0:	2337      	movs	r3, #55	; 0x37
 800fba2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fba8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb8:	3304      	adds	r3, #4
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7ff f8be 	bl	800ed3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc2:	3318      	adds	r3, #24
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7ff f8b9 	bl	800ed3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800fbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe8:	2200      	movs	r2, #0
 800fbea:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbee:	2200      	movs	r2, #0
 800fbf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fbf4:	683a      	ldr	r2, [r7, #0]
 800fbf6:	68f9      	ldr	r1, [r7, #12]
 800fbf8:	69b8      	ldr	r0, [r7, #24]
 800fbfa:	f001 f94d 	bl	8010e98 <pxPortInitialiseStack>
 800fbfe:	4602      	mov	r2, r0
 800fc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d002      	beq.n	800fc10 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc10:	bf00      	nop
 800fc12:	3720      	adds	r7, #32
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fc20:	f001 fa68 	bl	80110f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fc24:	4b2d      	ldr	r3, [pc, #180]	; (800fcdc <prvAddNewTaskToReadyList+0xc4>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	4a2c      	ldr	r2, [pc, #176]	; (800fcdc <prvAddNewTaskToReadyList+0xc4>)
 800fc2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fc2e:	4b2c      	ldr	r3, [pc, #176]	; (800fce0 <prvAddNewTaskToReadyList+0xc8>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d109      	bne.n	800fc4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fc36:	4a2a      	ldr	r2, [pc, #168]	; (800fce0 <prvAddNewTaskToReadyList+0xc8>)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fc3c:	4b27      	ldr	r3, [pc, #156]	; (800fcdc <prvAddNewTaskToReadyList+0xc4>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d110      	bne.n	800fc66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fc44:	f000 fc3c 	bl	80104c0 <prvInitialiseTaskLists>
 800fc48:	e00d      	b.n	800fc66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fc4a:	4b26      	ldr	r3, [pc, #152]	; (800fce4 <prvAddNewTaskToReadyList+0xcc>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d109      	bne.n	800fc66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fc52:	4b23      	ldr	r3, [pc, #140]	; (800fce0 <prvAddNewTaskToReadyList+0xc8>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d802      	bhi.n	800fc66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fc60:	4a1f      	ldr	r2, [pc, #124]	; (800fce0 <prvAddNewTaskToReadyList+0xc8>)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fc66:	4b20      	ldr	r3, [pc, #128]	; (800fce8 <prvAddNewTaskToReadyList+0xd0>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	4a1e      	ldr	r2, [pc, #120]	; (800fce8 <prvAddNewTaskToReadyList+0xd0>)
 800fc6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fc70:	4b1d      	ldr	r3, [pc, #116]	; (800fce8 <prvAddNewTaskToReadyList+0xd0>)
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc7c:	4b1b      	ldr	r3, [pc, #108]	; (800fcec <prvAddNewTaskToReadyList+0xd4>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d903      	bls.n	800fc8c <prvAddNewTaskToReadyList+0x74>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc88:	4a18      	ldr	r2, [pc, #96]	; (800fcec <prvAddNewTaskToReadyList+0xd4>)
 800fc8a:	6013      	str	r3, [r2, #0]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc90:	4613      	mov	r3, r2
 800fc92:	009b      	lsls	r3, r3, #2
 800fc94:	4413      	add	r3, r2
 800fc96:	009b      	lsls	r3, r3, #2
 800fc98:	4a15      	ldr	r2, [pc, #84]	; (800fcf0 <prvAddNewTaskToReadyList+0xd8>)
 800fc9a:	441a      	add	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	3304      	adds	r3, #4
 800fca0:	4619      	mov	r1, r3
 800fca2:	4610      	mov	r0, r2
 800fca4:	f7ff f857 	bl	800ed56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fca8:	f001 fa54 	bl	8011154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fcac:	4b0d      	ldr	r3, [pc, #52]	; (800fce4 <prvAddNewTaskToReadyList+0xcc>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d00e      	beq.n	800fcd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fcb4:	4b0a      	ldr	r3, [pc, #40]	; (800fce0 <prvAddNewTaskToReadyList+0xc8>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d207      	bcs.n	800fcd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fcc2:	4b0c      	ldr	r3, [pc, #48]	; (800fcf4 <prvAddNewTaskToReadyList+0xdc>)
 800fcc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcc8:	601a      	str	r2, [r3, #0]
 800fcca:	f3bf 8f4f 	dsb	sy
 800fcce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcd2:	bf00      	nop
 800fcd4:	3708      	adds	r7, #8
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	2000124c 	.word	0x2000124c
 800fce0:	20000d78 	.word	0x20000d78
 800fce4:	20001258 	.word	0x20001258
 800fce8:	20001268 	.word	0x20001268
 800fcec:	20001254 	.word	0x20001254
 800fcf0:	20000d7c 	.word	0x20000d7c
 800fcf4:	e000ed04 	.word	0xe000ed04

0800fcf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fd00:	2300      	movs	r3, #0
 800fd02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d017      	beq.n	800fd3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fd0a:	4b13      	ldr	r3, [pc, #76]	; (800fd58 <vTaskDelay+0x60>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d00a      	beq.n	800fd28 <vTaskDelay+0x30>
	__asm volatile
 800fd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd16:	f383 8811 	msr	BASEPRI, r3
 800fd1a:	f3bf 8f6f 	isb	sy
 800fd1e:	f3bf 8f4f 	dsb	sy
 800fd22:	60bb      	str	r3, [r7, #8]
}
 800fd24:	bf00      	nop
 800fd26:	e7fe      	b.n	800fd26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fd28:	f000 f880 	bl	800fe2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fd2c:	2100      	movs	r1, #0
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 fd10 	bl	8010754 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fd34:	f000 f888 	bl	800fe48 <xTaskResumeAll>
 800fd38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d107      	bne.n	800fd50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fd40:	4b06      	ldr	r3, [pc, #24]	; (800fd5c <vTaskDelay+0x64>)
 800fd42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd46:	601a      	str	r2, [r3, #0]
 800fd48:	f3bf 8f4f 	dsb	sy
 800fd4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd50:	bf00      	nop
 800fd52:	3710      	adds	r7, #16
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	20001274 	.word	0x20001274
 800fd5c:	e000ed04 	.word	0xe000ed04

0800fd60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08a      	sub	sp, #40	; 0x28
 800fd64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd66:	2300      	movs	r3, #0
 800fd68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fd6e:	463a      	mov	r2, r7
 800fd70:	1d39      	adds	r1, r7, #4
 800fd72:	f107 0308 	add.w	r3, r7, #8
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fe ff8c 	bl	800ec94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fd7c:	6839      	ldr	r1, [r7, #0]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	9202      	str	r2, [sp, #8]
 800fd84:	9301      	str	r3, [sp, #4]
 800fd86:	2300      	movs	r3, #0
 800fd88:	9300      	str	r3, [sp, #0]
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	460a      	mov	r2, r1
 800fd8e:	4921      	ldr	r1, [pc, #132]	; (800fe14 <vTaskStartScheduler+0xb4>)
 800fd90:	4821      	ldr	r0, [pc, #132]	; (800fe18 <vTaskStartScheduler+0xb8>)
 800fd92:	f7ff fe0d 	bl	800f9b0 <xTaskCreateStatic>
 800fd96:	4603      	mov	r3, r0
 800fd98:	4a20      	ldr	r2, [pc, #128]	; (800fe1c <vTaskStartScheduler+0xbc>)
 800fd9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fd9c:	4b1f      	ldr	r3, [pc, #124]	; (800fe1c <vTaskStartScheduler+0xbc>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d002      	beq.n	800fdaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fda4:	2301      	movs	r3, #1
 800fda6:	617b      	str	r3, [r7, #20]
 800fda8:	e001      	b.n	800fdae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d102      	bne.n	800fdba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fdb4:	f000 fd22 	bl	80107fc <xTimerCreateTimerTask>
 800fdb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d116      	bne.n	800fdee <vTaskStartScheduler+0x8e>
	__asm volatile
 800fdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc4:	f383 8811 	msr	BASEPRI, r3
 800fdc8:	f3bf 8f6f 	isb	sy
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	613b      	str	r3, [r7, #16]
}
 800fdd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fdd4:	4b12      	ldr	r3, [pc, #72]	; (800fe20 <vTaskStartScheduler+0xc0>)
 800fdd6:	f04f 32ff 	mov.w	r2, #4294967295
 800fdda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fddc:	4b11      	ldr	r3, [pc, #68]	; (800fe24 <vTaskStartScheduler+0xc4>)
 800fdde:	2201      	movs	r2, #1
 800fde0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fde2:	4b11      	ldr	r3, [pc, #68]	; (800fe28 <vTaskStartScheduler+0xc8>)
 800fde4:	2200      	movs	r2, #0
 800fde6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fde8:	f001 f8e2 	bl	8010fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fdec:	e00e      	b.n	800fe0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdf4:	d10a      	bne.n	800fe0c <vTaskStartScheduler+0xac>
	__asm volatile
 800fdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfa:	f383 8811 	msr	BASEPRI, r3
 800fdfe:	f3bf 8f6f 	isb	sy
 800fe02:	f3bf 8f4f 	dsb	sy
 800fe06:	60fb      	str	r3, [r7, #12]
}
 800fe08:	bf00      	nop
 800fe0a:	e7fe      	b.n	800fe0a <vTaskStartScheduler+0xaa>
}
 800fe0c:	bf00      	nop
 800fe0e:	3718      	adds	r7, #24
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	08012754 	.word	0x08012754
 800fe18:	0801048d 	.word	0x0801048d
 800fe1c:	20001270 	.word	0x20001270
 800fe20:	2000126c 	.word	0x2000126c
 800fe24:	20001258 	.word	0x20001258
 800fe28:	20001250 	.word	0x20001250

0800fe2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fe30:	4b04      	ldr	r3, [pc, #16]	; (800fe44 <vTaskSuspendAll+0x18>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	3301      	adds	r3, #1
 800fe36:	4a03      	ldr	r2, [pc, #12]	; (800fe44 <vTaskSuspendAll+0x18>)
 800fe38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fe3a:	bf00      	nop
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr
 800fe44:	20001274 	.word	0x20001274

0800fe48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fe52:	2300      	movs	r3, #0
 800fe54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fe56:	4b42      	ldr	r3, [pc, #264]	; (800ff60 <xTaskResumeAll+0x118>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d10a      	bne.n	800fe74 <xTaskResumeAll+0x2c>
	__asm volatile
 800fe5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	603b      	str	r3, [r7, #0]
}
 800fe70:	bf00      	nop
 800fe72:	e7fe      	b.n	800fe72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fe74:	f001 f93e 	bl	80110f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fe78:	4b39      	ldr	r3, [pc, #228]	; (800ff60 <xTaskResumeAll+0x118>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	3b01      	subs	r3, #1
 800fe7e:	4a38      	ldr	r2, [pc, #224]	; (800ff60 <xTaskResumeAll+0x118>)
 800fe80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe82:	4b37      	ldr	r3, [pc, #220]	; (800ff60 <xTaskResumeAll+0x118>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d162      	bne.n	800ff50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fe8a:	4b36      	ldr	r3, [pc, #216]	; (800ff64 <xTaskResumeAll+0x11c>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d05e      	beq.n	800ff50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe92:	e02f      	b.n	800fef4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe94:	4b34      	ldr	r3, [pc, #208]	; (800ff68 <xTaskResumeAll+0x120>)
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	3318      	adds	r3, #24
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fe ffb5 	bl	800ee10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	3304      	adds	r3, #4
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fe ffb0 	bl	800ee10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb4:	4b2d      	ldr	r3, [pc, #180]	; (800ff6c <xTaskResumeAll+0x124>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d903      	bls.n	800fec4 <xTaskResumeAll+0x7c>
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fec0:	4a2a      	ldr	r2, [pc, #168]	; (800ff6c <xTaskResumeAll+0x124>)
 800fec2:	6013      	str	r3, [r2, #0]
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec8:	4613      	mov	r3, r2
 800feca:	009b      	lsls	r3, r3, #2
 800fecc:	4413      	add	r3, r2
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	4a27      	ldr	r2, [pc, #156]	; (800ff70 <xTaskResumeAll+0x128>)
 800fed2:	441a      	add	r2, r3
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	3304      	adds	r3, #4
 800fed8:	4619      	mov	r1, r3
 800feda:	4610      	mov	r0, r2
 800fedc:	f7fe ff3b 	bl	800ed56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fee4:	4b23      	ldr	r3, [pc, #140]	; (800ff74 <xTaskResumeAll+0x12c>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feea:	429a      	cmp	r2, r3
 800feec:	d302      	bcc.n	800fef4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800feee:	4b22      	ldr	r3, [pc, #136]	; (800ff78 <xTaskResumeAll+0x130>)
 800fef0:	2201      	movs	r2, #1
 800fef2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fef4:	4b1c      	ldr	r3, [pc, #112]	; (800ff68 <xTaskResumeAll+0x120>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1cb      	bne.n	800fe94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d001      	beq.n	800ff06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ff02:	f000 fb7b 	bl	80105fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ff06:	4b1d      	ldr	r3, [pc, #116]	; (800ff7c <xTaskResumeAll+0x134>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d010      	beq.n	800ff34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ff12:	f000 f847 	bl	800ffa4 <xTaskIncrementTick>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d002      	beq.n	800ff22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ff1c:	4b16      	ldr	r3, [pc, #88]	; (800ff78 <xTaskResumeAll+0x130>)
 800ff1e:	2201      	movs	r2, #1
 800ff20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	3b01      	subs	r3, #1
 800ff26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1f1      	bne.n	800ff12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ff2e:	4b13      	ldr	r3, [pc, #76]	; (800ff7c <xTaskResumeAll+0x134>)
 800ff30:	2200      	movs	r2, #0
 800ff32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ff34:	4b10      	ldr	r3, [pc, #64]	; (800ff78 <xTaskResumeAll+0x130>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d009      	beq.n	800ff50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ff40:	4b0f      	ldr	r3, [pc, #60]	; (800ff80 <xTaskResumeAll+0x138>)
 800ff42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff46:	601a      	str	r2, [r3, #0]
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff50:	f001 f900 	bl	8011154 <vPortExitCritical>

	return xAlreadyYielded;
 800ff54:	68bb      	ldr	r3, [r7, #8]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	20001274 	.word	0x20001274
 800ff64:	2000124c 	.word	0x2000124c
 800ff68:	2000120c 	.word	0x2000120c
 800ff6c:	20001254 	.word	0x20001254
 800ff70:	20000d7c 	.word	0x20000d7c
 800ff74:	20000d78 	.word	0x20000d78
 800ff78:	20001260 	.word	0x20001260
 800ff7c:	2000125c 	.word	0x2000125c
 800ff80:	e000ed04 	.word	0xe000ed04

0800ff84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ff84:	b480      	push	{r7}
 800ff86:	b083      	sub	sp, #12
 800ff88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ff8a:	4b05      	ldr	r3, [pc, #20]	; (800ffa0 <xTaskGetTickCount+0x1c>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ff90:	687b      	ldr	r3, [r7, #4]
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	370c      	adds	r7, #12
 800ff96:	46bd      	mov	sp, r7
 800ff98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9c:	4770      	bx	lr
 800ff9e:	bf00      	nop
 800ffa0:	20001250 	.word	0x20001250

0800ffa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffae:	4b4f      	ldr	r3, [pc, #316]	; (80100ec <xTaskIncrementTick+0x148>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f040 808f 	bne.w	80100d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ffb8:	4b4d      	ldr	r3, [pc, #308]	; (80100f0 <xTaskIncrementTick+0x14c>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ffc0:	4a4b      	ldr	r2, [pc, #300]	; (80100f0 <xTaskIncrementTick+0x14c>)
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d120      	bne.n	801000e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ffcc:	4b49      	ldr	r3, [pc, #292]	; (80100f4 <xTaskIncrementTick+0x150>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d00a      	beq.n	800ffec <xTaskIncrementTick+0x48>
	__asm volatile
 800ffd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffda:	f383 8811 	msr	BASEPRI, r3
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	f3bf 8f4f 	dsb	sy
 800ffe6:	603b      	str	r3, [r7, #0]
}
 800ffe8:	bf00      	nop
 800ffea:	e7fe      	b.n	800ffea <xTaskIncrementTick+0x46>
 800ffec:	4b41      	ldr	r3, [pc, #260]	; (80100f4 <xTaskIncrementTick+0x150>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	60fb      	str	r3, [r7, #12]
 800fff2:	4b41      	ldr	r3, [pc, #260]	; (80100f8 <xTaskIncrementTick+0x154>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4a3f      	ldr	r2, [pc, #252]	; (80100f4 <xTaskIncrementTick+0x150>)
 800fff8:	6013      	str	r3, [r2, #0]
 800fffa:	4a3f      	ldr	r2, [pc, #252]	; (80100f8 <xTaskIncrementTick+0x154>)
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6013      	str	r3, [r2, #0]
 8010000:	4b3e      	ldr	r3, [pc, #248]	; (80100fc <xTaskIncrementTick+0x158>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	3301      	adds	r3, #1
 8010006:	4a3d      	ldr	r2, [pc, #244]	; (80100fc <xTaskIncrementTick+0x158>)
 8010008:	6013      	str	r3, [r2, #0]
 801000a:	f000 faf7 	bl	80105fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801000e:	4b3c      	ldr	r3, [pc, #240]	; (8010100 <xTaskIncrementTick+0x15c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	693a      	ldr	r2, [r7, #16]
 8010014:	429a      	cmp	r2, r3
 8010016:	d349      	bcc.n	80100ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010018:	4b36      	ldr	r3, [pc, #216]	; (80100f4 <xTaskIncrementTick+0x150>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d104      	bne.n	801002c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010022:	4b37      	ldr	r3, [pc, #220]	; (8010100 <xTaskIncrementTick+0x15c>)
 8010024:	f04f 32ff 	mov.w	r2, #4294967295
 8010028:	601a      	str	r2, [r3, #0]
					break;
 801002a:	e03f      	b.n	80100ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801002c:	4b31      	ldr	r3, [pc, #196]	; (80100f4 <xTaskIncrementTick+0x150>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801003c:	693a      	ldr	r2, [r7, #16]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	429a      	cmp	r2, r3
 8010042:	d203      	bcs.n	801004c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010044:	4a2e      	ldr	r2, [pc, #184]	; (8010100 <xTaskIncrementTick+0x15c>)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801004a:	e02f      	b.n	80100ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	3304      	adds	r3, #4
 8010050:	4618      	mov	r0, r3
 8010052:	f7fe fedd 	bl	800ee10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801005a:	2b00      	cmp	r3, #0
 801005c:	d004      	beq.n	8010068 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	3318      	adds	r3, #24
 8010062:	4618      	mov	r0, r3
 8010064:	f7fe fed4 	bl	800ee10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006c:	4b25      	ldr	r3, [pc, #148]	; (8010104 <xTaskIncrementTick+0x160>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	429a      	cmp	r2, r3
 8010072:	d903      	bls.n	801007c <xTaskIncrementTick+0xd8>
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010078:	4a22      	ldr	r2, [pc, #136]	; (8010104 <xTaskIncrementTick+0x160>)
 801007a:	6013      	str	r3, [r2, #0]
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010080:	4613      	mov	r3, r2
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	4413      	add	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	4a1f      	ldr	r2, [pc, #124]	; (8010108 <xTaskIncrementTick+0x164>)
 801008a:	441a      	add	r2, r3
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	3304      	adds	r3, #4
 8010090:	4619      	mov	r1, r3
 8010092:	4610      	mov	r0, r2
 8010094:	f7fe fe5f 	bl	800ed56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009c:	4b1b      	ldr	r3, [pc, #108]	; (801010c <xTaskIncrementTick+0x168>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d3b8      	bcc.n	8010018 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80100a6:	2301      	movs	r3, #1
 80100a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100aa:	e7b5      	b.n	8010018 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80100ac:	4b17      	ldr	r3, [pc, #92]	; (801010c <xTaskIncrementTick+0x168>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b2:	4915      	ldr	r1, [pc, #84]	; (8010108 <xTaskIncrementTick+0x164>)
 80100b4:	4613      	mov	r3, r2
 80100b6:	009b      	lsls	r3, r3, #2
 80100b8:	4413      	add	r3, r2
 80100ba:	009b      	lsls	r3, r3, #2
 80100bc:	440b      	add	r3, r1
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	d901      	bls.n	80100c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80100c4:	2301      	movs	r3, #1
 80100c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80100c8:	4b11      	ldr	r3, [pc, #68]	; (8010110 <xTaskIncrementTick+0x16c>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d007      	beq.n	80100e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80100d0:	2301      	movs	r3, #1
 80100d2:	617b      	str	r3, [r7, #20]
 80100d4:	e004      	b.n	80100e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80100d6:	4b0f      	ldr	r3, [pc, #60]	; (8010114 <xTaskIncrementTick+0x170>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	3301      	adds	r3, #1
 80100dc:	4a0d      	ldr	r2, [pc, #52]	; (8010114 <xTaskIncrementTick+0x170>)
 80100de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80100e0:	697b      	ldr	r3, [r7, #20]
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3718      	adds	r7, #24
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	20001274 	.word	0x20001274
 80100f0:	20001250 	.word	0x20001250
 80100f4:	20001204 	.word	0x20001204
 80100f8:	20001208 	.word	0x20001208
 80100fc:	20001264 	.word	0x20001264
 8010100:	2000126c 	.word	0x2000126c
 8010104:	20001254 	.word	0x20001254
 8010108:	20000d7c 	.word	0x20000d7c
 801010c:	20000d78 	.word	0x20000d78
 8010110:	20001260 	.word	0x20001260
 8010114:	2000125c 	.word	0x2000125c

08010118 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b086      	sub	sp, #24
 801011c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801011e:	4b3a      	ldr	r3, [pc, #232]	; (8010208 <vTaskSwitchContext+0xf0>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d003      	beq.n	801012e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010126:	4b39      	ldr	r3, [pc, #228]	; (801020c <vTaskSwitchContext+0xf4>)
 8010128:	2201      	movs	r2, #1
 801012a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801012c:	e068      	b.n	8010200 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 801012e:	4b37      	ldr	r3, [pc, #220]	; (801020c <vTaskSwitchContext+0xf4>)
 8010130:	2200      	movs	r2, #0
 8010132:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010134:	4b36      	ldr	r3, [pc, #216]	; (8010210 <vTaskSwitchContext+0xf8>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801013a:	613b      	str	r3, [r7, #16]
 801013c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8010140:	60fb      	str	r3, [r7, #12]
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	429a      	cmp	r2, r3
 801014a:	d111      	bne.n	8010170 <vTaskSwitchContext+0x58>
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	3304      	adds	r3, #4
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68fa      	ldr	r2, [r7, #12]
 8010154:	429a      	cmp	r2, r3
 8010156:	d10b      	bne.n	8010170 <vTaskSwitchContext+0x58>
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	3308      	adds	r3, #8
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	429a      	cmp	r2, r3
 8010162:	d105      	bne.n	8010170 <vTaskSwitchContext+0x58>
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	330c      	adds	r3, #12
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	68fa      	ldr	r2, [r7, #12]
 801016c:	429a      	cmp	r2, r3
 801016e:	d008      	beq.n	8010182 <vTaskSwitchContext+0x6a>
 8010170:	4b27      	ldr	r3, [pc, #156]	; (8010210 <vTaskSwitchContext+0xf8>)
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	4b26      	ldr	r3, [pc, #152]	; (8010210 <vTaskSwitchContext+0xf8>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	3334      	adds	r3, #52	; 0x34
 801017a:	4619      	mov	r1, r3
 801017c:	4610      	mov	r0, r2
 801017e:	f7f0 ff24 	bl	8000fca <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010182:	4b24      	ldr	r3, [pc, #144]	; (8010214 <vTaskSwitchContext+0xfc>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	617b      	str	r3, [r7, #20]
 8010188:	e010      	b.n	80101ac <vTaskSwitchContext+0x94>
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d10a      	bne.n	80101a6 <vTaskSwitchContext+0x8e>
	__asm volatile
 8010190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010194:	f383 8811 	msr	BASEPRI, r3
 8010198:	f3bf 8f6f 	isb	sy
 801019c:	f3bf 8f4f 	dsb	sy
 80101a0:	607b      	str	r3, [r7, #4]
}
 80101a2:	bf00      	nop
 80101a4:	e7fe      	b.n	80101a4 <vTaskSwitchContext+0x8c>
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	3b01      	subs	r3, #1
 80101aa:	617b      	str	r3, [r7, #20]
 80101ac:	491a      	ldr	r1, [pc, #104]	; (8010218 <vTaskSwitchContext+0x100>)
 80101ae:	697a      	ldr	r2, [r7, #20]
 80101b0:	4613      	mov	r3, r2
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	4413      	add	r3, r2
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	440b      	add	r3, r1
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d0e4      	beq.n	801018a <vTaskSwitchContext+0x72>
 80101c0:	697a      	ldr	r2, [r7, #20]
 80101c2:	4613      	mov	r3, r2
 80101c4:	009b      	lsls	r3, r3, #2
 80101c6:	4413      	add	r3, r2
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	4a13      	ldr	r2, [pc, #76]	; (8010218 <vTaskSwitchContext+0x100>)
 80101cc:	4413      	add	r3, r2
 80101ce:	60bb      	str	r3, [r7, #8]
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	685a      	ldr	r2, [r3, #4]
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	605a      	str	r2, [r3, #4]
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	685a      	ldr	r2, [r3, #4]
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	3308      	adds	r3, #8
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d104      	bne.n	80101f0 <vTaskSwitchContext+0xd8>
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	685a      	ldr	r2, [r3, #4]
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	605a      	str	r2, [r3, #4]
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	4a06      	ldr	r2, [pc, #24]	; (8010210 <vTaskSwitchContext+0xf8>)
 80101f8:	6013      	str	r3, [r2, #0]
 80101fa:	4a06      	ldr	r2, [pc, #24]	; (8010214 <vTaskSwitchContext+0xfc>)
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	6013      	str	r3, [r2, #0]
}
 8010200:	bf00      	nop
 8010202:	3718      	adds	r7, #24
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	20001274 	.word	0x20001274
 801020c:	20001260 	.word	0x20001260
 8010210:	20000d78 	.word	0x20000d78
 8010214:	20001254 	.word	0x20001254
 8010218:	20000d7c 	.word	0x20000d7c

0801021c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d10a      	bne.n	8010242 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801022c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010230:	f383 8811 	msr	BASEPRI, r3
 8010234:	f3bf 8f6f 	isb	sy
 8010238:	f3bf 8f4f 	dsb	sy
 801023c:	60fb      	str	r3, [r7, #12]
}
 801023e:	bf00      	nop
 8010240:	e7fe      	b.n	8010240 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010242:	4b07      	ldr	r3, [pc, #28]	; (8010260 <vTaskPlaceOnEventList+0x44>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	3318      	adds	r3, #24
 8010248:	4619      	mov	r1, r3
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f7fe fda7 	bl	800ed9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010250:	2101      	movs	r1, #1
 8010252:	6838      	ldr	r0, [r7, #0]
 8010254:	f000 fa7e 	bl	8010754 <prvAddCurrentTaskToDelayedList>
}
 8010258:	bf00      	nop
 801025a:	3710      	adds	r7, #16
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}
 8010260:	20000d78 	.word	0x20000d78

08010264 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010264:	b580      	push	{r7, lr}
 8010266:	b086      	sub	sp, #24
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d10a      	bne.n	801028c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027a:	f383 8811 	msr	BASEPRI, r3
 801027e:	f3bf 8f6f 	isb	sy
 8010282:	f3bf 8f4f 	dsb	sy
 8010286:	617b      	str	r3, [r7, #20]
}
 8010288:	bf00      	nop
 801028a:	e7fe      	b.n	801028a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801028c:	4b0a      	ldr	r3, [pc, #40]	; (80102b8 <vTaskPlaceOnEventListRestricted+0x54>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	3318      	adds	r3, #24
 8010292:	4619      	mov	r1, r3
 8010294:	68f8      	ldr	r0, [r7, #12]
 8010296:	f7fe fd5e 	bl	800ed56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d002      	beq.n	80102a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80102a0:	f04f 33ff 	mov.w	r3, #4294967295
 80102a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80102a6:	6879      	ldr	r1, [r7, #4]
 80102a8:	68b8      	ldr	r0, [r7, #8]
 80102aa:	f000 fa53 	bl	8010754 <prvAddCurrentTaskToDelayedList>
	}
 80102ae:	bf00      	nop
 80102b0:	3718      	adds	r7, #24
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	20000d78 	.word	0x20000d78

080102bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	68db      	ldr	r3, [r3, #12]
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d10a      	bne.n	80102e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80102d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	60fb      	str	r3, [r7, #12]
}
 80102e4:	bf00      	nop
 80102e6:	e7fe      	b.n	80102e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	3318      	adds	r3, #24
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7fe fd8f 	bl	800ee10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102f2:	4b1e      	ldr	r3, [pc, #120]	; (801036c <xTaskRemoveFromEventList+0xb0>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d11d      	bne.n	8010336 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	3304      	adds	r3, #4
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fe fd86 	bl	800ee10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010308:	4b19      	ldr	r3, [pc, #100]	; (8010370 <xTaskRemoveFromEventList+0xb4>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	429a      	cmp	r2, r3
 801030e:	d903      	bls.n	8010318 <xTaskRemoveFromEventList+0x5c>
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010314:	4a16      	ldr	r2, [pc, #88]	; (8010370 <xTaskRemoveFromEventList+0xb4>)
 8010316:	6013      	str	r3, [r2, #0]
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801031c:	4613      	mov	r3, r2
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	4413      	add	r3, r2
 8010322:	009b      	lsls	r3, r3, #2
 8010324:	4a13      	ldr	r2, [pc, #76]	; (8010374 <xTaskRemoveFromEventList+0xb8>)
 8010326:	441a      	add	r2, r3
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	3304      	adds	r3, #4
 801032c:	4619      	mov	r1, r3
 801032e:	4610      	mov	r0, r2
 8010330:	f7fe fd11 	bl	800ed56 <vListInsertEnd>
 8010334:	e005      	b.n	8010342 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	3318      	adds	r3, #24
 801033a:	4619      	mov	r1, r3
 801033c:	480e      	ldr	r0, [pc, #56]	; (8010378 <xTaskRemoveFromEventList+0xbc>)
 801033e:	f7fe fd0a 	bl	800ed56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010346:	4b0d      	ldr	r3, [pc, #52]	; (801037c <xTaskRemoveFromEventList+0xc0>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801034c:	429a      	cmp	r2, r3
 801034e:	d905      	bls.n	801035c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010350:	2301      	movs	r3, #1
 8010352:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010354:	4b0a      	ldr	r3, [pc, #40]	; (8010380 <xTaskRemoveFromEventList+0xc4>)
 8010356:	2201      	movs	r2, #1
 8010358:	601a      	str	r2, [r3, #0]
 801035a:	e001      	b.n	8010360 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801035c:	2300      	movs	r3, #0
 801035e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010360:	697b      	ldr	r3, [r7, #20]
}
 8010362:	4618      	mov	r0, r3
 8010364:	3718      	adds	r7, #24
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	20001274 	.word	0x20001274
 8010370:	20001254 	.word	0x20001254
 8010374:	20000d7c 	.word	0x20000d7c
 8010378:	2000120c 	.word	0x2000120c
 801037c:	20000d78 	.word	0x20000d78
 8010380:	20001260 	.word	0x20001260

08010384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801038c:	4b06      	ldr	r3, [pc, #24]	; (80103a8 <vTaskInternalSetTimeOutState+0x24>)
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010394:	4b05      	ldr	r3, [pc, #20]	; (80103ac <vTaskInternalSetTimeOutState+0x28>)
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	605a      	str	r2, [r3, #4]
}
 801039c:	bf00      	nop
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr
 80103a8:	20001264 	.word	0x20001264
 80103ac:	20001250 	.word	0x20001250

080103b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b088      	sub	sp, #32
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d10a      	bne.n	80103d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80103c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c4:	f383 8811 	msr	BASEPRI, r3
 80103c8:	f3bf 8f6f 	isb	sy
 80103cc:	f3bf 8f4f 	dsb	sy
 80103d0:	613b      	str	r3, [r7, #16]
}
 80103d2:	bf00      	nop
 80103d4:	e7fe      	b.n	80103d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d10a      	bne.n	80103f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80103dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e0:	f383 8811 	msr	BASEPRI, r3
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	f3bf 8f4f 	dsb	sy
 80103ec:	60fb      	str	r3, [r7, #12]
}
 80103ee:	bf00      	nop
 80103f0:	e7fe      	b.n	80103f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80103f2:	f000 fe7f 	bl	80110f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80103f6:	4b1d      	ldr	r3, [pc, #116]	; (801046c <xTaskCheckForTimeOut+0xbc>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	69ba      	ldr	r2, [r7, #24]
 8010402:	1ad3      	subs	r3, r2, r3
 8010404:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801040e:	d102      	bne.n	8010416 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010410:	2300      	movs	r3, #0
 8010412:	61fb      	str	r3, [r7, #28]
 8010414:	e023      	b.n	801045e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681a      	ldr	r2, [r3, #0]
 801041a:	4b15      	ldr	r3, [pc, #84]	; (8010470 <xTaskCheckForTimeOut+0xc0>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	429a      	cmp	r2, r3
 8010420:	d007      	beq.n	8010432 <xTaskCheckForTimeOut+0x82>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	69ba      	ldr	r2, [r7, #24]
 8010428:	429a      	cmp	r2, r3
 801042a:	d302      	bcc.n	8010432 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801042c:	2301      	movs	r3, #1
 801042e:	61fb      	str	r3, [r7, #28]
 8010430:	e015      	b.n	801045e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	697a      	ldr	r2, [r7, #20]
 8010438:	429a      	cmp	r2, r3
 801043a:	d20b      	bcs.n	8010454 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	1ad2      	subs	r2, r2, r3
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f7ff ff9b 	bl	8010384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801044e:	2300      	movs	r3, #0
 8010450:	61fb      	str	r3, [r7, #28]
 8010452:	e004      	b.n	801045e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	2200      	movs	r2, #0
 8010458:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801045a:	2301      	movs	r3, #1
 801045c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801045e:	f000 fe79 	bl	8011154 <vPortExitCritical>

	return xReturn;
 8010462:	69fb      	ldr	r3, [r7, #28]
}
 8010464:	4618      	mov	r0, r3
 8010466:	3720      	adds	r7, #32
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	20001250 	.word	0x20001250
 8010470:	20001264 	.word	0x20001264

08010474 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010474:	b480      	push	{r7}
 8010476:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010478:	4b03      	ldr	r3, [pc, #12]	; (8010488 <vTaskMissedYield+0x14>)
 801047a:	2201      	movs	r2, #1
 801047c:	601a      	str	r2, [r3, #0]
}
 801047e:	bf00      	nop
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr
 8010488:	20001260 	.word	0x20001260

0801048c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010494:	f000 f854 	bl	8010540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010498:	4b07      	ldr	r3, [pc, #28]	; (80104b8 <prvIdleTask+0x2c>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d907      	bls.n	80104b0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80104a0:	4b06      	ldr	r3, [pc, #24]	; (80104bc <prvIdleTask+0x30>)
 80104a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104a6:	601a      	str	r2, [r3, #0]
 80104a8:	f3bf 8f4f 	dsb	sy
 80104ac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80104b0:	f7f0 fd84 	bl	8000fbc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80104b4:	e7ee      	b.n	8010494 <prvIdleTask+0x8>
 80104b6:	bf00      	nop
 80104b8:	20000d7c 	.word	0x20000d7c
 80104bc:	e000ed04 	.word	0xe000ed04

080104c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80104c6:	2300      	movs	r3, #0
 80104c8:	607b      	str	r3, [r7, #4]
 80104ca:	e00c      	b.n	80104e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	4613      	mov	r3, r2
 80104d0:	009b      	lsls	r3, r3, #2
 80104d2:	4413      	add	r3, r2
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	4a12      	ldr	r2, [pc, #72]	; (8010520 <prvInitialiseTaskLists+0x60>)
 80104d8:	4413      	add	r3, r2
 80104da:	4618      	mov	r0, r3
 80104dc:	f7fe fc0e 	bl	800ecfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	3301      	adds	r3, #1
 80104e4:	607b      	str	r3, [r7, #4]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2b37      	cmp	r3, #55	; 0x37
 80104ea:	d9ef      	bls.n	80104cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80104ec:	480d      	ldr	r0, [pc, #52]	; (8010524 <prvInitialiseTaskLists+0x64>)
 80104ee:	f7fe fc05 	bl	800ecfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80104f2:	480d      	ldr	r0, [pc, #52]	; (8010528 <prvInitialiseTaskLists+0x68>)
 80104f4:	f7fe fc02 	bl	800ecfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80104f8:	480c      	ldr	r0, [pc, #48]	; (801052c <prvInitialiseTaskLists+0x6c>)
 80104fa:	f7fe fbff 	bl	800ecfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80104fe:	480c      	ldr	r0, [pc, #48]	; (8010530 <prvInitialiseTaskLists+0x70>)
 8010500:	f7fe fbfc 	bl	800ecfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010504:	480b      	ldr	r0, [pc, #44]	; (8010534 <prvInitialiseTaskLists+0x74>)
 8010506:	f7fe fbf9 	bl	800ecfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801050a:	4b0b      	ldr	r3, [pc, #44]	; (8010538 <prvInitialiseTaskLists+0x78>)
 801050c:	4a05      	ldr	r2, [pc, #20]	; (8010524 <prvInitialiseTaskLists+0x64>)
 801050e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010510:	4b0a      	ldr	r3, [pc, #40]	; (801053c <prvInitialiseTaskLists+0x7c>)
 8010512:	4a05      	ldr	r2, [pc, #20]	; (8010528 <prvInitialiseTaskLists+0x68>)
 8010514:	601a      	str	r2, [r3, #0]
}
 8010516:	bf00      	nop
 8010518:	3708      	adds	r7, #8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	20000d7c 	.word	0x20000d7c
 8010524:	200011dc 	.word	0x200011dc
 8010528:	200011f0 	.word	0x200011f0
 801052c:	2000120c 	.word	0x2000120c
 8010530:	20001220 	.word	0x20001220
 8010534:	20001238 	.word	0x20001238
 8010538:	20001204 	.word	0x20001204
 801053c:	20001208 	.word	0x20001208

08010540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010546:	e019      	b.n	801057c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010548:	f000 fdd4 	bl	80110f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801054c:	4b10      	ldr	r3, [pc, #64]	; (8010590 <prvCheckTasksWaitingTermination+0x50>)
 801054e:	68db      	ldr	r3, [r3, #12]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	3304      	adds	r3, #4
 8010558:	4618      	mov	r0, r3
 801055a:	f7fe fc59 	bl	800ee10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801055e:	4b0d      	ldr	r3, [pc, #52]	; (8010594 <prvCheckTasksWaitingTermination+0x54>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3b01      	subs	r3, #1
 8010564:	4a0b      	ldr	r2, [pc, #44]	; (8010594 <prvCheckTasksWaitingTermination+0x54>)
 8010566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010568:	4b0b      	ldr	r3, [pc, #44]	; (8010598 <prvCheckTasksWaitingTermination+0x58>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	3b01      	subs	r3, #1
 801056e:	4a0a      	ldr	r2, [pc, #40]	; (8010598 <prvCheckTasksWaitingTermination+0x58>)
 8010570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010572:	f000 fdef 	bl	8011154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f000 f810 	bl	801059c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801057c:	4b06      	ldr	r3, [pc, #24]	; (8010598 <prvCheckTasksWaitingTermination+0x58>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d1e1      	bne.n	8010548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010584:	bf00      	nop
 8010586:	bf00      	nop
 8010588:	3708      	adds	r7, #8
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	20001220 	.word	0x20001220
 8010594:	2000124c 	.word	0x2000124c
 8010598:	20001234 	.word	0x20001234

0801059c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d108      	bne.n	80105c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105b2:	4618      	mov	r0, r3
 80105b4:	f000 ff90 	bl	80114d8 <vPortFree>
				vPortFree( pxTCB );
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 ff8d 	bl	80114d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80105be:	e018      	b.n	80105f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d103      	bne.n	80105d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 ff84 	bl	80114d8 <vPortFree>
	}
 80105d0:	e00f      	b.n	80105f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80105d8:	2b02      	cmp	r3, #2
 80105da:	d00a      	beq.n	80105f2 <prvDeleteTCB+0x56>
	__asm volatile
 80105dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e0:	f383 8811 	msr	BASEPRI, r3
 80105e4:	f3bf 8f6f 	isb	sy
 80105e8:	f3bf 8f4f 	dsb	sy
 80105ec:	60fb      	str	r3, [r7, #12]
}
 80105ee:	bf00      	nop
 80105f0:	e7fe      	b.n	80105f0 <prvDeleteTCB+0x54>
	}
 80105f2:	bf00      	nop
 80105f4:	3710      	adds	r7, #16
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
	...

080105fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80105fc:	b480      	push	{r7}
 80105fe:	b083      	sub	sp, #12
 8010600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010602:	4b0c      	ldr	r3, [pc, #48]	; (8010634 <prvResetNextTaskUnblockTime+0x38>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d104      	bne.n	8010616 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801060c:	4b0a      	ldr	r3, [pc, #40]	; (8010638 <prvResetNextTaskUnblockTime+0x3c>)
 801060e:	f04f 32ff 	mov.w	r2, #4294967295
 8010612:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010614:	e008      	b.n	8010628 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010616:	4b07      	ldr	r3, [pc, #28]	; (8010634 <prvResetNextTaskUnblockTime+0x38>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	68db      	ldr	r3, [r3, #12]
 801061c:	68db      	ldr	r3, [r3, #12]
 801061e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	4a04      	ldr	r2, [pc, #16]	; (8010638 <prvResetNextTaskUnblockTime+0x3c>)
 8010626:	6013      	str	r3, [r2, #0]
}
 8010628:	bf00      	nop
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr
 8010634:	20001204 	.word	0x20001204
 8010638:	2000126c 	.word	0x2000126c

0801063c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010642:	4b0b      	ldr	r3, [pc, #44]	; (8010670 <xTaskGetSchedulerState+0x34>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d102      	bne.n	8010650 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801064a:	2301      	movs	r3, #1
 801064c:	607b      	str	r3, [r7, #4]
 801064e:	e008      	b.n	8010662 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010650:	4b08      	ldr	r3, [pc, #32]	; (8010674 <xTaskGetSchedulerState+0x38>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d102      	bne.n	801065e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010658:	2302      	movs	r3, #2
 801065a:	607b      	str	r3, [r7, #4]
 801065c:	e001      	b.n	8010662 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801065e:	2300      	movs	r3, #0
 8010660:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010662:	687b      	ldr	r3, [r7, #4]
	}
 8010664:	4618      	mov	r0, r3
 8010666:	370c      	adds	r7, #12
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr
 8010670:	20001258 	.word	0x20001258
 8010674:	20001274 	.word	0x20001274

08010678 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010678:	b580      	push	{r7, lr}
 801067a:	b086      	sub	sp, #24
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010684:	2300      	movs	r3, #0
 8010686:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d056      	beq.n	801073c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801068e:	4b2e      	ldr	r3, [pc, #184]	; (8010748 <xTaskPriorityDisinherit+0xd0>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	693a      	ldr	r2, [r7, #16]
 8010694:	429a      	cmp	r2, r3
 8010696:	d00a      	beq.n	80106ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069c:	f383 8811 	msr	BASEPRI, r3
 80106a0:	f3bf 8f6f 	isb	sy
 80106a4:	f3bf 8f4f 	dsb	sy
 80106a8:	60fb      	str	r3, [r7, #12]
}
 80106aa:	bf00      	nop
 80106ac:	e7fe      	b.n	80106ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d10a      	bne.n	80106cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80106b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ba:	f383 8811 	msr	BASEPRI, r3
 80106be:	f3bf 8f6f 	isb	sy
 80106c2:	f3bf 8f4f 	dsb	sy
 80106c6:	60bb      	str	r3, [r7, #8]
}
 80106c8:	bf00      	nop
 80106ca:	e7fe      	b.n	80106ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106d0:	1e5a      	subs	r2, r3, #1
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106de:	429a      	cmp	r2, r3
 80106e0:	d02c      	beq.n	801073c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d128      	bne.n	801073c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	3304      	adds	r3, #4
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fe fb8e 	bl	800ee10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010700:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801070c:	4b0f      	ldr	r3, [pc, #60]	; (801074c <xTaskPriorityDisinherit+0xd4>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	429a      	cmp	r2, r3
 8010712:	d903      	bls.n	801071c <xTaskPriorityDisinherit+0xa4>
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010718:	4a0c      	ldr	r2, [pc, #48]	; (801074c <xTaskPriorityDisinherit+0xd4>)
 801071a:	6013      	str	r3, [r2, #0]
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010720:	4613      	mov	r3, r2
 8010722:	009b      	lsls	r3, r3, #2
 8010724:	4413      	add	r3, r2
 8010726:	009b      	lsls	r3, r3, #2
 8010728:	4a09      	ldr	r2, [pc, #36]	; (8010750 <xTaskPriorityDisinherit+0xd8>)
 801072a:	441a      	add	r2, r3
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	3304      	adds	r3, #4
 8010730:	4619      	mov	r1, r3
 8010732:	4610      	mov	r0, r2
 8010734:	f7fe fb0f 	bl	800ed56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010738:	2301      	movs	r3, #1
 801073a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801073c:	697b      	ldr	r3, [r7, #20]
	}
 801073e:	4618      	mov	r0, r3
 8010740:	3718      	adds	r7, #24
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	20000d78 	.word	0x20000d78
 801074c:	20001254 	.word	0x20001254
 8010750:	20000d7c 	.word	0x20000d7c

08010754 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801075e:	4b21      	ldr	r3, [pc, #132]	; (80107e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010764:	4b20      	ldr	r3, [pc, #128]	; (80107e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	3304      	adds	r3, #4
 801076a:	4618      	mov	r0, r3
 801076c:	f7fe fb50 	bl	800ee10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010776:	d10a      	bne.n	801078e <prvAddCurrentTaskToDelayedList+0x3a>
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d007      	beq.n	801078e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801077e:	4b1a      	ldr	r3, [pc, #104]	; (80107e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	3304      	adds	r3, #4
 8010784:	4619      	mov	r1, r3
 8010786:	4819      	ldr	r0, [pc, #100]	; (80107ec <prvAddCurrentTaskToDelayedList+0x98>)
 8010788:	f7fe fae5 	bl	800ed56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801078c:	e026      	b.n	80107dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	4413      	add	r3, r2
 8010794:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010796:	4b14      	ldr	r3, [pc, #80]	; (80107e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	68ba      	ldr	r2, [r7, #8]
 801079c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801079e:	68ba      	ldr	r2, [r7, #8]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d209      	bcs.n	80107ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107a6:	4b12      	ldr	r3, [pc, #72]	; (80107f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80107a8:	681a      	ldr	r2, [r3, #0]
 80107aa:	4b0f      	ldr	r3, [pc, #60]	; (80107e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	3304      	adds	r3, #4
 80107b0:	4619      	mov	r1, r3
 80107b2:	4610      	mov	r0, r2
 80107b4:	f7fe faf3 	bl	800ed9e <vListInsert>
}
 80107b8:	e010      	b.n	80107dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107ba:	4b0e      	ldr	r3, [pc, #56]	; (80107f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	4b0a      	ldr	r3, [pc, #40]	; (80107e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	3304      	adds	r3, #4
 80107c4:	4619      	mov	r1, r3
 80107c6:	4610      	mov	r0, r2
 80107c8:	f7fe fae9 	bl	800ed9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80107cc:	4b0a      	ldr	r3, [pc, #40]	; (80107f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	68ba      	ldr	r2, [r7, #8]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d202      	bcs.n	80107dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80107d6:	4a08      	ldr	r2, [pc, #32]	; (80107f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	6013      	str	r3, [r2, #0]
}
 80107dc:	bf00      	nop
 80107de:	3710      	adds	r7, #16
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	20001250 	.word	0x20001250
 80107e8:	20000d78 	.word	0x20000d78
 80107ec:	20001238 	.word	0x20001238
 80107f0:	20001208 	.word	0x20001208
 80107f4:	20001204 	.word	0x20001204
 80107f8:	2000126c 	.word	0x2000126c

080107fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b08a      	sub	sp, #40	; 0x28
 8010800:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010802:	2300      	movs	r3, #0
 8010804:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010806:	f000 fb07 	bl	8010e18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801080a:	4b1c      	ldr	r3, [pc, #112]	; (801087c <xTimerCreateTimerTask+0x80>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d021      	beq.n	8010856 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010812:	2300      	movs	r3, #0
 8010814:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010816:	2300      	movs	r3, #0
 8010818:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801081a:	1d3a      	adds	r2, r7, #4
 801081c:	f107 0108 	add.w	r1, r7, #8
 8010820:	f107 030c 	add.w	r3, r7, #12
 8010824:	4618      	mov	r0, r3
 8010826:	f7fe fa4f 	bl	800ecc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801082a:	6879      	ldr	r1, [r7, #4]
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	68fa      	ldr	r2, [r7, #12]
 8010830:	9202      	str	r2, [sp, #8]
 8010832:	9301      	str	r3, [sp, #4]
 8010834:	2302      	movs	r3, #2
 8010836:	9300      	str	r3, [sp, #0]
 8010838:	2300      	movs	r3, #0
 801083a:	460a      	mov	r2, r1
 801083c:	4910      	ldr	r1, [pc, #64]	; (8010880 <xTimerCreateTimerTask+0x84>)
 801083e:	4811      	ldr	r0, [pc, #68]	; (8010884 <xTimerCreateTimerTask+0x88>)
 8010840:	f7ff f8b6 	bl	800f9b0 <xTaskCreateStatic>
 8010844:	4603      	mov	r3, r0
 8010846:	4a10      	ldr	r2, [pc, #64]	; (8010888 <xTimerCreateTimerTask+0x8c>)
 8010848:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801084a:	4b0f      	ldr	r3, [pc, #60]	; (8010888 <xTimerCreateTimerTask+0x8c>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d001      	beq.n	8010856 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010852:	2301      	movs	r3, #1
 8010854:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d10a      	bne.n	8010872 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801085c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010860:	f383 8811 	msr	BASEPRI, r3
 8010864:	f3bf 8f6f 	isb	sy
 8010868:	f3bf 8f4f 	dsb	sy
 801086c:	613b      	str	r3, [r7, #16]
}
 801086e:	bf00      	nop
 8010870:	e7fe      	b.n	8010870 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010872:	697b      	ldr	r3, [r7, #20]
}
 8010874:	4618      	mov	r0, r3
 8010876:	3718      	adds	r7, #24
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	200012a8 	.word	0x200012a8
 8010880:	0801275c 	.word	0x0801275c
 8010884:	080109c1 	.word	0x080109c1
 8010888:	200012ac 	.word	0x200012ac

0801088c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b08a      	sub	sp, #40	; 0x28
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	60b9      	str	r1, [r7, #8]
 8010896:	607a      	str	r2, [r7, #4]
 8010898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801089a:	2300      	movs	r3, #0
 801089c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d10a      	bne.n	80108ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80108a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a8:	f383 8811 	msr	BASEPRI, r3
 80108ac:	f3bf 8f6f 	isb	sy
 80108b0:	f3bf 8f4f 	dsb	sy
 80108b4:	623b      	str	r3, [r7, #32]
}
 80108b6:	bf00      	nop
 80108b8:	e7fe      	b.n	80108b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80108ba:	4b1a      	ldr	r3, [pc, #104]	; (8010924 <xTimerGenericCommand+0x98>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d02a      	beq.n	8010918 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	2b05      	cmp	r3, #5
 80108d2:	dc18      	bgt.n	8010906 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80108d4:	f7ff feb2 	bl	801063c <xTaskGetSchedulerState>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b02      	cmp	r3, #2
 80108dc:	d109      	bne.n	80108f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80108de:	4b11      	ldr	r3, [pc, #68]	; (8010924 <xTimerGenericCommand+0x98>)
 80108e0:	6818      	ldr	r0, [r3, #0]
 80108e2:	f107 0110 	add.w	r1, r7, #16
 80108e6:	2300      	movs	r3, #0
 80108e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108ea:	f7fe fbf9 	bl	800f0e0 <xQueueGenericSend>
 80108ee:	6278      	str	r0, [r7, #36]	; 0x24
 80108f0:	e012      	b.n	8010918 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80108f2:	4b0c      	ldr	r3, [pc, #48]	; (8010924 <xTimerGenericCommand+0x98>)
 80108f4:	6818      	ldr	r0, [r3, #0]
 80108f6:	f107 0110 	add.w	r1, r7, #16
 80108fa:	2300      	movs	r3, #0
 80108fc:	2200      	movs	r2, #0
 80108fe:	f7fe fbef 	bl	800f0e0 <xQueueGenericSend>
 8010902:	6278      	str	r0, [r7, #36]	; 0x24
 8010904:	e008      	b.n	8010918 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010906:	4b07      	ldr	r3, [pc, #28]	; (8010924 <xTimerGenericCommand+0x98>)
 8010908:	6818      	ldr	r0, [r3, #0]
 801090a:	f107 0110 	add.w	r1, r7, #16
 801090e:	2300      	movs	r3, #0
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	f7fe fce3 	bl	800f2dc <xQueueGenericSendFromISR>
 8010916:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801091a:	4618      	mov	r0, r3
 801091c:	3728      	adds	r7, #40	; 0x28
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
 8010922:	bf00      	nop
 8010924:	200012a8 	.word	0x200012a8

08010928 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b088      	sub	sp, #32
 801092c:	af02      	add	r7, sp, #8
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010932:	4b22      	ldr	r3, [pc, #136]	; (80109bc <prvProcessExpiredTimer+0x94>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	68db      	ldr	r3, [r3, #12]
 801093a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	3304      	adds	r3, #4
 8010940:	4618      	mov	r0, r3
 8010942:	f7fe fa65 	bl	800ee10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801094c:	f003 0304 	and.w	r3, r3, #4
 8010950:	2b00      	cmp	r3, #0
 8010952:	d022      	beq.n	801099a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	699a      	ldr	r2, [r3, #24]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	18d1      	adds	r1, r2, r3
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	683a      	ldr	r2, [r7, #0]
 8010960:	6978      	ldr	r0, [r7, #20]
 8010962:	f000 f8d1 	bl	8010b08 <prvInsertTimerInActiveList>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d01f      	beq.n	80109ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801096c:	2300      	movs	r3, #0
 801096e:	9300      	str	r3, [sp, #0]
 8010970:	2300      	movs	r3, #0
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	2100      	movs	r1, #0
 8010976:	6978      	ldr	r0, [r7, #20]
 8010978:	f7ff ff88 	bl	801088c <xTimerGenericCommand>
 801097c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d113      	bne.n	80109ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010988:	f383 8811 	msr	BASEPRI, r3
 801098c:	f3bf 8f6f 	isb	sy
 8010990:	f3bf 8f4f 	dsb	sy
 8010994:	60fb      	str	r3, [r7, #12]
}
 8010996:	bf00      	nop
 8010998:	e7fe      	b.n	8010998 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109a0:	f023 0301 	bic.w	r3, r3, #1
 80109a4:	b2da      	uxtb	r2, r3
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	6a1b      	ldr	r3, [r3, #32]
 80109b0:	6978      	ldr	r0, [r7, #20]
 80109b2:	4798      	blx	r3
}
 80109b4:	bf00      	nop
 80109b6:	3718      	adds	r7, #24
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	200012a0 	.word	0x200012a0

080109c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b084      	sub	sp, #16
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80109c8:	f107 0308 	add.w	r3, r7, #8
 80109cc:	4618      	mov	r0, r3
 80109ce:	f000 f857 	bl	8010a80 <prvGetNextExpireTime>
 80109d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	4619      	mov	r1, r3
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f000 f803 	bl	80109e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80109de:	f000 f8d5 	bl	8010b8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80109e2:	e7f1      	b.n	80109c8 <prvTimerTask+0x8>

080109e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80109ee:	f7ff fa1d 	bl	800fe2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80109f2:	f107 0308 	add.w	r3, r7, #8
 80109f6:	4618      	mov	r0, r3
 80109f8:	f000 f866 	bl	8010ac8 <prvSampleTimeNow>
 80109fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d130      	bne.n	8010a66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d10a      	bne.n	8010a20 <prvProcessTimerOrBlockTask+0x3c>
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d806      	bhi.n	8010a20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010a12:	f7ff fa19 	bl	800fe48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010a16:	68f9      	ldr	r1, [r7, #12]
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f7ff ff85 	bl	8010928 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010a1e:	e024      	b.n	8010a6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d008      	beq.n	8010a38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010a26:	4b13      	ldr	r3, [pc, #76]	; (8010a74 <prvProcessTimerOrBlockTask+0x90>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d101      	bne.n	8010a34 <prvProcessTimerOrBlockTask+0x50>
 8010a30:	2301      	movs	r3, #1
 8010a32:	e000      	b.n	8010a36 <prvProcessTimerOrBlockTask+0x52>
 8010a34:	2300      	movs	r3, #0
 8010a36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010a38:	4b0f      	ldr	r3, [pc, #60]	; (8010a78 <prvProcessTimerOrBlockTask+0x94>)
 8010a3a:	6818      	ldr	r0, [r3, #0]
 8010a3c:	687a      	ldr	r2, [r7, #4]
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	1ad3      	subs	r3, r2, r3
 8010a42:	683a      	ldr	r2, [r7, #0]
 8010a44:	4619      	mov	r1, r3
 8010a46:	f7fe ff7f 	bl	800f948 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010a4a:	f7ff f9fd 	bl	800fe48 <xTaskResumeAll>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d10a      	bne.n	8010a6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010a54:	4b09      	ldr	r3, [pc, #36]	; (8010a7c <prvProcessTimerOrBlockTask+0x98>)
 8010a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a5a:	601a      	str	r2, [r3, #0]
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	f3bf 8f6f 	isb	sy
}
 8010a64:	e001      	b.n	8010a6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010a66:	f7ff f9ef 	bl	800fe48 <xTaskResumeAll>
}
 8010a6a:	bf00      	nop
 8010a6c:	3710      	adds	r7, #16
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	200012a4 	.word	0x200012a4
 8010a78:	200012a8 	.word	0x200012a8
 8010a7c:	e000ed04 	.word	0xe000ed04

08010a80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010a80:	b480      	push	{r7}
 8010a82:	b085      	sub	sp, #20
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010a88:	4b0e      	ldr	r3, [pc, #56]	; (8010ac4 <prvGetNextExpireTime+0x44>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d101      	bne.n	8010a96 <prvGetNextExpireTime+0x16>
 8010a92:	2201      	movs	r2, #1
 8010a94:	e000      	b.n	8010a98 <prvGetNextExpireTime+0x18>
 8010a96:	2200      	movs	r2, #0
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d105      	bne.n	8010ab0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010aa4:	4b07      	ldr	r3, [pc, #28]	; (8010ac4 <prvGetNextExpireTime+0x44>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	68db      	ldr	r3, [r3, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	60fb      	str	r3, [r7, #12]
 8010aae:	e001      	b.n	8010ab4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3714      	adds	r7, #20
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr
 8010ac2:	bf00      	nop
 8010ac4:	200012a0 	.word	0x200012a0

08010ac8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010ad0:	f7ff fa58 	bl	800ff84 <xTaskGetTickCount>
 8010ad4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010ad6:	4b0b      	ldr	r3, [pc, #44]	; (8010b04 <prvSampleTimeNow+0x3c>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	68fa      	ldr	r2, [r7, #12]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d205      	bcs.n	8010aec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010ae0:	f000 f936 	bl	8010d50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	601a      	str	r2, [r3, #0]
 8010aea:	e002      	b.n	8010af2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010af2:	4a04      	ldr	r2, [pc, #16]	; (8010b04 <prvSampleTimeNow+0x3c>)
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010af8:	68fb      	ldr	r3, [r7, #12]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3710      	adds	r7, #16
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	200012b0 	.word	0x200012b0

08010b08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b086      	sub	sp, #24
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	60b9      	str	r1, [r7, #8]
 8010b12:	607a      	str	r2, [r7, #4]
 8010b14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010b16:	2300      	movs	r3, #0
 8010b18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	68ba      	ldr	r2, [r7, #8]
 8010b1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	68fa      	ldr	r2, [r7, #12]
 8010b24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010b26:	68ba      	ldr	r2, [r7, #8]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d812      	bhi.n	8010b54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	1ad2      	subs	r2, r2, r3
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	699b      	ldr	r3, [r3, #24]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d302      	bcc.n	8010b42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	617b      	str	r3, [r7, #20]
 8010b40:	e01b      	b.n	8010b7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010b42:	4b10      	ldr	r3, [pc, #64]	; (8010b84 <prvInsertTimerInActiveList+0x7c>)
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	3304      	adds	r3, #4
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	4610      	mov	r0, r2
 8010b4e:	f7fe f926 	bl	800ed9e <vListInsert>
 8010b52:	e012      	b.n	8010b7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d206      	bcs.n	8010b6a <prvInsertTimerInActiveList+0x62>
 8010b5c:	68ba      	ldr	r2, [r7, #8]
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d302      	bcc.n	8010b6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010b64:	2301      	movs	r3, #1
 8010b66:	617b      	str	r3, [r7, #20]
 8010b68:	e007      	b.n	8010b7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b6a:	4b07      	ldr	r3, [pc, #28]	; (8010b88 <prvInsertTimerInActiveList+0x80>)
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	3304      	adds	r3, #4
 8010b72:	4619      	mov	r1, r3
 8010b74:	4610      	mov	r0, r2
 8010b76:	f7fe f912 	bl	800ed9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010b7a:	697b      	ldr	r3, [r7, #20]
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3718      	adds	r7, #24
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	200012a4 	.word	0x200012a4
 8010b88:	200012a0 	.word	0x200012a0

08010b8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b08e      	sub	sp, #56	; 0x38
 8010b90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010b92:	e0ca      	b.n	8010d2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	da18      	bge.n	8010bcc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010b9a:	1d3b      	adds	r3, r7, #4
 8010b9c:	3304      	adds	r3, #4
 8010b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d10a      	bne.n	8010bbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010baa:	f383 8811 	msr	BASEPRI, r3
 8010bae:	f3bf 8f6f 	isb	sy
 8010bb2:	f3bf 8f4f 	dsb	sy
 8010bb6:	61fb      	str	r3, [r7, #28]
}
 8010bb8:	bf00      	nop
 8010bba:	e7fe      	b.n	8010bba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bc2:	6850      	ldr	r0, [r2, #4]
 8010bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bc6:	6892      	ldr	r2, [r2, #8]
 8010bc8:	4611      	mov	r1, r2
 8010bca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	f2c0 80ab 	blt.w	8010d2a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bda:	695b      	ldr	r3, [r3, #20]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d004      	beq.n	8010bea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be2:	3304      	adds	r3, #4
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7fe f913 	bl	800ee10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010bea:	463b      	mov	r3, r7
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7ff ff6b 	bl	8010ac8 <prvSampleTimeNow>
 8010bf2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2b09      	cmp	r3, #9
 8010bf8:	f200 8096 	bhi.w	8010d28 <prvProcessReceivedCommands+0x19c>
 8010bfc:	a201      	add	r2, pc, #4	; (adr r2, 8010c04 <prvProcessReceivedCommands+0x78>)
 8010bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c02:	bf00      	nop
 8010c04:	08010c2d 	.word	0x08010c2d
 8010c08:	08010c2d 	.word	0x08010c2d
 8010c0c:	08010c2d 	.word	0x08010c2d
 8010c10:	08010ca1 	.word	0x08010ca1
 8010c14:	08010cb5 	.word	0x08010cb5
 8010c18:	08010cff 	.word	0x08010cff
 8010c1c:	08010c2d 	.word	0x08010c2d
 8010c20:	08010c2d 	.word	0x08010c2d
 8010c24:	08010ca1 	.word	0x08010ca1
 8010c28:	08010cb5 	.word	0x08010cb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c32:	f043 0301 	orr.w	r3, r3, #1
 8010c36:	b2da      	uxtb	r2, r3
 8010c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010c3e:	68ba      	ldr	r2, [r7, #8]
 8010c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c42:	699b      	ldr	r3, [r3, #24]
 8010c44:	18d1      	adds	r1, r2, r3
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c4c:	f7ff ff5c 	bl	8010b08 <prvInsertTimerInActiveList>
 8010c50:	4603      	mov	r3, r0
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d069      	beq.n	8010d2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c58:	6a1b      	ldr	r3, [r3, #32]
 8010c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c64:	f003 0304 	and.w	r3, r3, #4
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d05e      	beq.n	8010d2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010c6c:	68ba      	ldr	r2, [r7, #8]
 8010c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c70:	699b      	ldr	r3, [r3, #24]
 8010c72:	441a      	add	r2, r3
 8010c74:	2300      	movs	r3, #0
 8010c76:	9300      	str	r3, [sp, #0]
 8010c78:	2300      	movs	r3, #0
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c7e:	f7ff fe05 	bl	801088c <xTimerGenericCommand>
 8010c82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010c84:	6a3b      	ldr	r3, [r7, #32]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d14f      	bne.n	8010d2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c8e:	f383 8811 	msr	BASEPRI, r3
 8010c92:	f3bf 8f6f 	isb	sy
 8010c96:	f3bf 8f4f 	dsb	sy
 8010c9a:	61bb      	str	r3, [r7, #24]
}
 8010c9c:	bf00      	nop
 8010c9e:	e7fe      	b.n	8010c9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ca6:	f023 0301 	bic.w	r3, r3, #1
 8010caa:	b2da      	uxtb	r2, r3
 8010cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010cb2:	e03a      	b.n	8010d2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cba:	f043 0301 	orr.w	r3, r3, #1
 8010cbe:	b2da      	uxtb	r2, r3
 8010cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010cc6:	68ba      	ldr	r2, [r7, #8]
 8010cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cce:	699b      	ldr	r3, [r3, #24]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d10a      	bne.n	8010cea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd8:	f383 8811 	msr	BASEPRI, r3
 8010cdc:	f3bf 8f6f 	isb	sy
 8010ce0:	f3bf 8f4f 	dsb	sy
 8010ce4:	617b      	str	r3, [r7, #20]
}
 8010ce6:	bf00      	nop
 8010ce8:	e7fe      	b.n	8010ce8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cec:	699a      	ldr	r2, [r3, #24]
 8010cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf0:	18d1      	adds	r1, r2, r3
 8010cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cf8:	f7ff ff06 	bl	8010b08 <prvInsertTimerInActiveList>
					break;
 8010cfc:	e015      	b.n	8010d2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d04:	f003 0302 	and.w	r3, r3, #2
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d103      	bne.n	8010d14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d0e:	f000 fbe3 	bl	80114d8 <vPortFree>
 8010d12:	e00a      	b.n	8010d2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d1a:	f023 0301 	bic.w	r3, r3, #1
 8010d1e:	b2da      	uxtb	r2, r3
 8010d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010d26:	e000      	b.n	8010d2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8010d28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d2a:	4b08      	ldr	r3, [pc, #32]	; (8010d4c <prvProcessReceivedCommands+0x1c0>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	1d39      	adds	r1, r7, #4
 8010d30:	2200      	movs	r2, #0
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fe fb6e 	bl	800f414 <xQueueReceive>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	f47f af2a 	bne.w	8010b94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010d40:	bf00      	nop
 8010d42:	bf00      	nop
 8010d44:	3730      	adds	r7, #48	; 0x30
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	200012a8 	.word	0x200012a8

08010d50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b088      	sub	sp, #32
 8010d54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d56:	e048      	b.n	8010dea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d58:	4b2d      	ldr	r3, [pc, #180]	; (8010e10 <prvSwitchTimerLists+0xc0>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	68db      	ldr	r3, [r3, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d62:	4b2b      	ldr	r3, [pc, #172]	; (8010e10 <prvSwitchTimerLists+0xc0>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	68db      	ldr	r3, [r3, #12]
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	3304      	adds	r3, #4
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fe f84d 	bl	800ee10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	6a1b      	ldr	r3, [r3, #32]
 8010d7a:	68f8      	ldr	r0, [r7, #12]
 8010d7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d84:	f003 0304 	and.w	r3, r3, #4
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d02e      	beq.n	8010dea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	699b      	ldr	r3, [r3, #24]
 8010d90:	693a      	ldr	r2, [r7, #16]
 8010d92:	4413      	add	r3, r2
 8010d94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010d96:	68ba      	ldr	r2, [r7, #8]
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d90e      	bls.n	8010dbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	68ba      	ldr	r2, [r7, #8]
 8010da2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	68fa      	ldr	r2, [r7, #12]
 8010da8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010daa:	4b19      	ldr	r3, [pc, #100]	; (8010e10 <prvSwitchTimerLists+0xc0>)
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	3304      	adds	r3, #4
 8010db2:	4619      	mov	r1, r3
 8010db4:	4610      	mov	r0, r2
 8010db6:	f7fd fff2 	bl	800ed9e <vListInsert>
 8010dba:	e016      	b.n	8010dea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	9300      	str	r3, [sp, #0]
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	693a      	ldr	r2, [r7, #16]
 8010dc4:	2100      	movs	r1, #0
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f7ff fd60 	bl	801088c <xTimerGenericCommand>
 8010dcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d10a      	bne.n	8010dea <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd8:	f383 8811 	msr	BASEPRI, r3
 8010ddc:	f3bf 8f6f 	isb	sy
 8010de0:	f3bf 8f4f 	dsb	sy
 8010de4:	603b      	str	r3, [r7, #0]
}
 8010de6:	bf00      	nop
 8010de8:	e7fe      	b.n	8010de8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010dea:	4b09      	ldr	r3, [pc, #36]	; (8010e10 <prvSwitchTimerLists+0xc0>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d1b1      	bne.n	8010d58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010df4:	4b06      	ldr	r3, [pc, #24]	; (8010e10 <prvSwitchTimerLists+0xc0>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010dfa:	4b06      	ldr	r3, [pc, #24]	; (8010e14 <prvSwitchTimerLists+0xc4>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	4a04      	ldr	r2, [pc, #16]	; (8010e10 <prvSwitchTimerLists+0xc0>)
 8010e00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010e02:	4a04      	ldr	r2, [pc, #16]	; (8010e14 <prvSwitchTimerLists+0xc4>)
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	6013      	str	r3, [r2, #0]
}
 8010e08:	bf00      	nop
 8010e0a:	3718      	adds	r7, #24
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	200012a0 	.word	0x200012a0
 8010e14:	200012a4 	.word	0x200012a4

08010e18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010e1e:	f000 f969 	bl	80110f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010e22:	4b15      	ldr	r3, [pc, #84]	; (8010e78 <prvCheckForValidListAndQueue+0x60>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d120      	bne.n	8010e6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010e2a:	4814      	ldr	r0, [pc, #80]	; (8010e7c <prvCheckForValidListAndQueue+0x64>)
 8010e2c:	f7fd ff66 	bl	800ecfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010e30:	4813      	ldr	r0, [pc, #76]	; (8010e80 <prvCheckForValidListAndQueue+0x68>)
 8010e32:	f7fd ff63 	bl	800ecfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010e36:	4b13      	ldr	r3, [pc, #76]	; (8010e84 <prvCheckForValidListAndQueue+0x6c>)
 8010e38:	4a10      	ldr	r2, [pc, #64]	; (8010e7c <prvCheckForValidListAndQueue+0x64>)
 8010e3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010e3c:	4b12      	ldr	r3, [pc, #72]	; (8010e88 <prvCheckForValidListAndQueue+0x70>)
 8010e3e:	4a10      	ldr	r2, [pc, #64]	; (8010e80 <prvCheckForValidListAndQueue+0x68>)
 8010e40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010e42:	2300      	movs	r3, #0
 8010e44:	9300      	str	r3, [sp, #0]
 8010e46:	4b11      	ldr	r3, [pc, #68]	; (8010e8c <prvCheckForValidListAndQueue+0x74>)
 8010e48:	4a11      	ldr	r2, [pc, #68]	; (8010e90 <prvCheckForValidListAndQueue+0x78>)
 8010e4a:	2110      	movs	r1, #16
 8010e4c:	200a      	movs	r0, #10
 8010e4e:	f7fe f871 	bl	800ef34 <xQueueGenericCreateStatic>
 8010e52:	4603      	mov	r3, r0
 8010e54:	4a08      	ldr	r2, [pc, #32]	; (8010e78 <prvCheckForValidListAndQueue+0x60>)
 8010e56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010e58:	4b07      	ldr	r3, [pc, #28]	; (8010e78 <prvCheckForValidListAndQueue+0x60>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d005      	beq.n	8010e6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010e60:	4b05      	ldr	r3, [pc, #20]	; (8010e78 <prvCheckForValidListAndQueue+0x60>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	490b      	ldr	r1, [pc, #44]	; (8010e94 <prvCheckForValidListAndQueue+0x7c>)
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fe fd44 	bl	800f8f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010e6c:	f000 f972 	bl	8011154 <vPortExitCritical>
}
 8010e70:	bf00      	nop
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	200012a8 	.word	0x200012a8
 8010e7c:	20001278 	.word	0x20001278
 8010e80:	2000128c 	.word	0x2000128c
 8010e84:	200012a0 	.word	0x200012a0
 8010e88:	200012a4 	.word	0x200012a4
 8010e8c:	20001354 	.word	0x20001354
 8010e90:	200012b4 	.word	0x200012b4
 8010e94:	08012764 	.word	0x08012764

08010e98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b085      	sub	sp, #20
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	3b04      	subs	r3, #4
 8010ea8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	3b04      	subs	r3, #4
 8010eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	f023 0201 	bic.w	r2, r3, #1
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	3b04      	subs	r3, #4
 8010ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ec8:	4a0c      	ldr	r2, [pc, #48]	; (8010efc <pxPortInitialiseStack+0x64>)
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	3b14      	subs	r3, #20
 8010ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	3b04      	subs	r3, #4
 8010ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f06f 0202 	mvn.w	r2, #2
 8010ee6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	3b20      	subs	r3, #32
 8010eec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010eee:	68fb      	ldr	r3, [r7, #12]
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3714      	adds	r7, #20
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr
 8010efc:	08010f01 	.word	0x08010f01

08010f00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010f00:	b480      	push	{r7}
 8010f02:	b085      	sub	sp, #20
 8010f04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010f06:	2300      	movs	r3, #0
 8010f08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010f0a:	4b12      	ldr	r3, [pc, #72]	; (8010f54 <prvTaskExitError+0x54>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f12:	d00a      	beq.n	8010f2a <prvTaskExitError+0x2a>
	__asm volatile
 8010f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f18:	f383 8811 	msr	BASEPRI, r3
 8010f1c:	f3bf 8f6f 	isb	sy
 8010f20:	f3bf 8f4f 	dsb	sy
 8010f24:	60fb      	str	r3, [r7, #12]
}
 8010f26:	bf00      	nop
 8010f28:	e7fe      	b.n	8010f28 <prvTaskExitError+0x28>
	__asm volatile
 8010f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f2e:	f383 8811 	msr	BASEPRI, r3
 8010f32:	f3bf 8f6f 	isb	sy
 8010f36:	f3bf 8f4f 	dsb	sy
 8010f3a:	60bb      	str	r3, [r7, #8]
}
 8010f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010f3e:	bf00      	nop
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d0fc      	beq.n	8010f40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010f46:	bf00      	nop
 8010f48:	bf00      	nop
 8010f4a:	3714      	adds	r7, #20
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr
 8010f54:	20000098 	.word	0x20000098
	...

08010f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010f60:	4b07      	ldr	r3, [pc, #28]	; (8010f80 <pxCurrentTCBConst2>)
 8010f62:	6819      	ldr	r1, [r3, #0]
 8010f64:	6808      	ldr	r0, [r1, #0]
 8010f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f6a:	f380 8809 	msr	PSP, r0
 8010f6e:	f3bf 8f6f 	isb	sy
 8010f72:	f04f 0000 	mov.w	r0, #0
 8010f76:	f380 8811 	msr	BASEPRI, r0
 8010f7a:	4770      	bx	lr
 8010f7c:	f3af 8000 	nop.w

08010f80 <pxCurrentTCBConst2>:
 8010f80:	20000d78 	.word	0x20000d78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010f84:	bf00      	nop
 8010f86:	bf00      	nop

08010f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010f88:	4808      	ldr	r0, [pc, #32]	; (8010fac <prvPortStartFirstTask+0x24>)
 8010f8a:	6800      	ldr	r0, [r0, #0]
 8010f8c:	6800      	ldr	r0, [r0, #0]
 8010f8e:	f380 8808 	msr	MSP, r0
 8010f92:	f04f 0000 	mov.w	r0, #0
 8010f96:	f380 8814 	msr	CONTROL, r0
 8010f9a:	b662      	cpsie	i
 8010f9c:	b661      	cpsie	f
 8010f9e:	f3bf 8f4f 	dsb	sy
 8010fa2:	f3bf 8f6f 	isb	sy
 8010fa6:	df00      	svc	0
 8010fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010faa:	bf00      	nop
 8010fac:	e000ed08 	.word	0xe000ed08

08010fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b086      	sub	sp, #24
 8010fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010fb6:	4b46      	ldr	r3, [pc, #280]	; (80110d0 <xPortStartScheduler+0x120>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	4a46      	ldr	r2, [pc, #280]	; (80110d4 <xPortStartScheduler+0x124>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d10a      	bne.n	8010fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8010fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc4:	f383 8811 	msr	BASEPRI, r3
 8010fc8:	f3bf 8f6f 	isb	sy
 8010fcc:	f3bf 8f4f 	dsb	sy
 8010fd0:	613b      	str	r3, [r7, #16]
}
 8010fd2:	bf00      	nop
 8010fd4:	e7fe      	b.n	8010fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010fd6:	4b3e      	ldr	r3, [pc, #248]	; (80110d0 <xPortStartScheduler+0x120>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4a3f      	ldr	r2, [pc, #252]	; (80110d8 <xPortStartScheduler+0x128>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d10a      	bne.n	8010ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8010fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe4:	f383 8811 	msr	BASEPRI, r3
 8010fe8:	f3bf 8f6f 	isb	sy
 8010fec:	f3bf 8f4f 	dsb	sy
 8010ff0:	60fb      	str	r3, [r7, #12]
}
 8010ff2:	bf00      	nop
 8010ff4:	e7fe      	b.n	8010ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010ff6:	4b39      	ldr	r3, [pc, #228]	; (80110dc <xPortStartScheduler+0x12c>)
 8010ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	b2db      	uxtb	r3, r3
 8011000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	22ff      	movs	r2, #255	; 0xff
 8011006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	b2db      	uxtb	r3, r3
 801100e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011010:	78fb      	ldrb	r3, [r7, #3]
 8011012:	b2db      	uxtb	r3, r3
 8011014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011018:	b2da      	uxtb	r2, r3
 801101a:	4b31      	ldr	r3, [pc, #196]	; (80110e0 <xPortStartScheduler+0x130>)
 801101c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801101e:	4b31      	ldr	r3, [pc, #196]	; (80110e4 <xPortStartScheduler+0x134>)
 8011020:	2207      	movs	r2, #7
 8011022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011024:	e009      	b.n	801103a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011026:	4b2f      	ldr	r3, [pc, #188]	; (80110e4 <xPortStartScheduler+0x134>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	3b01      	subs	r3, #1
 801102c:	4a2d      	ldr	r2, [pc, #180]	; (80110e4 <xPortStartScheduler+0x134>)
 801102e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011030:	78fb      	ldrb	r3, [r7, #3]
 8011032:	b2db      	uxtb	r3, r3
 8011034:	005b      	lsls	r3, r3, #1
 8011036:	b2db      	uxtb	r3, r3
 8011038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801103a:	78fb      	ldrb	r3, [r7, #3]
 801103c:	b2db      	uxtb	r3, r3
 801103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011042:	2b80      	cmp	r3, #128	; 0x80
 8011044:	d0ef      	beq.n	8011026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011046:	4b27      	ldr	r3, [pc, #156]	; (80110e4 <xPortStartScheduler+0x134>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f1c3 0307 	rsb	r3, r3, #7
 801104e:	2b04      	cmp	r3, #4
 8011050:	d00a      	beq.n	8011068 <xPortStartScheduler+0xb8>
	__asm volatile
 8011052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011056:	f383 8811 	msr	BASEPRI, r3
 801105a:	f3bf 8f6f 	isb	sy
 801105e:	f3bf 8f4f 	dsb	sy
 8011062:	60bb      	str	r3, [r7, #8]
}
 8011064:	bf00      	nop
 8011066:	e7fe      	b.n	8011066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011068:	4b1e      	ldr	r3, [pc, #120]	; (80110e4 <xPortStartScheduler+0x134>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	021b      	lsls	r3, r3, #8
 801106e:	4a1d      	ldr	r2, [pc, #116]	; (80110e4 <xPortStartScheduler+0x134>)
 8011070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011072:	4b1c      	ldr	r3, [pc, #112]	; (80110e4 <xPortStartScheduler+0x134>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801107a:	4a1a      	ldr	r2, [pc, #104]	; (80110e4 <xPortStartScheduler+0x134>)
 801107c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	b2da      	uxtb	r2, r3
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011086:	4b18      	ldr	r3, [pc, #96]	; (80110e8 <xPortStartScheduler+0x138>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	4a17      	ldr	r2, [pc, #92]	; (80110e8 <xPortStartScheduler+0x138>)
 801108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011092:	4b15      	ldr	r3, [pc, #84]	; (80110e8 <xPortStartScheduler+0x138>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	4a14      	ldr	r2, [pc, #80]	; (80110e8 <xPortStartScheduler+0x138>)
 8011098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801109c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801109e:	f000 f8dd 	bl	801125c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80110a2:	4b12      	ldr	r3, [pc, #72]	; (80110ec <xPortStartScheduler+0x13c>)
 80110a4:	2200      	movs	r2, #0
 80110a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80110a8:	f000 f8fc 	bl	80112a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80110ac:	4b10      	ldr	r3, [pc, #64]	; (80110f0 <xPortStartScheduler+0x140>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	4a0f      	ldr	r2, [pc, #60]	; (80110f0 <xPortStartScheduler+0x140>)
 80110b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80110b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80110b8:	f7ff ff66 	bl	8010f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80110bc:	f7ff f82c 	bl	8010118 <vTaskSwitchContext>
	prvTaskExitError();
 80110c0:	f7ff ff1e 	bl	8010f00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80110c4:	2300      	movs	r3, #0
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3718      	adds	r7, #24
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	e000ed00 	.word	0xe000ed00
 80110d4:	410fc271 	.word	0x410fc271
 80110d8:	410fc270 	.word	0x410fc270
 80110dc:	e000e400 	.word	0xe000e400
 80110e0:	200013a4 	.word	0x200013a4
 80110e4:	200013a8 	.word	0x200013a8
 80110e8:	e000ed20 	.word	0xe000ed20
 80110ec:	20000098 	.word	0x20000098
 80110f0:	e000ef34 	.word	0xe000ef34

080110f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80110f4:	b480      	push	{r7}
 80110f6:	b083      	sub	sp, #12
 80110f8:	af00      	add	r7, sp, #0
	__asm volatile
 80110fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110fe:	f383 8811 	msr	BASEPRI, r3
 8011102:	f3bf 8f6f 	isb	sy
 8011106:	f3bf 8f4f 	dsb	sy
 801110a:	607b      	str	r3, [r7, #4]
}
 801110c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801110e:	4b0f      	ldr	r3, [pc, #60]	; (801114c <vPortEnterCritical+0x58>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	3301      	adds	r3, #1
 8011114:	4a0d      	ldr	r2, [pc, #52]	; (801114c <vPortEnterCritical+0x58>)
 8011116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011118:	4b0c      	ldr	r3, [pc, #48]	; (801114c <vPortEnterCritical+0x58>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	2b01      	cmp	r3, #1
 801111e:	d10f      	bne.n	8011140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011120:	4b0b      	ldr	r3, [pc, #44]	; (8011150 <vPortEnterCritical+0x5c>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	b2db      	uxtb	r3, r3
 8011126:	2b00      	cmp	r3, #0
 8011128:	d00a      	beq.n	8011140 <vPortEnterCritical+0x4c>
	__asm volatile
 801112a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112e:	f383 8811 	msr	BASEPRI, r3
 8011132:	f3bf 8f6f 	isb	sy
 8011136:	f3bf 8f4f 	dsb	sy
 801113a:	603b      	str	r3, [r7, #0]
}
 801113c:	bf00      	nop
 801113e:	e7fe      	b.n	801113e <vPortEnterCritical+0x4a>
	}
}
 8011140:	bf00      	nop
 8011142:	370c      	adds	r7, #12
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr
 801114c:	20000098 	.word	0x20000098
 8011150:	e000ed04 	.word	0xe000ed04

08011154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801115a:	4b12      	ldr	r3, [pc, #72]	; (80111a4 <vPortExitCritical+0x50>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d10a      	bne.n	8011178 <vPortExitCritical+0x24>
	__asm volatile
 8011162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011166:	f383 8811 	msr	BASEPRI, r3
 801116a:	f3bf 8f6f 	isb	sy
 801116e:	f3bf 8f4f 	dsb	sy
 8011172:	607b      	str	r3, [r7, #4]
}
 8011174:	bf00      	nop
 8011176:	e7fe      	b.n	8011176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011178:	4b0a      	ldr	r3, [pc, #40]	; (80111a4 <vPortExitCritical+0x50>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	3b01      	subs	r3, #1
 801117e:	4a09      	ldr	r2, [pc, #36]	; (80111a4 <vPortExitCritical+0x50>)
 8011180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011182:	4b08      	ldr	r3, [pc, #32]	; (80111a4 <vPortExitCritical+0x50>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d105      	bne.n	8011196 <vPortExitCritical+0x42>
 801118a:	2300      	movs	r3, #0
 801118c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	f383 8811 	msr	BASEPRI, r3
}
 8011194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011196:	bf00      	nop
 8011198:	370c      	adds	r7, #12
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	20000098 	.word	0x20000098
	...

080111b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80111b0:	f3ef 8009 	mrs	r0, PSP
 80111b4:	f3bf 8f6f 	isb	sy
 80111b8:	4b15      	ldr	r3, [pc, #84]	; (8011210 <pxCurrentTCBConst>)
 80111ba:	681a      	ldr	r2, [r3, #0]
 80111bc:	f01e 0f10 	tst.w	lr, #16
 80111c0:	bf08      	it	eq
 80111c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80111c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ca:	6010      	str	r0, [r2, #0]
 80111cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80111d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80111d4:	f380 8811 	msr	BASEPRI, r0
 80111d8:	f3bf 8f4f 	dsb	sy
 80111dc:	f3bf 8f6f 	isb	sy
 80111e0:	f7fe ff9a 	bl	8010118 <vTaskSwitchContext>
 80111e4:	f04f 0000 	mov.w	r0, #0
 80111e8:	f380 8811 	msr	BASEPRI, r0
 80111ec:	bc09      	pop	{r0, r3}
 80111ee:	6819      	ldr	r1, [r3, #0]
 80111f0:	6808      	ldr	r0, [r1, #0]
 80111f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f6:	f01e 0f10 	tst.w	lr, #16
 80111fa:	bf08      	it	eq
 80111fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011200:	f380 8809 	msr	PSP, r0
 8011204:	f3bf 8f6f 	isb	sy
 8011208:	4770      	bx	lr
 801120a:	bf00      	nop
 801120c:	f3af 8000 	nop.w

08011210 <pxCurrentTCBConst>:
 8011210:	20000d78 	.word	0x20000d78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011214:	bf00      	nop
 8011216:	bf00      	nop

08011218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
	__asm volatile
 801121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011222:	f383 8811 	msr	BASEPRI, r3
 8011226:	f3bf 8f6f 	isb	sy
 801122a:	f3bf 8f4f 	dsb	sy
 801122e:	607b      	str	r3, [r7, #4]
}
 8011230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011232:	f7fe feb7 	bl	800ffa4 <xTaskIncrementTick>
 8011236:	4603      	mov	r3, r0
 8011238:	2b00      	cmp	r3, #0
 801123a:	d003      	beq.n	8011244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801123c:	4b06      	ldr	r3, [pc, #24]	; (8011258 <xPortSysTickHandler+0x40>)
 801123e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011242:	601a      	str	r2, [r3, #0]
 8011244:	2300      	movs	r3, #0
 8011246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	f383 8811 	msr	BASEPRI, r3
}
 801124e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011250:	bf00      	nop
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	e000ed04 	.word	0xe000ed04

0801125c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801125c:	b480      	push	{r7}
 801125e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011260:	4b0b      	ldr	r3, [pc, #44]	; (8011290 <vPortSetupTimerInterrupt+0x34>)
 8011262:	2200      	movs	r2, #0
 8011264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011266:	4b0b      	ldr	r3, [pc, #44]	; (8011294 <vPortSetupTimerInterrupt+0x38>)
 8011268:	2200      	movs	r2, #0
 801126a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801126c:	4b0a      	ldr	r3, [pc, #40]	; (8011298 <vPortSetupTimerInterrupt+0x3c>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4a0a      	ldr	r2, [pc, #40]	; (801129c <vPortSetupTimerInterrupt+0x40>)
 8011272:	fba2 2303 	umull	r2, r3, r2, r3
 8011276:	099b      	lsrs	r3, r3, #6
 8011278:	4a09      	ldr	r2, [pc, #36]	; (80112a0 <vPortSetupTimerInterrupt+0x44>)
 801127a:	3b01      	subs	r3, #1
 801127c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801127e:	4b04      	ldr	r3, [pc, #16]	; (8011290 <vPortSetupTimerInterrupt+0x34>)
 8011280:	2207      	movs	r2, #7
 8011282:	601a      	str	r2, [r3, #0]
}
 8011284:	bf00      	nop
 8011286:	46bd      	mov	sp, r7
 8011288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	e000e010 	.word	0xe000e010
 8011294:	e000e018 	.word	0xe000e018
 8011298:	2000006c 	.word	0x2000006c
 801129c:	10624dd3 	.word	0x10624dd3
 80112a0:	e000e014 	.word	0xe000e014

080112a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80112a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80112b4 <vPortEnableVFP+0x10>
 80112a8:	6801      	ldr	r1, [r0, #0]
 80112aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80112ae:	6001      	str	r1, [r0, #0]
 80112b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80112b2:	bf00      	nop
 80112b4:	e000ed88 	.word	0xe000ed88

080112b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80112b8:	b480      	push	{r7}
 80112ba:	b085      	sub	sp, #20
 80112bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80112be:	f3ef 8305 	mrs	r3, IPSR
 80112c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2b0f      	cmp	r3, #15
 80112c8:	d914      	bls.n	80112f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80112ca:	4a17      	ldr	r2, [pc, #92]	; (8011328 <vPortValidateInterruptPriority+0x70>)
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	4413      	add	r3, r2
 80112d0:	781b      	ldrb	r3, [r3, #0]
 80112d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80112d4:	4b15      	ldr	r3, [pc, #84]	; (801132c <vPortValidateInterruptPriority+0x74>)
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	7afa      	ldrb	r2, [r7, #11]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d20a      	bcs.n	80112f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80112de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e2:	f383 8811 	msr	BASEPRI, r3
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	f3bf 8f4f 	dsb	sy
 80112ee:	607b      	str	r3, [r7, #4]
}
 80112f0:	bf00      	nop
 80112f2:	e7fe      	b.n	80112f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80112f4:	4b0e      	ldr	r3, [pc, #56]	; (8011330 <vPortValidateInterruptPriority+0x78>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80112fc:	4b0d      	ldr	r3, [pc, #52]	; (8011334 <vPortValidateInterruptPriority+0x7c>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	429a      	cmp	r2, r3
 8011302:	d90a      	bls.n	801131a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011308:	f383 8811 	msr	BASEPRI, r3
 801130c:	f3bf 8f6f 	isb	sy
 8011310:	f3bf 8f4f 	dsb	sy
 8011314:	603b      	str	r3, [r7, #0]
}
 8011316:	bf00      	nop
 8011318:	e7fe      	b.n	8011318 <vPortValidateInterruptPriority+0x60>
	}
 801131a:	bf00      	nop
 801131c:	3714      	adds	r7, #20
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr
 8011326:	bf00      	nop
 8011328:	e000e3f0 	.word	0xe000e3f0
 801132c:	200013a4 	.word	0x200013a4
 8011330:	e000ed0c 	.word	0xe000ed0c
 8011334:	200013a8 	.word	0x200013a8

08011338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b08a      	sub	sp, #40	; 0x28
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011340:	2300      	movs	r3, #0
 8011342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011344:	f7fe fd72 	bl	800fe2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011348:	4b5d      	ldr	r3, [pc, #372]	; (80114c0 <pvPortMalloc+0x188>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d101      	bne.n	8011354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011350:	f000 f924 	bl	801159c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011354:	4b5b      	ldr	r3, [pc, #364]	; (80114c4 <pvPortMalloc+0x18c>)
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	4013      	ands	r3, r2
 801135c:	2b00      	cmp	r3, #0
 801135e:	f040 8093 	bne.w	8011488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d01d      	beq.n	80113a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011368:	2208      	movs	r2, #8
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	4413      	add	r3, r2
 801136e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f003 0307 	and.w	r3, r3, #7
 8011376:	2b00      	cmp	r3, #0
 8011378:	d014      	beq.n	80113a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f023 0307 	bic.w	r3, r3, #7
 8011380:	3308      	adds	r3, #8
 8011382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f003 0307 	and.w	r3, r3, #7
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00a      	beq.n	80113a4 <pvPortMalloc+0x6c>
	__asm volatile
 801138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011392:	f383 8811 	msr	BASEPRI, r3
 8011396:	f3bf 8f6f 	isb	sy
 801139a:	f3bf 8f4f 	dsb	sy
 801139e:	617b      	str	r3, [r7, #20]
}
 80113a0:	bf00      	nop
 80113a2:	e7fe      	b.n	80113a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d06e      	beq.n	8011488 <pvPortMalloc+0x150>
 80113aa:	4b47      	ldr	r3, [pc, #284]	; (80114c8 <pvPortMalloc+0x190>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d869      	bhi.n	8011488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80113b4:	4b45      	ldr	r3, [pc, #276]	; (80114cc <pvPortMalloc+0x194>)
 80113b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80113b8:	4b44      	ldr	r3, [pc, #272]	; (80114cc <pvPortMalloc+0x194>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80113be:	e004      	b.n	80113ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80113c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80113c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80113ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	687a      	ldr	r2, [r7, #4]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d903      	bls.n	80113dc <pvPortMalloc+0xa4>
 80113d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d1f1      	bne.n	80113c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80113dc:	4b38      	ldr	r3, [pc, #224]	; (80114c0 <pvPortMalloc+0x188>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d050      	beq.n	8011488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80113e6:	6a3b      	ldr	r3, [r7, #32]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	2208      	movs	r2, #8
 80113ec:	4413      	add	r3, r2
 80113ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80113f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	6a3b      	ldr	r3, [r7, #32]
 80113f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80113f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fa:	685a      	ldr	r2, [r3, #4]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	1ad2      	subs	r2, r2, r3
 8011400:	2308      	movs	r3, #8
 8011402:	005b      	lsls	r3, r3, #1
 8011404:	429a      	cmp	r2, r3
 8011406:	d91f      	bls.n	8011448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	4413      	add	r3, r2
 801140e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011410:	69bb      	ldr	r3, [r7, #24]
 8011412:	f003 0307 	and.w	r3, r3, #7
 8011416:	2b00      	cmp	r3, #0
 8011418:	d00a      	beq.n	8011430 <pvPortMalloc+0xf8>
	__asm volatile
 801141a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801141e:	f383 8811 	msr	BASEPRI, r3
 8011422:	f3bf 8f6f 	isb	sy
 8011426:	f3bf 8f4f 	dsb	sy
 801142a:	613b      	str	r3, [r7, #16]
}
 801142c:	bf00      	nop
 801142e:	e7fe      	b.n	801142e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011432:	685a      	ldr	r2, [r3, #4]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	1ad2      	subs	r2, r2, r3
 8011438:	69bb      	ldr	r3, [r7, #24]
 801143a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143e:	687a      	ldr	r2, [r7, #4]
 8011440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011442:	69b8      	ldr	r0, [r7, #24]
 8011444:	f000 f90c 	bl	8011660 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011448:	4b1f      	ldr	r3, [pc, #124]	; (80114c8 <pvPortMalloc+0x190>)
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	4a1d      	ldr	r2, [pc, #116]	; (80114c8 <pvPortMalloc+0x190>)
 8011454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011456:	4b1c      	ldr	r3, [pc, #112]	; (80114c8 <pvPortMalloc+0x190>)
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	4b1d      	ldr	r3, [pc, #116]	; (80114d0 <pvPortMalloc+0x198>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	429a      	cmp	r2, r3
 8011460:	d203      	bcs.n	801146a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011462:	4b19      	ldr	r3, [pc, #100]	; (80114c8 <pvPortMalloc+0x190>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	4a1a      	ldr	r2, [pc, #104]	; (80114d0 <pvPortMalloc+0x198>)
 8011468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146c:	685a      	ldr	r2, [r3, #4]
 801146e:	4b15      	ldr	r3, [pc, #84]	; (80114c4 <pvPortMalloc+0x18c>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	431a      	orrs	r2, r3
 8011474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801147a:	2200      	movs	r2, #0
 801147c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801147e:	4b15      	ldr	r3, [pc, #84]	; (80114d4 <pvPortMalloc+0x19c>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	3301      	adds	r3, #1
 8011484:	4a13      	ldr	r2, [pc, #76]	; (80114d4 <pvPortMalloc+0x19c>)
 8011486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011488:	f7fe fcde 	bl	800fe48 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801148c:	69fb      	ldr	r3, [r7, #28]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d101      	bne.n	8011496 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011492:	f7ef fda5 	bl	8000fe0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011496:	69fb      	ldr	r3, [r7, #28]
 8011498:	f003 0307 	and.w	r3, r3, #7
 801149c:	2b00      	cmp	r3, #0
 801149e:	d00a      	beq.n	80114b6 <pvPortMalloc+0x17e>
	__asm volatile
 80114a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a4:	f383 8811 	msr	BASEPRI, r3
 80114a8:	f3bf 8f6f 	isb	sy
 80114ac:	f3bf 8f4f 	dsb	sy
 80114b0:	60fb      	str	r3, [r7, #12]
}
 80114b2:	bf00      	nop
 80114b4:	e7fe      	b.n	80114b4 <pvPortMalloc+0x17c>
	return pvReturn;
 80114b6:	69fb      	ldr	r3, [r7, #28]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3728      	adds	r7, #40	; 0x28
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	200093b4 	.word	0x200093b4
 80114c4:	200093c8 	.word	0x200093c8
 80114c8:	200093b8 	.word	0x200093b8
 80114cc:	200093ac 	.word	0x200093ac
 80114d0:	200093bc 	.word	0x200093bc
 80114d4:	200093c0 	.word	0x200093c0

080114d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b086      	sub	sp, #24
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d04d      	beq.n	8011586 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80114ea:	2308      	movs	r3, #8
 80114ec:	425b      	negs	r3, r3
 80114ee:	697a      	ldr	r2, [r7, #20]
 80114f0:	4413      	add	r3, r2
 80114f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	685a      	ldr	r2, [r3, #4]
 80114fc:	4b24      	ldr	r3, [pc, #144]	; (8011590 <vPortFree+0xb8>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4013      	ands	r3, r2
 8011502:	2b00      	cmp	r3, #0
 8011504:	d10a      	bne.n	801151c <vPortFree+0x44>
	__asm volatile
 8011506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801150a:	f383 8811 	msr	BASEPRI, r3
 801150e:	f3bf 8f6f 	isb	sy
 8011512:	f3bf 8f4f 	dsb	sy
 8011516:	60fb      	str	r3, [r7, #12]
}
 8011518:	bf00      	nop
 801151a:	e7fe      	b.n	801151a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d00a      	beq.n	801153a <vPortFree+0x62>
	__asm volatile
 8011524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011528:	f383 8811 	msr	BASEPRI, r3
 801152c:	f3bf 8f6f 	isb	sy
 8011530:	f3bf 8f4f 	dsb	sy
 8011534:	60bb      	str	r3, [r7, #8]
}
 8011536:	bf00      	nop
 8011538:	e7fe      	b.n	8011538 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	685a      	ldr	r2, [r3, #4]
 801153e:	4b14      	ldr	r3, [pc, #80]	; (8011590 <vPortFree+0xb8>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	4013      	ands	r3, r2
 8011544:	2b00      	cmp	r3, #0
 8011546:	d01e      	beq.n	8011586 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d11a      	bne.n	8011586 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	685a      	ldr	r2, [r3, #4]
 8011554:	4b0e      	ldr	r3, [pc, #56]	; (8011590 <vPortFree+0xb8>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	43db      	mvns	r3, r3
 801155a:	401a      	ands	r2, r3
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011560:	f7fe fc64 	bl	800fe2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	685a      	ldr	r2, [r3, #4]
 8011568:	4b0a      	ldr	r3, [pc, #40]	; (8011594 <vPortFree+0xbc>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	4413      	add	r3, r2
 801156e:	4a09      	ldr	r2, [pc, #36]	; (8011594 <vPortFree+0xbc>)
 8011570:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011572:	6938      	ldr	r0, [r7, #16]
 8011574:	f000 f874 	bl	8011660 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011578:	4b07      	ldr	r3, [pc, #28]	; (8011598 <vPortFree+0xc0>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	3301      	adds	r3, #1
 801157e:	4a06      	ldr	r2, [pc, #24]	; (8011598 <vPortFree+0xc0>)
 8011580:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011582:	f7fe fc61 	bl	800fe48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011586:	bf00      	nop
 8011588:	3718      	adds	r7, #24
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
 801158e:	bf00      	nop
 8011590:	200093c8 	.word	0x200093c8
 8011594:	200093b8 	.word	0x200093b8
 8011598:	200093c4 	.word	0x200093c4

0801159c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801159c:	b480      	push	{r7}
 801159e:	b085      	sub	sp, #20
 80115a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80115a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80115a8:	4b27      	ldr	r3, [pc, #156]	; (8011648 <prvHeapInit+0xac>)
 80115aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f003 0307 	and.w	r3, r3, #7
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d00c      	beq.n	80115d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	3307      	adds	r3, #7
 80115ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	f023 0307 	bic.w	r3, r3, #7
 80115c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80115c4:	68ba      	ldr	r2, [r7, #8]
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	1ad3      	subs	r3, r2, r3
 80115ca:	4a1f      	ldr	r2, [pc, #124]	; (8011648 <prvHeapInit+0xac>)
 80115cc:	4413      	add	r3, r2
 80115ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80115d4:	4a1d      	ldr	r2, [pc, #116]	; (801164c <prvHeapInit+0xb0>)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80115da:	4b1c      	ldr	r3, [pc, #112]	; (801164c <prvHeapInit+0xb0>)
 80115dc:	2200      	movs	r2, #0
 80115de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	68ba      	ldr	r2, [r7, #8]
 80115e4:	4413      	add	r3, r2
 80115e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80115e8:	2208      	movs	r2, #8
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	1a9b      	subs	r3, r3, r2
 80115ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f023 0307 	bic.w	r3, r3, #7
 80115f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	4a15      	ldr	r2, [pc, #84]	; (8011650 <prvHeapInit+0xb4>)
 80115fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80115fe:	4b14      	ldr	r3, [pc, #80]	; (8011650 <prvHeapInit+0xb4>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2200      	movs	r2, #0
 8011604:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011606:	4b12      	ldr	r3, [pc, #72]	; (8011650 <prvHeapInit+0xb4>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2200      	movs	r2, #0
 801160c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	68fa      	ldr	r2, [r7, #12]
 8011616:	1ad2      	subs	r2, r2, r3
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801161c:	4b0c      	ldr	r3, [pc, #48]	; (8011650 <prvHeapInit+0xb4>)
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	4a0a      	ldr	r2, [pc, #40]	; (8011654 <prvHeapInit+0xb8>)
 801162a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	4a09      	ldr	r2, [pc, #36]	; (8011658 <prvHeapInit+0xbc>)
 8011632:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011634:	4b09      	ldr	r3, [pc, #36]	; (801165c <prvHeapInit+0xc0>)
 8011636:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801163a:	601a      	str	r2, [r3, #0]
}
 801163c:	bf00      	nop
 801163e:	3714      	adds	r7, #20
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr
 8011648:	200013ac 	.word	0x200013ac
 801164c:	200093ac 	.word	0x200093ac
 8011650:	200093b4 	.word	0x200093b4
 8011654:	200093bc 	.word	0x200093bc
 8011658:	200093b8 	.word	0x200093b8
 801165c:	200093c8 	.word	0x200093c8

08011660 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011660:	b480      	push	{r7}
 8011662:	b085      	sub	sp, #20
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011668:	4b28      	ldr	r3, [pc, #160]	; (801170c <prvInsertBlockIntoFreeList+0xac>)
 801166a:	60fb      	str	r3, [r7, #12]
 801166c:	e002      	b.n	8011674 <prvInsertBlockIntoFreeList+0x14>
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	60fb      	str	r3, [r7, #12]
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	429a      	cmp	r2, r3
 801167c:	d8f7      	bhi.n	801166e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	68ba      	ldr	r2, [r7, #8]
 8011688:	4413      	add	r3, r2
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	429a      	cmp	r2, r3
 801168e:	d108      	bne.n	80116a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	685a      	ldr	r2, [r3, #4]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	441a      	add	r2, r3
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	68ba      	ldr	r2, [r7, #8]
 80116ac:	441a      	add	r2, r3
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d118      	bne.n	80116e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	4b15      	ldr	r3, [pc, #84]	; (8011710 <prvInsertBlockIntoFreeList+0xb0>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	429a      	cmp	r2, r3
 80116c0:	d00d      	beq.n	80116de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	685a      	ldr	r2, [r3, #4]
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	685b      	ldr	r3, [r3, #4]
 80116cc:	441a      	add	r2, r3
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	681a      	ldr	r2, [r3, #0]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	601a      	str	r2, [r3, #0]
 80116dc:	e008      	b.n	80116f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80116de:	4b0c      	ldr	r3, [pc, #48]	; (8011710 <prvInsertBlockIntoFreeList+0xb0>)
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	601a      	str	r2, [r3, #0]
 80116e6:	e003      	b.n	80116f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80116f0:	68fa      	ldr	r2, [r7, #12]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d002      	beq.n	80116fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	687a      	ldr	r2, [r7, #4]
 80116fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80116fe:	bf00      	nop
 8011700:	3714      	adds	r7, #20
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr
 801170a:	bf00      	nop
 801170c:	200093ac 	.word	0x200093ac
 8011710:	200093b4 	.word	0x200093b4

08011714 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8011718:	2200      	movs	r2, #0
 801171a:	490e      	ldr	r1, [pc, #56]	; (8011754 <MX_USB_HOST_Init+0x40>)
 801171c:	480e      	ldr	r0, [pc, #56]	; (8011758 <MX_USB_HOST_Init+0x44>)
 801171e:	f7fb f9cb 	bl	800cab8 <USBH_Init>
 8011722:	4603      	mov	r3, r0
 8011724:	2b00      	cmp	r3, #0
 8011726:	d001      	beq.n	801172c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011728:	f7f0 fc22 	bl	8001f70 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 801172c:	490b      	ldr	r1, [pc, #44]	; (801175c <MX_USB_HOST_Init+0x48>)
 801172e:	480a      	ldr	r0, [pc, #40]	; (8011758 <MX_USB_HOST_Init+0x44>)
 8011730:	f7fb fa72 	bl	800cc18 <USBH_RegisterClass>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d001      	beq.n	801173e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801173a:	f7f0 fc19 	bl	8001f70 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 801173e:	4806      	ldr	r0, [pc, #24]	; (8011758 <MX_USB_HOST_Init+0x44>)
 8011740:	f7fb faf6 	bl	800cd30 <USBH_Start>
 8011744:	4603      	mov	r3, r0
 8011746:	2b00      	cmp	r3, #0
 8011748:	d001      	beq.n	801174e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801174a:	f7f0 fc11 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801174e:	bf00      	nop
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	08011761 	.word	0x08011761
 8011758:	200093cc 	.word	0x200093cc
 801175c:	20000078 	.word	0x20000078

08011760 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011760:	b480      	push	{r7}
 8011762:	b083      	sub	sp, #12
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	460b      	mov	r3, r1
 801176a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801176c:	78fb      	ldrb	r3, [r7, #3]
 801176e:	3b01      	subs	r3, #1
 8011770:	2b04      	cmp	r3, #4
 8011772:	d819      	bhi.n	80117a8 <USBH_UserProcess+0x48>
 8011774:	a201      	add	r2, pc, #4	; (adr r2, 801177c <USBH_UserProcess+0x1c>)
 8011776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801177a:	bf00      	nop
 801177c:	080117a9 	.word	0x080117a9
 8011780:	08011799 	.word	0x08011799
 8011784:	080117a9 	.word	0x080117a9
 8011788:	080117a1 	.word	0x080117a1
 801178c:	08011791 	.word	0x08011791
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011790:	4b09      	ldr	r3, [pc, #36]	; (80117b8 <USBH_UserProcess+0x58>)
 8011792:	2203      	movs	r2, #3
 8011794:	701a      	strb	r2, [r3, #0]
  break;
 8011796:	e008      	b.n	80117aa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011798:	4b07      	ldr	r3, [pc, #28]	; (80117b8 <USBH_UserProcess+0x58>)
 801179a:	2202      	movs	r2, #2
 801179c:	701a      	strb	r2, [r3, #0]
  break;
 801179e:	e004      	b.n	80117aa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80117a0:	4b05      	ldr	r3, [pc, #20]	; (80117b8 <USBH_UserProcess+0x58>)
 80117a2:	2201      	movs	r2, #1
 80117a4:	701a      	strb	r2, [r3, #0]
  break;
 80117a6:	e000      	b.n	80117aa <USBH_UserProcess+0x4a>

  default:
  break;
 80117a8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80117aa:	bf00      	nop
 80117ac:	370c      	adds	r7, #12
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop
 80117b8:	200097b0 	.word	0x200097b0

080117bc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b08a      	sub	sp, #40	; 0x28
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80117c4:	f107 0314 	add.w	r3, r7, #20
 80117c8:	2200      	movs	r2, #0
 80117ca:	601a      	str	r2, [r3, #0]
 80117cc:	605a      	str	r2, [r3, #4]
 80117ce:	609a      	str	r2, [r3, #8]
 80117d0:	60da      	str	r2, [r3, #12]
 80117d2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	4a24      	ldr	r2, [pc, #144]	; (801186c <HAL_HCD_MspInit+0xb0>)
 80117da:	4293      	cmp	r3, r2
 80117dc:	d141      	bne.n	8011862 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80117de:	2300      	movs	r3, #0
 80117e0:	613b      	str	r3, [r7, #16]
 80117e2:	4b23      	ldr	r3, [pc, #140]	; (8011870 <HAL_HCD_MspInit+0xb4>)
 80117e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117e6:	4a22      	ldr	r2, [pc, #136]	; (8011870 <HAL_HCD_MspInit+0xb4>)
 80117e8:	f043 0302 	orr.w	r3, r3, #2
 80117ec:	6313      	str	r3, [r2, #48]	; 0x30
 80117ee:	4b20      	ldr	r3, [pc, #128]	; (8011870 <HAL_HCD_MspInit+0xb4>)
 80117f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117f2:	f003 0302 	and.w	r3, r3, #2
 80117f6:	613b      	str	r3, [r7, #16]
 80117f8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80117fa:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80117fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011800:	2302      	movs	r3, #2
 8011802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011804:	2300      	movs	r3, #0
 8011806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011808:	2300      	movs	r3, #0
 801180a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801180c:	230c      	movs	r3, #12
 801180e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011810:	f107 0314 	add.w	r3, r7, #20
 8011814:	4619      	mov	r1, r3
 8011816:	4817      	ldr	r0, [pc, #92]	; (8011874 <HAL_HCD_MspInit+0xb8>)
 8011818:	f7f3 fd64 	bl	80052e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 801181c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011822:	2300      	movs	r3, #0
 8011824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011826:	2300      	movs	r3, #0
 8011828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 801182a:	f107 0314 	add.w	r3, r7, #20
 801182e:	4619      	mov	r1, r3
 8011830:	4810      	ldr	r0, [pc, #64]	; (8011874 <HAL_HCD_MspInit+0xb8>)
 8011832:	f7f3 fd57 	bl	80052e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8011836:	2300      	movs	r3, #0
 8011838:	60fb      	str	r3, [r7, #12]
 801183a:	4b0d      	ldr	r3, [pc, #52]	; (8011870 <HAL_HCD_MspInit+0xb4>)
 801183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801183e:	4a0c      	ldr	r2, [pc, #48]	; (8011870 <HAL_HCD_MspInit+0xb4>)
 8011840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011844:	6313      	str	r3, [r2, #48]	; 0x30
 8011846:	4b0a      	ldr	r3, [pc, #40]	; (8011870 <HAL_HCD_MspInit+0xb4>)
 8011848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801184a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801184e:	60fb      	str	r3, [r7, #12]
 8011850:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8011852:	2200      	movs	r2, #0
 8011854:	2105      	movs	r1, #5
 8011856:	204d      	movs	r0, #77	; 0x4d
 8011858:	f7f3 f954 	bl	8004b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801185c:	204d      	movs	r0, #77	; 0x4d
 801185e:	f7f3 f96d 	bl	8004b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8011862:	bf00      	nop
 8011864:	3728      	adds	r7, #40	; 0x28
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
 801186a:	bf00      	nop
 801186c:	40040000 	.word	0x40040000
 8011870:	40023800 	.word	0x40023800
 8011874:	40020400 	.word	0x40020400

08011878 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011886:	4618      	mov	r0, r3
 8011888:	f7fb ff09 	bl	800d69e <USBH_LL_IncTimer>
}
 801188c:	bf00      	nop
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}

08011894 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fb ff4d 	bl	800d742 <USBH_LL_Connect>
}
 80118a8:	bf00      	nop
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b082      	sub	sp, #8
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118be:	4618      	mov	r0, r3
 80118c0:	f7fb ff62 	bl	800d788 <USBH_LL_Disconnect>
}
 80118c4:	bf00      	nop
 80118c6:	3708      	adds	r7, #8
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}

080118cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	460b      	mov	r3, r1
 80118d6:	70fb      	strb	r3, [r7, #3]
 80118d8:	4613      	mov	r3, r2
 80118da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7fb ff99 	bl	800d81a <USBH_LL_NotifyURBChange>
#endif
}
 80118e8:	bf00      	nop
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118fe:	4618      	mov	r0, r3
 8011900:	f7fb fef7 	bl	800d6f2 <USBH_LL_PortEnabled>
}
 8011904:	bf00      	nop
 8011906:	3708      	adds	r7, #8
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801191a:	4618      	mov	r0, r3
 801191c:	f7fb ff03 	bl	800d726 <USBH_LL_PortDisabled>
}
 8011920:	bf00      	nop
 8011922:	3708      	adds	r7, #8
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b082      	sub	sp, #8
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011936:	2b00      	cmp	r3, #0
 8011938:	d132      	bne.n	80119a0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 801193a:	4a1c      	ldr	r2, [pc, #112]	; (80119ac <USBH_LL_Init+0x84>)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	4a19      	ldr	r2, [pc, #100]	; (80119ac <USBH_LL_Init+0x84>)
 8011946:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801194a:	4b18      	ldr	r3, [pc, #96]	; (80119ac <USBH_LL_Init+0x84>)
 801194c:	4a18      	ldr	r2, [pc, #96]	; (80119b0 <USBH_LL_Init+0x88>)
 801194e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8011950:	4b16      	ldr	r3, [pc, #88]	; (80119ac <USBH_LL_Init+0x84>)
 8011952:	220c      	movs	r2, #12
 8011954:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8011956:	4b15      	ldr	r3, [pc, #84]	; (80119ac <USBH_LL_Init+0x84>)
 8011958:	2201      	movs	r2, #1
 801195a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801195c:	4b13      	ldr	r3, [pc, #76]	; (80119ac <USBH_LL_Init+0x84>)
 801195e:	2200      	movs	r2, #0
 8011960:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8011962:	4b12      	ldr	r3, [pc, #72]	; (80119ac <USBH_LL_Init+0x84>)
 8011964:	2202      	movs	r2, #2
 8011966:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011968:	4b10      	ldr	r3, [pc, #64]	; (80119ac <USBH_LL_Init+0x84>)
 801196a:	2200      	movs	r2, #0
 801196c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801196e:	4b0f      	ldr	r3, [pc, #60]	; (80119ac <USBH_LL_Init+0x84>)
 8011970:	2200      	movs	r2, #0
 8011972:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011974:	4b0d      	ldr	r3, [pc, #52]	; (80119ac <USBH_LL_Init+0x84>)
 8011976:	2200      	movs	r2, #0
 8011978:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801197a:	4b0c      	ldr	r3, [pc, #48]	; (80119ac <USBH_LL_Init+0x84>)
 801197c:	2200      	movs	r2, #0
 801197e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8011980:	480a      	ldr	r0, [pc, #40]	; (80119ac <USBH_LL_Init+0x84>)
 8011982:	f7f3 ff80 	bl	8005886 <HAL_HCD_Init>
 8011986:	4603      	mov	r3, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	d001      	beq.n	8011990 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 801198c:	f7f0 faf0 	bl	8001f70 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8011990:	4806      	ldr	r0, [pc, #24]	; (80119ac <USBH_LL_Init+0x84>)
 8011992:	f7f4 fb64 	bl	800605e <HAL_HCD_GetCurrentFrame>
 8011996:	4603      	mov	r3, r0
 8011998:	4619      	mov	r1, r3
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f7fb fe70 	bl	800d680 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80119a0:	2300      	movs	r3, #0
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3708      	adds	r7, #8
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	200097b4 	.word	0x200097b4
 80119b0:	40040000 	.word	0x40040000

080119b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b084      	sub	sp, #16
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119bc:	2300      	movs	r3, #0
 80119be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80119c0:	2300      	movs	r3, #0
 80119c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7f4 fad1 	bl	8005f72 <HAL_HCD_Start>
 80119d0:	4603      	mov	r3, r0
 80119d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80119d4:	7bfb      	ldrb	r3, [r7, #15]
 80119d6:	4618      	mov	r0, r3
 80119d8:	f000 f95c 	bl	8011c94 <USBH_Get_USB_Status>
 80119dc:	4603      	mov	r3, r0
 80119de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3710      	adds	r7, #16
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80119ea:	b580      	push	{r7, lr}
 80119ec:	b084      	sub	sp, #16
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119f2:	2300      	movs	r3, #0
 80119f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80119f6:	2300      	movs	r3, #0
 80119f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7f4 fad9 	bl	8005fb8 <HAL_HCD_Stop>
 8011a06:	4603      	mov	r3, r0
 8011a08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011a0a:	7bfb      	ldrb	r3, [r7, #15]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f000 f941 	bl	8011c94 <USBH_Get_USB_Status>
 8011a12:	4603      	mov	r3, r0
 8011a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3710      	adds	r7, #16
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}

08011a20 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011a28:	2301      	movs	r3, #1
 8011a2a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a32:	4618      	mov	r0, r3
 8011a34:	f7f4 fb21 	bl	800607a <HAL_HCD_GetCurrentSpeed>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	2b02      	cmp	r3, #2
 8011a3c:	d00c      	beq.n	8011a58 <USBH_LL_GetSpeed+0x38>
 8011a3e:	2b02      	cmp	r3, #2
 8011a40:	d80d      	bhi.n	8011a5e <USBH_LL_GetSpeed+0x3e>
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d002      	beq.n	8011a4c <USBH_LL_GetSpeed+0x2c>
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d003      	beq.n	8011a52 <USBH_LL_GetSpeed+0x32>
 8011a4a:	e008      	b.n	8011a5e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8011a50:	e008      	b.n	8011a64 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011a52:	2301      	movs	r3, #1
 8011a54:	73fb      	strb	r3, [r7, #15]
    break;
 8011a56:	e005      	b.n	8011a64 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011a58:	2302      	movs	r3, #2
 8011a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8011a5c:	e002      	b.n	8011a64 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011a5e:	2301      	movs	r3, #1
 8011a60:	73fb      	strb	r3, [r7, #15]
    break;
 8011a62:	bf00      	nop
  }
  return  speed;
 8011a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3710      	adds	r7, #16
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}

08011a6e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011a6e:	b580      	push	{r7, lr}
 8011a70:	b084      	sub	sp, #16
 8011a72:	af00      	add	r7, sp, #0
 8011a74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a76:	2300      	movs	r3, #0
 8011a78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7f4 fab4 	bl	8005ff2 <HAL_HCD_ResetPort>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011a8e:	7bfb      	ldrb	r3, [r7, #15]
 8011a90:	4618      	mov	r0, r3
 8011a92:	f000 f8ff 	bl	8011c94 <USBH_Get_USB_Status>
 8011a96:	4603      	mov	r3, r0
 8011a98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3710      	adds	r7, #16
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	460b      	mov	r3, r1
 8011aae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011ab6:	78fa      	ldrb	r2, [r7, #3]
 8011ab8:	4611      	mov	r1, r2
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7f4 fabb 	bl	8006036 <HAL_HCD_HC_GetXferCount>
 8011ac0:	4603      	mov	r3, r0
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3708      	adds	r7, #8
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}

08011aca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011aca:	b590      	push	{r4, r7, lr}
 8011acc:	b089      	sub	sp, #36	; 0x24
 8011ace:	af04      	add	r7, sp, #16
 8011ad0:	6078      	str	r0, [r7, #4]
 8011ad2:	4608      	mov	r0, r1
 8011ad4:	4611      	mov	r1, r2
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	4603      	mov	r3, r0
 8011ada:	70fb      	strb	r3, [r7, #3]
 8011adc:	460b      	mov	r3, r1
 8011ade:	70bb      	strb	r3, [r7, #2]
 8011ae0:	4613      	mov	r3, r2
 8011ae2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011af2:	787c      	ldrb	r4, [r7, #1]
 8011af4:	78ba      	ldrb	r2, [r7, #2]
 8011af6:	78f9      	ldrb	r1, [r7, #3]
 8011af8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011afa:	9302      	str	r3, [sp, #8]
 8011afc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011b00:	9301      	str	r3, [sp, #4]
 8011b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011b06:	9300      	str	r3, [sp, #0]
 8011b08:	4623      	mov	r3, r4
 8011b0a:	f7f3 ff1e 	bl	800594a <HAL_HCD_HC_Init>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011b12:	7bfb      	ldrb	r3, [r7, #15]
 8011b14:	4618      	mov	r0, r3
 8011b16:	f000 f8bd 	bl	8011c94 <USBH_Get_USB_Status>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3714      	adds	r7, #20
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd90      	pop	{r4, r7, pc}

08011b28 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b084      	sub	sp, #16
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	460b      	mov	r3, r1
 8011b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b34:	2300      	movs	r3, #0
 8011b36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011b42:	78fa      	ldrb	r2, [r7, #3]
 8011b44:	4611      	mov	r1, r2
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7f3 ff8e 	bl	8005a68 <HAL_HCD_HC_Halt>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011b50:	7bfb      	ldrb	r3, [r7, #15]
 8011b52:	4618      	mov	r0, r3
 8011b54:	f000 f89e 	bl	8011c94 <USBH_Get_USB_Status>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}

08011b66 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011b66:	b590      	push	{r4, r7, lr}
 8011b68:	b089      	sub	sp, #36	; 0x24
 8011b6a:	af04      	add	r7, sp, #16
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	4608      	mov	r0, r1
 8011b70:	4611      	mov	r1, r2
 8011b72:	461a      	mov	r2, r3
 8011b74:	4603      	mov	r3, r0
 8011b76:	70fb      	strb	r3, [r7, #3]
 8011b78:	460b      	mov	r3, r1
 8011b7a:	70bb      	strb	r3, [r7, #2]
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b80:	2300      	movs	r3, #0
 8011b82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b84:	2300      	movs	r3, #0
 8011b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011b8e:	787c      	ldrb	r4, [r7, #1]
 8011b90:	78ba      	ldrb	r2, [r7, #2]
 8011b92:	78f9      	ldrb	r1, [r7, #3]
 8011b94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011b98:	9303      	str	r3, [sp, #12]
 8011b9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011b9c:	9302      	str	r3, [sp, #8]
 8011b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba0:	9301      	str	r3, [sp, #4]
 8011ba2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011ba6:	9300      	str	r3, [sp, #0]
 8011ba8:	4623      	mov	r3, r4
 8011baa:	f7f3 ff81 	bl	8005ab0 <HAL_HCD_HC_SubmitRequest>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011bb2:	7bfb      	ldrb	r3, [r7, #15]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f000 f86d 	bl	8011c94 <USBH_Get_USB_Status>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3714      	adds	r7, #20
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd90      	pop	{r4, r7, pc}

08011bc8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b082      	sub	sp, #8
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011bda:	78fa      	ldrb	r2, [r7, #3]
 8011bdc:	4611      	mov	r1, r2
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7f4 fa15 	bl	800600e <HAL_HCD_HC_GetURBState>
 8011be4:	4603      	mov	r3, r0
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3708      	adds	r7, #8
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}

08011bee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011bee:	b580      	push	{r7, lr}
 8011bf0:	b082      	sub	sp, #8
 8011bf2:	af00      	add	r7, sp, #0
 8011bf4:	6078      	str	r0, [r7, #4]
 8011bf6:	460b      	mov	r3, r1
 8011bf8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d103      	bne.n	8011c0c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8011c04:	78fb      	ldrb	r3, [r7, #3]
 8011c06:	4618      	mov	r0, r3
 8011c08:	f000 f870 	bl	8011cec <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011c0c:	20c8      	movs	r0, #200	; 0xc8
 8011c0e:	f7f2 fe9d 	bl	800494c <HAL_Delay>
  return USBH_OK;
 8011c12:	2300      	movs	r3, #0
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3708      	adds	r7, #8
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b085      	sub	sp, #20
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
 8011c24:	460b      	mov	r3, r1
 8011c26:	70fb      	strb	r3, [r7, #3]
 8011c28:	4613      	mov	r3, r2
 8011c2a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c32:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011c34:	78fb      	ldrb	r3, [r7, #3]
 8011c36:	68fa      	ldr	r2, [r7, #12]
 8011c38:	212c      	movs	r1, #44	; 0x2c
 8011c3a:	fb01 f303 	mul.w	r3, r1, r3
 8011c3e:	4413      	add	r3, r2
 8011c40:	333b      	adds	r3, #59	; 0x3b
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d009      	beq.n	8011c5c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011c48:	78fb      	ldrb	r3, [r7, #3]
 8011c4a:	68fa      	ldr	r2, [r7, #12]
 8011c4c:	212c      	movs	r1, #44	; 0x2c
 8011c4e:	fb01 f303 	mul.w	r3, r1, r3
 8011c52:	4413      	add	r3, r2
 8011c54:	3354      	adds	r3, #84	; 0x54
 8011c56:	78ba      	ldrb	r2, [r7, #2]
 8011c58:	701a      	strb	r2, [r3, #0]
 8011c5a:	e008      	b.n	8011c6e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011c5c:	78fb      	ldrb	r3, [r7, #3]
 8011c5e:	68fa      	ldr	r2, [r7, #12]
 8011c60:	212c      	movs	r1, #44	; 0x2c
 8011c62:	fb01 f303 	mul.w	r3, r1, r3
 8011c66:	4413      	add	r3, r2
 8011c68:	3355      	adds	r3, #85	; 0x55
 8011c6a:	78ba      	ldrb	r2, [r7, #2]
 8011c6c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011c6e:	2300      	movs	r3, #0
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3714      	adds	r7, #20
 8011c74:	46bd      	mov	sp, r7
 8011c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7a:	4770      	bx	lr

08011c7c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f7f2 fe61 	bl	800494c <HAL_Delay>
}
 8011c8a:	bf00      	nop
 8011c8c:	3708      	adds	r7, #8
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
	...

08011c94 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011c94:	b480      	push	{r7}
 8011c96:	b085      	sub	sp, #20
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011ca2:	79fb      	ldrb	r3, [r7, #7]
 8011ca4:	2b03      	cmp	r3, #3
 8011ca6:	d817      	bhi.n	8011cd8 <USBH_Get_USB_Status+0x44>
 8011ca8:	a201      	add	r2, pc, #4	; (adr r2, 8011cb0 <USBH_Get_USB_Status+0x1c>)
 8011caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cae:	bf00      	nop
 8011cb0:	08011cc1 	.word	0x08011cc1
 8011cb4:	08011cc7 	.word	0x08011cc7
 8011cb8:	08011ccd 	.word	0x08011ccd
 8011cbc:	08011cd3 	.word	0x08011cd3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8011cc4:	e00b      	b.n	8011cde <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011cc6:	2302      	movs	r3, #2
 8011cc8:	73fb      	strb	r3, [r7, #15]
    break;
 8011cca:	e008      	b.n	8011cde <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011ccc:	2301      	movs	r3, #1
 8011cce:	73fb      	strb	r3, [r7, #15]
    break;
 8011cd0:	e005      	b.n	8011cde <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011cd2:	2302      	movs	r3, #2
 8011cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8011cd6:	e002      	b.n	8011cde <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011cd8:	2302      	movs	r3, #2
 8011cda:	73fb      	strb	r3, [r7, #15]
    break;
 8011cdc:	bf00      	nop
  }
  return usb_status;
 8011cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3714      	adds	r7, #20
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cea:	4770      	bx	lr

08011cec <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b084      	sub	sp, #16
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011cf6:	79fb      	ldrb	r3, [r7, #7]
 8011cf8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8011cfa:	79fb      	ldrb	r3, [r7, #7]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d102      	bne.n	8011d06 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011d00:	2301      	movs	r3, #1
 8011d02:	73fb      	strb	r3, [r7, #15]
 8011d04:	e001      	b.n	8011d0a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011d06:	2300      	movs	r3, #0
 8011d08:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8011d0a:	7bfb      	ldrb	r3, [r7, #15]
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	2110      	movs	r1, #16
 8011d10:	4803      	ldr	r0, [pc, #12]	; (8011d20 <MX_DriverVbusHS+0x34>)
 8011d12:	f7f3 fd9f 	bl	8005854 <HAL_GPIO_WritePin>
}
 8011d16:	bf00      	nop
 8011d18:	3710      	adds	r7, #16
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	40020800 	.word	0x40020800

08011d24 <malloc>:
 8011d24:	4b02      	ldr	r3, [pc, #8]	; (8011d30 <malloc+0xc>)
 8011d26:	4601      	mov	r1, r0
 8011d28:	6818      	ldr	r0, [r3, #0]
 8011d2a:	f000 b82b 	b.w	8011d84 <_malloc_r>
 8011d2e:	bf00      	nop
 8011d30:	200000e8 	.word	0x200000e8

08011d34 <free>:
 8011d34:	4b02      	ldr	r3, [pc, #8]	; (8011d40 <free+0xc>)
 8011d36:	4601      	mov	r1, r0
 8011d38:	6818      	ldr	r0, [r3, #0]
 8011d3a:	f000 b929 	b.w	8011f90 <_free_r>
 8011d3e:	bf00      	nop
 8011d40:	200000e8 	.word	0x200000e8

08011d44 <sbrk_aligned>:
 8011d44:	b570      	push	{r4, r5, r6, lr}
 8011d46:	4e0e      	ldr	r6, [pc, #56]	; (8011d80 <sbrk_aligned+0x3c>)
 8011d48:	460c      	mov	r4, r1
 8011d4a:	6831      	ldr	r1, [r6, #0]
 8011d4c:	4605      	mov	r5, r0
 8011d4e:	b911      	cbnz	r1, 8011d56 <sbrk_aligned+0x12>
 8011d50:	f000 f8cc 	bl	8011eec <_sbrk_r>
 8011d54:	6030      	str	r0, [r6, #0]
 8011d56:	4621      	mov	r1, r4
 8011d58:	4628      	mov	r0, r5
 8011d5a:	f000 f8c7 	bl	8011eec <_sbrk_r>
 8011d5e:	1c43      	adds	r3, r0, #1
 8011d60:	d00a      	beq.n	8011d78 <sbrk_aligned+0x34>
 8011d62:	1cc4      	adds	r4, r0, #3
 8011d64:	f024 0403 	bic.w	r4, r4, #3
 8011d68:	42a0      	cmp	r0, r4
 8011d6a:	d007      	beq.n	8011d7c <sbrk_aligned+0x38>
 8011d6c:	1a21      	subs	r1, r4, r0
 8011d6e:	4628      	mov	r0, r5
 8011d70:	f000 f8bc 	bl	8011eec <_sbrk_r>
 8011d74:	3001      	adds	r0, #1
 8011d76:	d101      	bne.n	8011d7c <sbrk_aligned+0x38>
 8011d78:	f04f 34ff 	mov.w	r4, #4294967295
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	bd70      	pop	{r4, r5, r6, pc}
 8011d80:	20009abc 	.word	0x20009abc

08011d84 <_malloc_r>:
 8011d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d88:	1ccd      	adds	r5, r1, #3
 8011d8a:	f025 0503 	bic.w	r5, r5, #3
 8011d8e:	3508      	adds	r5, #8
 8011d90:	2d0c      	cmp	r5, #12
 8011d92:	bf38      	it	cc
 8011d94:	250c      	movcc	r5, #12
 8011d96:	2d00      	cmp	r5, #0
 8011d98:	4607      	mov	r7, r0
 8011d9a:	db01      	blt.n	8011da0 <_malloc_r+0x1c>
 8011d9c:	42a9      	cmp	r1, r5
 8011d9e:	d905      	bls.n	8011dac <_malloc_r+0x28>
 8011da0:	230c      	movs	r3, #12
 8011da2:	603b      	str	r3, [r7, #0]
 8011da4:	2600      	movs	r6, #0
 8011da6:	4630      	mov	r0, r6
 8011da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011e80 <_malloc_r+0xfc>
 8011db0:	f000 f868 	bl	8011e84 <__malloc_lock>
 8011db4:	f8d8 3000 	ldr.w	r3, [r8]
 8011db8:	461c      	mov	r4, r3
 8011dba:	bb5c      	cbnz	r4, 8011e14 <_malloc_r+0x90>
 8011dbc:	4629      	mov	r1, r5
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	f7ff ffc0 	bl	8011d44 <sbrk_aligned>
 8011dc4:	1c43      	adds	r3, r0, #1
 8011dc6:	4604      	mov	r4, r0
 8011dc8:	d155      	bne.n	8011e76 <_malloc_r+0xf2>
 8011dca:	f8d8 4000 	ldr.w	r4, [r8]
 8011dce:	4626      	mov	r6, r4
 8011dd0:	2e00      	cmp	r6, #0
 8011dd2:	d145      	bne.n	8011e60 <_malloc_r+0xdc>
 8011dd4:	2c00      	cmp	r4, #0
 8011dd6:	d048      	beq.n	8011e6a <_malloc_r+0xe6>
 8011dd8:	6823      	ldr	r3, [r4, #0]
 8011dda:	4631      	mov	r1, r6
 8011ddc:	4638      	mov	r0, r7
 8011dde:	eb04 0903 	add.w	r9, r4, r3
 8011de2:	f000 f883 	bl	8011eec <_sbrk_r>
 8011de6:	4581      	cmp	r9, r0
 8011de8:	d13f      	bne.n	8011e6a <_malloc_r+0xe6>
 8011dea:	6821      	ldr	r1, [r4, #0]
 8011dec:	1a6d      	subs	r5, r5, r1
 8011dee:	4629      	mov	r1, r5
 8011df0:	4638      	mov	r0, r7
 8011df2:	f7ff ffa7 	bl	8011d44 <sbrk_aligned>
 8011df6:	3001      	adds	r0, #1
 8011df8:	d037      	beq.n	8011e6a <_malloc_r+0xe6>
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	442b      	add	r3, r5
 8011dfe:	6023      	str	r3, [r4, #0]
 8011e00:	f8d8 3000 	ldr.w	r3, [r8]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d038      	beq.n	8011e7a <_malloc_r+0xf6>
 8011e08:	685a      	ldr	r2, [r3, #4]
 8011e0a:	42a2      	cmp	r2, r4
 8011e0c:	d12b      	bne.n	8011e66 <_malloc_r+0xe2>
 8011e0e:	2200      	movs	r2, #0
 8011e10:	605a      	str	r2, [r3, #4]
 8011e12:	e00f      	b.n	8011e34 <_malloc_r+0xb0>
 8011e14:	6822      	ldr	r2, [r4, #0]
 8011e16:	1b52      	subs	r2, r2, r5
 8011e18:	d41f      	bmi.n	8011e5a <_malloc_r+0xd6>
 8011e1a:	2a0b      	cmp	r2, #11
 8011e1c:	d917      	bls.n	8011e4e <_malloc_r+0xca>
 8011e1e:	1961      	adds	r1, r4, r5
 8011e20:	42a3      	cmp	r3, r4
 8011e22:	6025      	str	r5, [r4, #0]
 8011e24:	bf18      	it	ne
 8011e26:	6059      	strne	r1, [r3, #4]
 8011e28:	6863      	ldr	r3, [r4, #4]
 8011e2a:	bf08      	it	eq
 8011e2c:	f8c8 1000 	streq.w	r1, [r8]
 8011e30:	5162      	str	r2, [r4, r5]
 8011e32:	604b      	str	r3, [r1, #4]
 8011e34:	4638      	mov	r0, r7
 8011e36:	f104 060b 	add.w	r6, r4, #11
 8011e3a:	f000 f829 	bl	8011e90 <__malloc_unlock>
 8011e3e:	f026 0607 	bic.w	r6, r6, #7
 8011e42:	1d23      	adds	r3, r4, #4
 8011e44:	1af2      	subs	r2, r6, r3
 8011e46:	d0ae      	beq.n	8011da6 <_malloc_r+0x22>
 8011e48:	1b9b      	subs	r3, r3, r6
 8011e4a:	50a3      	str	r3, [r4, r2]
 8011e4c:	e7ab      	b.n	8011da6 <_malloc_r+0x22>
 8011e4e:	42a3      	cmp	r3, r4
 8011e50:	6862      	ldr	r2, [r4, #4]
 8011e52:	d1dd      	bne.n	8011e10 <_malloc_r+0x8c>
 8011e54:	f8c8 2000 	str.w	r2, [r8]
 8011e58:	e7ec      	b.n	8011e34 <_malloc_r+0xb0>
 8011e5a:	4623      	mov	r3, r4
 8011e5c:	6864      	ldr	r4, [r4, #4]
 8011e5e:	e7ac      	b.n	8011dba <_malloc_r+0x36>
 8011e60:	4634      	mov	r4, r6
 8011e62:	6876      	ldr	r6, [r6, #4]
 8011e64:	e7b4      	b.n	8011dd0 <_malloc_r+0x4c>
 8011e66:	4613      	mov	r3, r2
 8011e68:	e7cc      	b.n	8011e04 <_malloc_r+0x80>
 8011e6a:	230c      	movs	r3, #12
 8011e6c:	603b      	str	r3, [r7, #0]
 8011e6e:	4638      	mov	r0, r7
 8011e70:	f000 f80e 	bl	8011e90 <__malloc_unlock>
 8011e74:	e797      	b.n	8011da6 <_malloc_r+0x22>
 8011e76:	6025      	str	r5, [r4, #0]
 8011e78:	e7dc      	b.n	8011e34 <_malloc_r+0xb0>
 8011e7a:	605b      	str	r3, [r3, #4]
 8011e7c:	deff      	udf	#255	; 0xff
 8011e7e:	bf00      	nop
 8011e80:	20009ab8 	.word	0x20009ab8

08011e84 <__malloc_lock>:
 8011e84:	4801      	ldr	r0, [pc, #4]	; (8011e8c <__malloc_lock+0x8>)
 8011e86:	f000 b86b 	b.w	8011f60 <__retarget_lock_acquire_recursive>
 8011e8a:	bf00      	nop
 8011e8c:	20009bfc 	.word	0x20009bfc

08011e90 <__malloc_unlock>:
 8011e90:	4801      	ldr	r0, [pc, #4]	; (8011e98 <__malloc_unlock+0x8>)
 8011e92:	f000 b866 	b.w	8011f62 <__retarget_lock_release_recursive>
 8011e96:	bf00      	nop
 8011e98:	20009bfc 	.word	0x20009bfc

08011e9c <siprintf>:
 8011e9c:	b40e      	push	{r1, r2, r3}
 8011e9e:	b500      	push	{lr}
 8011ea0:	b09c      	sub	sp, #112	; 0x70
 8011ea2:	ab1d      	add	r3, sp, #116	; 0x74
 8011ea4:	9002      	str	r0, [sp, #8]
 8011ea6:	9006      	str	r0, [sp, #24]
 8011ea8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011eac:	4809      	ldr	r0, [pc, #36]	; (8011ed4 <siprintf+0x38>)
 8011eae:	9107      	str	r1, [sp, #28]
 8011eb0:	9104      	str	r1, [sp, #16]
 8011eb2:	4909      	ldr	r1, [pc, #36]	; (8011ed8 <siprintf+0x3c>)
 8011eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011eb8:	9105      	str	r1, [sp, #20]
 8011eba:	6800      	ldr	r0, [r0, #0]
 8011ebc:	9301      	str	r3, [sp, #4]
 8011ebe:	a902      	add	r1, sp, #8
 8011ec0:	f000 f90c 	bl	80120dc <_svfiprintf_r>
 8011ec4:	9b02      	ldr	r3, [sp, #8]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	701a      	strb	r2, [r3, #0]
 8011eca:	b01c      	add	sp, #112	; 0x70
 8011ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ed0:	b003      	add	sp, #12
 8011ed2:	4770      	bx	lr
 8011ed4:	200000e8 	.word	0x200000e8
 8011ed8:	ffff0208 	.word	0xffff0208

08011edc <memset>:
 8011edc:	4402      	add	r2, r0
 8011ede:	4603      	mov	r3, r0
 8011ee0:	4293      	cmp	r3, r2
 8011ee2:	d100      	bne.n	8011ee6 <memset+0xa>
 8011ee4:	4770      	bx	lr
 8011ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8011eea:	e7f9      	b.n	8011ee0 <memset+0x4>

08011eec <_sbrk_r>:
 8011eec:	b538      	push	{r3, r4, r5, lr}
 8011eee:	4d06      	ldr	r5, [pc, #24]	; (8011f08 <_sbrk_r+0x1c>)
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	4608      	mov	r0, r1
 8011ef6:	602b      	str	r3, [r5, #0]
 8011ef8:	f7f2 fc74 	bl	80047e4 <_sbrk>
 8011efc:	1c43      	adds	r3, r0, #1
 8011efe:	d102      	bne.n	8011f06 <_sbrk_r+0x1a>
 8011f00:	682b      	ldr	r3, [r5, #0]
 8011f02:	b103      	cbz	r3, 8011f06 <_sbrk_r+0x1a>
 8011f04:	6023      	str	r3, [r4, #0]
 8011f06:	bd38      	pop	{r3, r4, r5, pc}
 8011f08:	20009bf8 	.word	0x20009bf8

08011f0c <__errno>:
 8011f0c:	4b01      	ldr	r3, [pc, #4]	; (8011f14 <__errno+0x8>)
 8011f0e:	6818      	ldr	r0, [r3, #0]
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	200000e8 	.word	0x200000e8

08011f18 <__libc_init_array>:
 8011f18:	b570      	push	{r4, r5, r6, lr}
 8011f1a:	4d0d      	ldr	r5, [pc, #52]	; (8011f50 <__libc_init_array+0x38>)
 8011f1c:	4c0d      	ldr	r4, [pc, #52]	; (8011f54 <__libc_init_array+0x3c>)
 8011f1e:	1b64      	subs	r4, r4, r5
 8011f20:	10a4      	asrs	r4, r4, #2
 8011f22:	2600      	movs	r6, #0
 8011f24:	42a6      	cmp	r6, r4
 8011f26:	d109      	bne.n	8011f3c <__libc_init_array+0x24>
 8011f28:	4d0b      	ldr	r5, [pc, #44]	; (8011f58 <__libc_init_array+0x40>)
 8011f2a:	4c0c      	ldr	r4, [pc, #48]	; (8011f5c <__libc_init_array+0x44>)
 8011f2c:	f000 fbb6 	bl	801269c <_init>
 8011f30:	1b64      	subs	r4, r4, r5
 8011f32:	10a4      	asrs	r4, r4, #2
 8011f34:	2600      	movs	r6, #0
 8011f36:	42a6      	cmp	r6, r4
 8011f38:	d105      	bne.n	8011f46 <__libc_init_array+0x2e>
 8011f3a:	bd70      	pop	{r4, r5, r6, pc}
 8011f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f40:	4798      	blx	r3
 8011f42:	3601      	adds	r6, #1
 8011f44:	e7ee      	b.n	8011f24 <__libc_init_array+0xc>
 8011f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f4a:	4798      	blx	r3
 8011f4c:	3601      	adds	r6, #1
 8011f4e:	e7f2      	b.n	8011f36 <__libc_init_array+0x1e>
 8011f50:	0807bb1c 	.word	0x0807bb1c
 8011f54:	0807bb1c 	.word	0x0807bb1c
 8011f58:	0807bb1c 	.word	0x0807bb1c
 8011f5c:	0807bb20 	.word	0x0807bb20

08011f60 <__retarget_lock_acquire_recursive>:
 8011f60:	4770      	bx	lr

08011f62 <__retarget_lock_release_recursive>:
 8011f62:	4770      	bx	lr

08011f64 <strcpy>:
 8011f64:	4603      	mov	r3, r0
 8011f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f6a:	f803 2b01 	strb.w	r2, [r3], #1
 8011f6e:	2a00      	cmp	r2, #0
 8011f70:	d1f9      	bne.n	8011f66 <strcpy+0x2>
 8011f72:	4770      	bx	lr

08011f74 <memcpy>:
 8011f74:	440a      	add	r2, r1
 8011f76:	4291      	cmp	r1, r2
 8011f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f7c:	d100      	bne.n	8011f80 <memcpy+0xc>
 8011f7e:	4770      	bx	lr
 8011f80:	b510      	push	{r4, lr}
 8011f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f8a:	4291      	cmp	r1, r2
 8011f8c:	d1f9      	bne.n	8011f82 <memcpy+0xe>
 8011f8e:	bd10      	pop	{r4, pc}

08011f90 <_free_r>:
 8011f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f92:	2900      	cmp	r1, #0
 8011f94:	d044      	beq.n	8012020 <_free_r+0x90>
 8011f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f9a:	9001      	str	r0, [sp, #4]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8011fa2:	bfb8      	it	lt
 8011fa4:	18e4      	addlt	r4, r4, r3
 8011fa6:	f7ff ff6d 	bl	8011e84 <__malloc_lock>
 8011faa:	4a1e      	ldr	r2, [pc, #120]	; (8012024 <_free_r+0x94>)
 8011fac:	9801      	ldr	r0, [sp, #4]
 8011fae:	6813      	ldr	r3, [r2, #0]
 8011fb0:	b933      	cbnz	r3, 8011fc0 <_free_r+0x30>
 8011fb2:	6063      	str	r3, [r4, #4]
 8011fb4:	6014      	str	r4, [r2, #0]
 8011fb6:	b003      	add	sp, #12
 8011fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011fbc:	f7ff bf68 	b.w	8011e90 <__malloc_unlock>
 8011fc0:	42a3      	cmp	r3, r4
 8011fc2:	d908      	bls.n	8011fd6 <_free_r+0x46>
 8011fc4:	6825      	ldr	r5, [r4, #0]
 8011fc6:	1961      	adds	r1, r4, r5
 8011fc8:	428b      	cmp	r3, r1
 8011fca:	bf01      	itttt	eq
 8011fcc:	6819      	ldreq	r1, [r3, #0]
 8011fce:	685b      	ldreq	r3, [r3, #4]
 8011fd0:	1949      	addeq	r1, r1, r5
 8011fd2:	6021      	streq	r1, [r4, #0]
 8011fd4:	e7ed      	b.n	8011fb2 <_free_r+0x22>
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	b10b      	cbz	r3, 8011fe0 <_free_r+0x50>
 8011fdc:	42a3      	cmp	r3, r4
 8011fde:	d9fa      	bls.n	8011fd6 <_free_r+0x46>
 8011fe0:	6811      	ldr	r1, [r2, #0]
 8011fe2:	1855      	adds	r5, r2, r1
 8011fe4:	42a5      	cmp	r5, r4
 8011fe6:	d10b      	bne.n	8012000 <_free_r+0x70>
 8011fe8:	6824      	ldr	r4, [r4, #0]
 8011fea:	4421      	add	r1, r4
 8011fec:	1854      	adds	r4, r2, r1
 8011fee:	42a3      	cmp	r3, r4
 8011ff0:	6011      	str	r1, [r2, #0]
 8011ff2:	d1e0      	bne.n	8011fb6 <_free_r+0x26>
 8011ff4:	681c      	ldr	r4, [r3, #0]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	6053      	str	r3, [r2, #4]
 8011ffa:	440c      	add	r4, r1
 8011ffc:	6014      	str	r4, [r2, #0]
 8011ffe:	e7da      	b.n	8011fb6 <_free_r+0x26>
 8012000:	d902      	bls.n	8012008 <_free_r+0x78>
 8012002:	230c      	movs	r3, #12
 8012004:	6003      	str	r3, [r0, #0]
 8012006:	e7d6      	b.n	8011fb6 <_free_r+0x26>
 8012008:	6825      	ldr	r5, [r4, #0]
 801200a:	1961      	adds	r1, r4, r5
 801200c:	428b      	cmp	r3, r1
 801200e:	bf04      	itt	eq
 8012010:	6819      	ldreq	r1, [r3, #0]
 8012012:	685b      	ldreq	r3, [r3, #4]
 8012014:	6063      	str	r3, [r4, #4]
 8012016:	bf04      	itt	eq
 8012018:	1949      	addeq	r1, r1, r5
 801201a:	6021      	streq	r1, [r4, #0]
 801201c:	6054      	str	r4, [r2, #4]
 801201e:	e7ca      	b.n	8011fb6 <_free_r+0x26>
 8012020:	b003      	add	sp, #12
 8012022:	bd30      	pop	{r4, r5, pc}
 8012024:	20009ab8 	.word	0x20009ab8

08012028 <__ssputs_r>:
 8012028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801202c:	688e      	ldr	r6, [r1, #8]
 801202e:	461f      	mov	r7, r3
 8012030:	42be      	cmp	r6, r7
 8012032:	680b      	ldr	r3, [r1, #0]
 8012034:	4682      	mov	sl, r0
 8012036:	460c      	mov	r4, r1
 8012038:	4690      	mov	r8, r2
 801203a:	d82c      	bhi.n	8012096 <__ssputs_r+0x6e>
 801203c:	898a      	ldrh	r2, [r1, #12]
 801203e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012042:	d026      	beq.n	8012092 <__ssputs_r+0x6a>
 8012044:	6965      	ldr	r5, [r4, #20]
 8012046:	6909      	ldr	r1, [r1, #16]
 8012048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801204c:	eba3 0901 	sub.w	r9, r3, r1
 8012050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012054:	1c7b      	adds	r3, r7, #1
 8012056:	444b      	add	r3, r9
 8012058:	106d      	asrs	r5, r5, #1
 801205a:	429d      	cmp	r5, r3
 801205c:	bf38      	it	cc
 801205e:	461d      	movcc	r5, r3
 8012060:	0553      	lsls	r3, r2, #21
 8012062:	d527      	bpl.n	80120b4 <__ssputs_r+0x8c>
 8012064:	4629      	mov	r1, r5
 8012066:	f7ff fe8d 	bl	8011d84 <_malloc_r>
 801206a:	4606      	mov	r6, r0
 801206c:	b360      	cbz	r0, 80120c8 <__ssputs_r+0xa0>
 801206e:	6921      	ldr	r1, [r4, #16]
 8012070:	464a      	mov	r2, r9
 8012072:	f7ff ff7f 	bl	8011f74 <memcpy>
 8012076:	89a3      	ldrh	r3, [r4, #12]
 8012078:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801207c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012080:	81a3      	strh	r3, [r4, #12]
 8012082:	6126      	str	r6, [r4, #16]
 8012084:	6165      	str	r5, [r4, #20]
 8012086:	444e      	add	r6, r9
 8012088:	eba5 0509 	sub.w	r5, r5, r9
 801208c:	6026      	str	r6, [r4, #0]
 801208e:	60a5      	str	r5, [r4, #8]
 8012090:	463e      	mov	r6, r7
 8012092:	42be      	cmp	r6, r7
 8012094:	d900      	bls.n	8012098 <__ssputs_r+0x70>
 8012096:	463e      	mov	r6, r7
 8012098:	6820      	ldr	r0, [r4, #0]
 801209a:	4632      	mov	r2, r6
 801209c:	4641      	mov	r1, r8
 801209e:	f000 faab 	bl	80125f8 <memmove>
 80120a2:	68a3      	ldr	r3, [r4, #8]
 80120a4:	1b9b      	subs	r3, r3, r6
 80120a6:	60a3      	str	r3, [r4, #8]
 80120a8:	6823      	ldr	r3, [r4, #0]
 80120aa:	4433      	add	r3, r6
 80120ac:	6023      	str	r3, [r4, #0]
 80120ae:	2000      	movs	r0, #0
 80120b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120b4:	462a      	mov	r2, r5
 80120b6:	f000 fab9 	bl	801262c <_realloc_r>
 80120ba:	4606      	mov	r6, r0
 80120bc:	2800      	cmp	r0, #0
 80120be:	d1e0      	bne.n	8012082 <__ssputs_r+0x5a>
 80120c0:	6921      	ldr	r1, [r4, #16]
 80120c2:	4650      	mov	r0, sl
 80120c4:	f7ff ff64 	bl	8011f90 <_free_r>
 80120c8:	230c      	movs	r3, #12
 80120ca:	f8ca 3000 	str.w	r3, [sl]
 80120ce:	89a3      	ldrh	r3, [r4, #12]
 80120d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120d4:	81a3      	strh	r3, [r4, #12]
 80120d6:	f04f 30ff 	mov.w	r0, #4294967295
 80120da:	e7e9      	b.n	80120b0 <__ssputs_r+0x88>

080120dc <_svfiprintf_r>:
 80120dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e0:	4698      	mov	r8, r3
 80120e2:	898b      	ldrh	r3, [r1, #12]
 80120e4:	061b      	lsls	r3, r3, #24
 80120e6:	b09d      	sub	sp, #116	; 0x74
 80120e8:	4607      	mov	r7, r0
 80120ea:	460d      	mov	r5, r1
 80120ec:	4614      	mov	r4, r2
 80120ee:	d50e      	bpl.n	801210e <_svfiprintf_r+0x32>
 80120f0:	690b      	ldr	r3, [r1, #16]
 80120f2:	b963      	cbnz	r3, 801210e <_svfiprintf_r+0x32>
 80120f4:	2140      	movs	r1, #64	; 0x40
 80120f6:	f7ff fe45 	bl	8011d84 <_malloc_r>
 80120fa:	6028      	str	r0, [r5, #0]
 80120fc:	6128      	str	r0, [r5, #16]
 80120fe:	b920      	cbnz	r0, 801210a <_svfiprintf_r+0x2e>
 8012100:	230c      	movs	r3, #12
 8012102:	603b      	str	r3, [r7, #0]
 8012104:	f04f 30ff 	mov.w	r0, #4294967295
 8012108:	e0d0      	b.n	80122ac <_svfiprintf_r+0x1d0>
 801210a:	2340      	movs	r3, #64	; 0x40
 801210c:	616b      	str	r3, [r5, #20]
 801210e:	2300      	movs	r3, #0
 8012110:	9309      	str	r3, [sp, #36]	; 0x24
 8012112:	2320      	movs	r3, #32
 8012114:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012118:	f8cd 800c 	str.w	r8, [sp, #12]
 801211c:	2330      	movs	r3, #48	; 0x30
 801211e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80122c4 <_svfiprintf_r+0x1e8>
 8012122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012126:	f04f 0901 	mov.w	r9, #1
 801212a:	4623      	mov	r3, r4
 801212c:	469a      	mov	sl, r3
 801212e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012132:	b10a      	cbz	r2, 8012138 <_svfiprintf_r+0x5c>
 8012134:	2a25      	cmp	r2, #37	; 0x25
 8012136:	d1f9      	bne.n	801212c <_svfiprintf_r+0x50>
 8012138:	ebba 0b04 	subs.w	fp, sl, r4
 801213c:	d00b      	beq.n	8012156 <_svfiprintf_r+0x7a>
 801213e:	465b      	mov	r3, fp
 8012140:	4622      	mov	r2, r4
 8012142:	4629      	mov	r1, r5
 8012144:	4638      	mov	r0, r7
 8012146:	f7ff ff6f 	bl	8012028 <__ssputs_r>
 801214a:	3001      	adds	r0, #1
 801214c:	f000 80a9 	beq.w	80122a2 <_svfiprintf_r+0x1c6>
 8012150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012152:	445a      	add	r2, fp
 8012154:	9209      	str	r2, [sp, #36]	; 0x24
 8012156:	f89a 3000 	ldrb.w	r3, [sl]
 801215a:	2b00      	cmp	r3, #0
 801215c:	f000 80a1 	beq.w	80122a2 <_svfiprintf_r+0x1c6>
 8012160:	2300      	movs	r3, #0
 8012162:	f04f 32ff 	mov.w	r2, #4294967295
 8012166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801216a:	f10a 0a01 	add.w	sl, sl, #1
 801216e:	9304      	str	r3, [sp, #16]
 8012170:	9307      	str	r3, [sp, #28]
 8012172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012176:	931a      	str	r3, [sp, #104]	; 0x68
 8012178:	4654      	mov	r4, sl
 801217a:	2205      	movs	r2, #5
 801217c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012180:	4850      	ldr	r0, [pc, #320]	; (80122c4 <_svfiprintf_r+0x1e8>)
 8012182:	f7ee f83d 	bl	8000200 <memchr>
 8012186:	9a04      	ldr	r2, [sp, #16]
 8012188:	b9d8      	cbnz	r0, 80121c2 <_svfiprintf_r+0xe6>
 801218a:	06d0      	lsls	r0, r2, #27
 801218c:	bf44      	itt	mi
 801218e:	2320      	movmi	r3, #32
 8012190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012194:	0711      	lsls	r1, r2, #28
 8012196:	bf44      	itt	mi
 8012198:	232b      	movmi	r3, #43	; 0x2b
 801219a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801219e:	f89a 3000 	ldrb.w	r3, [sl]
 80121a2:	2b2a      	cmp	r3, #42	; 0x2a
 80121a4:	d015      	beq.n	80121d2 <_svfiprintf_r+0xf6>
 80121a6:	9a07      	ldr	r2, [sp, #28]
 80121a8:	4654      	mov	r4, sl
 80121aa:	2000      	movs	r0, #0
 80121ac:	f04f 0c0a 	mov.w	ip, #10
 80121b0:	4621      	mov	r1, r4
 80121b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121b6:	3b30      	subs	r3, #48	; 0x30
 80121b8:	2b09      	cmp	r3, #9
 80121ba:	d94d      	bls.n	8012258 <_svfiprintf_r+0x17c>
 80121bc:	b1b0      	cbz	r0, 80121ec <_svfiprintf_r+0x110>
 80121be:	9207      	str	r2, [sp, #28]
 80121c0:	e014      	b.n	80121ec <_svfiprintf_r+0x110>
 80121c2:	eba0 0308 	sub.w	r3, r0, r8
 80121c6:	fa09 f303 	lsl.w	r3, r9, r3
 80121ca:	4313      	orrs	r3, r2
 80121cc:	9304      	str	r3, [sp, #16]
 80121ce:	46a2      	mov	sl, r4
 80121d0:	e7d2      	b.n	8012178 <_svfiprintf_r+0x9c>
 80121d2:	9b03      	ldr	r3, [sp, #12]
 80121d4:	1d19      	adds	r1, r3, #4
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	9103      	str	r1, [sp, #12]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	bfbb      	ittet	lt
 80121de:	425b      	neglt	r3, r3
 80121e0:	f042 0202 	orrlt.w	r2, r2, #2
 80121e4:	9307      	strge	r3, [sp, #28]
 80121e6:	9307      	strlt	r3, [sp, #28]
 80121e8:	bfb8      	it	lt
 80121ea:	9204      	strlt	r2, [sp, #16]
 80121ec:	7823      	ldrb	r3, [r4, #0]
 80121ee:	2b2e      	cmp	r3, #46	; 0x2e
 80121f0:	d10c      	bne.n	801220c <_svfiprintf_r+0x130>
 80121f2:	7863      	ldrb	r3, [r4, #1]
 80121f4:	2b2a      	cmp	r3, #42	; 0x2a
 80121f6:	d134      	bne.n	8012262 <_svfiprintf_r+0x186>
 80121f8:	9b03      	ldr	r3, [sp, #12]
 80121fa:	1d1a      	adds	r2, r3, #4
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	9203      	str	r2, [sp, #12]
 8012200:	2b00      	cmp	r3, #0
 8012202:	bfb8      	it	lt
 8012204:	f04f 33ff 	movlt.w	r3, #4294967295
 8012208:	3402      	adds	r4, #2
 801220a:	9305      	str	r3, [sp, #20]
 801220c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80122d4 <_svfiprintf_r+0x1f8>
 8012210:	7821      	ldrb	r1, [r4, #0]
 8012212:	2203      	movs	r2, #3
 8012214:	4650      	mov	r0, sl
 8012216:	f7ed fff3 	bl	8000200 <memchr>
 801221a:	b138      	cbz	r0, 801222c <_svfiprintf_r+0x150>
 801221c:	9b04      	ldr	r3, [sp, #16]
 801221e:	eba0 000a 	sub.w	r0, r0, sl
 8012222:	2240      	movs	r2, #64	; 0x40
 8012224:	4082      	lsls	r2, r0
 8012226:	4313      	orrs	r3, r2
 8012228:	3401      	adds	r4, #1
 801222a:	9304      	str	r3, [sp, #16]
 801222c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012230:	4825      	ldr	r0, [pc, #148]	; (80122c8 <_svfiprintf_r+0x1ec>)
 8012232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012236:	2206      	movs	r2, #6
 8012238:	f7ed ffe2 	bl	8000200 <memchr>
 801223c:	2800      	cmp	r0, #0
 801223e:	d038      	beq.n	80122b2 <_svfiprintf_r+0x1d6>
 8012240:	4b22      	ldr	r3, [pc, #136]	; (80122cc <_svfiprintf_r+0x1f0>)
 8012242:	bb1b      	cbnz	r3, 801228c <_svfiprintf_r+0x1b0>
 8012244:	9b03      	ldr	r3, [sp, #12]
 8012246:	3307      	adds	r3, #7
 8012248:	f023 0307 	bic.w	r3, r3, #7
 801224c:	3308      	adds	r3, #8
 801224e:	9303      	str	r3, [sp, #12]
 8012250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012252:	4433      	add	r3, r6
 8012254:	9309      	str	r3, [sp, #36]	; 0x24
 8012256:	e768      	b.n	801212a <_svfiprintf_r+0x4e>
 8012258:	fb0c 3202 	mla	r2, ip, r2, r3
 801225c:	460c      	mov	r4, r1
 801225e:	2001      	movs	r0, #1
 8012260:	e7a6      	b.n	80121b0 <_svfiprintf_r+0xd4>
 8012262:	2300      	movs	r3, #0
 8012264:	3401      	adds	r4, #1
 8012266:	9305      	str	r3, [sp, #20]
 8012268:	4619      	mov	r1, r3
 801226a:	f04f 0c0a 	mov.w	ip, #10
 801226e:	4620      	mov	r0, r4
 8012270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012274:	3a30      	subs	r2, #48	; 0x30
 8012276:	2a09      	cmp	r2, #9
 8012278:	d903      	bls.n	8012282 <_svfiprintf_r+0x1a6>
 801227a:	2b00      	cmp	r3, #0
 801227c:	d0c6      	beq.n	801220c <_svfiprintf_r+0x130>
 801227e:	9105      	str	r1, [sp, #20]
 8012280:	e7c4      	b.n	801220c <_svfiprintf_r+0x130>
 8012282:	fb0c 2101 	mla	r1, ip, r1, r2
 8012286:	4604      	mov	r4, r0
 8012288:	2301      	movs	r3, #1
 801228a:	e7f0      	b.n	801226e <_svfiprintf_r+0x192>
 801228c:	ab03      	add	r3, sp, #12
 801228e:	9300      	str	r3, [sp, #0]
 8012290:	462a      	mov	r2, r5
 8012292:	4b0f      	ldr	r3, [pc, #60]	; (80122d0 <_svfiprintf_r+0x1f4>)
 8012294:	a904      	add	r1, sp, #16
 8012296:	4638      	mov	r0, r7
 8012298:	f3af 8000 	nop.w
 801229c:	1c42      	adds	r2, r0, #1
 801229e:	4606      	mov	r6, r0
 80122a0:	d1d6      	bne.n	8012250 <_svfiprintf_r+0x174>
 80122a2:	89ab      	ldrh	r3, [r5, #12]
 80122a4:	065b      	lsls	r3, r3, #25
 80122a6:	f53f af2d 	bmi.w	8012104 <_svfiprintf_r+0x28>
 80122aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122ac:	b01d      	add	sp, #116	; 0x74
 80122ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b2:	ab03      	add	r3, sp, #12
 80122b4:	9300      	str	r3, [sp, #0]
 80122b6:	462a      	mov	r2, r5
 80122b8:	4b05      	ldr	r3, [pc, #20]	; (80122d0 <_svfiprintf_r+0x1f4>)
 80122ba:	a904      	add	r1, sp, #16
 80122bc:	4638      	mov	r0, r7
 80122be:	f000 f879 	bl	80123b4 <_printf_i>
 80122c2:	e7eb      	b.n	801229c <_svfiprintf_r+0x1c0>
 80122c4:	0807bae0 	.word	0x0807bae0
 80122c8:	0807baea 	.word	0x0807baea
 80122cc:	00000000 	.word	0x00000000
 80122d0:	08012029 	.word	0x08012029
 80122d4:	0807bae6 	.word	0x0807bae6

080122d8 <_printf_common>:
 80122d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122dc:	4616      	mov	r6, r2
 80122de:	4699      	mov	r9, r3
 80122e0:	688a      	ldr	r2, [r1, #8]
 80122e2:	690b      	ldr	r3, [r1, #16]
 80122e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80122e8:	4293      	cmp	r3, r2
 80122ea:	bfb8      	it	lt
 80122ec:	4613      	movlt	r3, r2
 80122ee:	6033      	str	r3, [r6, #0]
 80122f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80122f4:	4607      	mov	r7, r0
 80122f6:	460c      	mov	r4, r1
 80122f8:	b10a      	cbz	r2, 80122fe <_printf_common+0x26>
 80122fa:	3301      	adds	r3, #1
 80122fc:	6033      	str	r3, [r6, #0]
 80122fe:	6823      	ldr	r3, [r4, #0]
 8012300:	0699      	lsls	r1, r3, #26
 8012302:	bf42      	ittt	mi
 8012304:	6833      	ldrmi	r3, [r6, #0]
 8012306:	3302      	addmi	r3, #2
 8012308:	6033      	strmi	r3, [r6, #0]
 801230a:	6825      	ldr	r5, [r4, #0]
 801230c:	f015 0506 	ands.w	r5, r5, #6
 8012310:	d106      	bne.n	8012320 <_printf_common+0x48>
 8012312:	f104 0a19 	add.w	sl, r4, #25
 8012316:	68e3      	ldr	r3, [r4, #12]
 8012318:	6832      	ldr	r2, [r6, #0]
 801231a:	1a9b      	subs	r3, r3, r2
 801231c:	42ab      	cmp	r3, r5
 801231e:	dc26      	bgt.n	801236e <_printf_common+0x96>
 8012320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012324:	1e13      	subs	r3, r2, #0
 8012326:	6822      	ldr	r2, [r4, #0]
 8012328:	bf18      	it	ne
 801232a:	2301      	movne	r3, #1
 801232c:	0692      	lsls	r2, r2, #26
 801232e:	d42b      	bmi.n	8012388 <_printf_common+0xb0>
 8012330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012334:	4649      	mov	r1, r9
 8012336:	4638      	mov	r0, r7
 8012338:	47c0      	blx	r8
 801233a:	3001      	adds	r0, #1
 801233c:	d01e      	beq.n	801237c <_printf_common+0xa4>
 801233e:	6823      	ldr	r3, [r4, #0]
 8012340:	6922      	ldr	r2, [r4, #16]
 8012342:	f003 0306 	and.w	r3, r3, #6
 8012346:	2b04      	cmp	r3, #4
 8012348:	bf02      	ittt	eq
 801234a:	68e5      	ldreq	r5, [r4, #12]
 801234c:	6833      	ldreq	r3, [r6, #0]
 801234e:	1aed      	subeq	r5, r5, r3
 8012350:	68a3      	ldr	r3, [r4, #8]
 8012352:	bf0c      	ite	eq
 8012354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012358:	2500      	movne	r5, #0
 801235a:	4293      	cmp	r3, r2
 801235c:	bfc4      	itt	gt
 801235e:	1a9b      	subgt	r3, r3, r2
 8012360:	18ed      	addgt	r5, r5, r3
 8012362:	2600      	movs	r6, #0
 8012364:	341a      	adds	r4, #26
 8012366:	42b5      	cmp	r5, r6
 8012368:	d11a      	bne.n	80123a0 <_printf_common+0xc8>
 801236a:	2000      	movs	r0, #0
 801236c:	e008      	b.n	8012380 <_printf_common+0xa8>
 801236e:	2301      	movs	r3, #1
 8012370:	4652      	mov	r2, sl
 8012372:	4649      	mov	r1, r9
 8012374:	4638      	mov	r0, r7
 8012376:	47c0      	blx	r8
 8012378:	3001      	adds	r0, #1
 801237a:	d103      	bne.n	8012384 <_printf_common+0xac>
 801237c:	f04f 30ff 	mov.w	r0, #4294967295
 8012380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012384:	3501      	adds	r5, #1
 8012386:	e7c6      	b.n	8012316 <_printf_common+0x3e>
 8012388:	18e1      	adds	r1, r4, r3
 801238a:	1c5a      	adds	r2, r3, #1
 801238c:	2030      	movs	r0, #48	; 0x30
 801238e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012392:	4422      	add	r2, r4
 8012394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801239c:	3302      	adds	r3, #2
 801239e:	e7c7      	b.n	8012330 <_printf_common+0x58>
 80123a0:	2301      	movs	r3, #1
 80123a2:	4622      	mov	r2, r4
 80123a4:	4649      	mov	r1, r9
 80123a6:	4638      	mov	r0, r7
 80123a8:	47c0      	blx	r8
 80123aa:	3001      	adds	r0, #1
 80123ac:	d0e6      	beq.n	801237c <_printf_common+0xa4>
 80123ae:	3601      	adds	r6, #1
 80123b0:	e7d9      	b.n	8012366 <_printf_common+0x8e>
	...

080123b4 <_printf_i>:
 80123b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80123b8:	7e0f      	ldrb	r7, [r1, #24]
 80123ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80123bc:	2f78      	cmp	r7, #120	; 0x78
 80123be:	4691      	mov	r9, r2
 80123c0:	4680      	mov	r8, r0
 80123c2:	460c      	mov	r4, r1
 80123c4:	469a      	mov	sl, r3
 80123c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80123ca:	d807      	bhi.n	80123dc <_printf_i+0x28>
 80123cc:	2f62      	cmp	r7, #98	; 0x62
 80123ce:	d80a      	bhi.n	80123e6 <_printf_i+0x32>
 80123d0:	2f00      	cmp	r7, #0
 80123d2:	f000 80d4 	beq.w	801257e <_printf_i+0x1ca>
 80123d6:	2f58      	cmp	r7, #88	; 0x58
 80123d8:	f000 80c0 	beq.w	801255c <_printf_i+0x1a8>
 80123dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80123e4:	e03a      	b.n	801245c <_printf_i+0xa8>
 80123e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80123ea:	2b15      	cmp	r3, #21
 80123ec:	d8f6      	bhi.n	80123dc <_printf_i+0x28>
 80123ee:	a101      	add	r1, pc, #4	; (adr r1, 80123f4 <_printf_i+0x40>)
 80123f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80123f4:	0801244d 	.word	0x0801244d
 80123f8:	08012461 	.word	0x08012461
 80123fc:	080123dd 	.word	0x080123dd
 8012400:	080123dd 	.word	0x080123dd
 8012404:	080123dd 	.word	0x080123dd
 8012408:	080123dd 	.word	0x080123dd
 801240c:	08012461 	.word	0x08012461
 8012410:	080123dd 	.word	0x080123dd
 8012414:	080123dd 	.word	0x080123dd
 8012418:	080123dd 	.word	0x080123dd
 801241c:	080123dd 	.word	0x080123dd
 8012420:	08012565 	.word	0x08012565
 8012424:	0801248d 	.word	0x0801248d
 8012428:	0801251f 	.word	0x0801251f
 801242c:	080123dd 	.word	0x080123dd
 8012430:	080123dd 	.word	0x080123dd
 8012434:	08012587 	.word	0x08012587
 8012438:	080123dd 	.word	0x080123dd
 801243c:	0801248d 	.word	0x0801248d
 8012440:	080123dd 	.word	0x080123dd
 8012444:	080123dd 	.word	0x080123dd
 8012448:	08012527 	.word	0x08012527
 801244c:	682b      	ldr	r3, [r5, #0]
 801244e:	1d1a      	adds	r2, r3, #4
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	602a      	str	r2, [r5, #0]
 8012454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801245c:	2301      	movs	r3, #1
 801245e:	e09f      	b.n	80125a0 <_printf_i+0x1ec>
 8012460:	6820      	ldr	r0, [r4, #0]
 8012462:	682b      	ldr	r3, [r5, #0]
 8012464:	0607      	lsls	r7, r0, #24
 8012466:	f103 0104 	add.w	r1, r3, #4
 801246a:	6029      	str	r1, [r5, #0]
 801246c:	d501      	bpl.n	8012472 <_printf_i+0xbe>
 801246e:	681e      	ldr	r6, [r3, #0]
 8012470:	e003      	b.n	801247a <_printf_i+0xc6>
 8012472:	0646      	lsls	r6, r0, #25
 8012474:	d5fb      	bpl.n	801246e <_printf_i+0xba>
 8012476:	f9b3 6000 	ldrsh.w	r6, [r3]
 801247a:	2e00      	cmp	r6, #0
 801247c:	da03      	bge.n	8012486 <_printf_i+0xd2>
 801247e:	232d      	movs	r3, #45	; 0x2d
 8012480:	4276      	negs	r6, r6
 8012482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012486:	485a      	ldr	r0, [pc, #360]	; (80125f0 <_printf_i+0x23c>)
 8012488:	230a      	movs	r3, #10
 801248a:	e012      	b.n	80124b2 <_printf_i+0xfe>
 801248c:	682b      	ldr	r3, [r5, #0]
 801248e:	6820      	ldr	r0, [r4, #0]
 8012490:	1d19      	adds	r1, r3, #4
 8012492:	6029      	str	r1, [r5, #0]
 8012494:	0605      	lsls	r5, r0, #24
 8012496:	d501      	bpl.n	801249c <_printf_i+0xe8>
 8012498:	681e      	ldr	r6, [r3, #0]
 801249a:	e002      	b.n	80124a2 <_printf_i+0xee>
 801249c:	0641      	lsls	r1, r0, #25
 801249e:	d5fb      	bpl.n	8012498 <_printf_i+0xe4>
 80124a0:	881e      	ldrh	r6, [r3, #0]
 80124a2:	4853      	ldr	r0, [pc, #332]	; (80125f0 <_printf_i+0x23c>)
 80124a4:	2f6f      	cmp	r7, #111	; 0x6f
 80124a6:	bf0c      	ite	eq
 80124a8:	2308      	moveq	r3, #8
 80124aa:	230a      	movne	r3, #10
 80124ac:	2100      	movs	r1, #0
 80124ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80124b2:	6865      	ldr	r5, [r4, #4]
 80124b4:	60a5      	str	r5, [r4, #8]
 80124b6:	2d00      	cmp	r5, #0
 80124b8:	bfa2      	ittt	ge
 80124ba:	6821      	ldrge	r1, [r4, #0]
 80124bc:	f021 0104 	bicge.w	r1, r1, #4
 80124c0:	6021      	strge	r1, [r4, #0]
 80124c2:	b90e      	cbnz	r6, 80124c8 <_printf_i+0x114>
 80124c4:	2d00      	cmp	r5, #0
 80124c6:	d04b      	beq.n	8012560 <_printf_i+0x1ac>
 80124c8:	4615      	mov	r5, r2
 80124ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80124ce:	fb03 6711 	mls	r7, r3, r1, r6
 80124d2:	5dc7      	ldrb	r7, [r0, r7]
 80124d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80124d8:	4637      	mov	r7, r6
 80124da:	42bb      	cmp	r3, r7
 80124dc:	460e      	mov	r6, r1
 80124de:	d9f4      	bls.n	80124ca <_printf_i+0x116>
 80124e0:	2b08      	cmp	r3, #8
 80124e2:	d10b      	bne.n	80124fc <_printf_i+0x148>
 80124e4:	6823      	ldr	r3, [r4, #0]
 80124e6:	07de      	lsls	r6, r3, #31
 80124e8:	d508      	bpl.n	80124fc <_printf_i+0x148>
 80124ea:	6923      	ldr	r3, [r4, #16]
 80124ec:	6861      	ldr	r1, [r4, #4]
 80124ee:	4299      	cmp	r1, r3
 80124f0:	bfde      	ittt	le
 80124f2:	2330      	movle	r3, #48	; 0x30
 80124f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80124f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80124fc:	1b52      	subs	r2, r2, r5
 80124fe:	6122      	str	r2, [r4, #16]
 8012500:	f8cd a000 	str.w	sl, [sp]
 8012504:	464b      	mov	r3, r9
 8012506:	aa03      	add	r2, sp, #12
 8012508:	4621      	mov	r1, r4
 801250a:	4640      	mov	r0, r8
 801250c:	f7ff fee4 	bl	80122d8 <_printf_common>
 8012510:	3001      	adds	r0, #1
 8012512:	d14a      	bne.n	80125aa <_printf_i+0x1f6>
 8012514:	f04f 30ff 	mov.w	r0, #4294967295
 8012518:	b004      	add	sp, #16
 801251a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801251e:	6823      	ldr	r3, [r4, #0]
 8012520:	f043 0320 	orr.w	r3, r3, #32
 8012524:	6023      	str	r3, [r4, #0]
 8012526:	4833      	ldr	r0, [pc, #204]	; (80125f4 <_printf_i+0x240>)
 8012528:	2778      	movs	r7, #120	; 0x78
 801252a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801252e:	6823      	ldr	r3, [r4, #0]
 8012530:	6829      	ldr	r1, [r5, #0]
 8012532:	061f      	lsls	r7, r3, #24
 8012534:	f851 6b04 	ldr.w	r6, [r1], #4
 8012538:	d402      	bmi.n	8012540 <_printf_i+0x18c>
 801253a:	065f      	lsls	r7, r3, #25
 801253c:	bf48      	it	mi
 801253e:	b2b6      	uxthmi	r6, r6
 8012540:	07df      	lsls	r7, r3, #31
 8012542:	bf48      	it	mi
 8012544:	f043 0320 	orrmi.w	r3, r3, #32
 8012548:	6029      	str	r1, [r5, #0]
 801254a:	bf48      	it	mi
 801254c:	6023      	strmi	r3, [r4, #0]
 801254e:	b91e      	cbnz	r6, 8012558 <_printf_i+0x1a4>
 8012550:	6823      	ldr	r3, [r4, #0]
 8012552:	f023 0320 	bic.w	r3, r3, #32
 8012556:	6023      	str	r3, [r4, #0]
 8012558:	2310      	movs	r3, #16
 801255a:	e7a7      	b.n	80124ac <_printf_i+0xf8>
 801255c:	4824      	ldr	r0, [pc, #144]	; (80125f0 <_printf_i+0x23c>)
 801255e:	e7e4      	b.n	801252a <_printf_i+0x176>
 8012560:	4615      	mov	r5, r2
 8012562:	e7bd      	b.n	80124e0 <_printf_i+0x12c>
 8012564:	682b      	ldr	r3, [r5, #0]
 8012566:	6826      	ldr	r6, [r4, #0]
 8012568:	6961      	ldr	r1, [r4, #20]
 801256a:	1d18      	adds	r0, r3, #4
 801256c:	6028      	str	r0, [r5, #0]
 801256e:	0635      	lsls	r5, r6, #24
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	d501      	bpl.n	8012578 <_printf_i+0x1c4>
 8012574:	6019      	str	r1, [r3, #0]
 8012576:	e002      	b.n	801257e <_printf_i+0x1ca>
 8012578:	0670      	lsls	r0, r6, #25
 801257a:	d5fb      	bpl.n	8012574 <_printf_i+0x1c0>
 801257c:	8019      	strh	r1, [r3, #0]
 801257e:	2300      	movs	r3, #0
 8012580:	6123      	str	r3, [r4, #16]
 8012582:	4615      	mov	r5, r2
 8012584:	e7bc      	b.n	8012500 <_printf_i+0x14c>
 8012586:	682b      	ldr	r3, [r5, #0]
 8012588:	1d1a      	adds	r2, r3, #4
 801258a:	602a      	str	r2, [r5, #0]
 801258c:	681d      	ldr	r5, [r3, #0]
 801258e:	6862      	ldr	r2, [r4, #4]
 8012590:	2100      	movs	r1, #0
 8012592:	4628      	mov	r0, r5
 8012594:	f7ed fe34 	bl	8000200 <memchr>
 8012598:	b108      	cbz	r0, 801259e <_printf_i+0x1ea>
 801259a:	1b40      	subs	r0, r0, r5
 801259c:	6060      	str	r0, [r4, #4]
 801259e:	6863      	ldr	r3, [r4, #4]
 80125a0:	6123      	str	r3, [r4, #16]
 80125a2:	2300      	movs	r3, #0
 80125a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125a8:	e7aa      	b.n	8012500 <_printf_i+0x14c>
 80125aa:	6923      	ldr	r3, [r4, #16]
 80125ac:	462a      	mov	r2, r5
 80125ae:	4649      	mov	r1, r9
 80125b0:	4640      	mov	r0, r8
 80125b2:	47d0      	blx	sl
 80125b4:	3001      	adds	r0, #1
 80125b6:	d0ad      	beq.n	8012514 <_printf_i+0x160>
 80125b8:	6823      	ldr	r3, [r4, #0]
 80125ba:	079b      	lsls	r3, r3, #30
 80125bc:	d413      	bmi.n	80125e6 <_printf_i+0x232>
 80125be:	68e0      	ldr	r0, [r4, #12]
 80125c0:	9b03      	ldr	r3, [sp, #12]
 80125c2:	4298      	cmp	r0, r3
 80125c4:	bfb8      	it	lt
 80125c6:	4618      	movlt	r0, r3
 80125c8:	e7a6      	b.n	8012518 <_printf_i+0x164>
 80125ca:	2301      	movs	r3, #1
 80125cc:	4632      	mov	r2, r6
 80125ce:	4649      	mov	r1, r9
 80125d0:	4640      	mov	r0, r8
 80125d2:	47d0      	blx	sl
 80125d4:	3001      	adds	r0, #1
 80125d6:	d09d      	beq.n	8012514 <_printf_i+0x160>
 80125d8:	3501      	adds	r5, #1
 80125da:	68e3      	ldr	r3, [r4, #12]
 80125dc:	9903      	ldr	r1, [sp, #12]
 80125de:	1a5b      	subs	r3, r3, r1
 80125e0:	42ab      	cmp	r3, r5
 80125e2:	dcf2      	bgt.n	80125ca <_printf_i+0x216>
 80125e4:	e7eb      	b.n	80125be <_printf_i+0x20a>
 80125e6:	2500      	movs	r5, #0
 80125e8:	f104 0619 	add.w	r6, r4, #25
 80125ec:	e7f5      	b.n	80125da <_printf_i+0x226>
 80125ee:	bf00      	nop
 80125f0:	0807baf1 	.word	0x0807baf1
 80125f4:	0807bb02 	.word	0x0807bb02

080125f8 <memmove>:
 80125f8:	4288      	cmp	r0, r1
 80125fa:	b510      	push	{r4, lr}
 80125fc:	eb01 0402 	add.w	r4, r1, r2
 8012600:	d902      	bls.n	8012608 <memmove+0x10>
 8012602:	4284      	cmp	r4, r0
 8012604:	4623      	mov	r3, r4
 8012606:	d807      	bhi.n	8012618 <memmove+0x20>
 8012608:	1e43      	subs	r3, r0, #1
 801260a:	42a1      	cmp	r1, r4
 801260c:	d008      	beq.n	8012620 <memmove+0x28>
 801260e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012612:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012616:	e7f8      	b.n	801260a <memmove+0x12>
 8012618:	4402      	add	r2, r0
 801261a:	4601      	mov	r1, r0
 801261c:	428a      	cmp	r2, r1
 801261e:	d100      	bne.n	8012622 <memmove+0x2a>
 8012620:	bd10      	pop	{r4, pc}
 8012622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801262a:	e7f7      	b.n	801261c <memmove+0x24>

0801262c <_realloc_r>:
 801262c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012630:	4680      	mov	r8, r0
 8012632:	4614      	mov	r4, r2
 8012634:	460e      	mov	r6, r1
 8012636:	b921      	cbnz	r1, 8012642 <_realloc_r+0x16>
 8012638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801263c:	4611      	mov	r1, r2
 801263e:	f7ff bba1 	b.w	8011d84 <_malloc_r>
 8012642:	b92a      	cbnz	r2, 8012650 <_realloc_r+0x24>
 8012644:	f7ff fca4 	bl	8011f90 <_free_r>
 8012648:	4625      	mov	r5, r4
 801264a:	4628      	mov	r0, r5
 801264c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012650:	f000 f81b 	bl	801268a <_malloc_usable_size_r>
 8012654:	4284      	cmp	r4, r0
 8012656:	4607      	mov	r7, r0
 8012658:	d802      	bhi.n	8012660 <_realloc_r+0x34>
 801265a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801265e:	d812      	bhi.n	8012686 <_realloc_r+0x5a>
 8012660:	4621      	mov	r1, r4
 8012662:	4640      	mov	r0, r8
 8012664:	f7ff fb8e 	bl	8011d84 <_malloc_r>
 8012668:	4605      	mov	r5, r0
 801266a:	2800      	cmp	r0, #0
 801266c:	d0ed      	beq.n	801264a <_realloc_r+0x1e>
 801266e:	42bc      	cmp	r4, r7
 8012670:	4622      	mov	r2, r4
 8012672:	4631      	mov	r1, r6
 8012674:	bf28      	it	cs
 8012676:	463a      	movcs	r2, r7
 8012678:	f7ff fc7c 	bl	8011f74 <memcpy>
 801267c:	4631      	mov	r1, r6
 801267e:	4640      	mov	r0, r8
 8012680:	f7ff fc86 	bl	8011f90 <_free_r>
 8012684:	e7e1      	b.n	801264a <_realloc_r+0x1e>
 8012686:	4635      	mov	r5, r6
 8012688:	e7df      	b.n	801264a <_realloc_r+0x1e>

0801268a <_malloc_usable_size_r>:
 801268a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801268e:	1f18      	subs	r0, r3, #4
 8012690:	2b00      	cmp	r3, #0
 8012692:	bfbc      	itt	lt
 8012694:	580b      	ldrlt	r3, [r1, r0]
 8012696:	18c0      	addlt	r0, r0, r3
 8012698:	4770      	bx	lr
	...

0801269c <_init>:
 801269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801269e:	bf00      	nop
 80126a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126a2:	bc08      	pop	{r3}
 80126a4:	469e      	mov	lr, r3
 80126a6:	4770      	bx	lr

080126a8 <_fini>:
 80126a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126aa:	bf00      	nop
 80126ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126ae:	bc08      	pop	{r3}
 80126b0:	469e      	mov	lr, r3
 80126b2:	4770      	bx	lr

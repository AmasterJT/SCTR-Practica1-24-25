
Practica1_24-25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08011b74  08011b74  00021b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c20  08011c20  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08011c20  08011c20  00021c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c28  08011c28  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c28  08011c28  00021c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c2c  08011c2c  00021c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08011c30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300ec  2**0
                  CONTENTS
 10 .bss          00009be8  200000ec  200000ec  000300ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20009cd4  20009cd4  000300ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033ae5  00000000  00000000  0003015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000075ec  00000000  00000000  00063c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002b00  00000000  00000000  0006b230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002123  00000000  00000000  0006dd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e7d5  00000000  00000000  0006fe53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036a0c  00000000  00000000  0009e628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fbc8f  00000000  00000000  000d5034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b8bc  00000000  00000000  001d0cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c9  00000000  00000000  001dc580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011b5c 	.word	0x08011b5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	08011b5c 	.word	0x08011b5c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f001 f8d6 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f834 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 faa2 	bl	8000a74 <MX_GPIO_Init>
  MX_CRC_Init();
 8000530:	f000 f89a 	bl	8000668 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000534:	f000 f8ac 	bl	8000690 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000538:	f000 fa4c 	bl	80009d4 <MX_FMC_Init>
  MX_I2C3_Init();
 800053c:	f000 f8da 	bl	80006f4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000540:	f000 f918 	bl	8000774 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000544:	f000 f996 	bl	8000874 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000548:	f000 f9ca 	bl	80008e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800054c:	f000 fa18 	bl	8000980 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000550:	f00d ff36 	bl	800e3c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000554:	4a09      	ldr	r2, [pc, #36]	; (800057c <main+0x5c>)
 8000556:	2100      	movs	r1, #0
 8000558:	4809      	ldr	r0, [pc, #36]	; (8000580 <main+0x60>)
 800055a:	f00d ff7b 	bl	800e454 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a08      	ldr	r2, [pc, #32]	; (8000584 <main+0x64>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of tareaPantalla */
  tareaPantallaHandle = osThreadNew(fTareaPantalla, NULL, &tareaPantalla_attributes);
 8000564:	4a08      	ldr	r2, [pc, #32]	; (8000588 <main+0x68>)
 8000566:	2100      	movs	r1, #0
 8000568:	4808      	ldr	r0, [pc, #32]	; (800058c <main+0x6c>)
 800056a:	f00d ff73 	bl	800e454 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <main+0x70>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f00d ff48 	bl	800e408 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x58>
 800057a:	bf00      	nop
 800057c:	08011bb8 	.word	0x08011bb8
 8000580:	08000c95 	.word	0x08000c95
 8000584:	20000368 	.word	0x20000368
 8000588:	08011bdc 	.word	0x08011bdc
 800058c:	08000cf9 	.word	0x08000cf9
 8000590:	2000036c 	.word	0x2000036c

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f011 fa3c 	bl	8011a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e0:	4a20      	ldr	r2, [pc, #128]	; (8000664 <SystemClock_Config+0xd0>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800060c:	2348      	movs	r3, #72	; 0x48
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000614:	2303      	movs	r3, #3
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f005 fddd 	bl	80061dc <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000628:	f000 fb80 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2102      	movs	r1, #2
 8000648:	4618      	mov	r0, r3
 800064a:	f006 f83f 	bl	80066cc <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000654:	f000 fb6a 	bl	8000d2c <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	; 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_CRC_Init+0x20>)
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <MX_CRC_Init+0x24>)
 8000670:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_CRC_Init+0x20>)
 8000674:	f001 f976 	bl	8001964 <HAL_CRC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800067e:	f000 fb55 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000108 	.word	0x20000108
 800068c:	40023000 	.word	0x40023000

08000690 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_DMA2D_Init+0x5c>)
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <MX_DMA2D_Init+0x60>)
 8000698:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_DMA2D_Init+0x5c>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006c6:	f001 fb27 	bl	8001d18 <HAL_DMA2D_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006d0:	f000 fb2c 	bl	8000d2c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006d4:	2101      	movs	r1, #1
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006d8:	f001 fc78 	bl	8001fcc <HAL_DMA2D_ConfigLayer>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006e2:	f000 fb23 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000110 	.word	0x20000110
 80006f0:	4002b000 	.word	0x4002b000

080006f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_I2C3_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_I2C3_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_I2C3_Init+0x74>)
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <MX_I2C3_Init+0x7c>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_I2C3_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_I2C3_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_I2C3_Init+0x74>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_I2C3_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C3_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_I2C3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_I2C3_Init+0x74>)
 8000732:	f004 f8e3 	bl	80048fc <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 faf6 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_I2C3_Init+0x74>)
 8000744:	f005 f93c 	bl	80059c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800074e:	f000 faed 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C3_Init+0x74>)
 8000756:	f005 f96f 	bl	8005a38 <HAL_I2CEx_ConfigDigitalFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 fae4 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000150 	.word	0x20000150
 800076c:	40005c00 	.word	0x40005c00
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	; 0x38
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2234      	movs	r2, #52	; 0x34
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f011 f94d 	bl	8011a20 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <MX_LTDC_Init+0xf8>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <MX_LTDC_Init+0xfc>)
 800078a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800078c:	4b37      	ldr	r3, [pc, #220]	; (800086c <MX_LTDC_Init+0xf8>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000792:	4b36      	ldr	r3, [pc, #216]	; (800086c <MX_LTDC_Init+0xf8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000798:	4b34      	ldr	r3, [pc, #208]	; (800086c <MX_LTDC_Init+0xf8>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <MX_LTDC_Init+0xf8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007a4:	4b31      	ldr	r3, [pc, #196]	; (800086c <MX_LTDC_Init+0xf8>)
 80007a6:	2209      	movs	r2, #9
 80007a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007aa:	4b30      	ldr	r3, [pc, #192]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007b0:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_LTDC_Init+0xf8>)
 80007b2:	221d      	movs	r2, #29
 80007b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_LTDC_Init+0xf8>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_LTDC_Init+0xf8>)
 80007be:	f240 120d 	movw	r2, #269	; 0x10d
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_LTDC_Init+0xf8>)
 80007c6:	f240 1243 	movw	r2, #323	; 0x143
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ce:	f240 1217 	movw	r2, #279	; 0x117
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_LTDC_Init+0xf8>)
 80007d6:	f240 1247 	movw	r2, #327	; 0x147
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_LTDC_Init+0xf8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_LTDC_Init+0xf8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007f4:	481d      	ldr	r0, [pc, #116]	; (800086c <MX_LTDC_Init+0xf8>)
 80007f6:	f005 f95f 	bl	8005ab8 <HAL_LTDC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000800:	f000 fa94 	bl	8000d2c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000808:	23f0      	movs	r3, #240	; 0xf0
 800080a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000810:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000814:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000816:	2302      	movs	r3, #2
 8000818:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800081a:	23ff      	movs	r3, #255	; 0xff
 800081c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000822:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000826:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000828:	2307      	movs	r3, #7
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800082c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000832:	23f0      	movs	r3, #240	; 0xf0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000836:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_LTDC_Init+0xf8>)
 8000856:	f005 fac1 	bl	8005ddc <HAL_LTDC_ConfigLayer>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000860:	f000 fa64 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3738      	adds	r7, #56	; 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001a4 	.word	0x200001a4
 8000870:	40016800 	.word	0x40016800

08000874 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_SPI5_Init+0x64>)
 800087a:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MX_SPI5_Init+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000884:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_SPI5_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_SPI5_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008a8:	2218      	movs	r2, #24
 80008aa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008c0:	220a      	movs	r2, #10
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008c6:	f006 fba4 	bl	8007012 <HAL_SPI_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008d0:	f000 fa2c 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000024c 	.word	0x2000024c
 80008dc:	40015000 	.word	0x40015000

080008e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_TIM1_Init+0x98>)
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <MX_TIM1_Init+0x9c>)
 8000900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TIM1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_TIM1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_TIM1_Init+0x98>)
 8000910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000914:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_TIM1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_TIM1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000928:	4813      	ldr	r0, [pc, #76]	; (8000978 <MX_TIM1_Init+0x98>)
 800092a:	f007 f979 	bl	8007c20 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f9fa 	bl	8000d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_TIM1_Init+0x98>)
 8000946:	f007 fb1b 	bl	8007f80 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000950:	f000 f9ec 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_TIM1_Init+0x98>)
 8000962:	f007 fd43 	bl	80083ec <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800096c:	f000 f9de 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200002a4 	.word	0x200002a4
 800097c:	40010000 	.word	0x40010000

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART1_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b8:	f007 fda8 	bl	800850c <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f9b3 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200002ec 	.word	0x200002ec
 80009d0:	40011000 	.word	0x40011000

080009d4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	615a      	str	r2, [r3, #20]
 80009ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_FMC_Init+0x98>)
 80009ee:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <MX_FMC_Init+0x9c>)
 80009f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_FMC_Init+0x98>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_FMC_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a06:	2210      	movs	r2, #16
 8000a08:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a12:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a16:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a24:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a40:	2307      	movs	r3, #7
 8000a42:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a44:	2303      	movs	r3, #3
 8000a46:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a56:	f006 fa4b 	bl	8006ef0 <HAL_SDRAM_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a60:	f000 f964 	bl	8000d2c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000334 	.word	0x20000334
 8000a70:	a0000140 	.word	0xa0000140

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
 8000a8e:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a7a      	ldr	r2, [pc, #488]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b78      	ldr	r3, [pc, #480]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	623b      	str	r3, [r7, #32]
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	4b74      	ldr	r3, [pc, #464]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a73      	ldr	r2, [pc, #460]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ab0:	f043 0320 	orr.w	r3, r3, #32
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b71      	ldr	r3, [pc, #452]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	4b6d      	ldr	r3, [pc, #436]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a6c      	ldr	r2, [pc, #432]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	4b66      	ldr	r3, [pc, #408]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a65      	ldr	r2, [pc, #404]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b63      	ldr	r3, [pc, #396]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b5f      	ldr	r3, [pc, #380]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a5e      	ldr	r2, [pc, #376]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b5c      	ldr	r3, [pc, #368]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b58      	ldr	r3, [pc, #352]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a57      	ldr	r2, [pc, #348]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b51      	ldr	r3, [pc, #324]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a50      	ldr	r2, [pc, #320]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b4e      	ldr	r3, [pc, #312]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0310 	and.w	r3, r3, #16
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b4a      	ldr	r3, [pc, #296]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a49      	ldr	r2, [pc, #292]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b47      	ldr	r3, [pc, #284]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2116      	movs	r1, #22
 8000b6e:	4844      	ldr	r0, [pc, #272]	; (8000c80 <MX_GPIO_Init+0x20c>)
 8000b70:	f001 fd76 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	4842      	ldr	r0, [pc, #264]	; (8000c84 <MX_GPIO_Init+0x210>)
 8000b7a:	f001 fd71 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b84:	4840      	ldr	r0, [pc, #256]	; (8000c88 <MX_GPIO_Init+0x214>)
 8000b86:	f001 fd6b 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b90:	483e      	ldr	r0, [pc, #248]	; (8000c8c <MX_GPIO_Init+0x218>)
 8000b92:	f001 fd65 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b96:	2316      	movs	r3, #22
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4834      	ldr	r0, [pc, #208]	; (8000c80 <MX_GPIO_Init+0x20c>)
 8000bae:	f001 fa9f 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bb2:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bb8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	482e      	ldr	r0, [pc, #184]	; (8000c84 <MX_GPIO_Init+0x210>)
 8000bca:	f001 fa91 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	4827      	ldr	r0, [pc, #156]	; (8000c84 <MX_GPIO_Init+0x210>)
 8000be6:	f001 fa83 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000bea:	2320      	movs	r3, #32
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4820      	ldr	r0, [pc, #128]	; (8000c80 <MX_GPIO_Init+0x20c>)
 8000c00:	f001 fa76 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c04:	2304      	movs	r3, #4
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	481e      	ldr	r0, [pc, #120]	; (8000c90 <MX_GPIO_Init+0x21c>)
 8000c18:	f001 fa6a 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4815      	ldr	r0, [pc, #84]	; (8000c88 <MX_GPIO_Init+0x214>)
 8000c32:	f001 fa5d 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c36:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480e      	ldr	r0, [pc, #56]	; (8000c88 <MX_GPIO_Init+0x214>)
 8000c50:	f001 fa4e 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c54:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4807      	ldr	r0, [pc, #28]	; (8000c8c <MX_GPIO_Init+0x218>)
 8000c6e:	f001 fa3f 	bl	80020f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c72:	bf00      	nop
 8000c74:	3738      	adds	r7, #56	; 0x38
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020c00 	.word	0x40020c00
 8000c8c:	40021800 	.word	0x40021800
 8000c90:	40020400 	.word	0x40020400

08000c94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b092      	sub	sp, #72	; 0x48
 8000c98:	af06      	add	r7, sp, #24
 8000c9a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000c9c:	f010 fafa 	bl	8011294 <MX_USB_HOST_Init>


  // inicializamos los buffers
  //  si usamos la pantalla en vertical el parametro es 0
  //  si usamos la pantalla en horizontal el parametro es 1
  LCD_inicializa2Buffers(0, 0);
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f00d f87e 	bl	800dda4 <LCD_inicializa2Buffers>



  LCD_setFondoColor(COLOR_ROJO);
 8000ca8:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <StartDefaultTask+0x60>)
 8000caa:	f00d f8d9 	bl	800de60 <LCD_setFondoColor>

  LineGraph lineGraph;
  InicializaLineGraph(&lineGraph, 20, 20, 100, 80, 1, COLOR_BLANCO, COLOR_NEGRO, COLOR_VERDE, 10);
 8000cae:	f107 0008 	add.w	r0, r7, #8
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	9305      	str	r3, [sp, #20]
 8000cb6:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8000cba:	9304      	str	r3, [sp, #16]
 8000cbc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000cc0:	9303      	str	r3, [sp, #12]
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	9302      	str	r3, [sp, #8]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	2350      	movs	r3, #80	; 0x50
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	2214      	movs	r2, #20
 8000cd4:	2114      	movs	r1, #20
 8000cd6:	f00c ffcb 	bl	800dc70 <InicializaLineGraph>
  DrawGraph(&lineGraph, 0, 100);
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2264      	movs	r2, #100	; 0x64
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f00c fff2 	bl	800dccc <DrawGraph>

  LCD_intercambiaBuffers();
 8000ce8:	f00d f8d2 	bl	800de90 <LCD_intercambiaBuffers>


  /* Infinite loop */
  for(;;)
  {
	osDelay(10);
 8000cec:	200a      	movs	r0, #10
 8000cee:	f00d fc43 	bl	800e578 <osDelay>
 8000cf2:	e7fb      	b.n	8000cec <StartDefaultTask+0x58>
 8000cf4:	ffff0000 	.word	0xffff0000

08000cf8 <fTareaPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTareaPantalla */
void fTareaPantalla(void *argument)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTareaPantalla */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f00d fc39 	bl	800e578 <osDelay>
 8000d06:	e7fb      	b.n	8000d00 <fTareaPantalla+0x8>

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f000 fcfd 	bl	8001718 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40001000 	.word	0x40001000

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_MspInit+0x54>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <HAL_MspInit+0x54>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x54>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_MspInit+0x54>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_MspInit+0x54>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_MspInit+0x54>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	210f      	movs	r1, #15
 8000d7a:	f06f 0001 	mvn.w	r0, #1
 8000d7e:	f000 fdc7 	bl	8001910 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <HAL_CRC_MspInit+0x3c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10d      	bne.n	8000dbe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_CRC_MspInit+0x40>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <HAL_CRC_MspInit+0x40>)
 8000dac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <HAL_CRC_MspInit+0x40>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40023000 	.word	0x40023000
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_DMA2D_MspInit+0x48>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d115      	bne.n	8000e12 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_DMA2D_MspInit+0x4c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <HAL_DMA2D_MspInit+0x4c>)
 8000df0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_DMA2D_MspInit+0x4c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2105      	movs	r1, #5
 8000e06:	205a      	movs	r0, #90	; 0x5a
 8000e08:	f000 fd82 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e0c:	205a      	movs	r0, #90	; 0x5a
 8000e0e:	f000 fd9b 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	4002b000 	.word	0x4002b000
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <HAL_I2C_MspInit+0xc4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d14b      	bne.n	8000ede <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a27      	ldr	r2, [pc, #156]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a20      	ldr	r2, [pc, #128]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e84:	2312      	movs	r3, #18
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e90:	2304      	movs	r3, #4
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4815      	ldr	r0, [pc, #84]	; (8000ef0 <HAL_I2C_MspInit+0xcc>)
 8000e9c:	f001 f928 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea6:	2312      	movs	r3, #18
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <HAL_I2C_MspInit+0xd0>)
 8000ebe:	f001 f917 	bl	80020f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000ecc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40005c00 	.word	0x40005c00
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <HAL_I2C_MspDeInit+0x3c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10f      	bne.n	8000f2a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_I2C_MspDeInit+0x40>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_I2C_MspDeInit+0x40>)
 8000f10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000f16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <HAL_I2C_MspDeInit+0x44>)
 8000f1c:	f001 fa94 	bl	8002448 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <HAL_I2C_MspDeInit+0x48>)
 8000f26:	f001 fa8f 	bl	8002448 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40005c00 	.word	0x40005c00
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40020000 	.word	0x40020000

08000f44 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09a      	sub	sp, #104	; 0x68
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	2230      	movs	r2, #48	; 0x30
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f010 fd5b 	bl	8011a20 <memset>
  if(hltdc->Instance==LTDC)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a85      	ldr	r2, [pc, #532]	; (8001184 <HAL_LTDC_MspInit+0x240>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	f040 8102 	bne.w	800117a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f76:	2308      	movs	r3, #8
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f7a:	2332      	movs	r3, #50	; 0x32
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f82:	2300      	movs	r3, #0
 8000f84:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fdf0 	bl	8006b70 <HAL_RCCEx_PeriphCLKConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f96:	f7ff fec9 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
 8000f9e:	4b7a      	ldr	r3, [pc, #488]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a79      	ldr	r2, [pc, #484]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8000fa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b77      	ldr	r3, [pc, #476]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fb2:	623b      	str	r3, [r7, #32]
 8000fb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	4b73      	ldr	r3, [pc, #460]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a72      	ldr	r2, [pc, #456]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b70      	ldr	r3, [pc, #448]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0320 	and.w	r3, r3, #32
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
 8000fd6:	4b6c      	ldr	r3, [pc, #432]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a6b      	ldr	r2, [pc, #428]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b69      	ldr	r3, [pc, #420]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
 8000fec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	4b65      	ldr	r3, [pc, #404]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a64      	ldr	r2, [pc, #400]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b62      	ldr	r3, [pc, #392]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b5e      	ldr	r3, [pc, #376]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a5d      	ldr	r2, [pc, #372]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8001014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b5b      	ldr	r3, [pc, #364]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b57      	ldr	r3, [pc, #348]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a56      	ldr	r2, [pc, #344]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b54      	ldr	r3, [pc, #336]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b50      	ldr	r3, [pc, #320]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <HAL_LTDC_MspInit+0x244>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800105e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001062:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001070:	230e      	movs	r3, #14
 8001072:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001078:	4619      	mov	r1, r3
 800107a:	4844      	ldr	r0, [pc, #272]	; (800118c <HAL_LTDC_MspInit+0x248>)
 800107c:	f001 f838 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001080:	f641 0358 	movw	r3, #6232	; 0x1858
 8001084:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001092:	230e      	movs	r3, #14
 8001094:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800109a:	4619      	mov	r1, r3
 800109c:	483c      	ldr	r0, [pc, #240]	; (8001190 <HAL_LTDC_MspInit+0x24c>)
 800109e:	f001 f827 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010a2:	2303      	movs	r3, #3
 80010a4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010b2:	2309      	movs	r3, #9
 80010b4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ba:	4619      	mov	r1, r3
 80010bc:	4835      	ldr	r0, [pc, #212]	; (8001194 <HAL_LTDC_MspInit+0x250>)
 80010be:	f001 f817 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010c2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010c6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d4:	230e      	movs	r3, #14
 80010d6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010dc:	4619      	mov	r1, r3
 80010de:	482d      	ldr	r0, [pc, #180]	; (8001194 <HAL_LTDC_MspInit+0x250>)
 80010e0:	f001 f806 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80010e4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80010e8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f6:	230e      	movs	r3, #14
 80010f8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010fe:	4619      	mov	r1, r3
 8001100:	4825      	ldr	r0, [pc, #148]	; (8001198 <HAL_LTDC_MspInit+0x254>)
 8001102:	f000 fff5 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001106:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800110a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001118:	230e      	movs	r3, #14
 800111a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001120:	4619      	mov	r1, r3
 8001122:	481e      	ldr	r0, [pc, #120]	; (800119c <HAL_LTDC_MspInit+0x258>)
 8001124:	f000 ffe4 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001128:	2348      	movs	r3, #72	; 0x48
 800112a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001138:	230e      	movs	r3, #14
 800113a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001140:	4619      	mov	r1, r3
 8001142:	4817      	ldr	r0, [pc, #92]	; (80011a0 <HAL_LTDC_MspInit+0x25c>)
 8001144:	f000 ffd4 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001148:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800114c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800115a:	2309      	movs	r3, #9
 800115c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <HAL_LTDC_MspInit+0x254>)
 8001166:	f000 ffc3 	bl	80020f0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2105      	movs	r1, #5
 800116e:	2058      	movs	r0, #88	; 0x58
 8001170:	f000 fbce 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001174:	2058      	movs	r0, #88	; 0x58
 8001176:	f000 fbe7 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	3768      	adds	r7, #104	; 0x68
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40016800 	.word	0x40016800
 8001188:	40023800 	.word	0x40023800
 800118c:	40021400 	.word	0x40021400
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40021800 	.word	0x40021800
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020c00 	.word	0x40020c00

080011a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a19      	ldr	r2, [pc, #100]	; (8001228 <HAL_SPI_MspInit+0x84>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d12c      	bne.n	8001220 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_SPI_MspInit+0x88>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_SPI_MspInit+0x88>)
 80011d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_SPI_MspInit+0x88>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_SPI_MspInit+0x88>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a10      	ldr	r2, [pc, #64]	; (800122c <HAL_SPI_MspInit+0x88>)
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_SPI_MspInit+0x88>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80011fe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001210:	2305      	movs	r3, #5
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <HAL_SPI_MspInit+0x8c>)
 800121c:	f000 ff68 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40015000 	.word	0x40015000
 800122c:	40023800 	.word	0x40023800
 8001230:	40021400 	.word	0x40021400

08001234 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_SPI_MspDeInit+0x30>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10a      	bne.n	800125c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_SPI_MspDeInit+0x34>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_SPI_MspDeInit+0x34>)
 800124c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001252:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_SPI_MspDeInit+0x38>)
 8001258:	f001 f8f6 	bl	8002448 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40015000 	.word	0x40015000
 8001268:	40023800 	.word	0x40023800
 800126c:	40021400 	.word	0x40021400

08001270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_TIM_Base_MspInit+0x3c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10d      	bne.n	800129e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_TIM_Base_MspInit+0x40>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <HAL_TIM_Base_MspInit+0x40>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <HAL_TIM_Base_MspInit+0x40>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40010000 	.word	0x40010000
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_UART_MspInit+0x84>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12c      	bne.n	8001330 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_UART_MspInit+0x88>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_UART_MspInit+0x88>)
 80012e0:	f043 0310 	orr.w	r3, r3, #16
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_UART_MspInit+0x88>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_UART_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_UART_MspInit+0x88>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_UART_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800130e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001320:	2307      	movs	r3, #7
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_UART_MspInit+0x8c>)
 800132c:	f000 fee0 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40011000 	.word	0x40011000
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001358:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_FMC_MspInit+0x104>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d16f      	bne.n	8001440 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001360:	4b39      	ldr	r3, [pc, #228]	; (8001448 <HAL_FMC_MspInit+0x104>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <HAL_FMC_MspInit+0x108>)
 800136c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136e:	4a37      	ldr	r2, [pc, #220]	; (800144c <HAL_FMC_MspInit+0x108>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6393      	str	r3, [r2, #56]	; 0x38
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <HAL_FMC_MspInit+0x108>)
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001382:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001386:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001394:	230c      	movs	r3, #12
 8001396:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	482c      	ldr	r0, [pc, #176]	; (8001450 <HAL_FMC_MspInit+0x10c>)
 800139e:	f000 fea7 	bl	80020f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80013a2:	2301      	movs	r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013b2:	230c      	movs	r3, #12
 80013b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4826      	ldr	r0, [pc, #152]	; (8001454 <HAL_FMC_MspInit+0x110>)
 80013bc:	f000 fe98 	bl	80020f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80013c0:	f248 1333 	movw	r3, #33075	; 0x8133
 80013c4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d2:	230c      	movs	r3, #12
 80013d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	481f      	ldr	r0, [pc, #124]	; (8001458 <HAL_FMC_MspInit+0x114>)
 80013dc:	f000 fe88 	bl	80020f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80013e0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80013e4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f2:	230c      	movs	r3, #12
 80013f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4818      	ldr	r0, [pc, #96]	; (800145c <HAL_FMC_MspInit+0x118>)
 80013fc:	f000 fe78 	bl	80020f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001400:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001404:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001412:	230c      	movs	r3, #12
 8001414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <HAL_FMC_MspInit+0x11c>)
 800141c:	f000 fe68 	bl	80020f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001420:	2360      	movs	r3, #96	; 0x60
 8001422:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001430:	230c      	movs	r3, #12
 8001432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4619      	mov	r1, r3
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <HAL_FMC_MspInit+0x120>)
 800143a:	f000 fe59 	bl	80020f0 <HAL_GPIO_Init>
 800143e:	e000      	b.n	8001442 <HAL_FMC_MspInit+0xfe>
    return;
 8001440:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000370 	.word	0x20000370
 800144c:	40023800 	.word	0x40023800
 8001450:	40021400 	.word	0x40021400
 8001454:	40020800 	.word	0x40020800
 8001458:	40021800 	.word	0x40021800
 800145c:	40021000 	.word	0x40021000
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40020400 	.word	0x40020400

08001468 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001470:	f7ff ff68 	bl	8001344 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08e      	sub	sp, #56	; 0x38
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b33      	ldr	r3, [pc, #204]	; (8001560 <HAL_InitTick+0xe4>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a32      	ldr	r2, [pc, #200]	; (8001560 <HAL_InitTick+0xe4>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_InitTick+0xe4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a8:	f107 0210 	add.w	r2, r7, #16
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 fb2a 	bl	8006b0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d103      	bne.n	80014ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014c2:	f005 fafb 	bl	8006abc <HAL_RCC_GetPCLK1Freq>
 80014c6:	6378      	str	r0, [r7, #52]	; 0x34
 80014c8:	e004      	b.n	80014d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014ca:	f005 faf7 	bl	8006abc <HAL_RCC_GetPCLK1Freq>
 80014ce:	4603      	mov	r3, r0
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <HAL_InitTick+0xe8>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9b      	lsrs	r3, r3, #18
 80014de:	3b01      	subs	r3, #1
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_InitTick+0xec>)
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <HAL_InitTick+0xf0>)
 80014e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_InitTick+0xec>)
 80014ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_InitTick+0xec>)
 80014f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_InitTick+0xec>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_InitTick+0xec>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_InitTick+0xec>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001508:	4817      	ldr	r0, [pc, #92]	; (8001568 <HAL_InitTick+0xec>)
 800150a:	f006 fb89 	bl	8007c20 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001514:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001518:	2b00      	cmp	r3, #0
 800151a:	d11b      	bne.n	8001554 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800151c:	4812      	ldr	r0, [pc, #72]	; (8001568 <HAL_InitTick+0xec>)
 800151e:	f006 fbcf 	bl	8007cc0 <HAL_TIM_Base_Start_IT>
 8001522:	4603      	mov	r3, r0
 8001524:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001528:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800152c:	2b00      	cmp	r3, #0
 800152e:	d111      	bne.n	8001554 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001530:	2036      	movs	r0, #54	; 0x36
 8001532:	f000 fa09 	bl	8001948 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d808      	bhi.n	800154e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	2036      	movs	r0, #54	; 0x36
 8001542:	f000 f9e5 	bl	8001910 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_InitTick+0xf4>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e002      	b.n	8001554 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001554:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001558:	4618      	mov	r0, r3
 800155a:	3738      	adds	r7, #56	; 0x38
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	431bde83 	.word	0x431bde83
 8001568:	20000374 	.word	0x20000374
 800156c:	40001000 	.word	0x40001000
 8001570:	20000004 	.word	0x20000004

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <TIM6_DAC_IRQHandler+0x10>)
 80015a6:	f006 fbfb 	bl	8007da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000374 	.word	0x20000374

080015b4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <OTG_HS_IRQHandler+0x10>)
 80015ba:	f001 fb4b 	bl	8002c54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200097ac 	.word	0x200097ac

080015c8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <LTDC_IRQHandler+0x10>)
 80015ce:	f004 fb43 	bl	8005c58 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200001a4 	.word	0x200001a4

080015dc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <DMA2D_IRQHandler+0x10>)
 80015e2:	f000 fbe2 	bl	8001daa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000110 	.word	0x20000110

080015f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <_sbrk+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <_sbrk+0x60>)
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <_sbrk+0x64>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <_sbrk+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d207      	bcs.n	8001630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001620:	f010 fa16 	bl	8011a50 <__errno>
 8001624:	4603      	mov	r3, r0
 8001626:	220c      	movs	r2, #12
 8001628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	e009      	b.n	8001644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <_sbrk+0x64>)
 8001640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20030000 	.word	0x20030000
 8001650:	00000400 	.word	0x00000400
 8001654:	200003bc 	.word	0x200003bc
 8001658:	20009cd8 	.word	0x20009cd8

0800165c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <SystemInit+0x20>)
 8001662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <SystemInit+0x20>)
 8001668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001684:	f7ff ffea 	bl	800165c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168a:	490d      	ldr	r1, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a0:	4c0a      	ldr	r4, [pc, #40]	; (80016cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016ae:	f010 f9d5 	bl	8011a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7fe ff35 	bl	8000520 <main>
  bx  lr    
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c0:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80016c4:	08011c30 	.word	0x08011c30
  ldr r2, =_sbss
 80016c8:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80016cc:	20009cd4 	.word	0x20009cd4

080016d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <HAL_Init+0x40>)
 80016de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_Init+0x40>)
 80016ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <HAL_Init+0x40>)
 80016f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 f8fc 	bl	80018fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff feba 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001708:	f7ff fb16 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023c00 	.word	0x40023c00

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008
 800173c:	200003c0 	.word	0x200003c0

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200003c0 	.word	0x200003c0

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000008 	.word	0x20000008

080017a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <__NVIC_EnableIRQ+0x38>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ff4c 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001922:	f7ff ff61 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 8001926:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	6978      	ldr	r0, [r7, #20]
 800192e:	f7ff ffb1 	bl	8001894 <NVIC_EncodePriority>
 8001932:	4602      	mov	r2, r0
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff80 	bl	8001840 <__NVIC_SetPriority>
}
 8001940:	bf00      	nop
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff54 	bl	8001804 <__NVIC_EnableIRQ>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	795b      	ldrb	r3, [r3, #5]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff fa02 	bl	8000d90 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff feca 	bl	8001740 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e099      	b.n	8001aec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d8:	e00f      	b.n	80019fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019da:	f7ff feb1 	bl	8001740 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d908      	bls.n	80019fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2203      	movs	r2, #3
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e078      	b.n	8001aec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e8      	bne.n	80019da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_DMA_Init+0x158>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d107      	bne.n	8001a64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f023 0307 	bic.w	r3, r3, #7
 8001a7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d117      	bne.n	8001abe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00e      	beq.n	8001abe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f8bd 	bl	8001c20 <DMA_CheckFifoParam>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001aba:	2301      	movs	r3, #1
 8001abc:	e016      	b.n	8001aec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f874 	bl	8001bb4 <DMA_CalcBaseAndBitshift>
 8001acc:	4603      	mov	r3, r0
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	223f      	movs	r2, #63	; 0x3f
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	f010803f 	.word	0xf010803f

08001af8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e050      	b.n	8001bac <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d101      	bne.n	8001b1a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001b16:	2302      	movs	r3, #2
 8001b18:	e048      	b.n	8001bac <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2221      	movs	r2, #33	; 0x21
 8001b58:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f82a 	bl	8001bb4 <DMA_CalcBaseAndBitshift>
 8001b60:	4603      	mov	r3, r0
 8001b62:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	223f      	movs	r2, #63	; 0x3f
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3b10      	subs	r3, #16
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <DMA_CalcBaseAndBitshift+0x64>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bce:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <DMA_CalcBaseAndBitshift+0x68>)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d909      	bls.n	8001bf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bea:	f023 0303 	bic.w	r3, r3, #3
 8001bee:	1d1a      	adds	r2, r3, #4
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	659a      	str	r2, [r3, #88]	; 0x58
 8001bf4:	e007      	b.n	8001c06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	aaaaaaab 	.word	0xaaaaaaab
 8001c1c:	08011c18 	.word	0x08011c18

08001c20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d11f      	bne.n	8001c7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d856      	bhi.n	8001cee <DMA_CheckFifoParam+0xce>
 8001c40:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <DMA_CheckFifoParam+0x28>)
 8001c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c46:	bf00      	nop
 8001c48:	08001c59 	.word	0x08001c59
 8001c4c:	08001c6b 	.word	0x08001c6b
 8001c50:	08001c59 	.word	0x08001c59
 8001c54:	08001cef 	.word	0x08001cef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d046      	beq.n	8001cf2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c68:	e043      	b.n	8001cf2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c72:	d140      	bne.n	8001cf6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c78:	e03d      	b.n	8001cf6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c82:	d121      	bne.n	8001cc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d837      	bhi.n	8001cfa <DMA_CheckFifoParam+0xda>
 8001c8a:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <DMA_CheckFifoParam+0x70>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001ca1 	.word	0x08001ca1
 8001c94:	08001ca7 	.word	0x08001ca7
 8001c98:	08001ca1 	.word	0x08001ca1
 8001c9c:	08001cb9 	.word	0x08001cb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca4:	e030      	b.n	8001d08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d025      	beq.n	8001cfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb6:	e022      	b.n	8001cfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cc0:	d11f      	bne.n	8001d02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cc6:	e01c      	b.n	8001d02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d903      	bls.n	8001cd6 <DMA_CheckFifoParam+0xb6>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d003      	beq.n	8001cdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cd4:	e018      	b.n	8001d08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cda:	e015      	b.n	8001d08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00e      	beq.n	8001d06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
      break;
 8001cec:	e00b      	b.n	8001d06 <DMA_CheckFifoParam+0xe6>
      break;
 8001cee:	bf00      	nop
 8001cf0:	e00a      	b.n	8001d08 <DMA_CheckFifoParam+0xe8>
      break;
 8001cf2:	bf00      	nop
 8001cf4:	e008      	b.n	8001d08 <DMA_CheckFifoParam+0xe8>
      break;
 8001cf6:	bf00      	nop
 8001cf8:	e006      	b.n	8001d08 <DMA_CheckFifoParam+0xe8>
      break;
 8001cfa:	bf00      	nop
 8001cfc:	e004      	b.n	8001d08 <DMA_CheckFifoParam+0xe8>
      break;
 8001cfe:	bf00      	nop
 8001d00:	e002      	b.n	8001d08 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d02:	bf00      	nop
 8001d04:	e000      	b.n	8001d08 <DMA_CheckFifoParam+0xe8>
      break;
 8001d06:	bf00      	nop
    }
  } 
  
  return status; 
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop

08001d18 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e03b      	b.n	8001da2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff f848 	bl	8000dd4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d68:	f023 0107 	bic.w	r1, r3, #7
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68d1      	ldr	r1, [r2, #12]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d026      	beq.n	8001e1a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d021      	beq.n	8001e1a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d026      	beq.n	8001e72 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d021      	beq.n	8001e72 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e3c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2220      	movs	r2, #32
 8001e44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4a:	f043 0202 	orr.w	r2, r3, #2
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d026      	beq.n	8001eca <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d021      	beq.n	8001eca <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e94:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea2:	f043 0204 	orr.w	r2, r3, #4
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2204      	movs	r2, #4
 8001eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00e      	beq.n	8001efc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f853 	bl	8001fa2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d024      	beq.n	8001f50 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01f      	beq.n	8001f50 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2202      	movs	r2, #2
 8001f26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01f      	beq.n	8001f9a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01a      	beq.n	8001f9a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f72:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f80e 	bl	8001fb6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_DMA2D_ConfigLayer+0x20>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e079      	b.n	80020e0 <HAL_DMA2D_ConfigLayer+0x114>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	3318      	adds	r3, #24
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	041b      	lsls	r3, r3, #16
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002016:	4b35      	ldr	r3, [pc, #212]	; (80020ec <HAL_DMA2D_ConfigLayer+0x120>)
 8002018:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b0a      	cmp	r3, #10
 8002020:	d003      	beq.n	800202a <HAL_DMA2D_ConfigLayer+0x5e>
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b09      	cmp	r3, #9
 8002028:	d107      	bne.n	800203a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	e005      	b.n	8002046 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	061b      	lsls	r3, r3, #24
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d120      	bne.n	800208e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43db      	mvns	r3, r3
 8002056:	ea02 0103 	and.w	r1, r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	430a      	orrs	r2, r1
 8002062:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b0a      	cmp	r3, #10
 8002074:	d003      	beq.n	800207e <HAL_DMA2D_ConfigLayer+0xb2>
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b09      	cmp	r3, #9
 800207c:	d127      	bne.n	80020ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
 800208c:	e01f      	b.n	80020ce <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43db      	mvns	r3, r3
 8002098:	ea02 0103 	and.w	r1, r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b0a      	cmp	r3, #10
 80020b6:	d003      	beq.n	80020c0 <HAL_DMA2D_ConfigLayer+0xf4>
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b09      	cmp	r3, #9
 80020be:	d106      	bne.n	80020ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80020cc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	ff03000f 	.word	0xff03000f

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e177      	b.n	80023fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8166 	bne.w	80023f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d005      	beq.n	8002142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213e:	2b02      	cmp	r3, #2
 8002140:	d130      	bne.n	80021a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 0201 	and.w	r2, r3, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d017      	beq.n	80021e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80c0 	beq.w	80023f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b66      	ldr	r3, [pc, #408]	; (8002414 <HAL_GPIO_Init+0x324>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a65      	ldr	r2, [pc, #404]	; (8002414 <HAL_GPIO_Init+0x324>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_GPIO_Init+0x324>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002292:	4a61      	ldr	r2, [pc, #388]	; (8002418 <HAL_GPIO_Init+0x328>)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_GPIO_Init+0x32c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d037      	beq.n	800232e <HAL_GPIO_Init+0x23e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a57      	ldr	r2, [pc, #348]	; (8002420 <HAL_GPIO_Init+0x330>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d031      	beq.n	800232a <HAL_GPIO_Init+0x23a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a56      	ldr	r2, [pc, #344]	; (8002424 <HAL_GPIO_Init+0x334>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d02b      	beq.n	8002326 <HAL_GPIO_Init+0x236>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a55      	ldr	r2, [pc, #340]	; (8002428 <HAL_GPIO_Init+0x338>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d025      	beq.n	8002322 <HAL_GPIO_Init+0x232>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a54      	ldr	r2, [pc, #336]	; (800242c <HAL_GPIO_Init+0x33c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01f      	beq.n	800231e <HAL_GPIO_Init+0x22e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a53      	ldr	r2, [pc, #332]	; (8002430 <HAL_GPIO_Init+0x340>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d019      	beq.n	800231a <HAL_GPIO_Init+0x22a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a52      	ldr	r2, [pc, #328]	; (8002434 <HAL_GPIO_Init+0x344>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_GPIO_Init+0x226>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a51      	ldr	r2, [pc, #324]	; (8002438 <HAL_GPIO_Init+0x348>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00d      	beq.n	8002312 <HAL_GPIO_Init+0x222>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a50      	ldr	r2, [pc, #320]	; (800243c <HAL_GPIO_Init+0x34c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <HAL_GPIO_Init+0x21e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4f      	ldr	r2, [pc, #316]	; (8002440 <HAL_GPIO_Init+0x350>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d101      	bne.n	800230a <HAL_GPIO_Init+0x21a>
 8002306:	2309      	movs	r3, #9
 8002308:	e012      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800230a:	230a      	movs	r3, #10
 800230c:	e010      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800230e:	2308      	movs	r3, #8
 8002310:	e00e      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002312:	2307      	movs	r3, #7
 8002314:	e00c      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002316:	2306      	movs	r3, #6
 8002318:	e00a      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800231a:	2305      	movs	r3, #5
 800231c:	e008      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800231e:	2304      	movs	r3, #4
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002322:	2303      	movs	r3, #3
 8002324:	e004      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800232e:	2300      	movs	r3, #0
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f002 0203 	and.w	r2, r2, #3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002340:	4935      	ldr	r1, [pc, #212]	; (8002418 <HAL_GPIO_Init+0x328>)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234e:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_GPIO_Init+0x354>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002372:	4a34      	ldr	r2, [pc, #208]	; (8002444 <HAL_GPIO_Init+0x354>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002378:	4b32      	ldr	r3, [pc, #200]	; (8002444 <HAL_GPIO_Init+0x354>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800239c:	4a29      	ldr	r2, [pc, #164]	; (8002444 <HAL_GPIO_Init+0x354>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023a2:	4b28      	ldr	r3, [pc, #160]	; (8002444 <HAL_GPIO_Init+0x354>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c6:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_GPIO_Init+0x354>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_GPIO_Init+0x354>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <HAL_GPIO_Init+0x354>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3301      	adds	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	f67f ae84 	bls.w	800210c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40013800 	.word	0x40013800
 800241c:	40020000 	.word	0x40020000
 8002420:	40020400 	.word	0x40020400
 8002424:	40020800 	.word	0x40020800
 8002428:	40020c00 	.word	0x40020c00
 800242c:	40021000 	.word	0x40021000
 8002430:	40021400 	.word	0x40021400
 8002434:	40021800 	.word	0x40021800
 8002438:	40021c00 	.word	0x40021c00
 800243c:	40022000 	.word	0x40022000
 8002440:	40022400 	.word	0x40022400
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	e0d9      	b.n	8002618 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002464:	2201      	movs	r2, #1
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	429a      	cmp	r2, r3
 800247c:	f040 80c9 	bne.w	8002612 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002480:	4a6b      	ldr	r2, [pc, #428]	; (8002630 <HAL_GPIO_DeInit+0x1e8>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	220f      	movs	r2, #15
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	4013      	ands	r3, r2
 80024a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a63      	ldr	r2, [pc, #396]	; (8002634 <HAL_GPIO_DeInit+0x1ec>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d037      	beq.n	800251a <HAL_GPIO_DeInit+0xd2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a62      	ldr	r2, [pc, #392]	; (8002638 <HAL_GPIO_DeInit+0x1f0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d031      	beq.n	8002516 <HAL_GPIO_DeInit+0xce>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a61      	ldr	r2, [pc, #388]	; (800263c <HAL_GPIO_DeInit+0x1f4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d02b      	beq.n	8002512 <HAL_GPIO_DeInit+0xca>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a60      	ldr	r2, [pc, #384]	; (8002640 <HAL_GPIO_DeInit+0x1f8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d025      	beq.n	800250e <HAL_GPIO_DeInit+0xc6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a5f      	ldr	r2, [pc, #380]	; (8002644 <HAL_GPIO_DeInit+0x1fc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01f      	beq.n	800250a <HAL_GPIO_DeInit+0xc2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a5e      	ldr	r2, [pc, #376]	; (8002648 <HAL_GPIO_DeInit+0x200>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d019      	beq.n	8002506 <HAL_GPIO_DeInit+0xbe>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a5d      	ldr	r2, [pc, #372]	; (800264c <HAL_GPIO_DeInit+0x204>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_DeInit+0xba>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a5c      	ldr	r2, [pc, #368]	; (8002650 <HAL_GPIO_DeInit+0x208>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00d      	beq.n	80024fe <HAL_GPIO_DeInit+0xb6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a5b      	ldr	r2, [pc, #364]	; (8002654 <HAL_GPIO_DeInit+0x20c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_DeInit+0xb2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a5a      	ldr	r2, [pc, #360]	; (8002658 <HAL_GPIO_DeInit+0x210>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_GPIO_DeInit+0xae>
 80024f2:	2309      	movs	r3, #9
 80024f4:	e012      	b.n	800251c <HAL_GPIO_DeInit+0xd4>
 80024f6:	230a      	movs	r3, #10
 80024f8:	e010      	b.n	800251c <HAL_GPIO_DeInit+0xd4>
 80024fa:	2308      	movs	r3, #8
 80024fc:	e00e      	b.n	800251c <HAL_GPIO_DeInit+0xd4>
 80024fe:	2307      	movs	r3, #7
 8002500:	e00c      	b.n	800251c <HAL_GPIO_DeInit+0xd4>
 8002502:	2306      	movs	r3, #6
 8002504:	e00a      	b.n	800251c <HAL_GPIO_DeInit+0xd4>
 8002506:	2305      	movs	r3, #5
 8002508:	e008      	b.n	800251c <HAL_GPIO_DeInit+0xd4>
 800250a:	2304      	movs	r3, #4
 800250c:	e006      	b.n	800251c <HAL_GPIO_DeInit+0xd4>
 800250e:	2303      	movs	r3, #3
 8002510:	e004      	b.n	800251c <HAL_GPIO_DeInit+0xd4>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_DeInit+0xd4>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_DeInit+0xd4>
 800251a:	2300      	movs	r3, #0
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	f002 0203 	and.w	r2, r2, #3
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4093      	lsls	r3, r2
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	429a      	cmp	r2, r3
 800252a:	d132      	bne.n	8002592 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800252c:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_GPIO_DeInit+0x214>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43db      	mvns	r3, r3
 8002534:	4949      	ldr	r1, [pc, #292]	; (800265c <HAL_GPIO_DeInit+0x214>)
 8002536:	4013      	ands	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800253a:	4b48      	ldr	r3, [pc, #288]	; (800265c <HAL_GPIO_DeInit+0x214>)
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43db      	mvns	r3, r3
 8002542:	4946      	ldr	r1, [pc, #280]	; (800265c <HAL_GPIO_DeInit+0x214>)
 8002544:	4013      	ands	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002548:	4b44      	ldr	r3, [pc, #272]	; (800265c <HAL_GPIO_DeInit+0x214>)
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	4942      	ldr	r1, [pc, #264]	; (800265c <HAL_GPIO_DeInit+0x214>)
 8002552:	4013      	ands	r3, r2
 8002554:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_GPIO_DeInit+0x214>)
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	493f      	ldr	r1, [pc, #252]	; (800265c <HAL_GPIO_DeInit+0x214>)
 8002560:	4013      	ands	r3, r2
 8002562:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	220f      	movs	r2, #15
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002574:	4a2e      	ldr	r2, [pc, #184]	; (8002630 <HAL_GPIO_DeInit+0x1e8>)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	3302      	adds	r3, #2
 800257c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	43da      	mvns	r2, r3
 8002584:	482a      	ldr	r0, [pc, #168]	; (8002630 <HAL_GPIO_DeInit+0x1e8>)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	400a      	ands	r2, r1
 800258c:	3302      	adds	r3, #2
 800258e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2103      	movs	r1, #3
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	401a      	ands	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	08da      	lsrs	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3208      	adds	r2, #8
 80025b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	08d2      	lsrs	r2, r2, #3
 80025c8:	4019      	ands	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3208      	adds	r2, #8
 80025ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2103      	movs	r1, #3
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	401a      	ands	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	2101      	movs	r1, #1
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	401a      	ands	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2103      	movs	r1, #3
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	401a      	ands	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b0f      	cmp	r3, #15
 800261c:	f67f af22 	bls.w	8002464 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40013800 	.word	0x40013800
 8002634:	40020000 	.word	0x40020000
 8002638:	40020400 	.word	0x40020400
 800263c:	40020800 	.word	0x40020800
 8002640:	40020c00 	.word	0x40020c00
 8002644:	40021000 	.word	0x40021000
 8002648:	40021400 	.word	0x40021400
 800264c:	40021800 	.word	0x40021800
 8002650:	40021c00 	.word	0x40021c00
 8002654:	40022000 	.word	0x40022000
 8002658:	40022400 	.word	0x40022400
 800265c:	40013c00 	.word	0x40013c00

08002660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
 800266c:	4613      	mov	r3, r2
 800266e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002670:	787b      	ldrb	r3, [r7, #1]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800267c:	e003      	b.n	8002686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800267e:	887b      	ldrh	r3, [r7, #2]
 8002680:	041a      	lsls	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	619a      	str	r2, [r3, #24]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af02      	add	r7, sp, #8
 8002698:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e059      	b.n	8002758 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f00e fe3c 	bl	801133c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2203      	movs	r2, #3
 80026c8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d2:	d102      	bne.n	80026da <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f006 fb67 	bl	8008db2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7c1a      	ldrb	r2, [r3, #16]
 80026ec:	f88d 2000 	strb.w	r2, [sp]
 80026f0:	3304      	adds	r3, #4
 80026f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f4:	f006 fae8 	bl	8008cc8 <USB_CoreInit>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e026      	b.n	8002758 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2101      	movs	r1, #1
 8002710:	4618      	mov	r0, r3
 8002712:	f006 fb5f 	bl	8008dd4 <USB_SetCurrentMode>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e017      	b.n	8002758 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7c1a      	ldrb	r2, [r3, #16]
 8002730:	f88d 2000 	strb.w	r2, [sp]
 8002734:	3304      	adds	r3, #4
 8002736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002738:	f006 fd02 	bl	8009140 <USB_HostInit>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2202      	movs	r2, #2
 8002746:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e004      	b.n	8002758 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b08b      	sub	sp, #44	; 0x2c
 8002764:	af04      	add	r7, sp, #16
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	4608      	mov	r0, r1
 800276a:	4611      	mov	r1, r2
 800276c:	461a      	mov	r2, r3
 800276e:	4603      	mov	r3, r0
 8002770:	70fb      	strb	r3, [r7, #3]
 8002772:	460b      	mov	r3, r1
 8002774:	70bb      	strb	r3, [r7, #2]
 8002776:	4613      	mov	r3, r2
 8002778:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800277a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800277c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_HCD_HC_Init+0x2c>
 8002788:	2302      	movs	r3, #2
 800278a:	e09d      	b.n	80028c8 <HAL_HCD_HC_Init+0x168>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	3319      	adds	r3, #25
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3314      	adds	r3, #20
 80027b8:	787a      	ldrb	r2, [r7, #1]
 80027ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	3315      	adds	r3, #21
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3326      	adds	r3, #38	; 0x26
 80027e0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80027e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	78bb      	ldrb	r3, [r7, #2]
 80027ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ee:	b2d8      	uxtb	r0, r3
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3316      	adds	r3, #22
 80027fe:	4602      	mov	r2, r0
 8002800:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	4619      	mov	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fbc8 	bl	8002f9c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800280c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002810:	2b00      	cmp	r3, #0
 8002812:	da0a      	bge.n	800282a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3317      	adds	r3, #23
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	e009      	b.n	800283e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3317      	adds	r3, #23
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f006 fde0 	bl	8009408 <USB_GetHostSpeed>
 8002848:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800284a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10b      	bne.n	800286a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002852:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_HCD_HC_Init+0x10a>
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2bbc      	cmp	r3, #188	; 0xbc
 8002864:	d901      	bls.n	800286a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002866:	23bc      	movs	r3, #188	; 0xbc
 8002868:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3318      	adds	r3, #24
 800287a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800287e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	b298      	uxth	r0, r3
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3328      	adds	r3, #40	; 0x28
 8002894:	4602      	mov	r2, r0
 8002896:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	787c      	ldrb	r4, [r7, #1]
 80028a2:	78ba      	ldrb	r2, [r7, #2]
 80028a4:	78f9      	ldrb	r1, [r7, #3]
 80028a6:	9302      	str	r3, [sp, #8]
 80028a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	4623      	mov	r3, r4
 80028b6:	f006 fdcf 	bl	8009458 <USB_HC_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd90      	pop	{r4, r7, pc}

080028d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_HCD_HC_Halt+0x1e>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e00f      	b.n	800290e <HAL_HCD_HC_Halt+0x3e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f007 f961 	bl	8009bc6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4603      	mov	r3, r0
 8002928:	70fb      	strb	r3, [r7, #3]
 800292a:	460b      	mov	r3, r1
 800292c:	70bb      	strb	r3, [r7, #2]
 800292e:	4613      	mov	r3, r2
 8002930:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3317      	adds	r3, #23
 8002942:	78ba      	ldrb	r2, [r7, #2]
 8002944:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3326      	adds	r3, #38	; 0x26
 8002956:	787a      	ldrb	r2, [r7, #1]
 8002958:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800295a:	7c3b      	ldrb	r3, [r7, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d114      	bne.n	800298a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	332a      	adds	r3, #42	; 0x2a
 8002970:	2203      	movs	r2, #3
 8002972:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3319      	adds	r3, #25
 8002984:	7f3a      	ldrb	r2, [r7, #28]
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e009      	b.n	800299e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	332a      	adds	r3, #42	; 0x2a
 800299a:	2202      	movs	r2, #2
 800299c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800299e:	787b      	ldrb	r3, [r7, #1]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	f200 8102 	bhi.w	8002baa <HAL_HCD_HC_SubmitRequest+0x292>
 80029a6:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <HAL_HCD_HC_SubmitRequest+0x94>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029bd 	.word	0x080029bd
 80029b0:	08002b95 	.word	0x08002b95
 80029b4:	08002a81 	.word	0x08002a81
 80029b8:	08002b0b 	.word	0x08002b0b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80029bc:	7c3b      	ldrb	r3, [r7, #16]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	f040 80f5 	bne.w	8002bae <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80029c4:	78bb      	ldrb	r3, [r7, #2]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d12d      	bne.n	8002a26 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80029ca:	8b3b      	ldrh	r3, [r7, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	333d      	adds	r3, #61	; 0x3d
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	333d      	adds	r3, #61	; 0x3d
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	332a      	adds	r3, #42	; 0x2a
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002a0e:	e0ce      	b.n	8002bae <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	332a      	adds	r3, #42	; 0x2a
 8002a20:	2202      	movs	r2, #2
 8002a22:	701a      	strb	r2, [r3, #0]
      break;
 8002a24:	e0c3      	b.n	8002bae <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	331a      	adds	r3, #26
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	f040 80b8 	bne.w	8002bae <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	333c      	adds	r3, #60	; 0x3c
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	332a      	adds	r3, #42	; 0x2a
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
      break;
 8002a68:	e0a1      	b.n	8002bae <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	332a      	adds	r3, #42	; 0x2a
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	701a      	strb	r2, [r3, #0]
      break;
 8002a7e:	e096      	b.n	8002bae <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a80:	78bb      	ldrb	r3, [r7, #2]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d120      	bne.n	8002ac8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	333d      	adds	r3, #61	; 0x3d
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10a      	bne.n	8002ab2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	332a      	adds	r3, #42	; 0x2a
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002ab0:	e07e      	b.n	8002bb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	332a      	adds	r3, #42	; 0x2a
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	701a      	strb	r2, [r3, #0]
      break;
 8002ac6:	e073      	b.n	8002bb0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	333c      	adds	r3, #60	; 0x3c
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	332a      	adds	r3, #42	; 0x2a
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
      break;
 8002af2:	e05d      	b.n	8002bb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	332a      	adds	r3, #42	; 0x2a
 8002b04:	2202      	movs	r2, #2
 8002b06:	701a      	strb	r2, [r3, #0]
      break;
 8002b08:	e052      	b.n	8002bb0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002b0a:	78bb      	ldrb	r3, [r7, #2]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d120      	bne.n	8002b52 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	333d      	adds	r3, #61	; 0x3d
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	332a      	adds	r3, #42	; 0x2a
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b3a:	e039      	b.n	8002bb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	332a      	adds	r3, #42	; 0x2a
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
      break;
 8002b50:	e02e      	b.n	8002bb0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	333c      	adds	r3, #60	; 0x3c
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	332a      	adds	r3, #42	; 0x2a
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
      break;
 8002b7c:	e018      	b.n	8002bb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	332a      	adds	r3, #42	; 0x2a
 8002b8e:	2202      	movs	r2, #2
 8002b90:	701a      	strb	r2, [r3, #0]
      break;
 8002b92:	e00d      	b.n	8002bb0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	332a      	adds	r3, #42	; 0x2a
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
      break;
 8002ba8:	e002      	b.n	8002bb0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002bae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	332c      	adds	r3, #44	; 0x2c
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	8b39      	ldrh	r1, [r7, #24]
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4403      	add	r3, r0
 8002bd4:	3334      	adds	r3, #52	; 0x34
 8002bd6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334c      	adds	r3, #76	; 0x4c
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3338      	adds	r3, #56	; 0x38
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3315      	adds	r3, #21
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	334d      	adds	r3, #77	; 0x4d
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	3310      	adds	r3, #16
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	1d19      	adds	r1, r3, #4
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	799b      	ldrb	r3, [r3, #6]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f006 fd34 	bl	80096b0 <USB_HC_StartXfer>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop

08002c54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f006 fa28 	bl	80090c0 <USB_GetMode>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	f040 80fb 	bne.w	8002e6e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f006 f9eb 	bl	8009058 <USB_ReadInterrupts>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80f1 	beq.w	8002e6c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f006 f9e2 	bl	8009058 <USB_ReadInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c9e:	d104      	bne.n	8002caa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ca8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f006 f9d2 	bl	8009058 <USB_ReadInterrupts>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cbe:	d104      	bne.n	8002cca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f006 f9c2 	bl	8009058 <USB_ReadInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cde:	d104      	bne.n	8002cea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ce8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f006 f9b2 	bl	8009058 <USB_ReadInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d103      	bne.n	8002d06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2202      	movs	r2, #2
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f006 f9a4 	bl	8009058 <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d1a:	d120      	bne.n	8002d5e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d113      	bne.n	8002d5e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002d36:	2110      	movs	r1, #16
 8002d38:	6938      	ldr	r0, [r7, #16]
 8002d3a:	f006 f897 	bl	8008e6c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d3e:	6938      	ldr	r0, [r7, #16]
 8002d40:	f006 f8c6 	bl	8008ed0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7a5b      	ldrb	r3, [r3, #9]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d105      	bne.n	8002d58 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f006 fab8 	bl	80092c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f00e fb69 	bl	8011430 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f006 f978 	bl	8009058 <USB_ReadInterrupts>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d72:	d102      	bne.n	8002d7a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f001 fd4d 	bl	8004814 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f006 f96a 	bl	8009058 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d106      	bne.n	8002d9c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f00e fb32 	bl	80113f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2208      	movs	r2, #8
 8002d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f006 f959 	bl	8009058 <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002db0:	d139      	bne.n	8002e26 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f006 fef4 	bl	8009ba4 <USB_HC_ReadInterrupt>
 8002dbc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e025      	b.n	8002e10 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d018      	beq.n	8002e0a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dee:	d106      	bne.n	8002dfe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f905 	bl	8003006 <HCD_HC_IN_IRQHandler>
 8002dfc:	e005      	b.n	8002e0a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 ff67 	bl	8003cd8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	795b      	ldrb	r3, [r3, #5]
 8002e14:	461a      	mov	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d3d3      	bcc.n	8002dc4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f006 f914 	bl	8009058 <USB_ReadInterrupts>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d101      	bne.n	8002e3e <HAL_HCD_IRQHandler+0x1ea>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_HCD_IRQHandler+0x1ec>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d014      	beq.n	8002e6e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0210 	bic.w	r2, r2, #16
 8002e52:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f001 fbfe 	bl	8004656 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0210 	orr.w	r2, r2, #16
 8002e68:	619a      	str	r2, [r3, #24]
 8002e6a:	e000      	b.n	8002e6e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002e6c:	bf00      	nop
    }
  }
}
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_HCD_Start+0x16>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e013      	b.n	8002eb2 <HAL_HCD_Start+0x3e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f006 fa7c 	bl	8009396 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f005 ff74 	bl	8008d90 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_HCD_Stop+0x16>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e00d      	b.n	8002eec <HAL_HCD_Stop+0x32>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f006 ffcf 	bl	8009e80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f006 fa1e 	bl	8009342 <USB_ResetPort>
 8002f06:	4603      	mov	r3, r0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	334c      	adds	r3, #76	; 0x4c
 8002f2c:	781b      	ldrb	r3, [r3, #0]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3338      	adds	r3, #56	; 0x38
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f006 fa60 	bl	8009436 <USB_GetCurrentFrame>
 8002f76:	4603      	mov	r3, r0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f006 fa3b 	bl	8009408 <USB_GetHostSpeed>
 8002f92:	4603      	mov	r3, r0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	331a      	adds	r3, #26
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	331b      	adds	r3, #27
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3325      	adds	r3, #37	; 0x25
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3324      	adds	r3, #36	; 0x24
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f006 f82a 	bl	800907e <USB_ReadChInterrupts>
 800302a:	4603      	mov	r3, r0
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b04      	cmp	r3, #4
 8003032:	d11a      	bne.n	800306a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	2304      	movs	r3, #4
 8003044:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	334d      	adds	r3, #77	; 0x4d
 8003056:	2207      	movs	r2, #7
 8003058:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f006 fdaf 	bl	8009bc6 <USB_HC_Halt>
 8003068:	e09e      	b.n	80031a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f006 f803 	bl	800907e <USB_ReadChInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003082:	d11b      	bne.n	80030bc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	461a      	mov	r2, r3
 8003092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003096:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	334d      	adds	r3, #77	; 0x4d
 80030a8:	2208      	movs	r2, #8
 80030aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f006 fd86 	bl	8009bc6 <USB_HC_Halt>
 80030ba:	e075      	b.n	80031a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f005 ffda 	bl	800907e <USB_ReadChInterrupts>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d11a      	bne.n	800310a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	461a      	mov	r2, r3
 80030e2:	2308      	movs	r3, #8
 80030e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	334d      	adds	r3, #77	; 0x4d
 80030f6:	2206      	movs	r2, #6
 80030f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f006 fd5f 	bl	8009bc6 <USB_HC_Halt>
 8003108:	e04e      	b.n	80031a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f005 ffb3 	bl	800907e <USB_ReadChInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003122:	d11b      	bne.n	800315c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	461a      	mov	r2, r3
 8003132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003136:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	334d      	adds	r3, #77	; 0x4d
 8003148:	2209      	movs	r2, #9
 800314a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f006 fd36 	bl	8009bc6 <USB_HC_Halt>
 800315a:	e025      	b.n	80031a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f005 ff8a 	bl	800907e <USB_ReadChInterrupts>
 800316a:	4603      	mov	r3, r0
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d119      	bne.n	80031a8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	461a      	mov	r2, r3
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	334d      	adds	r3, #77	; 0x4d
 8003196:	2207      	movs	r2, #7
 8003198:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f006 fd0f 	bl	8009bc6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f005 ff64 	bl	800907e <USB_ReadChInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c0:	d112      	bne.n	80031e8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f006 fcfb 	bl	8009bc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	461a      	mov	r2, r3
 80031de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e2:	6093      	str	r3, [r2, #8]
 80031e4:	f000 bd75 	b.w	8003cd2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f005 ff44 	bl	800907e <USB_ReadChInterrupts>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 8128 	bne.w	8003452 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320e:	461a      	mov	r2, r3
 8003210:	2320      	movs	r3, #32
 8003212:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	331b      	adds	r3, #27
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d119      	bne.n	800325e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	331b      	adds	r3, #27
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	0151      	lsls	r1, r2, #5
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	440a      	add	r2, r1
 8003254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	799b      	ldrb	r3, [r3, #6]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01b      	beq.n	800329e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3330      	adds	r3, #48	; 0x30
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	1ac9      	subs	r1, r1, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4403      	add	r3, r0
 800329a:	3338      	adds	r3, #56	; 0x38
 800329c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	334d      	adds	r3, #77	; 0x4d
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	3344      	adds	r3, #68	; 0x44
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d2:	461a      	mov	r2, r3
 80032d4:	2301      	movs	r3, #1
 80032d6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	3326      	adds	r3, #38	; 0x26
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3326      	adds	r3, #38	; 0x26
 80032fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003300:	2b02      	cmp	r3, #2
 8003302:	d110      	bne.n	8003326 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f006 fc5a 	bl	8009bc6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	461a      	mov	r2, r3
 8003320:	2310      	movs	r3, #16
 8003322:	6093      	str	r3, [r2, #8]
 8003324:	e03d      	b.n	80033a2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	3326      	adds	r3, #38	; 0x26
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d00a      	beq.n	8003352 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3326      	adds	r3, #38	; 0x26
 800334c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800334e:	2b01      	cmp	r3, #1
 8003350:	d127      	bne.n	80033a2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	0151      	lsls	r1, r2, #5
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	440a      	add	r2, r1
 8003368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800336c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003370:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	334c      	adds	r3, #76	; 0x4c
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	334c      	adds	r3, #76	; 0x4c
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f00e f855 	bl	801144c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	799b      	ldrb	r3, [r3, #6]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d13b      	bne.n	8003422 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	3338      	adds	r3, #56	; 0x38
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4403      	add	r3, r0
 80033ca:	3328      	adds	r3, #40	; 0x28
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	440b      	add	r3, r1
 80033d0:	1e59      	subs	r1, r3, #1
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4403      	add	r3, r0
 80033e0:	3328      	adds	r3, #40	; 0x28
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8470 	beq.w	8003cd2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	333c      	adds	r3, #60	; 0x3c
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	f083 0301 	eor.w	r3, r3, #1
 800340a:	b2d8      	uxtb	r0, r3
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	333c      	adds	r3, #60	; 0x3c
 800341a:	4602      	mov	r2, r0
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	f000 bc58 	b.w	8003cd2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	333c      	adds	r3, #60	; 0x3c
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	f083 0301 	eor.w	r3, r3, #1
 800343a:	b2d8      	uxtb	r0, r3
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	333c      	adds	r3, #60	; 0x3c
 800344a:	4602      	mov	r2, r0
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	f000 bc40 	b.w	8003cd2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f005 fe0f 	bl	800907e <USB_ReadChInterrupts>
 8003460:	4603      	mov	r3, r0
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b20      	cmp	r3, #32
 8003468:	d131      	bne.n	80034ce <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	461a      	mov	r2, r3
 8003478:	2320      	movs	r3, #32
 800347a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	331a      	adds	r3, #26
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	f040 841f 	bne.w	8003cd2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	331b      	adds	r3, #27
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	334d      	adds	r3, #77	; 0x4d
 80034b8:	2203      	movs	r2, #3
 80034ba:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f006 fb7e 	bl	8009bc6 <USB_HC_Halt>
 80034ca:	f000 bc02 	b.w	8003cd2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f005 fdd1 	bl	800907e <USB_ReadChInterrupts>
 80034dc:	4603      	mov	r3, r0
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	f040 8305 	bne.w	8003af2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f4:	461a      	mov	r2, r3
 80034f6:	2302      	movs	r3, #2
 80034f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	334d      	adds	r3, #77	; 0x4d
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d114      	bne.n	800353a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	334d      	adds	r3, #77	; 0x4d
 8003520:	2202      	movs	r2, #2
 8003522:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	334c      	adds	r3, #76	; 0x4c
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e2cc      	b.n	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	334d      	adds	r3, #77	; 0x4d
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b06      	cmp	r3, #6
 800354e:	d114      	bne.n	800357a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	334d      	adds	r3, #77	; 0x4d
 8003560:	2202      	movs	r2, #2
 8003562:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	334c      	adds	r3, #76	; 0x4c
 8003574:	2205      	movs	r2, #5
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e2ac      	b.n	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	334d      	adds	r3, #77	; 0x4d
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b07      	cmp	r3, #7
 800358e:	d00b      	beq.n	80035a8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	334d      	adds	r3, #77	; 0x4d
 80035a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	f040 80a6 	bne.w	80036f4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	334d      	adds	r3, #77	; 0x4d
 80035b8:	2202      	movs	r2, #2
 80035ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3344      	adds	r3, #68	; 0x44
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1c59      	adds	r1, r3, #1
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4403      	add	r3, r0
 80035dc:	3344      	adds	r3, #68	; 0x44
 80035de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3344      	adds	r3, #68	; 0x44
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d943      	bls.n	800367e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3344      	adds	r3, #68	; 0x44
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	331a      	adds	r3, #26
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d123      	bne.n	8003668 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	331b      	adds	r3, #27
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	331c      	adds	r3, #28
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	0151      	lsls	r1, r2, #5
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	440a      	add	r2, r1
 800365e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003666:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	334c      	adds	r3, #76	; 0x4c
 8003678:	2204      	movs	r2, #4
 800367a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800367c:	e229      	b.n	8003ad2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	334c      	adds	r3, #76	; 0x4c
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	3326      	adds	r3, #38	; 0x26
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00b      	beq.n	80036c0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	3326      	adds	r3, #38	; 0x26
 80036b8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	f040 8209 	bne.w	8003ad2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036d6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036de:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	461a      	mov	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036f2:	e1ee      	b.n	8003ad2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	334d      	adds	r3, #77	; 0x4d
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b05      	cmp	r3, #5
 8003708:	f040 80c8 	bne.w	800389c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	334d      	adds	r3, #77	; 0x4d
 800371c:	2202      	movs	r2, #2
 800371e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	331b      	adds	r3, #27
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	f040 81ce 	bne.w	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3326      	adds	r3, #38	; 0x26
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d16b      	bne.n	8003826 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3348      	adds	r3, #72	; 0x48
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	1c59      	adds	r1, r3, #1
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4403      	add	r3, r0
 800376e:	3348      	adds	r3, #72	; 0x48
 8003770:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3348      	adds	r3, #72	; 0x48
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d943      	bls.n	8003810 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3348      	adds	r3, #72	; 0x48
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	331b      	adds	r3, #27
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3344      	adds	r3, #68	; 0x44
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d809      	bhi.n	80037da <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	331c      	adds	r3, #28
 80037d6:	2201      	movs	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	0151      	lsls	r1, r2, #5
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	440a      	add	r2, r1
 80037f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	334c      	adds	r3, #76	; 0x4c
 800380a:	2204      	movs	r2, #4
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	e014      	b.n	800383a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	334c      	adds	r3, #76	; 0x4c
 8003820:	2202      	movs	r2, #2
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e009      	b.n	800383a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	334c      	adds	r3, #76	; 0x4c
 8003836:	2202      	movs	r2, #2
 8003838:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3326      	adds	r3, #38	; 0x26
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3326      	adds	r3, #38	; 0x26
 8003860:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003862:	2b02      	cmp	r3, #2
 8003864:	f040 8136 	bne.w	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800387e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003886:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4413      	add	r3, r2
 8003890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003894:	461a      	mov	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e11b      	b.n	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	334d      	adds	r3, #77	; 0x4d
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	f040 8081 	bne.w	80039b6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	334d      	adds	r3, #77	; 0x4d
 80038c4:	2202      	movs	r2, #2
 80038c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	331b      	adds	r3, #27
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	f040 80fa 	bne.w	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	334c      	adds	r3, #76	; 0x4c
 80038f0:	2202      	movs	r2, #2
 80038f2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	0151      	lsls	r1, r2, #5
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	440a      	add	r2, r1
 800390a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800390e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003912:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	0151      	lsls	r1, r2, #5
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	440a      	add	r2, r1
 800392a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800392e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003932:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	440a      	add	r2, r1
 800394a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800394e:	f023 0320 	bic.w	r3, r3, #32
 8003952:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	3326      	adds	r3, #38	; 0x26
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3326      	adds	r3, #38	; 0x26
 800397a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800397c:	2b02      	cmp	r3, #2
 800397e:	f040 80a9 	bne.w	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003998:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039a0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	e08e      	b.n	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	334d      	adds	r3, #77	; 0x4d
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d143      	bne.n	8003a54 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	334d      	adds	r3, #77	; 0x4d
 80039dc:	2202      	movs	r2, #2
 80039de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	334c      	adds	r3, #76	; 0x4c
 80039f0:	2202      	movs	r2, #2
 80039f2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3326      	adds	r3, #38	; 0x26
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3326      	adds	r3, #38	; 0x26
 8003a1a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d159      	bne.n	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a36:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a3e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e03f      	b.n	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	334d      	adds	r3, #77	; 0x4d
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d126      	bne.n	8003ab8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	334d      	adds	r3, #77	; 0x4d
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3344      	adds	r3, #68	; 0x44
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	1c59      	adds	r1, r3, #1
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4403      	add	r3, r0
 8003a9e:	3344      	adds	r3, #68	; 0x44
 8003aa0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	334c      	adds	r3, #76	; 0x4c
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	e00d      	b.n	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	334d      	adds	r3, #77	; 0x4d
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	f000 8100 	beq.w	8003cd0 <HCD_HC_IN_IRQHandler+0xcca>
 8003ad0:	e000      	b.n	8003ad4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ad2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	334c      	adds	r3, #76	; 0x4c
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f00d fcae 	bl	801144c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003af0:	e0ef      	b.n	8003cd2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f005 fabf 	bl	800907e <USB_ReadChInterrupts>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d12f      	bne.n	8003b6a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b16:	461a      	mov	r2, r3
 8003b18:	2340      	movs	r3, #64	; 0x40
 8003b1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	334d      	adds	r3, #77	; 0x4d
 8003b2c:	2205      	movs	r2, #5
 8003b2e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	331a      	adds	r3, #26
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	3344      	adds	r3, #68	; 0x44
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f006 f82f 	bl	8009bc6 <USB_HC_Halt>
 8003b68:	e0b3      	b.n	8003cd2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f005 fa83 	bl	800907e <USB_ReadChInterrupts>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	f040 80a7 	bne.w	8003cd2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	3326      	adds	r3, #38	; 0x26
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d11b      	bne.n	8003bd2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3344      	adds	r3, #68	; 0x44
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	334d      	adds	r3, #77	; 0x4d
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f005 fffb 	bl	8009bc6 <USB_HC_Halt>
 8003bd0:	e03f      	b.n	8003c52 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	3326      	adds	r3, #38	; 0x26
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3326      	adds	r3, #38	; 0x26
 8003bf8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d129      	bne.n	8003c52 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3344      	adds	r3, #68	; 0x44
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	799b      	ldrb	r3, [r3, #6]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HCD_HC_IN_IRQHandler+0xc2a>
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	331b      	adds	r3, #27
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d110      	bne.n	8003c52 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	334d      	adds	r3, #77	; 0x4d
 8003c40:	2204      	movs	r2, #4
 8003c42:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f005 ffba 	bl	8009bc6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	331b      	adds	r3, #27
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d129      	bne.n	8003cbc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	331b      	adds	r3, #27
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	0151      	lsls	r1, r2, #5
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	440a      	add	r2, r1
 8003c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	0151      	lsls	r1, r2, #5
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cb6:	f043 0320 	orr.w	r3, r3, #32
 8003cba:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2310      	movs	r3, #16
 8003ccc:	6093      	str	r3, [r2, #8]
 8003cce:	e000      	b.n	8003cd2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003cd0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f005 f9c1 	bl	800907e <USB_ReadChInterrupts>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d11b      	bne.n	8003d3e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d12:	461a      	mov	r2, r3
 8003d14:	2304      	movs	r3, #4
 8003d16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	334d      	adds	r3, #77	; 0x4d
 8003d28:	2207      	movs	r2, #7
 8003d2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f005 ff46 	bl	8009bc6 <USB_HC_Halt>
 8003d3a:	f000 bc89 	b.w	8004650 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f005 f999 	bl	800907e <USB_ReadChInterrupts>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	f040 8082 	bne.w	8003e5c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d64:	461a      	mov	r2, r3
 8003d66:	2320      	movs	r3, #32
 8003d68:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	3319      	adds	r3, #25
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d124      	bne.n	8003dca <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3319      	adds	r3, #25
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	334c      	adds	r3, #76	; 0x4c
 8003da4:	2202      	movs	r2, #2
 8003da6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	334d      	adds	r3, #77	; 0x4d
 8003db8:	2203      	movs	r2, #3
 8003dba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f005 fefe 	bl	8009bc6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	331a      	adds	r3, #26
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	f040 8437 	bne.w	8004650 <HCD_HC_OUT_IRQHandler+0x978>
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	331b      	adds	r3, #27
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 842b 	bne.w	8004650 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	3326      	adds	r3, #38	; 0x26
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d009      	beq.n	8003e24 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	331b      	adds	r3, #27
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	334d      	adds	r3, #77	; 0x4d
 8003e34:	2203      	movs	r2, #3
 8003e36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f005 fec0 	bl	8009bc6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	3344      	adds	r3, #68	; 0x44
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e3f9      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f005 f90a 	bl	800907e <USB_ReadChInterrupts>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e74:	d111      	bne.n	8003e9a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e82:	461a      	mov	r2, r3
 8003e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e88:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	4611      	mov	r1, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f005 fe97 	bl	8009bc6 <USB_HC_Halt>
 8003e98:	e3da      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f005 f8eb 	bl	800907e <USB_ReadChInterrupts>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d168      	bne.n	8003f84 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3344      	adds	r3, #68	; 0x44
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f005 f8d5 	bl	800907e <USB_ReadChInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d112      	bne.n	8003f04 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ede:	78fa      	ldrb	r2, [r7, #3]
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	3319      	adds	r3, #25
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efe:	461a      	mov	r2, r3
 8003f00:	2340      	movs	r3, #64	; 0x40
 8003f02:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	331b      	adds	r3, #27
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d019      	beq.n	8003f4e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	331b      	adds	r3, #27
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	0151      	lsls	r1, r2, #5
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	440a      	add	r2, r1
 8003f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	334d      	adds	r3, #77	; 0x4d
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f005 fe22 	bl	8009bc6 <USB_HC_Halt>
 8003f82:	e365      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f005 f876 	bl	800907e <USB_ReadChInterrupts>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d139      	bne.n	8004010 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	334d      	adds	r3, #77	; 0x4d
 8003fac:	2205      	movs	r2, #5
 8003fae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	331a      	adds	r3, #26
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3319      	adds	r3, #25
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3344      	adds	r3, #68	; 0x44
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f005 fde5 	bl	8009bc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	461a      	mov	r2, r3
 800400a:	2340      	movs	r3, #64	; 0x40
 800400c:	6093      	str	r3, [r2, #8]
 800400e:	e31f      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f005 f830 	bl	800907e <USB_ReadChInterrupts>
 800401e:	4603      	mov	r3, r0
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d11a      	bne.n	800405e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	461a      	mov	r2, r3
 8004036:	2308      	movs	r3, #8
 8004038:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	334d      	adds	r3, #77	; 0x4d
 800404a:	2206      	movs	r2, #6
 800404c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f005 fdb5 	bl	8009bc6 <USB_HC_Halt>
 800405c:	e2f8      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f005 f809 	bl	800907e <USB_ReadChInterrupts>
 800406c:	4603      	mov	r3, r0
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b10      	cmp	r3, #16
 8004074:	d144      	bne.n	8004100 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	3344      	adds	r3, #68	; 0x44
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	334d      	adds	r3, #77	; 0x4d
 800409a:	2204      	movs	r2, #4
 800409c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	3319      	adds	r3, #25
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d114      	bne.n	80040de <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	3318      	adds	r3, #24
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	3319      	adds	r3, #25
 80040da:	2201      	movs	r2, #1
 80040dc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	4611      	mov	r1, r2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f005 fd6d 	bl	8009bc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	461a      	mov	r2, r3
 80040fa:	2310      	movs	r3, #16
 80040fc:	6093      	str	r3, [r2, #8]
 80040fe:	e2a7      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f004 ffb8 	bl	800907e <USB_ReadChInterrupts>
 800410e:	4603      	mov	r3, r0
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	f040 8083 	bne.w	8004220 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	799b      	ldrb	r3, [r3, #6]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d111      	bne.n	8004146 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	334d      	adds	r3, #77	; 0x4d
 8004132:	2207      	movs	r2, #7
 8004134:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f005 fd41 	bl	8009bc6 <USB_HC_Halt>
 8004144:	e062      	b.n	800420c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	3344      	adds	r3, #68	; 0x44
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	1c59      	adds	r1, r3, #1
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4403      	add	r3, r0
 8004166:	3344      	adds	r3, #68	; 0x44
 8004168:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	3344      	adds	r3, #68	; 0x44
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d922      	bls.n	80041c6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3344      	adds	r3, #68	; 0x44
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	334c      	adds	r3, #76	; 0x4c
 80041a4:	2204      	movs	r2, #4
 80041a6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	334c      	adds	r3, #76	; 0x4c
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f00d f944 	bl	801144c <HAL_HCD_HC_NotifyURBChange_Callback>
 80041c4:	e022      	b.n	800420c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	334c      	adds	r3, #76	; 0x4c
 80041d6:	2202      	movs	r2, #2
 80041d8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041f0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041f8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	461a      	mov	r2, r3
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	6093      	str	r3, [r2, #8]
 800421e:	e217      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f004 ff28 	bl	800907e <USB_ReadChInterrupts>
 800422e:	4603      	mov	r3, r0
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004238:	d11b      	bne.n	8004272 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	334d      	adds	r3, #77	; 0x4d
 800424a:	2209      	movs	r2, #9
 800424c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f005 fcb5 	bl	8009bc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004268:	461a      	mov	r2, r3
 800426a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426e:	6093      	str	r3, [r2, #8]
 8004270:	e1ee      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f004 feff 	bl	800907e <USB_ReadChInterrupts>
 8004280:	4603      	mov	r3, r0
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	f040 81df 	bne.w	800464a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4413      	add	r3, r2
 8004294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004298:	461a      	mov	r2, r3
 800429a:	2302      	movs	r3, #2
 800429c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	334d      	adds	r3, #77	; 0x4d
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	f040 8093 	bne.w	80043dc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	334d      	adds	r3, #77	; 0x4d
 80042c6:	2202      	movs	r2, #2
 80042c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	334c      	adds	r3, #76	; 0x4c
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	3326      	adds	r3, #38	; 0x26
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d00b      	beq.n	800430c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	3326      	adds	r3, #38	; 0x26
 8004304:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004306:	2b03      	cmp	r3, #3
 8004308:	f040 8190 	bne.w	800462c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	799b      	ldrb	r3, [r3, #6]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d115      	bne.n	8004340 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	333d      	adds	r3, #61	; 0x3d
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	f083 0301 	eor.w	r3, r3, #1
 800432c:	b2d8      	uxtb	r0, r3
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	333d      	adds	r3, #61	; 0x3d
 800433c:	4602      	mov	r2, r0
 800433e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	799b      	ldrb	r3, [r3, #6]
 8004344:	2b01      	cmp	r3, #1
 8004346:	f040 8171 	bne.w	800462c <HCD_HC_OUT_IRQHandler+0x954>
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3334      	adds	r3, #52	; 0x34
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8165 	beq.w	800462c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	3334      	adds	r3, #52	; 0x34
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4403      	add	r3, r0
 8004382:	3328      	adds	r3, #40	; 0x28
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	440b      	add	r3, r1
 8004388:	1e59      	subs	r1, r3, #1
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4403      	add	r3, r0
 8004398:	3328      	adds	r3, #40	; 0x28
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	fbb1 f3f3 	udiv	r3, r1, r3
 80043a0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 813f 	beq.w	800462c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	333d      	adds	r3, #61	; 0x3d
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	f083 0301 	eor.w	r3, r3, #1
 80043c6:	b2d8      	uxtb	r0, r3
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	333d      	adds	r3, #61	; 0x3d
 80043d6:	4602      	mov	r2, r0
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	e127      	b.n	800462c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	334d      	adds	r3, #77	; 0x4d
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d120      	bne.n	8004434 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	334d      	adds	r3, #77	; 0x4d
 8004402:	2202      	movs	r2, #2
 8004404:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	331b      	adds	r3, #27
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b01      	cmp	r3, #1
 800441a:	f040 8107 	bne.w	800462c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	334c      	adds	r3, #76	; 0x4c
 800442e:	2202      	movs	r2, #2
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	e0fb      	b.n	800462c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	334d      	adds	r3, #77	; 0x4d
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b04      	cmp	r3, #4
 8004448:	d13a      	bne.n	80044c0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	334d      	adds	r3, #77	; 0x4d
 800445a:	2202      	movs	r2, #2
 800445c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	334c      	adds	r3, #76	; 0x4c
 800446e:	2202      	movs	r2, #2
 8004470:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	331b      	adds	r3, #27
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b01      	cmp	r3, #1
 8004486:	f040 80d1 	bne.w	800462c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	331b      	adds	r3, #27
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044bc:	6053      	str	r3, [r2, #4]
 80044be:	e0b5      	b.n	800462c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80044c0:	78fa      	ldrb	r2, [r7, #3]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	334d      	adds	r3, #77	; 0x4d
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d114      	bne.n	8004500 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	334d      	adds	r3, #77	; 0x4d
 80044e6:	2202      	movs	r2, #2
 80044e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80044ea:	78fa      	ldrb	r2, [r7, #3]
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	334c      	adds	r3, #76	; 0x4c
 80044fa:	2202      	movs	r2, #2
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	e095      	b.n	800462c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	334d      	adds	r3, #77	; 0x4d
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d114      	bne.n	8004540 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	334d      	adds	r3, #77	; 0x4d
 8004526:	2202      	movs	r2, #2
 8004528:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	334c      	adds	r3, #76	; 0x4c
 800453a:	2205      	movs	r2, #5
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e075      	b.n	800462c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	334d      	adds	r3, #77	; 0x4d
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b07      	cmp	r3, #7
 8004554:	d00a      	beq.n	800456c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	334d      	adds	r3, #77	; 0x4d
 8004566:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004568:	2b09      	cmp	r3, #9
 800456a:	d170      	bne.n	800464e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	334d      	adds	r3, #77	; 0x4d
 800457c:	2202      	movs	r2, #2
 800457e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	3344      	adds	r3, #68	; 0x44
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4403      	add	r3, r0
 80045a0:	3344      	adds	r3, #68	; 0x44
 80045a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	3344      	adds	r3, #68	; 0x44
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d914      	bls.n	80045e4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	3344      	adds	r3, #68	; 0x44
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	334c      	adds	r3, #76	; 0x4c
 80045de:	2204      	movs	r2, #4
 80045e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045e2:	e022      	b.n	800462a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045e4:	78fa      	ldrb	r2, [r7, #3]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	334c      	adds	r3, #76	; 0x4c
 80045f4:	2202      	movs	r2, #2
 80045f6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800460e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004616:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004624:	461a      	mov	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800462a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800462c:	78fa      	ldrb	r2, [r7, #3]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	334c      	adds	r3, #76	; 0x4c
 800463c:	781a      	ldrb	r2, [r3, #0]
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	4619      	mov	r1, r3
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f00c ff02 	bl	801144c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004648:	e002      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800464e:	bf00      	nop
  }
}
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b08a      	sub	sp, #40	; 0x28
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	0c5b      	lsrs	r3, r3, #17
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800468a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d004      	beq.n	800469c <HCD_RXQLVL_IRQHandler+0x46>
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b05      	cmp	r3, #5
 8004696:	f000 80b6 	beq.w	8004806 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800469a:	e0b7      	b.n	800480c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80b3 	beq.w	800480a <HCD_RXQLVL_IRQHandler+0x1b4>
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4613      	mov	r3, r2
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	332c      	adds	r3, #44	; 0x2c
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 80a7 	beq.w	800480a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	3338      	adds	r3, #56	; 0x38
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	18d1      	adds	r1, r2, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4403      	add	r3, r0
 80046e0:	3334      	adds	r3, #52	; 0x34
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4299      	cmp	r1, r3
 80046e6:	f200 8083 	bhi.w	80047f0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4613      	mov	r3, r2
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	332c      	adds	r3, #44	; 0x2c
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	b292      	uxth	r2, r2
 8004704:	4619      	mov	r1, r3
 8004706:	f004 fc4f 	bl	8008fa8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	332c      	adds	r3, #44	; 0x2c
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	18d1      	adds	r1, r2, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4403      	add	r3, r0
 800472e:	332c      	adds	r3, #44	; 0x2c
 8004730:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4613      	mov	r3, r2
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	3338      	adds	r3, #56	; 0x38
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	18d1      	adds	r1, r2, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4613      	mov	r3, r2
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4403      	add	r3, r0
 8004756:	3338      	adds	r3, #56	; 0x38
 8004758:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	4413      	add	r3, r2
 8004762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	0cdb      	lsrs	r3, r3, #19
 800476a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800476e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4613      	mov	r3, r2
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	3328      	adds	r3, #40	; 0x28
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4293      	cmp	r3, r2
 8004788:	d13f      	bne.n	800480a <HCD_RXQLVL_IRQHandler+0x1b4>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d03c      	beq.n	800480a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047a6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047ae:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047bc:	461a      	mov	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4613      	mov	r3, r2
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	333c      	adds	r3, #60	; 0x3c
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	f083 0301 	eor.w	r3, r3, #1
 80047d8:	b2d8      	uxtb	r0, r3
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	333c      	adds	r3, #60	; 0x3c
 80047ea:	4602      	mov	r2, r0
 80047ec:	701a      	strb	r2, [r3, #0]
      break;
 80047ee:	e00c      	b.n	800480a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4613      	mov	r3, r2
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	334c      	adds	r3, #76	; 0x4c
 8004800:	2204      	movs	r2, #4
 8004802:	701a      	strb	r2, [r3, #0]
      break;
 8004804:	e001      	b.n	800480a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004806:	bf00      	nop
 8004808:	e000      	b.n	800480c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800480a:	bf00      	nop
  }
}
 800480c:	bf00      	nop
 800480e:	3728      	adds	r7, #40	; 0x28
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004840:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d10b      	bne.n	8004864 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	d102      	bne.n	800485c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f00c fddc 	bl	8011414 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f043 0302 	orr.w	r3, r3, #2
 8004862:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b08      	cmp	r3, #8
 800486c:	d132      	bne.n	80048d4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f043 0308 	orr.w	r3, r3, #8
 8004874:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b04      	cmp	r3, #4
 800487e:	d126      	bne.n	80048ce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	7a5b      	ldrb	r3, [r3, #9]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d113      	bne.n	80048b0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800488e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004892:	d106      	bne.n	80048a2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2102      	movs	r1, #2
 800489a:	4618      	mov	r0, r3
 800489c:	f004 fd14 	bl	80092c8 <USB_InitFSLSPClkSel>
 80048a0:	e011      	b.n	80048c6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2101      	movs	r1, #1
 80048a8:	4618      	mov	r0, r3
 80048aa:	f004 fd0d 	bl	80092c8 <USB_InitFSLSPClkSel>
 80048ae:	e00a      	b.n	80048c6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	79db      	ldrb	r3, [r3, #7]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d106      	bne.n	80048c6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048be:	461a      	mov	r2, r3
 80048c0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80048c4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f00c fdd2 	bl	8011470 <HAL_HCD_PortEnabled_Callback>
 80048cc:	e002      	b.n	80048d4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f00c fddc 	bl	801148c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d103      	bne.n	80048e6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f043 0320 	orr.w	r3, r3, #32
 80048e4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048ec:	461a      	mov	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	6013      	str	r3, [r2, #0]
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e12b      	b.n	8004b66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fa7e 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	; 0x24
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800494e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800495e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004960:	f002 f8ac 	bl	8006abc <HAL_RCC_GetPCLK1Freq>
 8004964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4a81      	ldr	r2, [pc, #516]	; (8004b70 <HAL_I2C_Init+0x274>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d807      	bhi.n	8004980 <HAL_I2C_Init+0x84>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a80      	ldr	r2, [pc, #512]	; (8004b74 <HAL_I2C_Init+0x278>)
 8004974:	4293      	cmp	r3, r2
 8004976:	bf94      	ite	ls
 8004978:	2301      	movls	r3, #1
 800497a:	2300      	movhi	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e006      	b.n	800498e <HAL_I2C_Init+0x92>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a7d      	ldr	r2, [pc, #500]	; (8004b78 <HAL_I2C_Init+0x27c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	bf94      	ite	ls
 8004988:	2301      	movls	r3, #1
 800498a:	2300      	movhi	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0e7      	b.n	8004b66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a78      	ldr	r2, [pc, #480]	; (8004b7c <HAL_I2C_Init+0x280>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	0c9b      	lsrs	r3, r3, #18
 80049a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a6a      	ldr	r2, [pc, #424]	; (8004b70 <HAL_I2C_Init+0x274>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d802      	bhi.n	80049d0 <HAL_I2C_Init+0xd4>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3301      	adds	r3, #1
 80049ce:	e009      	b.n	80049e4 <HAL_I2C_Init+0xe8>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	4a69      	ldr	r2, [pc, #420]	; (8004b80 <HAL_I2C_Init+0x284>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	099b      	lsrs	r3, r3, #6
 80049e2:	3301      	adds	r3, #1
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	495c      	ldr	r1, [pc, #368]	; (8004b70 <HAL_I2C_Init+0x274>)
 8004a00:	428b      	cmp	r3, r1
 8004a02:	d819      	bhi.n	8004a38 <HAL_I2C_Init+0x13c>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1e59      	subs	r1, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a18:	400b      	ands	r3, r1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_I2C_Init+0x138>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1e59      	subs	r1, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a32:	e051      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004a34:	2304      	movs	r3, #4
 8004a36:	e04f      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d111      	bne.n	8004a64 <HAL_I2C_Init+0x168>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1e58      	subs	r0, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6859      	ldr	r1, [r3, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	440b      	add	r3, r1
 8004a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a52:	3301      	adds	r3, #1
 8004a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e012      	b.n	8004a8a <HAL_I2C_Init+0x18e>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	1e58      	subs	r0, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	0099      	lsls	r1, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Init+0x196>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e022      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10e      	bne.n	8004ab8 <HAL_I2C_Init+0x1bc>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1e58      	subs	r0, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6859      	ldr	r1, [r3, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	440b      	add	r3, r1
 8004aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aac:	3301      	adds	r3, #1
 8004aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab6:	e00f      	b.n	8004ad8 <HAL_I2C_Init+0x1dc>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1e58      	subs	r0, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6859      	ldr	r1, [r3, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	0099      	lsls	r1, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	6809      	ldr	r1, [r1, #0]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6911      	ldr	r1, [r2, #16]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68d2      	ldr	r2, [r2, #12]
 8004b12:	4311      	orrs	r1, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	000186a0 	.word	0x000186a0
 8004b74:	001e847f 	.word	0x001e847f
 8004b78:	003d08ff 	.word	0x003d08ff
 8004b7c:	431bde83 	.word	0x431bde83
 8004b80:	10624dd3 	.word	0x10624dd3

08004b84 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e021      	b.n	8004bda <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2224      	movs	r2, #36	; 0x24
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fc f9a2 	bl	8000ef8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	4608      	mov	r0, r1
 8004bee:	4611      	mov	r1, r2
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	817b      	strh	r3, [r7, #10]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	813b      	strh	r3, [r7, #8]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bfe:	f7fc fd9f 	bl	8001740 <HAL_GetTick>
 8004c02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	f040 80d9 	bne.w	8004dc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2319      	movs	r3, #25
 8004c18:	2201      	movs	r2, #1
 8004c1a:	496d      	ldr	r1, [pc, #436]	; (8004dd0 <HAL_I2C_Mem_Write+0x1ec>)
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fc99 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e0cc      	b.n	8004dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_I2C_Mem_Write+0x56>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e0c5      	b.n	8004dc6 <HAL_I2C_Mem_Write+0x1e2>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d007      	beq.n	8004c60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2221      	movs	r2, #33	; 0x21
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2240      	movs	r2, #64	; 0x40
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a3a      	ldr	r2, [r7, #32]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4a4d      	ldr	r2, [pc, #308]	; (8004dd4 <HAL_I2C_Mem_Write+0x1f0>)
 8004ca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ca2:	88f8      	ldrh	r0, [r7, #6]
 8004ca4:	893a      	ldrh	r2, [r7, #8]
 8004ca6:	8979      	ldrh	r1, [r7, #10]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fad0 	bl	8005258 <I2C_RequestMemoryWrite>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d052      	beq.n	8004d64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e081      	b.n	8004dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fd5e 	bl	8005788 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00d      	beq.n	8004cee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d107      	bne.n	8004cea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e06b      	b.n	8004dc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d11b      	bne.n	8004d64 <HAL_I2C_Mem_Write+0x180>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d017      	beq.n	8004d64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	781a      	ldrb	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1aa      	bne.n	8004cc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fd51 	bl	8005818 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d107      	bne.n	8004d94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e016      	b.n	8004dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e000      	b.n	8004dc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004dc4:	2302      	movs	r3, #2
  }
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	00100002 	.word	0x00100002
 8004dd4:	ffff0000 	.word	0xffff0000

08004dd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08c      	sub	sp, #48	; 0x30
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	4608      	mov	r0, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	461a      	mov	r2, r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	817b      	strh	r3, [r7, #10]
 8004dea:	460b      	mov	r3, r1
 8004dec:	813b      	strh	r3, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004df2:	f7fc fca5 	bl	8001740 <HAL_GetTick>
 8004df6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	f040 8214 	bne.w	800522e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	2319      	movs	r3, #25
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	497b      	ldr	r1, [pc, #492]	; (8004ffc <HAL_I2C_Mem_Read+0x224>)
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fb9f 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e207      	b.n	8005230 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_I2C_Mem_Read+0x56>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e200      	b.n	8005230 <HAL_I2C_Mem_Read+0x458>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d007      	beq.n	8004e54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2222      	movs	r2, #34	; 0x22
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2240      	movs	r2, #64	; 0x40
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a5b      	ldr	r2, [pc, #364]	; (8005000 <HAL_I2C_Mem_Read+0x228>)
 8004e94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e96:	88f8      	ldrh	r0, [r7, #6]
 8004e98:	893a      	ldrh	r2, [r7, #8]
 8004e9a:	8979      	ldrh	r1, [r7, #10]
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fa6c 	bl	8005384 <I2C_RequestMemoryRead>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e1bc      	b.n	8005230 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d113      	bne.n	8004ee6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	623b      	str	r3, [r7, #32]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	623b      	str	r3, [r7, #32]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	623b      	str	r3, [r7, #32]
 8004ed2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	e190      	b.n	8005208 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d11b      	bne.n	8004f26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e170      	b.n	8005208 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d11b      	bne.n	8004f66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	e150      	b.n	8005208 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f7c:	e144      	b.n	8005208 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	f200 80f1 	bhi.w	800516a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d123      	bne.n	8004fd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fc87 	bl	80058a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e145      	b.n	8005230 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fd6:	e117      	b.n	8005208 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d14e      	bne.n	800507e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	4906      	ldr	r1, [pc, #24]	; (8005004 <HAL_I2C_Mem_Read+0x22c>)
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fab2 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d008      	beq.n	8005008 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e11a      	b.n	8005230 <HAL_I2C_Mem_Read+0x458>
 8004ffa:	bf00      	nop
 8004ffc:	00100002 	.word	0x00100002
 8005000:	ffff0000 	.word	0xffff0000
 8005004:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800507c:	e0c4      	b.n	8005208 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	2200      	movs	r2, #0
 8005086:	496c      	ldr	r1, [pc, #432]	; (8005238 <HAL_I2C_Mem_Read+0x460>)
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fa63 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0cb      	b.n	8005230 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	2200      	movs	r2, #0
 80050e2:	4955      	ldr	r1, [pc, #340]	; (8005238 <HAL_I2C_Mem_Read+0x460>)
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fa35 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e09d      	b.n	8005230 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005168:	e04e      	b.n	8005208 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fb9a 	bl	80058a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e058      	b.n	8005230 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d124      	bne.n	8005208 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d107      	bne.n	80051d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520c:	2b00      	cmp	r3, #0
 800520e:	f47f aeb6 	bne.w	8004f7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e000      	b.n	8005230 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800522e:	2302      	movs	r3, #2
  }
}
 8005230:	4618      	mov	r0, r3
 8005232:	3728      	adds	r7, #40	; 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	00010004 	.word	0x00010004

0800523c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524a:	b2db      	uxtb	r3, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	4608      	mov	r0, r1
 8005262:	4611      	mov	r1, r2
 8005264:	461a      	mov	r2, r3
 8005266:	4603      	mov	r3, r0
 8005268:	817b      	strh	r3, [r7, #10]
 800526a:	460b      	mov	r3, r1
 800526c:	813b      	strh	r3, [r7, #8]
 800526e:	4613      	mov	r3, r2
 8005270:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005280:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	2200      	movs	r2, #0
 800528a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f960 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00d      	beq.n	80052b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a8:	d103      	bne.n	80052b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e05f      	b.n	8005376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052b6:	897b      	ldrh	r3, [r7, #10]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	6a3a      	ldr	r2, [r7, #32]
 80052ca:	492d      	ldr	r1, [pc, #180]	; (8005380 <I2C_RequestMemoryWrite+0x128>)
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f9bb 	bl	8005648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e04c      	b.n	8005376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f4:	6a39      	ldr	r1, [r7, #32]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 fa46 	bl	8005788 <I2C_WaitOnTXEFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00d      	beq.n	800531e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	2b04      	cmp	r3, #4
 8005308:	d107      	bne.n	800531a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005318:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e02b      	b.n	8005376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d105      	bne.n	8005330 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005324:	893b      	ldrh	r3, [r7, #8]
 8005326:	b2da      	uxtb	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	611a      	str	r2, [r3, #16]
 800532e:	e021      	b.n	8005374 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005330:	893b      	ldrh	r3, [r7, #8]
 8005332:	0a1b      	lsrs	r3, r3, #8
 8005334:	b29b      	uxth	r3, r3
 8005336:	b2da      	uxtb	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800533e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005340:	6a39      	ldr	r1, [r7, #32]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fa20 	bl	8005788 <I2C_WaitOnTXEFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00d      	beq.n	800536a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	2b04      	cmp	r3, #4
 8005354:	d107      	bne.n	8005366 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005364:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e005      	b.n	8005376 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800536a:	893b      	ldrh	r3, [r7, #8]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	00010002 	.word	0x00010002

08005384 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	4608      	mov	r0, r1
 800538e:	4611      	mov	r1, r2
 8005390:	461a      	mov	r2, r3
 8005392:	4603      	mov	r3, r0
 8005394:	817b      	strh	r3, [r7, #10]
 8005396:	460b      	mov	r3, r1
 8005398:	813b      	strh	r3, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f8c2 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00d      	beq.n	80053f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e4:	d103      	bne.n	80053ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e0aa      	b.n	8005548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053f2:	897b      	ldrh	r3, [r7, #10]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005400:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	6a3a      	ldr	r2, [r7, #32]
 8005406:	4952      	ldr	r1, [pc, #328]	; (8005550 <I2C_RequestMemoryRead+0x1cc>)
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f91d 	bl	8005648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e097      	b.n	8005548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800542e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005430:	6a39      	ldr	r1, [r7, #32]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f9a8 	bl	8005788 <I2C_WaitOnTXEFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	2b04      	cmp	r3, #4
 8005444:	d107      	bne.n	8005456 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005454:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e076      	b.n	8005548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d105      	bne.n	800546c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005460:	893b      	ldrh	r3, [r7, #8]
 8005462:	b2da      	uxtb	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	611a      	str	r2, [r3, #16]
 800546a:	e021      	b.n	80054b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800546c:	893b      	ldrh	r3, [r7, #8]
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	b29b      	uxth	r3, r3
 8005472:	b2da      	uxtb	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547c:	6a39      	ldr	r1, [r7, #32]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f982 	bl	8005788 <I2C_WaitOnTXEFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00d      	beq.n	80054a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	2b04      	cmp	r3, #4
 8005490:	d107      	bne.n	80054a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e050      	b.n	8005548 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054a6:	893b      	ldrh	r3, [r7, #8]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b2:	6a39      	ldr	r1, [r7, #32]
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f967 	bl	8005788 <I2C_WaitOnTXEFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00d      	beq.n	80054dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d107      	bne.n	80054d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e035      	b.n	8005548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f82b 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00d      	beq.n	8005520 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005512:	d103      	bne.n	800551c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800551a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e013      	b.n	8005548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005520:	897b      	ldrh	r3, [r7, #10]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f043 0301 	orr.w	r3, r3, #1
 8005528:	b2da      	uxtb	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	6a3a      	ldr	r2, [r7, #32]
 8005534:	4906      	ldr	r1, [pc, #24]	; (8005550 <I2C_RequestMemoryRead+0x1cc>)
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f886 	bl	8005648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	00010002 	.word	0x00010002

08005554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005564:	e048      	b.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d044      	beq.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556e:	f7fc f8e7 	bl	8001740 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d302      	bcc.n	8005584 <I2C_WaitOnFlagUntilTimeout+0x30>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d139      	bne.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	0c1b      	lsrs	r3, r3, #16
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	d10d      	bne.n	80055aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	43da      	mvns	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4013      	ands	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	e00c      	b.n	80055c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	43da      	mvns	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4013      	ands	r3, r2
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d116      	bne.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	f043 0220 	orr.w	r2, r3, #32
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e023      	b.n	8005640 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	0c1b      	lsrs	r3, r3, #16
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10d      	bne.n	800561e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	43da      	mvns	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4013      	ands	r3, r2
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	bf0c      	ite	eq
 8005614:	2301      	moveq	r3, #1
 8005616:	2300      	movne	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	e00c      	b.n	8005638 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	43da      	mvns	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4013      	ands	r3, r2
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	429a      	cmp	r2, r3
 800563c:	d093      	beq.n	8005566 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005656:	e071      	b.n	800573c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005666:	d123      	bne.n	80056b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005676:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005680:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	f043 0204 	orr.w	r2, r3, #4
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e067      	b.n	8005780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d041      	beq.n	800573c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b8:	f7fc f842 	bl	8001740 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d302      	bcc.n	80056ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d136      	bne.n	800573c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	0c1b      	lsrs	r3, r3, #16
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10c      	bne.n	80056f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	43da      	mvns	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bf14      	ite	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	2300      	moveq	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	e00b      	b.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	43da      	mvns	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4013      	ands	r3, r2
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d016      	beq.n	800573c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	f043 0220 	orr.w	r2, r3, #32
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e021      	b.n	8005780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	0c1b      	lsrs	r3, r3, #16
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10c      	bne.n	8005760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	43da      	mvns	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4013      	ands	r3, r2
 8005752:	b29b      	uxth	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf14      	ite	ne
 8005758:	2301      	movne	r3, #1
 800575a:	2300      	moveq	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e00b      	b.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	43da      	mvns	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4013      	ands	r3, r2
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf14      	ite	ne
 8005772:	2301      	movne	r3, #1
 8005774:	2300      	moveq	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	f47f af6d 	bne.w	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005794:	e034      	b.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f8e3 	bl	8005962 <I2C_IsAcknowledgeFailed>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e034      	b.n	8005810 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d028      	beq.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ae:	f7fb ffc7 	bl	8001740 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d302      	bcc.n	80057c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d11d      	bne.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	2b80      	cmp	r3, #128	; 0x80
 80057d0:	d016      	beq.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e007      	b.n	8005810 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580a:	2b80      	cmp	r3, #128	; 0x80
 800580c:	d1c3      	bne.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005824:	e034      	b.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f89b 	bl	8005962 <I2C_IsAcknowledgeFailed>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e034      	b.n	80058a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d028      	beq.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583e:	f7fb ff7f 	bl	8001740 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11d      	bne.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b04      	cmp	r3, #4
 8005860:	d016      	beq.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	f043 0220 	orr.w	r2, r3, #32
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e007      	b.n	80058a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b04      	cmp	r3, #4
 800589c:	d1c3      	bne.n	8005826 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058b4:	e049      	b.n	800594a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d119      	bne.n	80058f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0210 	mvn.w	r2, #16
 80058cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e030      	b.n	800595a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f8:	f7fb ff22 	bl	8001740 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d11d      	bne.n	800594a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d016      	beq.n	800594a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	f043 0220 	orr.w	r2, r3, #32
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e007      	b.n	800595a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005954:	2b40      	cmp	r3, #64	; 0x40
 8005956:	d1ae      	bne.n	80058b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005978:	d11b      	bne.n	80059b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005982:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f043 0204 	orr.w	r2, r3, #4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d129      	bne.n	8005a2a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2224      	movs	r2, #36	; 0x24
 80059da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0210 	bic.w	r2, r2, #16
 80059fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e000      	b.n	8005a2c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005a2a:	2302      	movs	r3, #2
  }
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d12a      	bne.n	8005aa8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2224      	movs	r2, #36	; 0x24
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005a72:	89fb      	ldrh	r3, [r7, #14]
 8005a74:	f023 030f 	bic.w	r3, r3, #15
 8005a78:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	89fb      	ldrh	r3, [r7, #14]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	89fa      	ldrh	r2, [r7, #14]
 8005a8a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e000      	b.n	8005aaa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
  }
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e0bf      	b.n	8005c4a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fb fa30 	bl	8000f44 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005afa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6999      	ldr	r1, [r3, #24]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b10:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6899      	ldr	r1, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b4a      	ldr	r3, [pc, #296]	; (8005c54 <HAL_LTDC_Init+0x19c>)
 8005b2c:	400b      	ands	r3, r1
 8005b2e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	041b      	lsls	r3, r3, #16
 8005b36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6899      	ldr	r1, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68d9      	ldr	r1, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b3e      	ldr	r3, [pc, #248]	; (8005c54 <HAL_LTDC_Init+0x19c>)
 8005b5a:	400b      	ands	r3, r1
 8005b5c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68d9      	ldr	r1, [r3, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1a      	ldr	r2, [r3, #32]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6919      	ldr	r1, [r3, #16]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b33      	ldr	r3, [pc, #204]	; (8005c54 <HAL_LTDC_Init+0x19c>)
 8005b88:	400b      	ands	r3, r1
 8005b8a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6919      	ldr	r1, [r3, #16]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6959      	ldr	r1, [r3, #20]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4b27      	ldr	r3, [pc, #156]	; (8005c54 <HAL_LTDC_Init+0x19c>)
 8005bb6:	400b      	ands	r3, r1
 8005bb8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6959      	ldr	r1, [r3, #20]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005be8:	041b      	lsls	r3, r3, #16
 8005bea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0206 	orr.w	r2, r2, #6
 8005c26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	f000f800 	.word	0xf000f800

08005c58 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d023      	beq.n	8005cc2 <HAL_LTDC_IRQHandler+0x6a>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01e      	beq.n	8005cc2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0204 	bic.w	r2, r2, #4
 8005c92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ca2:	f043 0201 	orr.w	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2204      	movs	r2, #4
 8005cb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f86f 	bl	8005da0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d023      	beq.n	8005d14 <HAL_LTDC_IRQHandler+0xbc>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01e      	beq.n	8005d14 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0202 	bic.w	r2, r2, #2
 8005ce4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2202      	movs	r2, #2
 8005cec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cf4:	f043 0202 	orr.w	r2, r3, #2
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2204      	movs	r2, #4
 8005d02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f846 	bl	8005da0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01b      	beq.n	8005d56 <HAL_LTDC_IRQHandler+0xfe>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d016      	beq.n	8005d56 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f82f 	bl	8005db4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01b      	beq.n	8005d98 <HAL_LTDC_IRQHandler+0x140>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d016      	beq.n	8005d98 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0208 	bic.w	r2, r2, #8
 8005d78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2208      	movs	r2, #8
 8005d80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f818 	bl	8005dc8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ddc:	b5b0      	push	{r4, r5, r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_LTDC_ConfigLayer+0x1a>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e02c      	b.n	8005e50 <HAL_LTDC_ConfigLayer+0x74>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2202      	movs	r2, #2
 8005e02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2134      	movs	r1, #52	; 0x34
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	4413      	add	r3, r2
 8005e12:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4614      	mov	r4, r2
 8005e1a:	461d      	mov	r5, r3
 8005e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f83b 	bl	8005eac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bdb0      	pop	{r4, r5, r7, pc}

08005e58 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <HAL_LTDC_EnableDither+0x16>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e016      	b.n	8005e9c <HAL_LTDC_EnableDither+0x44>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <HAL_LTDC_EnableDither+0x50>)
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	4a09      	ldr	r2, [pc, #36]	; (8005ea8 <HAL_LTDC_EnableDither+0x50>)
 8005e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e88:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	40016800 	.word	0x40016800

08005eac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b089      	sub	sp, #36	; 0x24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec8:	4413      	add	r3, r2
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	01db      	lsls	r3, r3, #7
 8005ed8:	4413      	add	r3, r2
 8005eda:	3384      	adds	r3, #132	; 0x84
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	01d2      	lsls	r2, r2, #7
 8005ee8:	440a      	add	r2, r1
 8005eea:	3284      	adds	r2, #132	; 0x84
 8005eec:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ef0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f02:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f04:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	01db      	lsls	r3, r3, #7
 8005f10:	440b      	add	r3, r1
 8005f12:	3384      	adds	r3, #132	; 0x84
 8005f14:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f1a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f2a:	4413      	add	r3, r2
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	01db      	lsls	r3, r3, #7
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3384      	adds	r3, #132	; 0x84
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	4611      	mov	r1, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	01d2      	lsls	r2, r2, #7
 8005f4a:	440a      	add	r2, r1
 8005f4c:	3284      	adds	r2, #132	; 0x84
 8005f4e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f52:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f62:	4413      	add	r3, r2
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	01db      	lsls	r3, r3, #7
 8005f70:	440b      	add	r3, r1
 8005f72:	3384      	adds	r3, #132	; 0x84
 8005f74:	4619      	mov	r1, r3
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	01db      	lsls	r3, r3, #7
 8005f86:	4413      	add	r3, r2
 8005f88:	3384      	adds	r3, #132	; 0x84
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	4611      	mov	r1, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	01d2      	lsls	r2, r2, #7
 8005f96:	440a      	add	r2, r1
 8005f98:	3284      	adds	r2, #132	; 0x84
 8005f9a:	f023 0307 	bic.w	r3, r3, #7
 8005f9e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	01db      	lsls	r3, r3, #7
 8005faa:	4413      	add	r3, r2
 8005fac:	3384      	adds	r3, #132	; 0x84
 8005fae:	461a      	mov	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	061b      	lsls	r3, r3, #24
 8005fd0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	01db      	lsls	r3, r3, #7
 8005fdc:	4413      	add	r3, r2
 8005fde:	3384      	adds	r3, #132	; 0x84
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	01db      	lsls	r3, r3, #7
 8005fec:	4413      	add	r3, r2
 8005fee:	3384      	adds	r3, #132	; 0x84
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	431a      	orrs	r2, r3
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	431a      	orrs	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4619      	mov	r1, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	01db      	lsls	r3, r3, #7
 8006010:	440b      	add	r3, r1
 8006012:	3384      	adds	r3, #132	; 0x84
 8006014:	4619      	mov	r1, r3
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	01db      	lsls	r3, r3, #7
 8006026:	4413      	add	r3, r2
 8006028:	3384      	adds	r3, #132	; 0x84
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	6812      	ldr	r2, [r2, #0]
 8006030:	4611      	mov	r1, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	01d2      	lsls	r2, r2, #7
 8006036:	440a      	add	r2, r1
 8006038:	3284      	adds	r2, #132	; 0x84
 800603a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800603e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	01db      	lsls	r3, r3, #7
 800604a:	4413      	add	r3, r2
 800604c:	3384      	adds	r3, #132	; 0x84
 800604e:	461a      	mov	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	01db      	lsls	r3, r3, #7
 8006060:	4413      	add	r3, r2
 8006062:	3384      	adds	r3, #132	; 0x84
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	4611      	mov	r1, r2
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	01d2      	lsls	r2, r2, #7
 8006070:	440a      	add	r2, r1
 8006072:	3284      	adds	r2, #132	; 0x84
 8006074:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006078:	f023 0307 	bic.w	r3, r3, #7
 800607c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	69da      	ldr	r2, [r3, #28]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	68f9      	ldr	r1, [r7, #12]
 8006088:	6809      	ldr	r1, [r1, #0]
 800608a:	4608      	mov	r0, r1
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	01c9      	lsls	r1, r1, #7
 8006090:	4401      	add	r1, r0
 8006092:	3184      	adds	r1, #132	; 0x84
 8006094:	4313      	orrs	r3, r2
 8006096:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	01db      	lsls	r3, r3, #7
 80060a2:	4413      	add	r3, r2
 80060a4:	3384      	adds	r3, #132	; 0x84
 80060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	01db      	lsls	r3, r3, #7
 80060b2:	4413      	add	r3, r2
 80060b4:	3384      	adds	r3, #132	; 0x84
 80060b6:	461a      	mov	r2, r3
 80060b8:	2300      	movs	r3, #0
 80060ba:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	01db      	lsls	r3, r3, #7
 80060c6:	4413      	add	r3, r2
 80060c8:	3384      	adds	r3, #132	; 0x84
 80060ca:	461a      	mov	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d102      	bne.n	80060e0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80060da:	2304      	movs	r3, #4
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	e01b      	b.n	8006118 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d102      	bne.n	80060ee <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80060e8:	2303      	movs	r3, #3
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	e014      	b.n	8006118 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d00b      	beq.n	800610e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d007      	beq.n	800610e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006102:	2b03      	cmp	r3, #3
 8006104:	d003      	beq.n	800610e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800610a:	2b07      	cmp	r3, #7
 800610c:	d102      	bne.n	8006114 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800610e:	2302      	movs	r3, #2
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	e001      	b.n	8006118 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006114:	2301      	movs	r3, #1
 8006116:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	01db      	lsls	r3, r3, #7
 8006122:	4413      	add	r3, r2
 8006124:	3384      	adds	r3, #132	; 0x84
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	4611      	mov	r1, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	01d2      	lsls	r2, r2, #7
 8006132:	440a      	add	r2, r1
 8006134:	3284      	adds	r2, #132	; 0x84
 8006136:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800613a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	fb02 f303 	mul.w	r3, r2, r3
 8006146:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6859      	ldr	r1, [r3, #4]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	1acb      	subs	r3, r1, r3
 8006152:	69f9      	ldr	r1, [r7, #28]
 8006154:	fb01 f303 	mul.w	r3, r1, r3
 8006158:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800615a:	68f9      	ldr	r1, [r7, #12]
 800615c:	6809      	ldr	r1, [r1, #0]
 800615e:	4608      	mov	r0, r1
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	01c9      	lsls	r1, r1, #7
 8006164:	4401      	add	r1, r0
 8006166:	3184      	adds	r1, #132	; 0x84
 8006168:	4313      	orrs	r3, r2
 800616a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	01db      	lsls	r3, r3, #7
 8006176:	4413      	add	r3, r2
 8006178:	3384      	adds	r3, #132	; 0x84
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	4611      	mov	r1, r2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	01d2      	lsls	r2, r2, #7
 8006186:	440a      	add	r2, r1
 8006188:	3284      	adds	r2, #132	; 0x84
 800618a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800618e:	f023 0307 	bic.w	r3, r3, #7
 8006192:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	01db      	lsls	r3, r3, #7
 800619e:	4413      	add	r3, r2
 80061a0:	3384      	adds	r3, #132	; 0x84
 80061a2:	461a      	mov	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	01db      	lsls	r3, r3, #7
 80061b4:	4413      	add	r3, r2
 80061b6:	3384      	adds	r3, #132	; 0x84
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	4611      	mov	r1, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	01d2      	lsls	r2, r2, #7
 80061c4:	440a      	add	r2, r1
 80061c6:	3284      	adds	r2, #132	; 0x84
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	6013      	str	r3, [r2, #0]
}
 80061ce:	bf00      	nop
 80061d0:	3724      	adds	r7, #36	; 0x24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e267      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d075      	beq.n	80062e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061fa:	4b88      	ldr	r3, [pc, #544]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b04      	cmp	r3, #4
 8006204:	d00c      	beq.n	8006220 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006206:	4b85      	ldr	r3, [pc, #532]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800620e:	2b08      	cmp	r3, #8
 8006210:	d112      	bne.n	8006238 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006212:	4b82      	ldr	r3, [pc, #520]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800621e:	d10b      	bne.n	8006238 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006220:	4b7e      	ldr	r3, [pc, #504]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d05b      	beq.n	80062e4 <HAL_RCC_OscConfig+0x108>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d157      	bne.n	80062e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e242      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006240:	d106      	bne.n	8006250 <HAL_RCC_OscConfig+0x74>
 8006242:	4b76      	ldr	r3, [pc, #472]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a75      	ldr	r2, [pc, #468]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	e01d      	b.n	800628c <HAL_RCC_OscConfig+0xb0>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006258:	d10c      	bne.n	8006274 <HAL_RCC_OscConfig+0x98>
 800625a:	4b70      	ldr	r3, [pc, #448]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a6f      	ldr	r2, [pc, #444]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	4b6d      	ldr	r3, [pc, #436]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a6c      	ldr	r2, [pc, #432]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800626c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e00b      	b.n	800628c <HAL_RCC_OscConfig+0xb0>
 8006274:	4b69      	ldr	r3, [pc, #420]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a68      	ldr	r2, [pc, #416]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800627a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	4b66      	ldr	r3, [pc, #408]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a65      	ldr	r2, [pc, #404]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800628a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d013      	beq.n	80062bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006294:	f7fb fa54 	bl	8001740 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800629c:	f7fb fa50 	bl	8001740 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b64      	cmp	r3, #100	; 0x64
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e207      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ae:	4b5b      	ldr	r3, [pc, #364]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCC_OscConfig+0xc0>
 80062ba:	e014      	b.n	80062e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062bc:	f7fb fa40 	bl	8001740 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c4:	f7fb fa3c 	bl	8001740 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b64      	cmp	r3, #100	; 0x64
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e1f3      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d6:	4b51      	ldr	r3, [pc, #324]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0xe8>
 80062e2:	e000      	b.n	80062e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d063      	beq.n	80063ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062f2:	4b4a      	ldr	r3, [pc, #296]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 030c 	and.w	r3, r3, #12
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062fe:	4b47      	ldr	r3, [pc, #284]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006306:	2b08      	cmp	r3, #8
 8006308:	d11c      	bne.n	8006344 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800630a:	4b44      	ldr	r3, [pc, #272]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d116      	bne.n	8006344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006316:	4b41      	ldr	r3, [pc, #260]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_RCC_OscConfig+0x152>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d001      	beq.n	800632e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e1c7      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632e:	4b3b      	ldr	r3, [pc, #236]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4937      	ldr	r1, [pc, #220]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800633e:	4313      	orrs	r3, r2
 8006340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006342:	e03a      	b.n	80063ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d020      	beq.n	800638e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800634c:	4b34      	ldr	r3, [pc, #208]	; (8006420 <HAL_RCC_OscConfig+0x244>)
 800634e:	2201      	movs	r2, #1
 8006350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006352:	f7fb f9f5 	bl	8001740 <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800635a:	f7fb f9f1 	bl	8001740 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e1a8      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636c:	4b2b      	ldr	r3, [pc, #172]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f0      	beq.n	800635a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006378:	4b28      	ldr	r3, [pc, #160]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	4925      	ldr	r1, [pc, #148]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006388:	4313      	orrs	r3, r2
 800638a:	600b      	str	r3, [r1, #0]
 800638c:	e015      	b.n	80063ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800638e:	4b24      	ldr	r3, [pc, #144]	; (8006420 <HAL_RCC_OscConfig+0x244>)
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7fb f9d4 	bl	8001740 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800639c:	f7fb f9d0 	bl	8001740 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e187      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f0      	bne.n	800639c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d036      	beq.n	8006434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <HAL_RCC_OscConfig+0x248>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d4:	f7fb f9b4 	bl	8001740 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063dc:	f7fb f9b0 	bl	8001740 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e167      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80063f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0x200>
 80063fa:	e01b      	b.n	8006434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063fc:	4b09      	ldr	r3, [pc, #36]	; (8006424 <HAL_RCC_OscConfig+0x248>)
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006402:	f7fb f99d 	bl	8001740 <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006408:	e00e      	b.n	8006428 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800640a:	f7fb f999 	bl	8001740 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d907      	bls.n	8006428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e150      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
 800641c:	40023800 	.word	0x40023800
 8006420:	42470000 	.word	0x42470000
 8006424:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006428:	4b88      	ldr	r3, [pc, #544]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800642a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1ea      	bne.n	800640a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8097 	beq.w	8006570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006442:	2300      	movs	r3, #0
 8006444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006446:	4b81      	ldr	r3, [pc, #516]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10f      	bne.n	8006472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	4b7d      	ldr	r3, [pc, #500]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	4a7c      	ldr	r2, [pc, #496]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800645c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006460:	6413      	str	r3, [r2, #64]	; 0x40
 8006462:	4b7a      	ldr	r3, [pc, #488]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646a:	60bb      	str	r3, [r7, #8]
 800646c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800646e:	2301      	movs	r3, #1
 8006470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006472:	4b77      	ldr	r3, [pc, #476]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d118      	bne.n	80064b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800647e:	4b74      	ldr	r3, [pc, #464]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a73      	ldr	r2, [pc, #460]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 8006484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800648a:	f7fb f959 	bl	8001740 <HAL_GetTick>
 800648e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006492:	f7fb f955 	bl	8001740 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e10c      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a4:	4b6a      	ldr	r3, [pc, #424]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f0      	beq.n	8006492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d106      	bne.n	80064c6 <HAL_RCC_OscConfig+0x2ea>
 80064b8:	4b64      	ldr	r3, [pc, #400]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	4a63      	ldr	r2, [pc, #396]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	6713      	str	r3, [r2, #112]	; 0x70
 80064c4:	e01c      	b.n	8006500 <HAL_RCC_OscConfig+0x324>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d10c      	bne.n	80064e8 <HAL_RCC_OscConfig+0x30c>
 80064ce:	4b5f      	ldr	r3, [pc, #380]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	4a5e      	ldr	r2, [pc, #376]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064d4:	f043 0304 	orr.w	r3, r3, #4
 80064d8:	6713      	str	r3, [r2, #112]	; 0x70
 80064da:	4b5c      	ldr	r3, [pc, #368]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	4a5b      	ldr	r2, [pc, #364]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	6713      	str	r3, [r2, #112]	; 0x70
 80064e6:	e00b      	b.n	8006500 <HAL_RCC_OscConfig+0x324>
 80064e8:	4b58      	ldr	r3, [pc, #352]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ec:	4a57      	ldr	r2, [pc, #348]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064ee:	f023 0301 	bic.w	r3, r3, #1
 80064f2:	6713      	str	r3, [r2, #112]	; 0x70
 80064f4:	4b55      	ldr	r3, [pc, #340]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f8:	4a54      	ldr	r2, [pc, #336]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064fa:	f023 0304 	bic.w	r3, r3, #4
 80064fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d015      	beq.n	8006534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006508:	f7fb f91a 	bl	8001740 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650e:	e00a      	b.n	8006526 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006510:	f7fb f916 	bl	8001740 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f241 3288 	movw	r2, #5000	; 0x1388
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e0cb      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006526:	4b49      	ldr	r3, [pc, #292]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0ee      	beq.n	8006510 <HAL_RCC_OscConfig+0x334>
 8006532:	e014      	b.n	800655e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006534:	f7fb f904 	bl	8001740 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800653a:	e00a      	b.n	8006552 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653c:	f7fb f900 	bl	8001740 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f241 3288 	movw	r2, #5000	; 0x1388
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e0b5      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006552:	4b3e      	ldr	r3, [pc, #248]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1ee      	bne.n	800653c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d105      	bne.n	8006570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006564:	4b39      	ldr	r3, [pc, #228]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	4a38      	ldr	r2, [pc, #224]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800656a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800656e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80a1 	beq.w	80066bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800657a:	4b34      	ldr	r3, [pc, #208]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 030c 	and.w	r3, r3, #12
 8006582:	2b08      	cmp	r3, #8
 8006584:	d05c      	beq.n	8006640 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d141      	bne.n	8006612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658e:	4b31      	ldr	r3, [pc, #196]	; (8006654 <HAL_RCC_OscConfig+0x478>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006594:	f7fb f8d4 	bl	8001740 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800659c:	f7fb f8d0 	bl	8001740 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e087      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ae:	4b27      	ldr	r3, [pc, #156]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69da      	ldr	r2, [r3, #28]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	019b      	lsls	r3, r3, #6
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	3b01      	subs	r3, #1
 80065d4:	041b      	lsls	r3, r3, #16
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	061b      	lsls	r3, r3, #24
 80065de:	491b      	ldr	r1, [pc, #108]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <HAL_RCC_OscConfig+0x478>)
 80065e6:	2201      	movs	r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ea:	f7fb f8a9 	bl	8001740 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f2:	f7fb f8a5 	bl	8001740 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e05c      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006604:	4b11      	ldr	r3, [pc, #68]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x416>
 8006610:	e054      	b.n	80066bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006612:	4b10      	ldr	r3, [pc, #64]	; (8006654 <HAL_RCC_OscConfig+0x478>)
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006618:	f7fb f892 	bl	8001740 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006620:	f7fb f88e 	bl	8001740 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e045      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006632:	4b06      	ldr	r3, [pc, #24]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1f0      	bne.n	8006620 <HAL_RCC_OscConfig+0x444>
 800663e:	e03d      	b.n	80066bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d107      	bne.n	8006658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e038      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
 800664c:	40023800 	.word	0x40023800
 8006650:	40007000 	.word	0x40007000
 8006654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006658:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <HAL_RCC_OscConfig+0x4ec>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d028      	beq.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006670:	429a      	cmp	r2, r3
 8006672:	d121      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667e:	429a      	cmp	r2, r3
 8006680:	d11a      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006688:	4013      	ands	r3, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800668e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006690:	4293      	cmp	r3, r2
 8006692:	d111      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	3b01      	subs	r3, #1
 80066a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d107      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d001      	beq.n	80066bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40023800 	.word	0x40023800

080066cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0cc      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066e0:	4b68      	ldr	r3, [pc, #416]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d90c      	bls.n	8006708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ee:	4b65      	ldr	r3, [pc, #404]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f6:	4b63      	ldr	r3, [pc, #396]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d001      	beq.n	8006708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0b8      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d020      	beq.n	8006756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006720:	4b59      	ldr	r3, [pc, #356]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4a58      	ldr	r2, [pc, #352]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800672a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006738:	4b53      	ldr	r3, [pc, #332]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4a52      	ldr	r2, [pc, #328]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006744:	4b50      	ldr	r3, [pc, #320]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	494d      	ldr	r1, [pc, #308]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	4313      	orrs	r3, r2
 8006754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d044      	beq.n	80067ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d107      	bne.n	800677a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800676a:	4b47      	ldr	r3, [pc, #284]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d119      	bne.n	80067aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e07f      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d003      	beq.n	800678a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006786:	2b03      	cmp	r3, #3
 8006788:	d107      	bne.n	800679a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800678a:	4b3f      	ldr	r3, [pc, #252]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e06f      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800679a:	4b3b      	ldr	r3, [pc, #236]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e067      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067aa:	4b37      	ldr	r3, [pc, #220]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f023 0203 	bic.w	r2, r3, #3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	4934      	ldr	r1, [pc, #208]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067bc:	f7fa ffc0 	bl	8001740 <HAL_GetTick>
 80067c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c2:	e00a      	b.n	80067da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c4:	f7fa ffbc 	bl	8001740 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e04f      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067da:	4b2b      	ldr	r3, [pc, #172]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 020c 	and.w	r2, r3, #12
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d1eb      	bne.n	80067c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067ec:	4b25      	ldr	r3, [pc, #148]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d20c      	bcs.n	8006814 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fa:	4b22      	ldr	r3, [pc, #136]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006802:	4b20      	ldr	r3, [pc, #128]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e032      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006820:	4b19      	ldr	r3, [pc, #100]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4916      	ldr	r1, [pc, #88]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	4313      	orrs	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800683e:	4b12      	ldr	r3, [pc, #72]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	490e      	ldr	r1, [pc, #56]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006852:	f000 f821 	bl	8006898 <HAL_RCC_GetSysClockFreq>
 8006856:	4602      	mov	r2, r0
 8006858:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	490a      	ldr	r1, [pc, #40]	; (800688c <HAL_RCC_ClockConfig+0x1c0>)
 8006864:	5ccb      	ldrb	r3, [r1, r3]
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	4a09      	ldr	r2, [pc, #36]	; (8006890 <HAL_RCC_ClockConfig+0x1c4>)
 800686c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <HAL_RCC_ClockConfig+0x1c8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f7fa fe02 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40023c00 	.word	0x40023c00
 8006888:	40023800 	.word	0x40023800
 800688c:	08011c00 	.word	0x08011c00
 8006890:	20000000 	.word	0x20000000
 8006894:	20000004 	.word	0x20000004

08006898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800689c:	b094      	sub	sp, #80	; 0x50
 800689e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068b0:	4b79      	ldr	r3, [pc, #484]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 030c 	and.w	r3, r3, #12
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d00d      	beq.n	80068d8 <HAL_RCC_GetSysClockFreq+0x40>
 80068bc:	2b08      	cmp	r3, #8
 80068be:	f200 80e1 	bhi.w	8006a84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_RCC_GetSysClockFreq+0x34>
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d003      	beq.n	80068d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ca:	e0db      	b.n	8006a84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068cc:	4b73      	ldr	r3, [pc, #460]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x204>)
 80068ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068d0:	e0db      	b.n	8006a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068d2:	4b73      	ldr	r3, [pc, #460]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x208>)
 80068d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068d6:	e0d8      	b.n	8006a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068d8:	4b6f      	ldr	r3, [pc, #444]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068e0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068e2:	4b6d      	ldr	r3, [pc, #436]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d063      	beq.n	80069b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ee:	4b6a      	ldr	r3, [pc, #424]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	099b      	lsrs	r3, r3, #6
 80068f4:	2200      	movs	r2, #0
 80068f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80068f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006900:	633b      	str	r3, [r7, #48]	; 0x30
 8006902:	2300      	movs	r3, #0
 8006904:	637b      	str	r3, [r7, #52]	; 0x34
 8006906:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800690a:	4622      	mov	r2, r4
 800690c:	462b      	mov	r3, r5
 800690e:	f04f 0000 	mov.w	r0, #0
 8006912:	f04f 0100 	mov.w	r1, #0
 8006916:	0159      	lsls	r1, r3, #5
 8006918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800691c:	0150      	lsls	r0, r2, #5
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4621      	mov	r1, r4
 8006924:	1a51      	subs	r1, r2, r1
 8006926:	6139      	str	r1, [r7, #16]
 8006928:	4629      	mov	r1, r5
 800692a:	eb63 0301 	sbc.w	r3, r3, r1
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	f04f 0200 	mov.w	r2, #0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800693c:	4659      	mov	r1, fp
 800693e:	018b      	lsls	r3, r1, #6
 8006940:	4651      	mov	r1, sl
 8006942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006946:	4651      	mov	r1, sl
 8006948:	018a      	lsls	r2, r1, #6
 800694a:	4651      	mov	r1, sl
 800694c:	ebb2 0801 	subs.w	r8, r2, r1
 8006950:	4659      	mov	r1, fp
 8006952:	eb63 0901 	sbc.w	r9, r3, r1
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800696a:	4690      	mov	r8, r2
 800696c:	4699      	mov	r9, r3
 800696e:	4623      	mov	r3, r4
 8006970:	eb18 0303 	adds.w	r3, r8, r3
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	462b      	mov	r3, r5
 8006978:	eb49 0303 	adc.w	r3, r9, r3
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800698a:	4629      	mov	r1, r5
 800698c:	024b      	lsls	r3, r1, #9
 800698e:	4621      	mov	r1, r4
 8006990:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006994:	4621      	mov	r1, r4
 8006996:	024a      	lsls	r2, r1, #9
 8006998:	4610      	mov	r0, r2
 800699a:	4619      	mov	r1, r3
 800699c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800699e:	2200      	movs	r2, #0
 80069a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069a8:	f7f9 fc22 	bl	80001f0 <__aeabi_uldivmod>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4613      	mov	r3, r2
 80069b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069b4:	e058      	b.n	8006a68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069b6:	4b38      	ldr	r3, [pc, #224]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	099b      	lsrs	r3, r3, #6
 80069bc:	2200      	movs	r2, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	4611      	mov	r1, r2
 80069c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069c6:	623b      	str	r3, [r7, #32]
 80069c8:	2300      	movs	r3, #0
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
 80069cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	f04f 0000 	mov.w	r0, #0
 80069d8:	f04f 0100 	mov.w	r1, #0
 80069dc:	0159      	lsls	r1, r3, #5
 80069de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069e2:	0150      	lsls	r0, r2, #5
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4641      	mov	r1, r8
 80069ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80069ee:	4649      	mov	r1, r9
 80069f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a08:	ebb2 040a 	subs.w	r4, r2, sl
 8006a0c:	eb63 050b 	sbc.w	r5, r3, fp
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	00eb      	lsls	r3, r5, #3
 8006a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a1e:	00e2      	lsls	r2, r4, #3
 8006a20:	4614      	mov	r4, r2
 8006a22:	461d      	mov	r5, r3
 8006a24:	4643      	mov	r3, r8
 8006a26:	18e3      	adds	r3, r4, r3
 8006a28:	603b      	str	r3, [r7, #0]
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	eb45 0303 	adc.w	r3, r5, r3
 8006a30:	607b      	str	r3, [r7, #4]
 8006a32:	f04f 0200 	mov.w	r2, #0
 8006a36:	f04f 0300 	mov.w	r3, #0
 8006a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a3e:	4629      	mov	r1, r5
 8006a40:	028b      	lsls	r3, r1, #10
 8006a42:	4621      	mov	r1, r4
 8006a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a48:	4621      	mov	r1, r4
 8006a4a:	028a      	lsls	r2, r1, #10
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a52:	2200      	movs	r2, #0
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	61fa      	str	r2, [r7, #28]
 8006a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a5c:	f7f9 fbc8 	bl	80001f0 <__aeabi_uldivmod>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
 8006a64:	4613      	mov	r3, r2
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a68:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	0c1b      	lsrs	r3, r3, #16
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	3301      	adds	r3, #1
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a82:	e002      	b.n	8006a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x204>)
 8006a86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3750      	adds	r7, #80	; 0x50
 8006a90:	46bd      	mov	sp, r7
 8006a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a96:	bf00      	nop
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	00f42400 	.word	0x00f42400
 8006aa0:	007a1200 	.word	0x007a1200

08006aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aa8:	4b03      	ldr	r3, [pc, #12]	; (8006ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	20000000 	.word	0x20000000

08006abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ac0:	f7ff fff0 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	4b05      	ldr	r3, [pc, #20]	; (8006adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	0a9b      	lsrs	r3, r3, #10
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	4903      	ldr	r1, [pc, #12]	; (8006ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ad2:	5ccb      	ldrb	r3, [r1, r3]
 8006ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	08011c10 	.word	0x08011c10

08006ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ae8:	f7ff ffdc 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8006aec:	4602      	mov	r2, r0
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	0b5b      	lsrs	r3, r3, #13
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	4903      	ldr	r1, [pc, #12]	; (8006b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006afa:	5ccb      	ldrb	r3, [r1, r3]
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40023800 	.word	0x40023800
 8006b08:	08011c10 	.word	0x08011c10

08006b0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	220f      	movs	r2, #15
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b1c:	4b12      	ldr	r3, [pc, #72]	; (8006b68 <HAL_RCC_GetClockConfig+0x5c>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 0203 	and.w	r2, r3, #3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b28:	4b0f      	ldr	r3, [pc, #60]	; (8006b68 <HAL_RCC_GetClockConfig+0x5c>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b34:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <HAL_RCC_GetClockConfig+0x5c>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006b40:	4b09      	ldr	r3, [pc, #36]	; (8006b68 <HAL_RCC_GetClockConfig+0x5c>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	08db      	lsrs	r3, r3, #3
 8006b46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b4e:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <HAL_RCC_GetClockConfig+0x60>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 020f 	and.w	r2, r3, #15
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	601a      	str	r2, [r3, #0]
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	40023c00 	.word	0x40023c00

08006b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10b      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d105      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d075      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ba4:	4b91      	ldr	r3, [pc, #580]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006baa:	f7fa fdc9 	bl	8001740 <HAL_GetTick>
 8006bae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006bb2:	f7fa fdc5 	bl	8001740 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e189      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bc4:	4b8a      	ldr	r3, [pc, #552]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1f0      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d009      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	019a      	lsls	r2, r3, #6
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	071b      	lsls	r3, r3, #28
 8006be8:	4981      	ldr	r1, [pc, #516]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01f      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bfc:	4b7c      	ldr	r3, [pc, #496]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c02:	0f1b      	lsrs	r3, r3, #28
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	019a      	lsls	r2, r3, #6
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	061b      	lsls	r3, r3, #24
 8006c16:	431a      	orrs	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	071b      	lsls	r3, r3, #28
 8006c1c:	4974      	ldr	r1, [pc, #464]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c24:	4b72      	ldr	r3, [pc, #456]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c2a:	f023 021f 	bic.w	r2, r3, #31
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	496e      	ldr	r1, [pc, #440]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00d      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	019a      	lsls	r2, r3, #6
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	061b      	lsls	r3, r3, #24
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	071b      	lsls	r3, r3, #28
 8006c5c:	4964      	ldr	r1, [pc, #400]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c64:	4b61      	ldr	r3, [pc, #388]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c6a:	f7fa fd69 	bl	8001740 <HAL_GetTick>
 8006c6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c70:	e008      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c72:	f7fa fd65 	bl	8001740 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e129      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c84:	4b5a      	ldr	r3, [pc, #360]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0f0      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d105      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d079      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ca8:	4b52      	ldr	r3, [pc, #328]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cae:	f7fa fd47 	bl	8001740 <HAL_GetTick>
 8006cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cb6:	f7fa fd43 	bl	8001740 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e107      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cc8:	4b49      	ldr	r3, [pc, #292]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd4:	d0ef      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d020      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ce2:	4b43      	ldr	r3, [pc, #268]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce8:	0f1b      	lsrs	r3, r3, #28
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	019a      	lsls	r2, r3, #6
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	061b      	lsls	r3, r3, #24
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	071b      	lsls	r3, r3, #28
 8006d02:	493b      	ldr	r1, [pc, #236]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d0a:	4b39      	ldr	r3, [pc, #228]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	4934      	ldr	r1, [pc, #208]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01e      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d30:	4b2f      	ldr	r3, [pc, #188]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d36:	0e1b      	lsrs	r3, r3, #24
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	019a      	lsls	r2, r3, #6
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	061b      	lsls	r3, r3, #24
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	071b      	lsls	r3, r3, #28
 8006d50:	4927      	ldr	r1, [pc, #156]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d58:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	4922      	ldr	r1, [pc, #136]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d6e:	4b21      	ldr	r3, [pc, #132]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d74:	f7fa fce4 	bl	8001740 <HAL_GetTick>
 8006d78:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d7c:	f7fa fce0 	bl	8001740 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e0a4      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d8e:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d9a:	d1ef      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 808b 	beq.w	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	4a0f      	ldr	r2, [pc, #60]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db8:	6413      	str	r3, [r2, #64]	; 0x40
 8006dba:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a0b      	ldr	r2, [pc, #44]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dd2:	f7fa fcb5 	bl	8001740 <HAL_GetTick>
 8006dd6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006dd8:	e010      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dda:	f7fa fcb1 	bl	8001740 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d909      	bls.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e075      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006dec:	42470068 	.word	0x42470068
 8006df0:	40023800 	.word	0x40023800
 8006df4:	42470070 	.word	0x42470070
 8006df8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006dfc:	4b38      	ldr	r3, [pc, #224]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0e8      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e08:	4b36      	ldr	r3, [pc, #216]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e10:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d02f      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d028      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e26:	4b2f      	ldr	r3, [pc, #188]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e30:	4b2d      	ldr	r3, [pc, #180]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e36:	4b2c      	ldr	r3, [pc, #176]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e3c:	4a29      	ldr	r2, [pc, #164]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e42:	4b28      	ldr	r3, [pc, #160]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d114      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e4e:	f7fa fc77 	bl	8001740 <HAL_GetTick>
 8006e52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e54:	e00a      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e56:	f7fa fc73 	bl	8001740 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e035      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0ee      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e84:	d10d      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006e86:	4b17      	ldr	r3, [pc, #92]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9a:	4912      	ldr	r1, [pc, #72]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	608b      	str	r3, [r1, #8]
 8006ea0:	e005      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006ea2:	4b10      	ldr	r3, [pc, #64]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	4a0f      	ldr	r2, [pc, #60]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ea8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006eac:	6093      	str	r3, [r2, #8]
 8006eae:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eba:	490a      	ldr	r1, [pc, #40]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006ed2:	4b06      	ldr	r3, [pc, #24]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006ed4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40007000 	.word	0x40007000
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	42470e40 	.word	0x42470e40
 8006eec:	424711e0 	.word	0x424711e0

08006ef0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e025      	b.n	8006f50 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fa faa5 	bl	8001468 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4610      	mov	r0, r2
 8006f32:	f001 fdaf 	bl	8008a94 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6818      	ldr	r0, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	f001 fe04 	bl	8008b4e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f6a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d101      	bne.n	8006f76 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006f72:	2302      	movs	r3, #2
 8006f74:	e021      	b.n	8006fba <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d002      	beq.n	8006f82 <HAL_SDRAM_SendCommand+0x2a>
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	2b05      	cmp	r3, #5
 8006f80:	d118      	bne.n	8006fb4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2202      	movs	r2, #2
 8006f86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 fe44 	bl	8008c20 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d104      	bne.n	8006faa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2205      	movs	r2, #5
 8006fa4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006fa8:	e006      	b.n	8006fb8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006fb2:	e001      	b.n	8006fb8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d101      	bne.n	8006fdc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e016      	b.n	800700a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d10f      	bne.n	8007008 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f001 fe4f 	bl	8008c9a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	e000      	b.n	800700a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e07b      	b.n	800711c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	2b00      	cmp	r3, #0
 800702a:	d108      	bne.n	800703e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007034:	d009      	beq.n	800704a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	61da      	str	r2, [r3, #28]
 800703c:	e005      	b.n	800704a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d106      	bne.n	800706a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7fa f89d 	bl	80011a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2202      	movs	r2, #2
 800706e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007080:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ce:	ea42 0103 	orr.w	r1, r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	f003 0104 	and.w	r1, r3, #4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	f003 0210 	and.w	r2, r3, #16
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69da      	ldr	r2, [r3, #28]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800710a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e01a      	b.n	800716c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2202      	movs	r2, #2
 800713a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800714c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fa f870 	bl	8001234 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007184:	f7fa fadc 	bl	8001740 <HAL_GetTick>
 8007188:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800718a:	88fb      	ldrh	r3, [r7, #6]
 800718c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b01      	cmp	r3, #1
 8007198:	d001      	beq.n	800719e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800719a:	2302      	movs	r3, #2
 800719c:	e12a      	b.n	80073f4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_SPI_Transmit+0x36>
 80071a4:	88fb      	ldrh	r3, [r7, #6]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e122      	b.n	80073f4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_SPI_Transmit+0x48>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e11b      	b.n	80073f4 <HAL_SPI_Transmit+0x280>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2203      	movs	r2, #3
 80071c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	88fa      	ldrh	r2, [r7, #6]
 80071dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	88fa      	ldrh	r2, [r7, #6]
 80071e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800720a:	d10f      	bne.n	800722c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800722a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d007      	beq.n	800724a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007248:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007252:	d152      	bne.n	80072fa <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_SPI_Transmit+0xee>
 800725c:	8b7b      	ldrh	r3, [r7, #26]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d145      	bne.n	80072ee <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	881a      	ldrh	r2, [r3, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	1c9a      	adds	r2, r3, #2
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29a      	uxth	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007286:	e032      	b.n	80072ee <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b02      	cmp	r3, #2
 8007294:	d112      	bne.n	80072bc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	881a      	ldrh	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	1c9a      	adds	r2, r3, #2
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80072ba:	e018      	b.n	80072ee <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072bc:	f7fa fa40 	bl	8001740 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d803      	bhi.n	80072d4 <HAL_SPI_Transmit+0x160>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d102      	bne.n	80072da <HAL_SPI_Transmit+0x166>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d109      	bne.n	80072ee <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e082      	b.n	80073f4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1c7      	bne.n	8007288 <HAL_SPI_Transmit+0x114>
 80072f8:	e053      	b.n	80073a2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <HAL_SPI_Transmit+0x194>
 8007302:	8b7b      	ldrh	r3, [r7, #26]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d147      	bne.n	8007398 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	7812      	ldrb	r2, [r2, #0]
 8007314:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800732e:	e033      	b.n	8007398 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b02      	cmp	r3, #2
 800733c:	d113      	bne.n	8007366 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	330c      	adds	r3, #12
 8007348:	7812      	ldrb	r2, [r2, #0]
 800734a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	86da      	strh	r2, [r3, #54]	; 0x36
 8007364:	e018      	b.n	8007398 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007366:	f7fa f9eb 	bl	8001740 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d803      	bhi.n	800737e <HAL_SPI_Transmit+0x20a>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d102      	bne.n	8007384 <HAL_SPI_Transmit+0x210>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e02d      	b.n	80073f4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1c6      	bne.n	8007330 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fbe6 	bl	8007b78 <SPI_EndRxTxTransaction>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2220      	movs	r2, #32
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073c0:	2300      	movs	r3, #0
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80073f2:	2300      	movs	r3, #0
  }
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3720      	adds	r7, #32
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b088      	sub	sp, #32
 8007400:	af02      	add	r7, sp, #8
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	4613      	mov	r3, r2
 800740a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	d001      	beq.n	800741c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007418:	2302      	movs	r3, #2
 800741a:	e104      	b.n	8007626 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007424:	d112      	bne.n	800744c <HAL_SPI_Receive+0x50>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10e      	bne.n	800744c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2204      	movs	r2, #4
 8007432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	4613      	mov	r3, r2
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 f8f3 	bl	800762e <HAL_SPI_TransmitReceive>
 8007448:	4603      	mov	r3, r0
 800744a:	e0ec      	b.n	8007626 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800744c:	f7fa f978 	bl	8001740 <HAL_GetTick>
 8007450:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <HAL_SPI_Receive+0x62>
 8007458:	88fb      	ldrh	r3, [r7, #6]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e0e1      	b.n	8007626 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_SPI_Receive+0x74>
 800746c:	2302      	movs	r3, #2
 800746e:	e0da      	b.n	8007626 <HAL_SPI_Receive+0x22a>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2204      	movs	r2, #4
 800747c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	88fa      	ldrh	r2, [r7, #6]
 8007490:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	88fa      	ldrh	r2, [r7, #6]
 8007496:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074be:	d10f      	bne.n	80074e0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074de:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ea:	2b40      	cmp	r3, #64	; 0x40
 80074ec:	d007      	beq.n	80074fe <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d170      	bne.n	80075e8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007506:	e035      	b.n	8007574 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b01      	cmp	r3, #1
 8007514:	d115      	bne.n	8007542 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f103 020c 	add.w	r2, r3, #12
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	7812      	ldrb	r2, [r2, #0]
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007536:	b29b      	uxth	r3, r3
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007540:	e018      	b.n	8007574 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007542:	f7fa f8fd 	bl	8001740 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	429a      	cmp	r2, r3
 8007550:	d803      	bhi.n	800755a <HAL_SPI_Receive+0x15e>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007558:	d102      	bne.n	8007560 <HAL_SPI_Receive+0x164>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d109      	bne.n	8007574 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e058      	b.n	8007626 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1c4      	bne.n	8007508 <HAL_SPI_Receive+0x10c>
 800757e:	e038      	b.n	80075f2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b01      	cmp	r3, #1
 800758c:	d113      	bne.n	80075b6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	b292      	uxth	r2, r2
 800759a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	1c9a      	adds	r2, r3, #2
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075b4:	e018      	b.n	80075e8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075b6:	f7fa f8c3 	bl	8001740 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d803      	bhi.n	80075ce <HAL_SPI_Receive+0x1d2>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d102      	bne.n	80075d4 <HAL_SPI_Receive+0x1d8>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d109      	bne.n	80075e8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e01e      	b.n	8007626 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1c6      	bne.n	8007580 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 fa58 	bl	8007aac <SPI_EndRxTransaction>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2220      	movs	r2, #32
 8007606:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007624:	2300      	movs	r3, #0
  }
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b08a      	sub	sp, #40	; 0x28
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
 800763a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800763c:	2301      	movs	r3, #1
 800763e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007640:	f7fa f87e 	bl	8001740 <HAL_GetTick>
 8007644:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800764c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007654:	887b      	ldrh	r3, [r7, #2]
 8007656:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007658:	7ffb      	ldrb	r3, [r7, #31]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d00c      	beq.n	8007678 <HAL_SPI_TransmitReceive+0x4a>
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007664:	d106      	bne.n	8007674 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <HAL_SPI_TransmitReceive+0x46>
 800766e:	7ffb      	ldrb	r3, [r7, #31]
 8007670:	2b04      	cmp	r3, #4
 8007672:	d001      	beq.n	8007678 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007674:	2302      	movs	r3, #2
 8007676:	e17f      	b.n	8007978 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <HAL_SPI_TransmitReceive+0x5c>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_SPI_TransmitReceive+0x5c>
 8007684:	887b      	ldrh	r3, [r7, #2]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e174      	b.n	8007978 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_SPI_TransmitReceive+0x6e>
 8007698:	2302      	movs	r3, #2
 800769a:	e16d      	b.n	8007978 <HAL_SPI_TransmitReceive+0x34a>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d003      	beq.n	80076b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2205      	movs	r2, #5
 80076b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	887a      	ldrh	r2, [r7, #2]
 80076c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	887a      	ldrh	r2, [r7, #2]
 80076ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	887a      	ldrh	r2, [r7, #2]
 80076da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	887a      	ldrh	r2, [r7, #2]
 80076e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f8:	2b40      	cmp	r3, #64	; 0x40
 80076fa:	d007      	beq.n	800770c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800770a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007714:	d17e      	bne.n	8007814 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <HAL_SPI_TransmitReceive+0xf6>
 800771e:	8afb      	ldrh	r3, [r7, #22]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d16c      	bne.n	80077fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007728:	881a      	ldrh	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	1c9a      	adds	r2, r3, #2
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007748:	e059      	b.n	80077fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b02      	cmp	r3, #2
 8007756:	d11b      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x162>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d016      	beq.n	8007790 <HAL_SPI_TransmitReceive+0x162>
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	2b01      	cmp	r3, #1
 8007766:	d113      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	881a      	ldrh	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	1c9a      	adds	r2, r3, #2
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b01      	cmp	r3, #1
 800779c:	d119      	bne.n	80077d2 <HAL_SPI_TransmitReceive+0x1a4>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d014      	beq.n	80077d2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b2:	b292      	uxth	r2, r2
 80077b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	1c9a      	adds	r2, r3, #2
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077ce:	2301      	movs	r3, #1
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077d2:	f7f9 ffb5 	bl	8001740 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077de:	429a      	cmp	r2, r3
 80077e0:	d80d      	bhi.n	80077fe <HAL_SPI_TransmitReceive+0x1d0>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e8:	d009      	beq.n	80077fe <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e0bc      	b.n	8007978 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007802:	b29b      	uxth	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1a0      	bne.n	800774a <HAL_SPI_TransmitReceive+0x11c>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d19b      	bne.n	800774a <HAL_SPI_TransmitReceive+0x11c>
 8007812:	e082      	b.n	800791a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <HAL_SPI_TransmitReceive+0x1f4>
 800781c:	8afb      	ldrh	r3, [r7, #22]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d171      	bne.n	8007906 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	330c      	adds	r3, #12
 800782c:	7812      	ldrb	r2, [r2, #0]
 800782e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800783e:	b29b      	uxth	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007848:	e05d      	b.n	8007906 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b02      	cmp	r3, #2
 8007856:	d11c      	bne.n	8007892 <HAL_SPI_TransmitReceive+0x264>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d017      	beq.n	8007892 <HAL_SPI_TransmitReceive+0x264>
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	2b01      	cmp	r3, #1
 8007866:	d114      	bne.n	8007892 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	330c      	adds	r3, #12
 8007872:	7812      	ldrb	r2, [r2, #0]
 8007874:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b01      	cmp	r3, #1
 800789e:	d119      	bne.n	80078d4 <HAL_SPI_TransmitReceive+0x2a6>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d014      	beq.n	80078d4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078d0:	2301      	movs	r3, #1
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078d4:	f7f9 ff34 	bl	8001740 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d803      	bhi.n	80078ec <HAL_SPI_TransmitReceive+0x2be>
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ea:	d102      	bne.n	80078f2 <HAL_SPI_TransmitReceive+0x2c4>
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e038      	b.n	8007978 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800790a:	b29b      	uxth	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d19c      	bne.n	800784a <HAL_SPI_TransmitReceive+0x21c>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d197      	bne.n	800784a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800791a:	6a3a      	ldr	r2, [r7, #32]
 800791c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 f92a 	bl	8007b78 <SPI_EndRxTxTransaction>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d008      	beq.n	800793c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2220      	movs	r2, #32
 800792e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e01d      	b.n	8007978 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007944:	2300      	movs	r3, #0
 8007946:	613b      	str	r3, [r7, #16]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	613b      	str	r3, [r7, #16]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	613b      	str	r3, [r7, #16]
 8007958:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007976:	2300      	movs	r3, #0
  }
}
 8007978:	4618      	mov	r0, r3
 800797a:	3728      	adds	r7, #40	; 0x28
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800798e:	b2db      	uxtb	r3, r3
}
 8007990:	4618      	mov	r0, r3
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	4613      	mov	r3, r2
 80079aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079ac:	f7f9 fec8 	bl	8001740 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	4413      	add	r3, r2
 80079ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079bc:	f7f9 fec0 	bl	8001740 <HAL_GetTick>
 80079c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079c2:	4b39      	ldr	r3, [pc, #228]	; (8007aa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	015b      	lsls	r3, r3, #5
 80079c8:	0d1b      	lsrs	r3, r3, #20
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	fb02 f303 	mul.w	r3, r2, r3
 80079d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079d2:	e054      	b.n	8007a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	d050      	beq.n	8007a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079dc:	f7f9 feb0 	bl	8001740 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d902      	bls.n	80079f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d13d      	bne.n	8007a6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a0a:	d111      	bne.n	8007a30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a14:	d004      	beq.n	8007a20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1e:	d107      	bne.n	8007a30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a38:	d10f      	bne.n	8007a5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e017      	b.n	8007a9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	4013      	ands	r3, r2
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	bf0c      	ite	eq
 8007a8e:	2301      	moveq	r3, #1
 8007a90:	2300      	movne	r3, #0
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d19b      	bne.n	80079d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3720      	adds	r7, #32
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000000 	.word	0x20000000

08007aac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ac0:	d111      	bne.n	8007ae6 <SPI_EndRxTransaction+0x3a>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aca:	d004      	beq.n	8007ad6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad4:	d107      	bne.n	8007ae6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aee:	d12a      	bne.n	8007b46 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af8:	d012      	beq.n	8007b20 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2200      	movs	r2, #0
 8007b02:	2180      	movs	r1, #128	; 0x80
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff ff49 	bl	800799c <SPI_WaitFlagStateUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d02d      	beq.n	8007b6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b14:	f043 0220 	orr.w	r2, r3, #32
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e026      	b.n	8007b6e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2200      	movs	r2, #0
 8007b28:	2101      	movs	r1, #1
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff ff36 	bl	800799c <SPI_WaitFlagStateUntilTimeout>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01a      	beq.n	8007b6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3a:	f043 0220 	orr.w	r2, r3, #32
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e013      	b.n	8007b6e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2101      	movs	r1, #1
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f7ff ff23 	bl	800799c <SPI_WaitFlagStateUntilTimeout>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d007      	beq.n	8007b6c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b60:	f043 0220 	orr.w	r2, r3, #32
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e000      	b.n	8007b6e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af02      	add	r7, sp, #8
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	2102      	movs	r1, #2
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7ff ff04 	bl	800799c <SPI_WaitFlagStateUntilTimeout>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9e:	f043 0220 	orr.w	r2, r3, #32
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e032      	b.n	8007c10 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007baa:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <SPI_EndRxTxTransaction+0xa0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a1b      	ldr	r2, [pc, #108]	; (8007c1c <SPI_EndRxTxTransaction+0xa4>)
 8007bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb4:	0d5b      	lsrs	r3, r3, #21
 8007bb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bba:	fb02 f303 	mul.w	r3, r2, r3
 8007bbe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bc8:	d112      	bne.n	8007bf0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2180      	movs	r1, #128	; 0x80
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f7ff fee1 	bl	800799c <SPI_WaitFlagStateUntilTimeout>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d016      	beq.n	8007c0e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be4:	f043 0220 	orr.w	r2, r3, #32
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e00f      	b.n	8007c10 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c06:	2b80      	cmp	r3, #128	; 0x80
 8007c08:	d0f2      	beq.n	8007bf0 <SPI_EndRxTxTransaction+0x78>
 8007c0a:	e000      	b.n	8007c0e <SPI_EndRxTxTransaction+0x96>
        break;
 8007c0c:	bf00      	nop
  }

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000000 	.word	0x20000000
 8007c1c:	165e9f81 	.word	0x165e9f81

08007c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e041      	b.n	8007cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7f9 fb12 	bl	8001270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f000 fa7e 	bl	8008160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d001      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e04e      	b.n	8007d76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 0201 	orr.w	r2, r2, #1
 8007cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a23      	ldr	r2, [pc, #140]	; (8007d84 <HAL_TIM_Base_Start_IT+0xc4>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d022      	beq.n	8007d40 <HAL_TIM_Base_Start_IT+0x80>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d02:	d01d      	beq.n	8007d40 <HAL_TIM_Base_Start_IT+0x80>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a1f      	ldr	r2, [pc, #124]	; (8007d88 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d018      	beq.n	8007d40 <HAL_TIM_Base_Start_IT+0x80>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a1e      	ldr	r2, [pc, #120]	; (8007d8c <HAL_TIM_Base_Start_IT+0xcc>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d013      	beq.n	8007d40 <HAL_TIM_Base_Start_IT+0x80>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a1c      	ldr	r2, [pc, #112]	; (8007d90 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d00e      	beq.n	8007d40 <HAL_TIM_Base_Start_IT+0x80>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a1b      	ldr	r2, [pc, #108]	; (8007d94 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d009      	beq.n	8007d40 <HAL_TIM_Base_Start_IT+0x80>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a19      	ldr	r2, [pc, #100]	; (8007d98 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d004      	beq.n	8007d40 <HAL_TIM_Base_Start_IT+0x80>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a18      	ldr	r2, [pc, #96]	; (8007d9c <HAL_TIM_Base_Start_IT+0xdc>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d111      	bne.n	8007d64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b06      	cmp	r3, #6
 8007d50:	d010      	beq.n	8007d74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f042 0201 	orr.w	r2, r2, #1
 8007d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d62:	e007      	b.n	8007d74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0201 	orr.w	r2, r2, #1
 8007d72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	40010000 	.word	0x40010000
 8007d88:	40000400 	.word	0x40000400
 8007d8c:	40000800 	.word	0x40000800
 8007d90:	40000c00 	.word	0x40000c00
 8007d94:	40010400 	.word	0x40010400
 8007d98:	40014000 	.word	0x40014000
 8007d9c:	40001800 	.word	0x40001800

08007da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d020      	beq.n	8007e04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01b      	beq.n	8007e04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f06f 0202 	mvn.w	r2, #2
 8007dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f999 	bl	8008122 <HAL_TIM_IC_CaptureCallback>
 8007df0:	e005      	b.n	8007dfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f98b 	bl	800810e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f99c 	bl	8008136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f003 0304 	and.w	r3, r3, #4
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d020      	beq.n	8007e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01b      	beq.n	8007e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0204 	mvn.w	r2, #4
 8007e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2202      	movs	r2, #2
 8007e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f973 	bl	8008122 <HAL_TIM_IC_CaptureCallback>
 8007e3c:	e005      	b.n	8007e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f965 	bl	800810e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f976 	bl	8008136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 0308 	and.w	r3, r3, #8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d020      	beq.n	8007e9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f003 0308 	and.w	r3, r3, #8
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01b      	beq.n	8007e9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f06f 0208 	mvn.w	r2, #8
 8007e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2204      	movs	r2, #4
 8007e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f94d 	bl	8008122 <HAL_TIM_IC_CaptureCallback>
 8007e88:	e005      	b.n	8007e96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f93f 	bl	800810e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f950 	bl	8008136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	f003 0310 	and.w	r3, r3, #16
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d020      	beq.n	8007ee8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f003 0310 	and.w	r3, r3, #16
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01b      	beq.n	8007ee8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f06f 0210 	mvn.w	r2, #16
 8007eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2208      	movs	r2, #8
 8007ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f927 	bl	8008122 <HAL_TIM_IC_CaptureCallback>
 8007ed4:	e005      	b.n	8007ee2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f919 	bl	800810e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f92a 	bl	8008136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00c      	beq.n	8007f0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d007      	beq.n	8007f0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f06f 0201 	mvn.w	r2, #1
 8007f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7f8 fefe 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00c      	beq.n	8007f30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d007      	beq.n	8007f30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fae4 	bl	80084f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00c      	beq.n	8007f54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d007      	beq.n	8007f54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f8fb 	bl	800814a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00c      	beq.n	8007f78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f003 0320 	and.w	r3, r3, #32
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d007      	beq.n	8007f78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0220 	mvn.w	r2, #32
 8007f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fab6 	bl	80084e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f78:	bf00      	nop
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <HAL_TIM_ConfigClockSource+0x1c>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e0b4      	b.n	8008106 <HAL_TIM_ConfigClockSource+0x186>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd4:	d03e      	beq.n	8008054 <HAL_TIM_ConfigClockSource+0xd4>
 8007fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fda:	f200 8087 	bhi.w	80080ec <HAL_TIM_ConfigClockSource+0x16c>
 8007fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe2:	f000 8086 	beq.w	80080f2 <HAL_TIM_ConfigClockSource+0x172>
 8007fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fea:	d87f      	bhi.n	80080ec <HAL_TIM_ConfigClockSource+0x16c>
 8007fec:	2b70      	cmp	r3, #112	; 0x70
 8007fee:	d01a      	beq.n	8008026 <HAL_TIM_ConfigClockSource+0xa6>
 8007ff0:	2b70      	cmp	r3, #112	; 0x70
 8007ff2:	d87b      	bhi.n	80080ec <HAL_TIM_ConfigClockSource+0x16c>
 8007ff4:	2b60      	cmp	r3, #96	; 0x60
 8007ff6:	d050      	beq.n	800809a <HAL_TIM_ConfigClockSource+0x11a>
 8007ff8:	2b60      	cmp	r3, #96	; 0x60
 8007ffa:	d877      	bhi.n	80080ec <HAL_TIM_ConfigClockSource+0x16c>
 8007ffc:	2b50      	cmp	r3, #80	; 0x50
 8007ffe:	d03c      	beq.n	800807a <HAL_TIM_ConfigClockSource+0xfa>
 8008000:	2b50      	cmp	r3, #80	; 0x50
 8008002:	d873      	bhi.n	80080ec <HAL_TIM_ConfigClockSource+0x16c>
 8008004:	2b40      	cmp	r3, #64	; 0x40
 8008006:	d058      	beq.n	80080ba <HAL_TIM_ConfigClockSource+0x13a>
 8008008:	2b40      	cmp	r3, #64	; 0x40
 800800a:	d86f      	bhi.n	80080ec <HAL_TIM_ConfigClockSource+0x16c>
 800800c:	2b30      	cmp	r3, #48	; 0x30
 800800e:	d064      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x15a>
 8008010:	2b30      	cmp	r3, #48	; 0x30
 8008012:	d86b      	bhi.n	80080ec <HAL_TIM_ConfigClockSource+0x16c>
 8008014:	2b20      	cmp	r3, #32
 8008016:	d060      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x15a>
 8008018:	2b20      	cmp	r3, #32
 800801a:	d867      	bhi.n	80080ec <HAL_TIM_ConfigClockSource+0x16c>
 800801c:	2b00      	cmp	r3, #0
 800801e:	d05c      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x15a>
 8008020:	2b10      	cmp	r3, #16
 8008022:	d05a      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x15a>
 8008024:	e062      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008036:	f000 f9b9 	bl	80083ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	609a      	str	r2, [r3, #8]
      break;
 8008052:	e04f      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008064:	f000 f9a2 	bl	80083ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689a      	ldr	r2, [r3, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008076:	609a      	str	r2, [r3, #8]
      break;
 8008078:	e03c      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008086:	461a      	mov	r2, r3
 8008088:	f000 f916 	bl	80082b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2150      	movs	r1, #80	; 0x50
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f96f 	bl	8008376 <TIM_ITRx_SetConfig>
      break;
 8008098:	e02c      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080a6:	461a      	mov	r2, r3
 80080a8:	f000 f935 	bl	8008316 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2160      	movs	r1, #96	; 0x60
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 f95f 	bl	8008376 <TIM_ITRx_SetConfig>
      break;
 80080b8:	e01c      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080c6:	461a      	mov	r2, r3
 80080c8:	f000 f8f6 	bl	80082b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2140      	movs	r1, #64	; 0x40
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 f94f 	bl	8008376 <TIM_ITRx_SetConfig>
      break;
 80080d8:	e00c      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f000 f946 	bl	8008376 <TIM_ITRx_SetConfig>
      break;
 80080ea:	e003      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	73fb      	strb	r3, [r7, #15]
      break;
 80080f0:	e000      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008104:	7bfb      	ldrb	r3, [r7, #15]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
	...

08008160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a46      	ldr	r2, [pc, #280]	; (800828c <TIM_Base_SetConfig+0x12c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d013      	beq.n	80081a0 <TIM_Base_SetConfig+0x40>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817e:	d00f      	beq.n	80081a0 <TIM_Base_SetConfig+0x40>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a43      	ldr	r2, [pc, #268]	; (8008290 <TIM_Base_SetConfig+0x130>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00b      	beq.n	80081a0 <TIM_Base_SetConfig+0x40>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a42      	ldr	r2, [pc, #264]	; (8008294 <TIM_Base_SetConfig+0x134>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d007      	beq.n	80081a0 <TIM_Base_SetConfig+0x40>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a41      	ldr	r2, [pc, #260]	; (8008298 <TIM_Base_SetConfig+0x138>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_Base_SetConfig+0x40>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a40      	ldr	r2, [pc, #256]	; (800829c <TIM_Base_SetConfig+0x13c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d108      	bne.n	80081b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a35      	ldr	r2, [pc, #212]	; (800828c <TIM_Base_SetConfig+0x12c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d02b      	beq.n	8008212 <TIM_Base_SetConfig+0xb2>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c0:	d027      	beq.n	8008212 <TIM_Base_SetConfig+0xb2>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a32      	ldr	r2, [pc, #200]	; (8008290 <TIM_Base_SetConfig+0x130>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d023      	beq.n	8008212 <TIM_Base_SetConfig+0xb2>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a31      	ldr	r2, [pc, #196]	; (8008294 <TIM_Base_SetConfig+0x134>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d01f      	beq.n	8008212 <TIM_Base_SetConfig+0xb2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a30      	ldr	r2, [pc, #192]	; (8008298 <TIM_Base_SetConfig+0x138>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d01b      	beq.n	8008212 <TIM_Base_SetConfig+0xb2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a2f      	ldr	r2, [pc, #188]	; (800829c <TIM_Base_SetConfig+0x13c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d017      	beq.n	8008212 <TIM_Base_SetConfig+0xb2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a2e      	ldr	r2, [pc, #184]	; (80082a0 <TIM_Base_SetConfig+0x140>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d013      	beq.n	8008212 <TIM_Base_SetConfig+0xb2>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a2d      	ldr	r2, [pc, #180]	; (80082a4 <TIM_Base_SetConfig+0x144>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00f      	beq.n	8008212 <TIM_Base_SetConfig+0xb2>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a2c      	ldr	r2, [pc, #176]	; (80082a8 <TIM_Base_SetConfig+0x148>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d00b      	beq.n	8008212 <TIM_Base_SetConfig+0xb2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a2b      	ldr	r2, [pc, #172]	; (80082ac <TIM_Base_SetConfig+0x14c>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d007      	beq.n	8008212 <TIM_Base_SetConfig+0xb2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a2a      	ldr	r2, [pc, #168]	; (80082b0 <TIM_Base_SetConfig+0x150>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d003      	beq.n	8008212 <TIM_Base_SetConfig+0xb2>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a29      	ldr	r2, [pc, #164]	; (80082b4 <TIM_Base_SetConfig+0x154>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d108      	bne.n	8008224 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	4313      	orrs	r3, r2
 8008230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a10      	ldr	r2, [pc, #64]	; (800828c <TIM_Base_SetConfig+0x12c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d003      	beq.n	8008258 <TIM_Base_SetConfig+0xf8>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a12      	ldr	r2, [pc, #72]	; (800829c <TIM_Base_SetConfig+0x13c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d103      	bne.n	8008260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	691a      	ldr	r2, [r3, #16]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b01      	cmp	r3, #1
 8008270:	d105      	bne.n	800827e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f023 0201 	bic.w	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	611a      	str	r2, [r3, #16]
  }
}
 800827e:	bf00      	nop
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40010000 	.word	0x40010000
 8008290:	40000400 	.word	0x40000400
 8008294:	40000800 	.word	0x40000800
 8008298:	40000c00 	.word	0x40000c00
 800829c:	40010400 	.word	0x40010400
 80082a0:	40014000 	.word	0x40014000
 80082a4:	40014400 	.word	0x40014400
 80082a8:	40014800 	.word	0x40014800
 80082ac:	40001800 	.word	0x40001800
 80082b0:	40001c00 	.word	0x40001c00
 80082b4:	40002000 	.word	0x40002000

080082b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	f023 0201 	bic.w	r2, r3, #1
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	011b      	lsls	r3, r3, #4
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f023 030a 	bic.w	r3, r3, #10
 80082f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	621a      	str	r2, [r3, #32]
}
 800830a:	bf00      	nop
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008316:	b480      	push	{r7}
 8008318:	b087      	sub	sp, #28
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6a1b      	ldr	r3, [r3, #32]
 800832c:	f023 0210 	bic.w	r2, r3, #16
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	031b      	lsls	r3, r3, #12
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008352:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	011b      	lsls	r3, r3, #4
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	4313      	orrs	r3, r2
 800835c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	621a      	str	r2, [r3, #32]
}
 800836a:	bf00      	nop
 800836c:	371c      	adds	r7, #28
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008376:	b480      	push	{r7}
 8008378:	b085      	sub	sp, #20
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	f043 0307 	orr.w	r3, r3, #7
 8008398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	609a      	str	r2, [r3, #8]
}
 80083a0:	bf00      	nop
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	021a      	lsls	r2, r3, #8
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	431a      	orrs	r2, r3
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	609a      	str	r2, [r3, #8]
}
 80083e0:	bf00      	nop
 80083e2:	371c      	adds	r7, #28
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008400:	2302      	movs	r3, #2
 8008402:	e05a      	b.n	80084ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2202      	movs	r2, #2
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800842a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a21      	ldr	r2, [pc, #132]	; (80084c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d022      	beq.n	800848e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008450:	d01d      	beq.n	800848e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1d      	ldr	r2, [pc, #116]	; (80084cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d018      	beq.n	800848e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a1b      	ldr	r2, [pc, #108]	; (80084d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d013      	beq.n	800848e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a1a      	ldr	r2, [pc, #104]	; (80084d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00e      	beq.n	800848e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a18      	ldr	r2, [pc, #96]	; (80084d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d009      	beq.n	800848e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a17      	ldr	r2, [pc, #92]	; (80084dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d004      	beq.n	800848e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a15      	ldr	r2, [pc, #84]	; (80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d10c      	bne.n	80084a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4313      	orrs	r3, r2
 800849e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	40010000 	.word	0x40010000
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40000800 	.word	0x40000800
 80084d4:	40000c00 	.word	0x40000c00
 80084d8:	40010400 	.word	0x40010400
 80084dc:	40014000 	.word	0x40014000
 80084e0:	40001800 	.word	0x40001800

080084e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e042      	b.n	80085a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d106      	bne.n	8008538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7f8 febe 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2224      	movs	r2, #36	; 0x24
 800853c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800854e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f82b 	bl	80085ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	695a      	ldr	r2, [r3, #20]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68da      	ldr	r2, [r3, #12]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2220      	movs	r2, #32
 8008590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085b0:	b0c0      	sub	sp, #256	; 0x100
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80085c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c8:	68d9      	ldr	r1, [r3, #12]
 80085ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	ea40 0301 	orr.w	r3, r0, r1
 80085d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	431a      	orrs	r2, r3
 80085ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80085f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008604:	f021 010c 	bic.w	r1, r1, #12
 8008608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008612:	430b      	orrs	r3, r1
 8008614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008626:	6999      	ldr	r1, [r3, #24]
 8008628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	ea40 0301 	orr.w	r3, r0, r1
 8008632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	4b8f      	ldr	r3, [pc, #572]	; (8008878 <UART_SetConfig+0x2cc>)
 800863c:	429a      	cmp	r2, r3
 800863e:	d005      	beq.n	800864c <UART_SetConfig+0xa0>
 8008640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	4b8d      	ldr	r3, [pc, #564]	; (800887c <UART_SetConfig+0x2d0>)
 8008648:	429a      	cmp	r2, r3
 800864a:	d104      	bne.n	8008656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800864c:	f7fe fa4a 	bl	8006ae4 <HAL_RCC_GetPCLK2Freq>
 8008650:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008654:	e003      	b.n	800865e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008656:	f7fe fa31 	bl	8006abc <HAL_RCC_GetPCLK1Freq>
 800865a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800865e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008668:	f040 810c 	bne.w	8008884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800866c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008670:	2200      	movs	r2, #0
 8008672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008676:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800867a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800867e:	4622      	mov	r2, r4
 8008680:	462b      	mov	r3, r5
 8008682:	1891      	adds	r1, r2, r2
 8008684:	65b9      	str	r1, [r7, #88]	; 0x58
 8008686:	415b      	adcs	r3, r3
 8008688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800868a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800868e:	4621      	mov	r1, r4
 8008690:	eb12 0801 	adds.w	r8, r2, r1
 8008694:	4629      	mov	r1, r5
 8008696:	eb43 0901 	adc.w	r9, r3, r1
 800869a:	f04f 0200 	mov.w	r2, #0
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086ae:	4690      	mov	r8, r2
 80086b0:	4699      	mov	r9, r3
 80086b2:	4623      	mov	r3, r4
 80086b4:	eb18 0303 	adds.w	r3, r8, r3
 80086b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086bc:	462b      	mov	r3, r5
 80086be:	eb49 0303 	adc.w	r3, r9, r3
 80086c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80086c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80086d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80086d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80086da:	460b      	mov	r3, r1
 80086dc:	18db      	adds	r3, r3, r3
 80086de:	653b      	str	r3, [r7, #80]	; 0x50
 80086e0:	4613      	mov	r3, r2
 80086e2:	eb42 0303 	adc.w	r3, r2, r3
 80086e6:	657b      	str	r3, [r7, #84]	; 0x54
 80086e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80086ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80086f0:	f7f7 fd7e 	bl	80001f0 <__aeabi_uldivmod>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4b61      	ldr	r3, [pc, #388]	; (8008880 <UART_SetConfig+0x2d4>)
 80086fa:	fba3 2302 	umull	r2, r3, r3, r2
 80086fe:	095b      	lsrs	r3, r3, #5
 8008700:	011c      	lsls	r4, r3, #4
 8008702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008706:	2200      	movs	r2, #0
 8008708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800870c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008714:	4642      	mov	r2, r8
 8008716:	464b      	mov	r3, r9
 8008718:	1891      	adds	r1, r2, r2
 800871a:	64b9      	str	r1, [r7, #72]	; 0x48
 800871c:	415b      	adcs	r3, r3
 800871e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008724:	4641      	mov	r1, r8
 8008726:	eb12 0a01 	adds.w	sl, r2, r1
 800872a:	4649      	mov	r1, r9
 800872c:	eb43 0b01 	adc.w	fp, r3, r1
 8008730:	f04f 0200 	mov.w	r2, #0
 8008734:	f04f 0300 	mov.w	r3, #0
 8008738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800873c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008744:	4692      	mov	sl, r2
 8008746:	469b      	mov	fp, r3
 8008748:	4643      	mov	r3, r8
 800874a:	eb1a 0303 	adds.w	r3, sl, r3
 800874e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008752:	464b      	mov	r3, r9
 8008754:	eb4b 0303 	adc.w	r3, fp, r3
 8008758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800875c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008768:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800876c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008770:	460b      	mov	r3, r1
 8008772:	18db      	adds	r3, r3, r3
 8008774:	643b      	str	r3, [r7, #64]	; 0x40
 8008776:	4613      	mov	r3, r2
 8008778:	eb42 0303 	adc.w	r3, r2, r3
 800877c:	647b      	str	r3, [r7, #68]	; 0x44
 800877e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008786:	f7f7 fd33 	bl	80001f0 <__aeabi_uldivmod>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4611      	mov	r1, r2
 8008790:	4b3b      	ldr	r3, [pc, #236]	; (8008880 <UART_SetConfig+0x2d4>)
 8008792:	fba3 2301 	umull	r2, r3, r3, r1
 8008796:	095b      	lsrs	r3, r3, #5
 8008798:	2264      	movs	r2, #100	; 0x64
 800879a:	fb02 f303 	mul.w	r3, r2, r3
 800879e:	1acb      	subs	r3, r1, r3
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80087a6:	4b36      	ldr	r3, [pc, #216]	; (8008880 <UART_SetConfig+0x2d4>)
 80087a8:	fba3 2302 	umull	r2, r3, r3, r2
 80087ac:	095b      	lsrs	r3, r3, #5
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80087b4:	441c      	add	r4, r3
 80087b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80087c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80087c8:	4642      	mov	r2, r8
 80087ca:	464b      	mov	r3, r9
 80087cc:	1891      	adds	r1, r2, r2
 80087ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80087d0:	415b      	adcs	r3, r3
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087d8:	4641      	mov	r1, r8
 80087da:	1851      	adds	r1, r2, r1
 80087dc:	6339      	str	r1, [r7, #48]	; 0x30
 80087de:	4649      	mov	r1, r9
 80087e0:	414b      	adcs	r3, r1
 80087e2:	637b      	str	r3, [r7, #52]	; 0x34
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	f04f 0300 	mov.w	r3, #0
 80087ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80087f0:	4659      	mov	r1, fp
 80087f2:	00cb      	lsls	r3, r1, #3
 80087f4:	4651      	mov	r1, sl
 80087f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087fa:	4651      	mov	r1, sl
 80087fc:	00ca      	lsls	r2, r1, #3
 80087fe:	4610      	mov	r0, r2
 8008800:	4619      	mov	r1, r3
 8008802:	4603      	mov	r3, r0
 8008804:	4642      	mov	r2, r8
 8008806:	189b      	adds	r3, r3, r2
 8008808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800880c:	464b      	mov	r3, r9
 800880e:	460a      	mov	r2, r1
 8008810:	eb42 0303 	adc.w	r3, r2, r3
 8008814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008824:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800882c:	460b      	mov	r3, r1
 800882e:	18db      	adds	r3, r3, r3
 8008830:	62bb      	str	r3, [r7, #40]	; 0x28
 8008832:	4613      	mov	r3, r2
 8008834:	eb42 0303 	adc.w	r3, r2, r3
 8008838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800883a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800883e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008842:	f7f7 fcd5 	bl	80001f0 <__aeabi_uldivmod>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4b0d      	ldr	r3, [pc, #52]	; (8008880 <UART_SetConfig+0x2d4>)
 800884c:	fba3 1302 	umull	r1, r3, r3, r2
 8008850:	095b      	lsrs	r3, r3, #5
 8008852:	2164      	movs	r1, #100	; 0x64
 8008854:	fb01 f303 	mul.w	r3, r1, r3
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	3332      	adds	r3, #50	; 0x32
 800885e:	4a08      	ldr	r2, [pc, #32]	; (8008880 <UART_SetConfig+0x2d4>)
 8008860:	fba2 2303 	umull	r2, r3, r2, r3
 8008864:	095b      	lsrs	r3, r3, #5
 8008866:	f003 0207 	and.w	r2, r3, #7
 800886a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4422      	add	r2, r4
 8008872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008874:	e106      	b.n	8008a84 <UART_SetConfig+0x4d8>
 8008876:	bf00      	nop
 8008878:	40011000 	.word	0x40011000
 800887c:	40011400 	.word	0x40011400
 8008880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008888:	2200      	movs	r2, #0
 800888a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800888e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008896:	4642      	mov	r2, r8
 8008898:	464b      	mov	r3, r9
 800889a:	1891      	adds	r1, r2, r2
 800889c:	6239      	str	r1, [r7, #32]
 800889e:	415b      	adcs	r3, r3
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
 80088a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088a6:	4641      	mov	r1, r8
 80088a8:	1854      	adds	r4, r2, r1
 80088aa:	4649      	mov	r1, r9
 80088ac:	eb43 0501 	adc.w	r5, r3, r1
 80088b0:	f04f 0200 	mov.w	r2, #0
 80088b4:	f04f 0300 	mov.w	r3, #0
 80088b8:	00eb      	lsls	r3, r5, #3
 80088ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088be:	00e2      	lsls	r2, r4, #3
 80088c0:	4614      	mov	r4, r2
 80088c2:	461d      	mov	r5, r3
 80088c4:	4643      	mov	r3, r8
 80088c6:	18e3      	adds	r3, r4, r3
 80088c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088cc:	464b      	mov	r3, r9
 80088ce:	eb45 0303 	adc.w	r3, r5, r3
 80088d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80088e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088e6:	f04f 0200 	mov.w	r2, #0
 80088ea:	f04f 0300 	mov.w	r3, #0
 80088ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80088f2:	4629      	mov	r1, r5
 80088f4:	008b      	lsls	r3, r1, #2
 80088f6:	4621      	mov	r1, r4
 80088f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088fc:	4621      	mov	r1, r4
 80088fe:	008a      	lsls	r2, r1, #2
 8008900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008904:	f7f7 fc74 	bl	80001f0 <__aeabi_uldivmod>
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	4b60      	ldr	r3, [pc, #384]	; (8008a90 <UART_SetConfig+0x4e4>)
 800890e:	fba3 2302 	umull	r2, r3, r3, r2
 8008912:	095b      	lsrs	r3, r3, #5
 8008914:	011c      	lsls	r4, r3, #4
 8008916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800891a:	2200      	movs	r2, #0
 800891c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008920:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	1891      	adds	r1, r2, r2
 800892e:	61b9      	str	r1, [r7, #24]
 8008930:	415b      	adcs	r3, r3
 8008932:	61fb      	str	r3, [r7, #28]
 8008934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008938:	4641      	mov	r1, r8
 800893a:	1851      	adds	r1, r2, r1
 800893c:	6139      	str	r1, [r7, #16]
 800893e:	4649      	mov	r1, r9
 8008940:	414b      	adcs	r3, r1
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	f04f 0200 	mov.w	r2, #0
 8008948:	f04f 0300 	mov.w	r3, #0
 800894c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008950:	4659      	mov	r1, fp
 8008952:	00cb      	lsls	r3, r1, #3
 8008954:	4651      	mov	r1, sl
 8008956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800895a:	4651      	mov	r1, sl
 800895c:	00ca      	lsls	r2, r1, #3
 800895e:	4610      	mov	r0, r2
 8008960:	4619      	mov	r1, r3
 8008962:	4603      	mov	r3, r0
 8008964:	4642      	mov	r2, r8
 8008966:	189b      	adds	r3, r3, r2
 8008968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800896c:	464b      	mov	r3, r9
 800896e:	460a      	mov	r2, r1
 8008970:	eb42 0303 	adc.w	r3, r2, r3
 8008974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	67bb      	str	r3, [r7, #120]	; 0x78
 8008982:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	f04f 0300 	mov.w	r3, #0
 800898c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008990:	4649      	mov	r1, r9
 8008992:	008b      	lsls	r3, r1, #2
 8008994:	4641      	mov	r1, r8
 8008996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800899a:	4641      	mov	r1, r8
 800899c:	008a      	lsls	r2, r1, #2
 800899e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80089a2:	f7f7 fc25 	bl	80001f0 <__aeabi_uldivmod>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4611      	mov	r1, r2
 80089ac:	4b38      	ldr	r3, [pc, #224]	; (8008a90 <UART_SetConfig+0x4e4>)
 80089ae:	fba3 2301 	umull	r2, r3, r3, r1
 80089b2:	095b      	lsrs	r3, r3, #5
 80089b4:	2264      	movs	r2, #100	; 0x64
 80089b6:	fb02 f303 	mul.w	r3, r2, r3
 80089ba:	1acb      	subs	r3, r1, r3
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	3332      	adds	r3, #50	; 0x32
 80089c0:	4a33      	ldr	r2, [pc, #204]	; (8008a90 <UART_SetConfig+0x4e4>)
 80089c2:	fba2 2303 	umull	r2, r3, r2, r3
 80089c6:	095b      	lsrs	r3, r3, #5
 80089c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089cc:	441c      	add	r4, r3
 80089ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089d2:	2200      	movs	r2, #0
 80089d4:	673b      	str	r3, [r7, #112]	; 0x70
 80089d6:	677a      	str	r2, [r7, #116]	; 0x74
 80089d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80089dc:	4642      	mov	r2, r8
 80089de:	464b      	mov	r3, r9
 80089e0:	1891      	adds	r1, r2, r2
 80089e2:	60b9      	str	r1, [r7, #8]
 80089e4:	415b      	adcs	r3, r3
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089ec:	4641      	mov	r1, r8
 80089ee:	1851      	adds	r1, r2, r1
 80089f0:	6039      	str	r1, [r7, #0]
 80089f2:	4649      	mov	r1, r9
 80089f4:	414b      	adcs	r3, r1
 80089f6:	607b      	str	r3, [r7, #4]
 80089f8:	f04f 0200 	mov.w	r2, #0
 80089fc:	f04f 0300 	mov.w	r3, #0
 8008a00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a04:	4659      	mov	r1, fp
 8008a06:	00cb      	lsls	r3, r1, #3
 8008a08:	4651      	mov	r1, sl
 8008a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a0e:	4651      	mov	r1, sl
 8008a10:	00ca      	lsls	r2, r1, #3
 8008a12:	4610      	mov	r0, r2
 8008a14:	4619      	mov	r1, r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	4642      	mov	r2, r8
 8008a1a:	189b      	adds	r3, r3, r2
 8008a1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a1e:	464b      	mov	r3, r9
 8008a20:	460a      	mov	r2, r1
 8008a22:	eb42 0303 	adc.w	r3, r2, r3
 8008a26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	663b      	str	r3, [r7, #96]	; 0x60
 8008a32:	667a      	str	r2, [r7, #100]	; 0x64
 8008a34:	f04f 0200 	mov.w	r2, #0
 8008a38:	f04f 0300 	mov.w	r3, #0
 8008a3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008a40:	4649      	mov	r1, r9
 8008a42:	008b      	lsls	r3, r1, #2
 8008a44:	4641      	mov	r1, r8
 8008a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a4a:	4641      	mov	r1, r8
 8008a4c:	008a      	lsls	r2, r1, #2
 8008a4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008a52:	f7f7 fbcd 	bl	80001f0 <__aeabi_uldivmod>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4b0d      	ldr	r3, [pc, #52]	; (8008a90 <UART_SetConfig+0x4e4>)
 8008a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	2164      	movs	r1, #100	; 0x64
 8008a64:	fb01 f303 	mul.w	r3, r1, r3
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	3332      	adds	r3, #50	; 0x32
 8008a6e:	4a08      	ldr	r2, [pc, #32]	; (8008a90 <UART_SetConfig+0x4e4>)
 8008a70:	fba2 2303 	umull	r2, r3, r2, r3
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	f003 020f 	and.w	r2, r3, #15
 8008a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4422      	add	r2, r4
 8008a82:	609a      	str	r2, [r3, #8]
}
 8008a84:	bf00      	nop
 8008a86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a90:	51eb851f 	.word	0x51eb851f

08008a94 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d123      	bne.n	8008aee <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008aae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	6851      	ldr	r1, [r2, #4]
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	6892      	ldr	r2, [r2, #8]
 8008aba:	4311      	orrs	r1, r2
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	68d2      	ldr	r2, [r2, #12]
 8008ac0:	4311      	orrs	r1, r2
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	6912      	ldr	r2, [r2, #16]
 8008ac6:	4311      	orrs	r1, r2
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	6952      	ldr	r2, [r2, #20]
 8008acc:	4311      	orrs	r1, r2
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	6992      	ldr	r2, [r2, #24]
 8008ad2:	4311      	orrs	r1, r2
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	69d2      	ldr	r2, [r2, #28]
 8008ad8:	4311      	orrs	r1, r2
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	6a12      	ldr	r2, [r2, #32]
 8008ade:	4311      	orrs	r1, r2
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	e028      	b.n	8008b40 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	69d9      	ldr	r1, [r3, #28]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	4319      	orrs	r1, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	430b      	orrs	r3, r1
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008b14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	6851      	ldr	r1, [r2, #4]
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	6892      	ldr	r2, [r2, #8]
 8008b20:	4311      	orrs	r1, r2
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	68d2      	ldr	r2, [r2, #12]
 8008b26:	4311      	orrs	r1, r2
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	6912      	ldr	r2, [r2, #16]
 8008b2c:	4311      	orrs	r1, r2
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	6952      	ldr	r2, [r2, #20]
 8008b32:	4311      	orrs	r1, r2
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	6992      	ldr	r2, [r2, #24]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d128      	bne.n	8008bb2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	1e59      	subs	r1, r3, #1
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	011b      	lsls	r3, r3, #4
 8008b76:	4319      	orrs	r1, r3
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	021b      	lsls	r3, r3, #8
 8008b80:	4319      	orrs	r1, r3
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	031b      	lsls	r3, r3, #12
 8008b8a:	4319      	orrs	r1, r3
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	041b      	lsls	r3, r3, #16
 8008b94:	4319      	orrs	r1, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	051b      	lsls	r3, r3, #20
 8008b9e:	4319      	orrs	r1, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	061b      	lsls	r3, r3, #24
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	431a      	orrs	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	609a      	str	r2, [r3, #8]
 8008bb0:	e02f      	b.n	8008c12 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	68d2      	ldr	r2, [r2, #12]
 8008bc2:	3a01      	subs	r2, #1
 8008bc4:	0311      	lsls	r1, r2, #12
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	6952      	ldr	r2, [r2, #20]
 8008bca:	3a01      	subs	r2, #1
 8008bcc:	0512      	lsls	r2, r2, #20
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	1e59      	subs	r1, r3, #1
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	4319      	orrs	r1, r3
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	4319      	orrs	r1, r3
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	041b      	lsls	r3, r3, #16
 8008c00:	4319      	orrs	r1, r3
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	061b      	lsls	r3, r3, #24
 8008c0a:	430b      	orrs	r3, r1
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	0d9b      	lsrs	r3, r3, #22
 8008c36:	059b      	lsls	r3, r3, #22
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	6811      	ldr	r1, [r2, #0]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	6852      	ldr	r2, [r2, #4]
 8008c40:	4311      	orrs	r1, r2
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	6892      	ldr	r2, [r2, #8]
 8008c46:	3a01      	subs	r2, #1
 8008c48:	0152      	lsls	r2, r2, #5
 8008c4a:	4311      	orrs	r1, r2
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	68d2      	ldr	r2, [r2, #12]
 8008c50:	0252      	lsls	r2, r2, #9
 8008c52:	430a      	orrs	r2, r1
 8008c54:	431a      	orrs	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008c5a:	f7f8 fd71 	bl	8001740 <HAL_GetTick>
 8008c5e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008c60:	e010      	b.n	8008c84 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c68:	d00c      	beq.n	8008c84 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <FMC_SDRAM_SendCommand+0x60>
 8008c70:	f7f8 fd66 	bl	8001740 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d201      	bcs.n	8008c84 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e006      	b.n	8008c92 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	2b20      	cmp	r3, #32
 8008c8e:	d0e8      	beq.n	8008c62 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b083      	sub	sp, #12
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008cac:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	0052      	lsls	r2, r2, #1
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cc8:	b084      	sub	sp, #16
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	f107 001c 	add.w	r0, r7, #28
 8008cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cda:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d123      	bne.n	8008d2a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d105      	bne.n	8008d1e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f9dc 	bl	80090dc <USB_CoreReset>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]
 8008d28:	e01b      	b.n	8008d62 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f9d0 	bl	80090dc <USB_CoreReset>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d40:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d106      	bne.n	8008d56 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	639a      	str	r2, [r3, #56]	; 0x38
 8008d54:	e005      	b.n	8008d62 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d62:	7fbb      	ldrb	r3, [r7, #30]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d10b      	bne.n	8008d80 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	f043 0206 	orr.w	r2, r3, #6
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f043 0220 	orr.w	r2, r3, #32
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d8c:	b004      	add	sp, #16
 8008d8e:	4770      	bx	lr

08008d90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f043 0201 	orr.w	r2, r3, #1
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f023 0201 	bic.w	r2, r3, #1
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d115      	bne.n	8008e22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e02:	200a      	movs	r0, #10
 8008e04:	f7f8 fca8 	bl	8001758 <HAL_Delay>
      ms += 10U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	330a      	adds	r3, #10
 8008e0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f956 	bl	80090c0 <USB_GetMode>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d01e      	beq.n	8008e58 <USB_SetCurrentMode+0x84>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2bc7      	cmp	r3, #199	; 0xc7
 8008e1e:	d9f0      	bls.n	8008e02 <USB_SetCurrentMode+0x2e>
 8008e20:	e01a      	b.n	8008e58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e22:	78fb      	ldrb	r3, [r7, #3]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d115      	bne.n	8008e54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e34:	200a      	movs	r0, #10
 8008e36:	f7f8 fc8f 	bl	8001758 <HAL_Delay>
      ms += 10U;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	330a      	adds	r3, #10
 8008e3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f93d 	bl	80090c0 <USB_GetMode>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <USB_SetCurrentMode+0x84>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2bc7      	cmp	r3, #199	; 0xc7
 8008e50:	d9f0      	bls.n	8008e34 <USB_SetCurrentMode+0x60>
 8008e52:	e001      	b.n	8008e58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e005      	b.n	8008e64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2bc8      	cmp	r3, #200	; 0xc8
 8008e5c:	d101      	bne.n	8008e62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e000      	b.n	8008e64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e86:	d901      	bls.n	8008e8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e01b      	b.n	8008ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	daf2      	bge.n	8008e7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	019b      	lsls	r3, r3, #6
 8008e9c:	f043 0220 	orr.w	r2, r3, #32
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008eb0:	d901      	bls.n	8008eb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e006      	b.n	8008ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	f003 0320 	and.w	r3, r3, #32
 8008ebe:	2b20      	cmp	r3, #32
 8008ec0:	d0f0      	beq.n	8008ea4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ee8:	d901      	bls.n	8008eee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e018      	b.n	8008f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	daf2      	bge.n	8008edc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2210      	movs	r2, #16
 8008efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3301      	adds	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f0c:	d901      	bls.n	8008f12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e006      	b.n	8008f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	f003 0310 	and.w	r3, r3, #16
 8008f1a:	2b10      	cmp	r3, #16
 8008f1c:	d0f0      	beq.n	8008f00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b089      	sub	sp, #36	; 0x24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	4611      	mov	r1, r2
 8008f38:	461a      	mov	r2, r3
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	71fb      	strb	r3, [r7, #7]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d123      	bne.n	8008f9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008f52:	88bb      	ldrh	r3, [r7, #4]
 8008f54:	3303      	adds	r3, #3
 8008f56:	089b      	lsrs	r3, r3, #2
 8008f58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	61bb      	str	r3, [r7, #24]
 8008f5e:	e018      	b.n	8008f92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008f60:	79fb      	ldrb	r3, [r7, #7]
 8008f62:	031a      	lsls	r2, r3, #12
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	3301      	adds	r3, #1
 8008f78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	3301      	adds	r3, #1
 8008f84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	61bb      	str	r3, [r7, #24]
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d3e2      	bcc.n	8008f60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3724      	adds	r7, #36	; 0x24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b08b      	sub	sp, #44	; 0x2c
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008fbe:	88fb      	ldrh	r3, [r7, #6]
 8008fc0:	089b      	lsrs	r3, r3, #2
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008fc6:	88fb      	ldrh	r3, [r7, #6]
 8008fc8:	f003 0303 	and.w	r3, r3, #3
 8008fcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008fce:	2300      	movs	r3, #0
 8008fd0:	623b      	str	r3, [r7, #32]
 8008fd2:	e014      	b.n	8008ffe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	601a      	str	r2, [r3, #0]
    pDest++;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	3301      	adds	r3, #1
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	3301      	adds	r3, #1
 8008ff0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	623b      	str	r3, [r7, #32]
 8008ffe:	6a3a      	ldr	r2, [r7, #32]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	429a      	cmp	r2, r3
 8009004:	d3e6      	bcc.n	8008fd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009006:	8bfb      	ldrh	r3, [r7, #30]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01e      	beq.n	800904a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009016:	461a      	mov	r2, r3
 8009018:	f107 0310 	add.w	r3, r7, #16
 800901c:	6812      	ldr	r2, [r2, #0]
 800901e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	00db      	lsls	r3, r3, #3
 8009028:	fa22 f303 	lsr.w	r3, r2, r3
 800902c:	b2da      	uxtb	r2, r3
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	701a      	strb	r2, [r3, #0]
      i++;
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	3301      	adds	r3, #1
 8009036:	623b      	str	r3, [r7, #32]
      pDest++;
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	3301      	adds	r3, #1
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800903e:	8bfb      	ldrh	r3, [r7, #30]
 8009040:	3b01      	subs	r3, #1
 8009042:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009044:	8bfb      	ldrh	r3, [r7, #30]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1ea      	bne.n	8009020 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800904c:	4618      	mov	r0, r3
 800904e:	372c      	adds	r7, #44	; 0x2c
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	4013      	ands	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009070:	68fb      	ldr	r3, [r7, #12]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800907e:	b480      	push	{r7}
 8009080:	b085      	sub	sp, #20
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	460b      	mov	r3, r1
 8009088:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	4413      	add	r3, r2
 8009096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	4013      	ands	r3, r2
 80090b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090b2:	68bb      	ldr	r3, [r7, #8]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	695b      	ldr	r3, [r3, #20]
 80090cc:	f003 0301 	and.w	r3, r3, #1
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3301      	adds	r3, #1
 80090ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80090f4:	d901      	bls.n	80090fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e01b      	b.n	8009132 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	daf2      	bge.n	80090e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	f043 0201 	orr.w	r2, r3, #1
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3301      	adds	r3, #1
 8009116:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800911e:	d901      	bls.n	8009124 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	e006      	b.n	8009132 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	2b01      	cmp	r3, #1
 800912e:	d0f0      	beq.n	8009112 <USB_CoreReset+0x36>

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
	...

08009140 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009140:	b084      	sub	sp, #16
 8009142:	b580      	push	{r7, lr}
 8009144:	b086      	sub	sp, #24
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800914e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009160:	461a      	mov	r2, r3
 8009162:	2300      	movs	r3, #0
 8009164:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009176:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009182:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009192:	2b00      	cmp	r3, #0
 8009194:	d119      	bne.n	80091ca <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800919a:	2b01      	cmp	r3, #1
 800919c:	d10a      	bne.n	80091b4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091ac:	f043 0304 	orr.w	r3, r3, #4
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	e014      	b.n	80091de <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091c2:	f023 0304 	bic.w	r3, r3, #4
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	e009      	b.n	80091de <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091d8:	f023 0304 	bic.w	r3, r3, #4
 80091dc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091de:	2110      	movs	r1, #16
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff fe43 	bl	8008e6c <USB_FlushTxFifo>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff fe6d 	bl	8008ed0 <USB_FlushRxFifo>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009200:	2300      	movs	r3, #0
 8009202:	613b      	str	r3, [r7, #16]
 8009204:	e015      	b.n	8009232 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009212:	461a      	mov	r2, r3
 8009214:	f04f 33ff 	mov.w	r3, #4294967295
 8009218:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	4413      	add	r3, r2
 8009222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009226:	461a      	mov	r2, r3
 8009228:	2300      	movs	r3, #0
 800922a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	3301      	adds	r3, #1
 8009230:	613b      	str	r3, [r7, #16]
 8009232:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009236:	461a      	mov	r2, r3
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	4293      	cmp	r3, r2
 800923c:	d3e3      	bcc.n	8009206 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f04f 32ff 	mov.w	r2, #4294967295
 800924a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a18      	ldr	r2, [pc, #96]	; (80092b0 <USB_HostInit+0x170>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d10b      	bne.n	800926c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800925a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a15      	ldr	r2, [pc, #84]	; (80092b4 <USB_HostInit+0x174>)
 8009260:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a14      	ldr	r2, [pc, #80]	; (80092b8 <USB_HostInit+0x178>)
 8009266:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800926a:	e009      	b.n	8009280 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2280      	movs	r2, #128	; 0x80
 8009270:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a11      	ldr	r2, [pc, #68]	; (80092bc <USB_HostInit+0x17c>)
 8009276:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a11      	ldr	r2, [pc, #68]	; (80092c0 <USB_HostInit+0x180>)
 800927c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009284:	2b00      	cmp	r3, #0
 8009286:	d105      	bne.n	8009294 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	f043 0210 	orr.w	r2, r3, #16
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	699a      	ldr	r2, [r3, #24]
 8009298:	4b0a      	ldr	r3, [pc, #40]	; (80092c4 <USB_HostInit+0x184>)
 800929a:	4313      	orrs	r3, r2
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80092a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3718      	adds	r7, #24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092ac:	b004      	add	sp, #16
 80092ae:	4770      	bx	lr
 80092b0:	40040000 	.word	0x40040000
 80092b4:	01000200 	.word	0x01000200
 80092b8:	00e00300 	.word	0x00e00300
 80092bc:	00600080 	.word	0x00600080
 80092c0:	004000e0 	.word	0x004000e0
 80092c4:	a3200008 	.word	0xa3200008

080092c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092e6:	f023 0303 	bic.w	r3, r3, #3
 80092ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	f003 0303 	and.w	r3, r3, #3
 80092fa:	68f9      	ldr	r1, [r7, #12]
 80092fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009300:	4313      	orrs	r3, r2
 8009302:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d107      	bne.n	800931a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009310:	461a      	mov	r2, r3
 8009312:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009316:	6053      	str	r3, [r2, #4]
 8009318:	e00c      	b.n	8009334 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	2b02      	cmp	r3, #2
 800931e:	d107      	bne.n	8009330 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009326:	461a      	mov	r2, r3
 8009328:	f241 7370 	movw	r3, #6000	; 0x1770
 800932c:	6053      	str	r3, [r2, #4]
 800932e:	e001      	b.n	8009334 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e000      	b.n	8009336 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009362:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800936c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009370:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009372:	2064      	movs	r0, #100	; 0x64
 8009374:	f7f8 f9f0 	bl	8001758 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009384:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009386:	200a      	movs	r0, #10
 8009388:	f7f8 f9e6 	bl	8001758 <HAL_Delay>

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009396:	b480      	push	{r7}
 8009398:	b085      	sub	sp, #20
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	460b      	mov	r3, r1
 80093a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80093ba:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d109      	bne.n	80093da <USB_DriveVbus+0x44>
 80093c6:	78fb      	ldrb	r3, [r7, #3]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d106      	bne.n	80093da <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80093d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80093d8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093e4:	d109      	bne.n	80093fa <USB_DriveVbus+0x64>
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d106      	bne.n	80093fa <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80093f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093f8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009414:	2300      	movs	r3, #0
 8009416:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	0c5b      	lsrs	r3, r3, #17
 8009426:	f003 0303 	and.w	r3, r3, #3
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009436:	b480      	push	{r7}
 8009438:	b085      	sub	sp, #20
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	b29b      	uxth	r3, r3
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b088      	sub	sp, #32
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	4608      	mov	r0, r1
 8009462:	4611      	mov	r1, r2
 8009464:	461a      	mov	r2, r3
 8009466:	4603      	mov	r3, r0
 8009468:	70fb      	strb	r3, [r7, #3]
 800946a:	460b      	mov	r3, r1
 800946c:	70bb      	strb	r3, [r7, #2]
 800946e:	4613      	mov	r3, r2
 8009470:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800947a:	78fb      	ldrb	r3, [r7, #3]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	4413      	add	r3, r2
 8009482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009486:	461a      	mov	r2, r3
 8009488:	f04f 33ff 	mov.w	r3, #4294967295
 800948c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800948e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009492:	2b03      	cmp	r3, #3
 8009494:	d87c      	bhi.n	8009590 <USB_HC_Init+0x138>
 8009496:	a201      	add	r2, pc, #4	; (adr r2, 800949c <USB_HC_Init+0x44>)
 8009498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949c:	080094ad 	.word	0x080094ad
 80094a0:	08009553 	.word	0x08009553
 80094a4:	080094ad 	.word	0x080094ad
 80094a8:	08009515 	.word	0x08009515
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80094ac:	78fb      	ldrb	r3, [r7, #3]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094b8:	461a      	mov	r2, r3
 80094ba:	f240 439d 	movw	r3, #1181	; 0x49d
 80094be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80094c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	da10      	bge.n	80094ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	0151      	lsls	r1, r2, #5
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	440a      	add	r2, r1
 80094de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094e6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80094e8:	e055      	b.n	8009596 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a6f      	ldr	r2, [pc, #444]	; (80096ac <USB_HC_Init+0x254>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d151      	bne.n	8009596 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80094f2:	78fb      	ldrb	r3, [r7, #3]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	78fa      	ldrb	r2, [r7, #3]
 8009502:	0151      	lsls	r1, r2, #5
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	440a      	add	r2, r1
 8009508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800950c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009510:	60d3      	str	r3, [r2, #12]
      break;
 8009512:	e040      	b.n	8009596 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009514:	78fb      	ldrb	r3, [r7, #3]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	4413      	add	r3, r2
 800951c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009520:	461a      	mov	r2, r3
 8009522:	f240 639d 	movw	r3, #1693	; 0x69d
 8009526:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009528:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800952c:	2b00      	cmp	r3, #0
 800952e:	da34      	bge.n	800959a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	4413      	add	r3, r2
 8009538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	78fa      	ldrb	r2, [r7, #3]
 8009540:	0151      	lsls	r1, r2, #5
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	440a      	add	r2, r1
 8009546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800954a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800954e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009550:	e023      	b.n	800959a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	4413      	add	r3, r2
 800955a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800955e:	461a      	mov	r2, r3
 8009560:	f240 2325 	movw	r3, #549	; 0x225
 8009564:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009566:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800956a:	2b00      	cmp	r3, #0
 800956c:	da17      	bge.n	800959e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	4413      	add	r3, r2
 8009576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	78fa      	ldrb	r2, [r7, #3]
 800957e:	0151      	lsls	r1, r2, #5
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	440a      	add	r2, r1
 8009584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009588:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800958c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800958e:	e006      	b.n	800959e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	77fb      	strb	r3, [r7, #31]
      break;
 8009594:	e004      	b.n	80095a0 <USB_HC_Init+0x148>
      break;
 8009596:	bf00      	nop
 8009598:	e002      	b.n	80095a0 <USB_HC_Init+0x148>
      break;
 800959a:	bf00      	nop
 800959c:	e000      	b.n	80095a0 <USB_HC_Init+0x148>
      break;
 800959e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ac:	461a      	mov	r2, r3
 80095ae:	2300      	movs	r3, #0
 80095b0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80095b2:	78fb      	ldrb	r3, [r7, #3]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	78fa      	ldrb	r2, [r7, #3]
 80095c2:	0151      	lsls	r1, r2, #5
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	440a      	add	r2, r1
 80095c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095cc:	f043 0302 	orr.w	r3, r3, #2
 80095d0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095d8:	699a      	ldr	r2, [r3, #24]
 80095da:	78fb      	ldrb	r3, [r7, #3]
 80095dc:	f003 030f 	and.w	r3, r3, #15
 80095e0:	2101      	movs	r1, #1
 80095e2:	fa01 f303 	lsl.w	r3, r1, r3
 80095e6:	6939      	ldr	r1, [r7, #16]
 80095e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80095ec:	4313      	orrs	r3, r2
 80095ee:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80095fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009600:	2b00      	cmp	r3, #0
 8009602:	da03      	bge.n	800960c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009608:	61bb      	str	r3, [r7, #24]
 800960a:	e001      	b.n	8009610 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7ff fef9 	bl	8009408 <USB_GetHostSpeed>
 8009616:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800961c:	2b02      	cmp	r3, #2
 800961e:	d106      	bne.n	800962e <USB_HC_Init+0x1d6>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d003      	beq.n	800962e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	e001      	b.n	8009632 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009632:	787b      	ldrb	r3, [r7, #1]
 8009634:	059b      	lsls	r3, r3, #22
 8009636:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800963a:	78bb      	ldrb	r3, [r7, #2]
 800963c:	02db      	lsls	r3, r3, #11
 800963e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009642:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009644:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009648:	049b      	lsls	r3, r3, #18
 800964a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800964e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009650:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009652:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009656:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	431a      	orrs	r2, r3
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009660:	78fa      	ldrb	r2, [r7, #3]
 8009662:	0151      	lsls	r1, r2, #5
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	440a      	add	r2, r1
 8009668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800966c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009670:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009672:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009676:	2b03      	cmp	r3, #3
 8009678:	d003      	beq.n	8009682 <USB_HC_Init+0x22a>
 800967a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800967e:	2b01      	cmp	r3, #1
 8009680:	d10f      	bne.n	80096a2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009682:	78fb      	ldrb	r3, [r7, #3]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	4413      	add	r3, r2
 800968a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	0151      	lsls	r1, r2, #5
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	440a      	add	r2, r1
 8009698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800969c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096a0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80096a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3720      	adds	r7, #32
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	40040000 	.word	0x40040000

080096b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08c      	sub	sp, #48	; 0x30
 80096b4:	af02      	add	r7, sp, #8
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	4613      	mov	r3, r2
 80096bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	785b      	ldrb	r3, [r3, #1]
 80096c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80096c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096cc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	4a5d      	ldr	r2, [pc, #372]	; (8009848 <USB_HC_StartXfer+0x198>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d12f      	bne.n	8009736 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d11c      	bne.n	8009716 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	7c9b      	ldrb	r3, [r3, #18]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <USB_HC_StartXfer+0x3c>
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	7c9b      	ldrb	r3, [r3, #18]
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d124      	bne.n	8009736 <USB_HC_StartXfer+0x86>
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	799b      	ldrb	r3, [r3, #6]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d120      	bne.n	8009736 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	015a      	lsls	r2, r3, #5
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	69fa      	ldr	r2, [r7, #28]
 8009704:	0151      	lsls	r1, r2, #5
 8009706:	6a3a      	ldr	r2, [r7, #32]
 8009708:	440a      	add	r2, r1
 800970a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800970e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009712:	60d3      	str	r3, [r2, #12]
 8009714:	e00f      	b.n	8009736 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	791b      	ldrb	r3, [r3, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10b      	bne.n	8009736 <USB_HC_StartXfer+0x86>
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	795b      	ldrb	r3, [r3, #5]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d107      	bne.n	8009736 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	785b      	ldrb	r3, [r3, #1]
 800972a:	4619      	mov	r1, r3
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 fb6b 	bl	8009e08 <USB_DoPing>
        return HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	e232      	b.n	8009b9c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	799b      	ldrb	r3, [r3, #6]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d158      	bne.n	80097f0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800973e:	2301      	movs	r3, #1
 8009740:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	78db      	ldrb	r3, [r3, #3]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d007      	beq.n	800975a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800974a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	8a92      	ldrh	r2, [r2, #20]
 8009750:	fb03 f202 	mul.w	r2, r3, r2
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	61da      	str	r2, [r3, #28]
 8009758:	e07c      	b.n	8009854 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	7c9b      	ldrb	r3, [r3, #18]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d130      	bne.n	80097c4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	2bbc      	cmp	r3, #188	; 0xbc
 8009768:	d918      	bls.n	800979c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	8a9b      	ldrh	r3, [r3, #20]
 800976e:	461a      	mov	r2, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	69da      	ldr	r2, [r3, #28]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d003      	beq.n	800978c <USB_HC_StartXfer+0xdc>
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d103      	bne.n	8009794 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	2202      	movs	r2, #2
 8009790:	60da      	str	r2, [r3, #12]
 8009792:	e05f      	b.n	8009854 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2201      	movs	r2, #1
 8009798:	60da      	str	r2, [r3, #12]
 800979a:	e05b      	b.n	8009854 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	6a1a      	ldr	r2, [r3, #32]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d007      	beq.n	80097bc <USB_HC_StartXfer+0x10c>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d003      	beq.n	80097bc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2204      	movs	r2, #4
 80097b8:	60da      	str	r2, [r3, #12]
 80097ba:	e04b      	b.n	8009854 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2203      	movs	r2, #3
 80097c0:	60da      	str	r2, [r3, #12]
 80097c2:	e047      	b.n	8009854 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d10d      	bne.n	80097e6 <USB_HC_StartXfer+0x136>
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	8a92      	ldrh	r2, [r2, #20]
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d907      	bls.n	80097e6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80097d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	8a92      	ldrh	r2, [r2, #20]
 80097dc:	fb03 f202 	mul.w	r2, r3, r2
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	61da      	str	r2, [r3, #28]
 80097e4:	e036      	b.n	8009854 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	6a1a      	ldr	r2, [r3, #32]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	61da      	str	r2, [r3, #28]
 80097ee:	e031      	b.n	8009854 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	6a1b      	ldr	r3, [r3, #32]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d018      	beq.n	800982a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	8a92      	ldrh	r2, [r2, #20]
 8009800:	4413      	add	r3, r2
 8009802:	3b01      	subs	r3, #1
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	8a92      	ldrh	r2, [r2, #20]
 8009808:	fbb3 f3f2 	udiv	r3, r3, r2
 800980c:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800980e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009810:	8b7b      	ldrh	r3, [r7, #26]
 8009812:	429a      	cmp	r2, r3
 8009814:	d90b      	bls.n	800982e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009816:	8b7b      	ldrh	r3, [r7, #26]
 8009818:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800981a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	8a92      	ldrh	r2, [r2, #20]
 8009820:	fb03 f202 	mul.w	r2, r3, r2
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	61da      	str	r2, [r3, #28]
 8009828:	e001      	b.n	800982e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800982a:	2301      	movs	r3, #1
 800982c:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	78db      	ldrb	r3, [r3, #3]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009836:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	8a92      	ldrh	r2, [r2, #20]
 800983c:	fb03 f202 	mul.w	r2, r3, r2
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	61da      	str	r2, [r3, #28]
 8009844:	e006      	b.n	8009854 <USB_HC_StartXfer+0x1a4>
 8009846:	bf00      	nop
 8009848:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	6a1a      	ldr	r2, [r3, #32]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800985c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800985e:	04d9      	lsls	r1, r3, #19
 8009860:	4ba3      	ldr	r3, [pc, #652]	; (8009af0 <USB_HC_StartXfer+0x440>)
 8009862:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009864:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	7d9b      	ldrb	r3, [r3, #22]
 800986a:	075b      	lsls	r3, r3, #29
 800986c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009870:	69f9      	ldr	r1, [r7, #28]
 8009872:	0148      	lsls	r0, r1, #5
 8009874:	6a39      	ldr	r1, [r7, #32]
 8009876:	4401      	add	r1, r0
 8009878:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800987c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800987e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009880:	79fb      	ldrb	r3, [r7, #7]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d009      	beq.n	800989a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	6999      	ldr	r1, [r3, #24]
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	4413      	add	r3, r2
 8009892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009896:	460a      	mov	r2, r1
 8009898:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bf0c      	ite	eq
 80098aa:	2301      	moveq	r3, #1
 80098ac:	2300      	movne	r3, #0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	0151      	lsls	r1, r2, #5
 80098c4:	6a3a      	ldr	r2, [r7, #32]
 80098c6:	440a      	add	r2, r1
 80098c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80098d0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	7e7b      	ldrb	r3, [r7, #25]
 80098e2:	075b      	lsls	r3, r3, #29
 80098e4:	69f9      	ldr	r1, [r7, #28]
 80098e6:	0148      	lsls	r0, r1, #5
 80098e8:	6a39      	ldr	r1, [r7, #32]
 80098ea:	4401      	add	r1, r0
 80098ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80098f0:	4313      	orrs	r3, r2
 80098f2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	799b      	ldrb	r3, [r3, #6]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	f040 80c3 	bne.w	8009a84 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	7c5b      	ldrb	r3, [r3, #17]
 8009902:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009908:	4313      	orrs	r3, r2
 800990a:	69fa      	ldr	r2, [r7, #28]
 800990c:	0151      	lsls	r1, r2, #5
 800990e:	6a3a      	ldr	r2, [r7, #32]
 8009910:	440a      	add	r2, r1
 8009912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800991a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	4413      	add	r3, r2
 8009924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	0151      	lsls	r1, r2, #5
 800992e:	6a3a      	ldr	r2, [r7, #32]
 8009930:	440a      	add	r2, r1
 8009932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009936:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800993a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	79db      	ldrb	r3, [r3, #7]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d123      	bne.n	800998c <USB_HC_StartXfer+0x2dc>
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	78db      	ldrb	r3, [r3, #3]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d11f      	bne.n	800998c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	4413      	add	r3, r2
 8009954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	69fa      	ldr	r2, [r7, #28]
 800995c:	0151      	lsls	r1, r2, #5
 800995e:	6a3a      	ldr	r2, [r7, #32]
 8009960:	440a      	add	r2, r1
 8009962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800996a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	4413      	add	r3, r2
 8009974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	69fa      	ldr	r2, [r7, #28]
 800997c:	0151      	lsls	r1, r2, #5
 800997e:	6a3a      	ldr	r2, [r7, #32]
 8009980:	440a      	add	r2, r1
 8009982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800998a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	7c9b      	ldrb	r3, [r3, #18]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d003      	beq.n	800999c <USB_HC_StartXfer+0x2ec>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	7c9b      	ldrb	r3, [r3, #18]
 8009998:	2b03      	cmp	r3, #3
 800999a:	d117      	bne.n	80099cc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d113      	bne.n	80099cc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	78db      	ldrb	r3, [r3, #3]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d10f      	bne.n	80099cc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	69fa      	ldr	r2, [r7, #28]
 80099bc:	0151      	lsls	r1, r2, #5
 80099be:	6a3a      	ldr	r2, [r7, #32]
 80099c0:	440a      	add	r2, r1
 80099c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099ca:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	7c9b      	ldrb	r3, [r3, #18]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d162      	bne.n	8009a9a <USB_HC_StartXfer+0x3ea>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	78db      	ldrb	r3, [r3, #3]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d15e      	bne.n	8009a9a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d858      	bhi.n	8009a98 <USB_HC_StartXfer+0x3e8>
 80099e6:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <USB_HC_StartXfer+0x33c>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	080099fd 	.word	0x080099fd
 80099f0:	08009a1f 	.word	0x08009a1f
 80099f4:	08009a41 	.word	0x08009a41
 80099f8:	08009a63 	.word	0x08009a63
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	69fa      	ldr	r2, [r7, #28]
 8009a0c:	0151      	lsls	r1, r2, #5
 8009a0e:	6a3a      	ldr	r2, [r7, #32]
 8009a10:	440a      	add	r2, r1
 8009a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a1a:	6053      	str	r3, [r2, #4]
          break;
 8009a1c:	e03d      	b.n	8009a9a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	69fa      	ldr	r2, [r7, #28]
 8009a2e:	0151      	lsls	r1, r2, #5
 8009a30:	6a3a      	ldr	r2, [r7, #32]
 8009a32:	440a      	add	r2, r1
 8009a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a38:	f043 030e 	orr.w	r3, r3, #14
 8009a3c:	6053      	str	r3, [r2, #4]
          break;
 8009a3e:	e02c      	b.n	8009a9a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	6a3a      	ldr	r2, [r7, #32]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a5e:	6053      	str	r3, [r2, #4]
          break;
 8009a60:	e01b      	b.n	8009a9a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	0151      	lsls	r1, r2, #5
 8009a74:	6a3a      	ldr	r2, [r7, #32]
 8009a76:	440a      	add	r2, r1
 8009a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a80:	6053      	str	r3, [r2, #4]
          break;
 8009a82:	e00a      	b.n	8009a9a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	6a3b      	ldr	r3, [r7, #32]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a90:	461a      	mov	r2, r3
 8009a92:	2300      	movs	r3, #0
 8009a94:	6053      	str	r3, [r2, #4]
 8009a96:	e000      	b.n	8009a9a <USB_HC_StartXfer+0x3ea>
          break;
 8009a98:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ab0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	78db      	ldrb	r3, [r3, #3]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d004      	beq.n	8009ac4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac0:	613b      	str	r3, [r7, #16]
 8009ac2:	e003      	b.n	8009acc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009aca:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ad2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009ae6:	79fb      	ldrb	r3, [r7, #7]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	e055      	b.n	8009b9c <USB_HC_StartXfer+0x4ec>
 8009af0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	78db      	ldrb	r3, [r3, #3]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d14e      	bne.n	8009b9a <USB_HC_StartXfer+0x4ea>
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d04a      	beq.n	8009b9a <USB_HC_StartXfer+0x4ea>
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	79db      	ldrb	r3, [r3, #7]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d146      	bne.n	8009b9a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	7c9b      	ldrb	r3, [r3, #18]
 8009b10:	2b03      	cmp	r3, #3
 8009b12:	d831      	bhi.n	8009b78 <USB_HC_StartXfer+0x4c8>
 8009b14:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <USB_HC_StartXfer+0x46c>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b2d 	.word	0x08009b2d
 8009b20:	08009b51 	.word	0x08009b51
 8009b24:	08009b2d 	.word	0x08009b2d
 8009b28:	08009b51 	.word	0x08009b51
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
 8009b30:	3303      	adds	r3, #3
 8009b32:	089b      	lsrs	r3, r3, #2
 8009b34:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009b36:	8afa      	ldrh	r2, [r7, #22]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d91c      	bls.n	8009b7c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	f043 0220 	orr.w	r2, r3, #32
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009b4e:	e015      	b.n	8009b7c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	3303      	adds	r3, #3
 8009b56:	089b      	lsrs	r3, r3, #2
 8009b58:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009b5a:	8afa      	ldrh	r2, [r7, #22]
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d90a      	bls.n	8009b80 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	619a      	str	r2, [r3, #24]
        }
        break;
 8009b76:	e003      	b.n	8009b80 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009b78:	bf00      	nop
 8009b7a:	e002      	b.n	8009b82 <USB_HC_StartXfer+0x4d2>
        break;
 8009b7c:	bf00      	nop
 8009b7e:	e000      	b.n	8009b82 <USB_HC_StartXfer+0x4d2>
        break;
 8009b80:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	6999      	ldr	r1, [r3, #24]
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	785a      	ldrb	r2, [r3, #1]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	2000      	movs	r0, #0
 8009b92:	9000      	str	r0, [sp, #0]
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff f9c9 	bl	8008f2c <USB_WritePacket>
  }

  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3728      	adds	r7, #40	; 0x28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	b29b      	uxth	r3, r3
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b089      	sub	sp, #36	; 0x24
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009bd6:	78fb      	ldrb	r3, [r7, #3]
 8009bd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	0c9b      	lsrs	r3, r3, #18
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	0fdb      	lsrs	r3, r3, #31
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	0fdb      	lsrs	r3, r3, #31
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	f003 0320 	and.w	r3, r3, #32
 8009c28:	2b20      	cmp	r3, #32
 8009c2a:	d10d      	bne.n	8009c48 <USB_HC_Halt+0x82>
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10a      	bne.n	8009c48 <USB_HC_Halt+0x82>
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d002      	beq.n	8009c44 <USB_HC_Halt+0x7e>
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d101      	bne.n	8009c48 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	e0d8      	b.n	8009dfa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <USB_HC_Halt+0x8e>
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d173      	bne.n	8009d3c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	0151      	lsls	r1, r2, #5
 8009c66:	69fa      	ldr	r2, [r7, #28]
 8009c68:	440a      	add	r2, r1
 8009c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c72:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d14a      	bne.n	8009d16 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d133      	bne.n	8009cf4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	69fa      	ldr	r2, [r7, #28]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ca6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009caa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	69ba      	ldr	r2, [r7, #24]
 8009cbc:	0151      	lsls	r1, r2, #5
 8009cbe:	69fa      	ldr	r2, [r7, #28]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cca:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cd8:	d82e      	bhi.n	8009d38 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	015a      	lsls	r2, r3, #5
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cf0:	d0ec      	beq.n	8009ccc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009cf2:	e081      	b.n	8009df8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	015a      	lsls	r2, r3, #5
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	69ba      	ldr	r2, [r7, #24]
 8009d04:	0151      	lsls	r1, r2, #5
 8009d06:	69fa      	ldr	r2, [r7, #28]
 8009d08:	440a      	add	r2, r1
 8009d0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d12:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d14:	e070      	b.n	8009df8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	0151      	lsls	r1, r2, #5
 8009d28:	69fa      	ldr	r2, [r7, #28]
 8009d2a:	440a      	add	r2, r1
 8009d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d34:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d36:	e05f      	b.n	8009df8 <USB_HC_Halt+0x232>
            break;
 8009d38:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d3a:	e05d      	b.n	8009df8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69ba      	ldr	r2, [r7, #24]
 8009d4c:	0151      	lsls	r1, r2, #5
 8009d4e:	69fa      	ldr	r2, [r7, #28]
 8009d50:	440a      	add	r2, r1
 8009d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d5a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d133      	bne.n	8009dd4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	0151      	lsls	r1, r2, #5
 8009d7e:	69fa      	ldr	r2, [r7, #28]
 8009d80:	440a      	add	r2, r1
 8009d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	0151      	lsls	r1, r2, #5
 8009d9e:	69fa      	ldr	r2, [r7, #28]
 8009da0:	440a      	add	r2, r1
 8009da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009daa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	3301      	adds	r3, #1
 8009db0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009db8:	d81d      	bhi.n	8009df6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	015a      	lsls	r2, r3, #5
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dd0:	d0ec      	beq.n	8009dac <USB_HC_Halt+0x1e6>
 8009dd2:	e011      	b.n	8009df8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	0151      	lsls	r1, r2, #5
 8009de6:	69fa      	ldr	r2, [r7, #28]
 8009de8:	440a      	add	r2, r1
 8009dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	e000      	b.n	8009df8 <USB_HC_Halt+0x232>
          break;
 8009df6:	bf00      	nop
    }
  }

  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3724      	adds	r7, #36	; 0x24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
	...

08009e08 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b087      	sub	sp, #28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009e18:	78fb      	ldrb	r3, [r7, #3]
 8009e1a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	04da      	lsls	r2, r3, #19
 8009e24:	4b15      	ldr	r3, [pc, #84]	; (8009e7c <USB_DoPing+0x74>)
 8009e26:	4013      	ands	r3, r2
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	0151      	lsls	r1, r2, #5
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	440a      	add	r2, r1
 8009e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e38:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e50:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e58:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e66:	461a      	mov	r2, r3
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	371c      	adds	r7, #28
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	1ff80000 	.word	0x1ff80000

08009e80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7fe ff8c 	bl	8008db2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e9a:	2110      	movs	r1, #16
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7fe ffe5 	bl	8008e6c <USB_FlushTxFifo>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff f80f 	bl	8008ed0 <USB_FlushRxFifo>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61bb      	str	r3, [r7, #24]
 8009ec0:	e01f      	b.n	8009f02 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ed8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ee0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ee8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	3301      	adds	r3, #1
 8009f00:	61bb      	str	r3, [r7, #24]
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	2b0f      	cmp	r3, #15
 8009f06:	d9dc      	bls.n	8009ec2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009f08:	2300      	movs	r3, #0
 8009f0a:	61bb      	str	r3, [r7, #24]
 8009f0c:	e034      	b.n	8009f78 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	015a      	lsls	r2, r3, #5
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f24:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f34:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	015a      	lsls	r2, r3, #5
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f42:	461a      	mov	r2, r3
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f54:	d80c      	bhi.n	8009f70 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	015a      	lsls	r2, r3, #5
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f6c:	d0ec      	beq.n	8009f48 <USB_StopHost+0xc8>
 8009f6e:	e000      	b.n	8009f72 <USB_StopHost+0xf2>
        break;
 8009f70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	3301      	adds	r3, #1
 8009f76:	61bb      	str	r3, [r7, #24]
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	2b0f      	cmp	r3, #15
 8009f7c:	d9c7      	bls.n	8009f0e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f84:	461a      	mov	r2, r3
 8009f86:	f04f 33ff 	mov.w	r3, #4294967295
 8009f8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7fe fefb 	bl	8008d90 <USB_EnableGlobalInt>

  return ret;
 8009f9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3720      	adds	r7, #32
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009fa4:	b590      	push	{r4, r7, lr}
 8009fa6:	b089      	sub	sp, #36	; 0x24
 8009fa8:	af04      	add	r7, sp, #16
 8009faa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009fac:	2301      	movs	r3, #1
 8009fae:	2202      	movs	r2, #2
 8009fb0:	2102      	movs	r1, #2
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fcd1 	bl	800a95a <USBH_FindInterface>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	2bff      	cmp	r3, #255	; 0xff
 8009fc0:	d002      	beq.n	8009fc8 <USBH_CDC_InterfaceInit+0x24>
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d901      	bls.n	8009fcc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009fc8:	2302      	movs	r3, #2
 8009fca:	e13d      	b.n	800a248 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fca6 	bl	800a922 <USBH_SelectInterface>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009fda:	7bbb      	ldrb	r3, [r7, #14]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	e131      	b.n	800a248 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009fea:	2050      	movs	r0, #80	; 0x50
 8009fec:	f007 fc5c 	bl	80118a8 <malloc>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a004:	2302      	movs	r3, #2
 800a006:	e11f      	b.n	800a248 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a008:	2250      	movs	r2, #80	; 0x50
 800a00a:	2100      	movs	r1, #0
 800a00c:	68b8      	ldr	r0, [r7, #8]
 800a00e:	f007 fd07 	bl	8011a20 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a012:	7bfb      	ldrb	r3, [r7, #15]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	211a      	movs	r1, #26
 800a018:	fb01 f303 	mul.w	r3, r1, r3
 800a01c:	4413      	add	r3, r2
 800a01e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	b25b      	sxtb	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	da15      	bge.n	800a056 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	211a      	movs	r1, #26
 800a030:	fb01 f303 	mul.w	r3, r1, r3
 800a034:	4413      	add	r3, r2
 800a036:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a03a:	781a      	ldrb	r2, [r3, #0]
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	211a      	movs	r1, #26
 800a046:	fb01 f303 	mul.w	r3, r1, r3
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a050:	881a      	ldrh	r2, [r3, #0]
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	785b      	ldrb	r3, [r3, #1]
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f002 fa26 	bl	800c4ae <USBH_AllocPipe>
 800a062:	4603      	mov	r3, r0
 800a064:	461a      	mov	r2, r3
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	7819      	ldrb	r1, [r3, #0]
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	7858      	ldrb	r0, [r3, #1]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	8952      	ldrh	r2, [r2, #10]
 800a082:	9202      	str	r2, [sp, #8]
 800a084:	2203      	movs	r2, #3
 800a086:	9201      	str	r2, [sp, #4]
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	4623      	mov	r3, r4
 800a08c:	4602      	mov	r2, r0
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f002 f9de 	bl	800c450 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2200      	movs	r2, #0
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f007 fb7d 	bl	801179c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	210a      	movs	r1, #10
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fc56 	bl	800a95a <USBH_FindInterface>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	2bff      	cmp	r3, #255	; 0xff
 800a0b6:	d002      	beq.n	800a0be <USBH_CDC_InterfaceInit+0x11a>
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d901      	bls.n	800a0c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a0be:	2302      	movs	r3, #2
 800a0c0:	e0c2      	b.n	800a248 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	211a      	movs	r1, #26
 800a0c8:	fb01 f303 	mul.w	r3, r1, r3
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	b25b      	sxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	da16      	bge.n	800a108 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	211a      	movs	r1, #26
 800a0e0:	fb01 f303 	mul.w	r3, r1, r3
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a0f0:	7bfb      	ldrb	r3, [r7, #15]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	211a      	movs	r1, #26
 800a0f6:	fb01 f303 	mul.w	r3, r1, r3
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a100:	881a      	ldrh	r2, [r3, #0]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	835a      	strh	r2, [r3, #26]
 800a106:	e015      	b.n	800a134 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a108:	7bfb      	ldrb	r3, [r7, #15]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	211a      	movs	r1, #26
 800a10e:	fb01 f303 	mul.w	r3, r1, r3
 800a112:	4413      	add	r3, r2
 800a114:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a118:	781a      	ldrb	r2, [r3, #0]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	211a      	movs	r1, #26
 800a124:	fb01 f303 	mul.w	r3, r1, r3
 800a128:	4413      	add	r3, r2
 800a12a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a12e:	881a      	ldrh	r2, [r3, #0]
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	211a      	movs	r1, #26
 800a13a:	fb01 f303 	mul.w	r3, r1, r3
 800a13e:	4413      	add	r3, r2
 800a140:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	b25b      	sxtb	r3, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	da16      	bge.n	800a17a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	211a      	movs	r1, #26
 800a152:	fb01 f303 	mul.w	r3, r1, r3
 800a156:	4413      	add	r3, r2
 800a158:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a15c:	781a      	ldrb	r2, [r3, #0]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	211a      	movs	r1, #26
 800a168:	fb01 f303 	mul.w	r3, r1, r3
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a172:	881a      	ldrh	r2, [r3, #0]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	835a      	strh	r2, [r3, #26]
 800a178:	e015      	b.n	800a1a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	211a      	movs	r1, #26
 800a180:	fb01 f303 	mul.w	r3, r1, r3
 800a184:	4413      	add	r3, r2
 800a186:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a18a:	781a      	ldrb	r2, [r3, #0]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	211a      	movs	r1, #26
 800a196:	fb01 f303 	mul.w	r3, r1, r3
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a1a0:	881a      	ldrh	r2, [r3, #0]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	7b9b      	ldrb	r3, [r3, #14]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f002 f97e 	bl	800c4ae <USBH_AllocPipe>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	7bdb      	ldrb	r3, [r3, #15]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f002 f974 	bl	800c4ae <USBH_AllocPipe>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	7b59      	ldrb	r1, [r3, #13]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	7b98      	ldrb	r0, [r3, #14]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	8b12      	ldrh	r2, [r2, #24]
 800a1e6:	9202      	str	r2, [sp, #8]
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	9201      	str	r2, [sp, #4]
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	4623      	mov	r3, r4
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f002 f92c 	bl	800c450 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	7b19      	ldrb	r1, [r3, #12]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	7bd8      	ldrb	r0, [r3, #15]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	8b52      	ldrh	r2, [r2, #26]
 800a210:	9202      	str	r2, [sp, #8]
 800a212:	2202      	movs	r2, #2
 800a214:	9201      	str	r2, [sp, #4]
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	4623      	mov	r3, r4
 800a21a:	4602      	mov	r2, r0
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f002 f917 	bl	800c450 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	7b5b      	ldrb	r3, [r3, #13]
 800a22e:	2200      	movs	r2, #0
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f007 fab2 	bl	801179c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	7b1b      	ldrb	r3, [r3, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f007 faab 	bl	801179c <USBH_LL_SetToggle>

  return USBH_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd90      	pop	{r4, r7, pc}

0800a250 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a25e:	69db      	ldr	r3, [r3, #28]
 800a260:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00e      	beq.n	800a288 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f002 f90c 	bl	800c48e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f002 f937 	bl	800c4f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	7b1b      	ldrb	r3, [r3, #12]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00e      	beq.n	800a2ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	7b1b      	ldrb	r3, [r3, #12]
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f002 f8f9 	bl	800c48e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	7b1b      	ldrb	r3, [r3, #12]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f002 f924 	bl	800c4f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	7b5b      	ldrb	r3, [r3, #13]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00e      	beq.n	800a2d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	7b5b      	ldrb	r3, [r3, #13]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f002 f8e6 	bl	800c48e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	7b5b      	ldrb	r3, [r3, #13]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f002 f911 	bl	800c4f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2da:	69db      	ldr	r3, [r3, #28]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00b      	beq.n	800a2f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f007 fae5 	bl	80118b8 <free>
    phost->pActiveClass->pData = 0U;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3340      	adds	r3, #64	; 0x40
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f8b1 	bl	800a482 <GetLineCoding>
 800a320:	4603      	mov	r3, r0
 800a322:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a324:	7afb      	ldrb	r3, [r7, #11]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d105      	bne.n	800a336 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a330:	2102      	movs	r1, #2
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a336:	7afb      	ldrb	r3, [r7, #11]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a348:	2301      	movs	r3, #1
 800a34a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a360:	2b04      	cmp	r3, #4
 800a362:	d877      	bhi.n	800a454 <USBH_CDC_Process+0x114>
 800a364:	a201      	add	r2, pc, #4	; (adr r2, 800a36c <USBH_CDC_Process+0x2c>)
 800a366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36a:	bf00      	nop
 800a36c:	0800a381 	.word	0x0800a381
 800a370:	0800a387 	.word	0x0800a387
 800a374:	0800a3b7 	.word	0x0800a3b7
 800a378:	0800a42b 	.word	0x0800a42b
 800a37c:	0800a439 	.word	0x0800a439
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	73fb      	strb	r3, [r7, #15]
      break;
 800a384:	e06d      	b.n	800a462 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f897 	bl	800a4c0 <SetLineCoding>
 800a392:	4603      	mov	r3, r0
 800a394:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a396:	7bbb      	ldrb	r3, [r7, #14]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d104      	bne.n	800a3a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a3a4:	e058      	b.n	800a458 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d055      	beq.n	800a458 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2204      	movs	r2, #4
 800a3b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a3b4:	e050      	b.n	800a458 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	3340      	adds	r3, #64	; 0x40
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f860 	bl	800a482 <GetLineCoding>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a3c6:	7bbb      	ldrb	r3, [r7, #14]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d126      	bne.n	800a41a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3de:	791b      	ldrb	r3, [r3, #4]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d13b      	bne.n	800a45c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d133      	bne.n	800a45c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a400:	429a      	cmp	r2, r3
 800a402:	d12b      	bne.n	800a45c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a40c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a40e:	429a      	cmp	r2, r3
 800a410:	d124      	bne.n	800a45c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f982 	bl	800a71c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a418:	e020      	b.n	800a45c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a41a:	7bbb      	ldrb	r3, [r7, #14]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d01d      	beq.n	800a45c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	2204      	movs	r2, #4
 800a424:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a428:	e018      	b.n	800a45c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f867 	bl	800a4fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 f8f6 	bl	800a622 <CDC_ProcessReception>
      break;
 800a436:	e014      	b.n	800a462 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a438:	2100      	movs	r1, #0
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f001 f98a 	bl	800b754 <USBH_ClrFeature>
 800a440:	4603      	mov	r3, r0
 800a442:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a444:	7bbb      	ldrb	r3, [r7, #14]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10a      	bne.n	800a460 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a452:	e005      	b.n	800a460 <USBH_CDC_Process+0x120>

    default:
      break;
 800a454:	bf00      	nop
 800a456:	e004      	b.n	800a462 <USBH_CDC_Process+0x122>
      break;
 800a458:	bf00      	nop
 800a45a:	e002      	b.n	800a462 <USBH_CDC_Process+0x122>
      break;
 800a45c:	bf00      	nop
 800a45e:	e000      	b.n	800a462 <USBH_CDC_Process+0x122>
      break;
 800a460:	bf00      	nop

  }

  return status;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b082      	sub	sp, #8
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	22a1      	movs	r2, #161	; 0xa1
 800a490:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2221      	movs	r2, #33	; 0x21
 800a496:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2207      	movs	r2, #7
 800a4a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2207      	movs	r2, #7
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 fc8b 	bl	800bdcc <USBH_CtlReq>
 800a4b6:	4603      	mov	r3, r0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2221      	movs	r2, #33	; 0x21
 800a4ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2207      	movs	r2, #7
 800a4e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	2207      	movs	r2, #7
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f001 fc6c 	bl	800bdcc <USBH_CtlReq>
 800a4f4:	4603      	mov	r3, r0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b086      	sub	sp, #24
 800a502:	af02      	add	r7, sp, #8
 800a504:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a50c:	69db      	ldr	r3, [r3, #28]
 800a50e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a510:	2300      	movs	r3, #0
 800a512:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d002      	beq.n	800a524 <CDC_ProcessTransmission+0x26>
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d023      	beq.n	800a56a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a522:	e07a      	b.n	800a61a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	8b12      	ldrh	r2, [r2, #24]
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d90b      	bls.n	800a548 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	69d9      	ldr	r1, [r3, #28]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	8b1a      	ldrh	r2, [r3, #24]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	7b5b      	ldrb	r3, [r3, #13]
 800a53c:	2001      	movs	r0, #1
 800a53e:	9000      	str	r0, [sp, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f001 ff42 	bl	800c3ca <USBH_BulkSendData>
 800a546:	e00b      	b.n	800a560 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a550:	b29a      	uxth	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	7b5b      	ldrb	r3, [r3, #13]
 800a556:	2001      	movs	r0, #1
 800a558:	9000      	str	r0, [sp, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f001 ff35 	bl	800c3ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2202      	movs	r2, #2
 800a564:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a568:	e057      	b.n	800a61a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	7b5b      	ldrb	r3, [r3, #13]
 800a56e:	4619      	mov	r1, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f007 f8e9 	bl	8011748 <USBH_LL_GetURBState>
 800a576:	4603      	mov	r3, r0
 800a578:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a57a:	7afb      	ldrb	r3, [r7, #11]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d136      	bne.n	800a5ee <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	8b12      	ldrh	r2, [r2, #24]
 800a588:	4293      	cmp	r3, r2
 800a58a:	d90e      	bls.n	800a5aa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	8b12      	ldrh	r2, [r2, #24]
 800a594:	1a9a      	subs	r2, r3, r2
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	8b12      	ldrh	r2, [r2, #24]
 800a5a2:	441a      	add	r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	61da      	str	r2, [r3, #28]
 800a5a8:	e002      	b.n	800a5b0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d004      	beq.n	800a5c2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a5c0:	e006      	b.n	800a5d0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f892 	bl	800a6f4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2204      	movs	r2, #4
 800a5d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f004 f854 	bl	800e694 <osMessageQueuePut>
      break;
 800a5ec:	e014      	b.n	800a618 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a5ee:	7afb      	ldrb	r3, [r7, #11]
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d111      	bne.n	800a618 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2204      	movs	r2, #4
 800a600:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a610:	2300      	movs	r3, #0
 800a612:	2200      	movs	r2, #0
 800a614:	f004 f83e 	bl	800e694 <osMessageQueuePut>
      break;
 800a618:	bf00      	nop
  }
}
 800a61a:	bf00      	nop
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b086      	sub	sp, #24
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a634:	2300      	movs	r3, #0
 800a636:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a63e:	2b03      	cmp	r3, #3
 800a640:	d002      	beq.n	800a648 <CDC_ProcessReception+0x26>
 800a642:	2b04      	cmp	r3, #4
 800a644:	d00e      	beq.n	800a664 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a646:	e051      	b.n	800a6ec <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	6a19      	ldr	r1, [r3, #32]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	8b5a      	ldrh	r2, [r3, #26]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	7b1b      	ldrb	r3, [r3, #12]
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 fedd 	bl	800c414 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2204      	movs	r2, #4
 800a65e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a662:	e043      	b.n	800a6ec <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	7b1b      	ldrb	r3, [r3, #12]
 800a668:	4619      	mov	r1, r3
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f007 f86c 	bl	8011748 <USBH_LL_GetURBState>
 800a670:	4603      	mov	r3, r0
 800a672:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a674:	7cfb      	ldrb	r3, [r7, #19]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d137      	bne.n	800a6ea <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	7b1b      	ldrb	r3, [r3, #12]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f006 ffcf 	bl	8011624 <USBH_LL_GetLastXferSize>
 800a686:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d016      	beq.n	800a6c0 <CDC_ProcessReception+0x9e>
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	8b5b      	ldrh	r3, [r3, #26]
 800a696:	461a      	mov	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d110      	bne.n	800a6c0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	1ad2      	subs	r2, r2, r3
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	6a1a      	ldr	r2, [r3, #32]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	441a      	add	r2, r3
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2203      	movs	r2, #3
 800a6ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a6be:	e006      	b.n	800a6ce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f81d 	bl	800a708 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2204      	movs	r2, #4
 800a6d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f003 ffd5 	bl	800e694 <osMessageQueuePut>
      break;
 800a6ea:	bf00      	nop
  }
}
 800a6ec:	bf00      	nop
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	4613      	mov	r3, r2
 800a73c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d101      	bne.n	800a748 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a744:	2302      	movs	r3, #2
 800a746:	e044      	b.n	800a7d2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	79fa      	ldrb	r2, [r7, #7]
 800a74c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 f841 	bl	800a7e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a794:	2200      	movs	r2, #0
 800a796:	2104      	movs	r1, #4
 800a798:	2010      	movs	r0, #16
 800a79a:	f003 ff08 	bl	800e5ae <osMessageQueueNew>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a7a6:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <USBH_Init+0xac>)
 800a7a8:	4a0d      	ldr	r2, [pc, #52]	; (800a7e0 <USBH_Init+0xb0>)
 800a7aa:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a7ac:	4b0b      	ldr	r3, [pc, #44]	; (800a7dc <USBH_Init+0xac>)
 800a7ae:	2280      	movs	r2, #128	; 0x80
 800a7b0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a7b2:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <USBH_Init+0xac>)
 800a7b4:	2218      	movs	r2, #24
 800a7b6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a7b8:	4a08      	ldr	r2, [pc, #32]	; (800a7dc <USBH_Init+0xac>)
 800a7ba:	68f9      	ldr	r1, [r7, #12]
 800a7bc:	4809      	ldr	r0, [pc, #36]	; (800a7e4 <USBH_Init+0xb4>)
 800a7be:	f003 fe49 	bl	800e454 <osThreadNew>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f006 fe6c 	bl	80114a8 <USBH_LL_Init>

  return USBH_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	200003c4 	.word	0x200003c4
 800a7e0:	08011b94 	.word	0x08011b94
 800a7e4:	0800b4a5 	.word	0x0800b4a5

0800a7e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e009      	b.n	800a80e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	33e0      	adds	r3, #224	; 0xe0
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	2200      	movs	r2, #0
 800a806:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	3301      	adds	r3, #1
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b0f      	cmp	r3, #15
 800a812:	d9f2      	bls.n	800a7fa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a814:	2300      	movs	r3, #0
 800a816:	60fb      	str	r3, [r7, #12]
 800a818:	e009      	b.n	800a82e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a824:	2200      	movs	r2, #0
 800a826:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	3301      	adds	r3, #1
 800a82c:	60fb      	str	r3, [r7, #12]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a834:	d3f1      	bcc.n	800a81a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2240      	movs	r2, #64	; 0x40
 800a85a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	331c      	adds	r3, #28
 800a886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a88a:	2100      	movs	r1, #0
 800a88c:	4618      	mov	r0, r3
 800a88e:	f007 f8c7 	bl	8011a20 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a89c:	2100      	movs	r1, #0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f007 f8be 	bl	8011a20 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f203 3326 	addw	r3, r3, #806	; 0x326
 800a8aa:	2212      	movs	r2, #18
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f007 f8b6 	bl	8011a20 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a8ba:	223e      	movs	r2, #62	; 0x3e
 800a8bc:	2100      	movs	r1, #0
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f007 f8ae 	bl	8011a20 <memset>

  return USBH_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b085      	sub	sp, #20
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d016      	beq.n	800a910 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10e      	bne.n	800a90a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a8f2:	1c59      	adds	r1, r3, #1
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	33de      	adds	r3, #222	; 0xde
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	73fb      	strb	r3, [r7, #15]
 800a908:	e004      	b.n	800a914 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a90a:	2302      	movs	r3, #2
 800a90c:	73fb      	strb	r3, [r7, #15]
 800a90e:	e001      	b.n	800a914 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a910:	2302      	movs	r3, #2
 800a912:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a914:	7bfb      	ldrb	r3, [r7, #15]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a922:	b480      	push	{r7}
 800a924:	b085      	sub	sp, #20
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	460b      	mov	r3, r1
 800a92c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a92e:	2300      	movs	r3, #0
 800a930:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a938:	78fa      	ldrb	r2, [r7, #3]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d204      	bcs.n	800a948 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	78fa      	ldrb	r2, [r7, #3]
 800a942:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a946:	e001      	b.n	800a94c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a948:	2302      	movs	r3, #2
 800a94a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b087      	sub	sp, #28
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	4608      	mov	r0, r1
 800a964:	4611      	mov	r1, r2
 800a966:	461a      	mov	r2, r3
 800a968:	4603      	mov	r3, r0
 800a96a:	70fb      	strb	r3, [r7, #3]
 800a96c:	460b      	mov	r3, r1
 800a96e:	70bb      	strb	r3, [r7, #2]
 800a970:	4613      	mov	r3, r2
 800a972:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a974:	2300      	movs	r3, #0
 800a976:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a978:	2300      	movs	r3, #0
 800a97a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a982:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a984:	e025      	b.n	800a9d2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a986:	7dfb      	ldrb	r3, [r7, #23]
 800a988:	221a      	movs	r2, #26
 800a98a:	fb02 f303 	mul.w	r3, r2, r3
 800a98e:	3308      	adds	r3, #8
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	4413      	add	r3, r2
 800a994:	3302      	adds	r3, #2
 800a996:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	795b      	ldrb	r3, [r3, #5]
 800a99c:	78fa      	ldrb	r2, [r7, #3]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d002      	beq.n	800a9a8 <USBH_FindInterface+0x4e>
 800a9a2:	78fb      	ldrb	r3, [r7, #3]
 800a9a4:	2bff      	cmp	r3, #255	; 0xff
 800a9a6:	d111      	bne.n	800a9cc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a9ac:	78ba      	ldrb	r2, [r7, #2]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d002      	beq.n	800a9b8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a9b2:	78bb      	ldrb	r3, [r7, #2]
 800a9b4:	2bff      	cmp	r3, #255	; 0xff
 800a9b6:	d109      	bne.n	800a9cc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a9bc:	787a      	ldrb	r2, [r7, #1]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d002      	beq.n	800a9c8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a9c2:	787b      	ldrb	r3, [r7, #1]
 800a9c4:	2bff      	cmp	r3, #255	; 0xff
 800a9c6:	d101      	bne.n	800a9cc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a9c8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ca:	e006      	b.n	800a9da <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a9d2:	7dfb      	ldrb	r3, [r7, #23]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d9d6      	bls.n	800a986 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a9d8:	23ff      	movs	r3, #255	; 0xff
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	371c      	adds	r7, #28
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f006 fda0 	bl	8011534 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a9f4:	2101      	movs	r1, #1
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f006 feb9 	bl	801176e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af04      	add	r7, sp, #16
 800aa0e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800aa10:	2302      	movs	r3, #2
 800aa12:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800aa14:	2300      	movs	r3, #0
 800aa16:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d102      	bne.n	800aa2a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2203      	movs	r2, #3
 800aa28:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2b0b      	cmp	r3, #11
 800aa32:	f200 8247 	bhi.w	800aec4 <USBH_Process+0x4bc>
 800aa36:	a201      	add	r2, pc, #4	; (adr r2, 800aa3c <USBH_Process+0x34>)
 800aa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3c:	0800aa6d 	.word	0x0800aa6d
 800aa40:	0800aabb 	.word	0x0800aabb
 800aa44:	0800ab3f 	.word	0x0800ab3f
 800aa48:	0800ae43 	.word	0x0800ae43
 800aa4c:	0800aec5 	.word	0x0800aec5
 800aa50:	0800abff 	.word	0x0800abff
 800aa54:	0800adcd 	.word	0x0800adcd
 800aa58:	0800ac51 	.word	0x0800ac51
 800aa5c:	0800ac8d 	.word	0x0800ac8d
 800aa60:	0800acc7 	.word	0x0800acc7
 800aa64:	0800ad25 	.word	0x0800ad25
 800aa68:	0800ae2b 	.word	0x0800ae2b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 8227 	beq.w	800aec8 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aa80:	20c8      	movs	r0, #200	; 0xc8
 800aa82:	f006 febe 	bl	8011802 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f006 fdb1 	bl	80115ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aab0:	2300      	movs	r3, #0
 800aab2:	2200      	movs	r2, #0
 800aab4:	f003 fdee 	bl	800e694 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800aab8:	e206      	b.n	800aec8 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d107      	bne.n	800aad4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	701a      	strb	r2, [r3, #0]
 800aad2:	e025      	b.n	800ab20 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aade:	d914      	bls.n	800ab0a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aae6:	3301      	adds	r3, #1
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d903      	bls.n	800ab02 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	220d      	movs	r2, #13
 800aafe:	701a      	strb	r2, [r3, #0]
 800ab00:	e00e      	b.n	800ab20 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]
 800ab08:	e00a      	b.n	800ab20 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab10:	f103 020a 	add.w	r2, r3, #10
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ab1a:	200a      	movs	r0, #10
 800ab1c:	f006 fe71 	bl	8011802 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ab34:	2300      	movs	r3, #0
 800ab36:	2200      	movs	r2, #0
 800ab38:	f003 fdac 	bl	800e694 <osMessageQueuePut>
#endif
#endif
      break;
 800ab3c:	e1cb      	b.n	800aed6 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d005      	beq.n	800ab54 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab4e:	2104      	movs	r1, #4
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ab54:	2064      	movs	r0, #100	; 0x64
 800ab56:	f006 fe54 	bl	8011802 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f006 fd20 	bl	80115a0 <USBH_LL_GetSpeed>
 800ab60:	4603      	mov	r3, r0
 800ab62:	461a      	mov	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2205      	movs	r2, #5
 800ab6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ab70:	2100      	movs	r1, #0
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 fc9b 	bl	800c4ae <USBH_AllocPipe>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ab80:	2180      	movs	r1, #128	; 0x80
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 fc93 	bl	800c4ae <USBH_AllocPipe>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7919      	ldrb	r1, [r3, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aba4:	b292      	uxth	r2, r2
 800aba6:	9202      	str	r2, [sp, #8]
 800aba8:	2200      	movs	r2, #0
 800abaa:	9201      	str	r2, [sp, #4]
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	4603      	mov	r3, r0
 800abb0:	2280      	movs	r2, #128	; 0x80
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f001 fc4c 	bl	800c450 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	7959      	ldrb	r1, [r3, #5]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800abcc:	b292      	uxth	r2, r2
 800abce:	9202      	str	r2, [sp, #8]
 800abd0:	2200      	movs	r2, #0
 800abd2:	9201      	str	r2, [sp, #4]
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	4603      	mov	r3, r0
 800abd8:	2200      	movs	r2, #0
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f001 fc38 	bl	800c450 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800abf4:	2300      	movs	r3, #0
 800abf6:	2200      	movs	r2, #0
 800abf8:	f003 fd4c 	bl	800e694 <osMessageQueuePut>
#endif
#endif
      break;
 800abfc:	e16b      	b.n	800aed6 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f96e 	bl	800aee0 <USBH_HandleEnum>
 800ac04:	4603      	mov	r3, r0
 800ac06:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f040 815d 	bne.w	800aecc <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d103      	bne.n	800ac2c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2208      	movs	r2, #8
 800ac28:	701a      	strb	r2, [r3, #0]
 800ac2a:	e002      	b.n	800ac32 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2207      	movs	r2, #7
 800ac30:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2205      	movs	r2, #5
 800ac36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ac46:	2300      	movs	r3, #0
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f003 fd23 	bl	800e694 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800ac4e:	e13d      	b.n	800aecc <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 813a 	beq.w	800aed0 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac62:	2101      	movs	r1, #1
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2208      	movs	r2, #8
 800ac6c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2205      	movs	r2, #5
 800ac72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ac82:	2300      	movs	r3, #0
 800ac84:	2200      	movs	r2, #0
 800ac86:	f003 fd05 	bl	800e694 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800ac8a:	e121      	b.n	800aed0 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fd15 	bl	800b6c6 <USBH_SetCfg>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d102      	bne.n	800aca8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2209      	movs	r2, #9
 800aca6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800acbc:	2300      	movs	r3, #0
 800acbe:	2200      	movs	r2, #0
 800acc0:	f003 fce8 	bl	800e694 <osMessageQueuePut>
#endif
#endif
      break;
 800acc4:	e107      	b.n	800aed6 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800accc:	f003 0320 	and.w	r3, r3, #32
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d015      	beq.n	800ad00 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800acd4:	2101      	movs	r1, #1
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fd18 	bl	800b70c <USBH_SetFeature>
 800acdc:	4603      	mov	r3, r0
 800acde:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d103      	bne.n	800acf0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	220a      	movs	r2, #10
 800acec:	701a      	strb	r2, [r3, #0]
 800acee:	e00a      	b.n	800ad06 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	d106      	bne.n	800ad06 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	220a      	movs	r2, #10
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	e002      	b.n	800ad06 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	220a      	movs	r2, #10
 800ad04:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f003 fcb9 	bl	800e694 <osMessageQueuePut>
#endif
#endif
      break;
 800ad22:	e0d8      	b.n	800aed6 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d03f      	beq.n	800adae <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ad36:	2300      	movs	r3, #0
 800ad38:	73fb      	strb	r3, [r7, #15]
 800ad3a:	e016      	b.n	800ad6a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ad3c:	7bfa      	ldrb	r2, [r7, #15]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	32de      	adds	r2, #222	; 0xde
 800ad42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad46:	791a      	ldrb	r2, [r3, #4]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d108      	bne.n	800ad64 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ad52:	7bfa      	ldrb	r2, [r7, #15]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	32de      	adds	r2, #222	; 0xde
 800ad58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ad62:	e005      	b.n	800ad70 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ad64:	7bfb      	ldrb	r3, [r7, #15]
 800ad66:	3301      	adds	r3, #1
 800ad68:	73fb      	strb	r3, [r7, #15]
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d0e5      	beq.n	800ad3c <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d016      	beq.n	800ada8 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	4798      	blx	r3
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d109      	bne.n	800ada0 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2206      	movs	r2, #6
 800ad90:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad98:	2103      	movs	r1, #3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	4798      	blx	r3
 800ad9e:	e006      	b.n	800adae <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	220d      	movs	r2, #13
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	e002      	b.n	800adae <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	220d      	movs	r2, #13
 800adac:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2205      	movs	r2, #5
 800adb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800adc2:	2300      	movs	r3, #0
 800adc4:	2200      	movs	r2, #0
 800adc6:	f003 fc65 	bl	800e694 <osMessageQueuePut>
#endif
#endif
      break;
 800adca:	e084      	b.n	800aed6 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800add2:	2b00      	cmp	r3, #0
 800add4:	d017      	beq.n	800ae06 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	4798      	blx	r3
 800ade2:	4603      	mov	r3, r0
 800ade4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	2b00      	cmp	r3, #0
 800adec:	d103      	bne.n	800adf6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	220b      	movs	r2, #11
 800adf2:	701a      	strb	r2, [r3, #0]
 800adf4:	e00a      	b.n	800ae0c <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d106      	bne.n	800ae0c <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	220d      	movs	r2, #13
 800ae02:	701a      	strb	r2, [r3, #0]
 800ae04:	e002      	b.n	800ae0c <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	220d      	movs	r2, #13
 800ae0a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2205      	movs	r2, #5
 800ae10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae20:	2300      	movs	r3, #0
 800ae22:	2200      	movs	r2, #0
 800ae24:	f003 fc36 	bl	800e694 <osMessageQueuePut>
#endif
#endif
      break;
 800ae28:	e055      	b.n	800aed6 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d04f      	beq.n	800aed4 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae3a:	695b      	ldr	r3, [r3, #20]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	4798      	blx	r3
      }
      break;
 800ae40:	e048      	b.n	800aed4 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7ff fccc 	bl	800a7e8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d009      	beq.n	800ae6e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d005      	beq.n	800ae84 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae7e:	2105      	movs	r1, #5
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d107      	bne.n	800aea0 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7ff fda4 	bl	800a9e6 <USBH_Start>
 800ae9e:	e002      	b.n	800aea6 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f006 fb47 	bl	8011534 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aeba:	2300      	movs	r3, #0
 800aebc:	2200      	movs	r2, #0
 800aebe:	f003 fbe9 	bl	800e694 <osMessageQueuePut>
#endif
#endif
      break;
 800aec2:	e008      	b.n	800aed6 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800aec4:	bf00      	nop
 800aec6:	e006      	b.n	800aed6 <USBH_Process+0x4ce>
      break;
 800aec8:	bf00      	nop
 800aeca:	e004      	b.n	800aed6 <USBH_Process+0x4ce>
      break;
 800aecc:	bf00      	nop
 800aece:	e002      	b.n	800aed6 <USBH_Process+0x4ce>
    break;
 800aed0:	bf00      	nop
 800aed2:	e000      	b.n	800aed6 <USBH_Process+0x4ce>
      break;
 800aed4:	bf00      	nop
  }
  return USBH_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af04      	add	r7, sp, #16
 800aee6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aee8:	2301      	movs	r3, #1
 800aeea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aeec:	2301      	movs	r3, #1
 800aeee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	785b      	ldrb	r3, [r3, #1]
 800aef4:	2b07      	cmp	r3, #7
 800aef6:	f200 8208 	bhi.w	800b30a <USBH_HandleEnum+0x42a>
 800aefa:	a201      	add	r2, pc, #4	; (adr r2, 800af00 <USBH_HandleEnum+0x20>)
 800aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af00:	0800af21 	.word	0x0800af21
 800af04:	0800afdf 	.word	0x0800afdf
 800af08:	0800b049 	.word	0x0800b049
 800af0c:	0800b0d7 	.word	0x0800b0d7
 800af10:	0800b141 	.word	0x0800b141
 800af14:	0800b1b1 	.word	0x0800b1b1
 800af18:	0800b24d 	.word	0x0800b24d
 800af1c:	0800b2cb 	.word	0x0800b2cb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800af20:	2108      	movs	r1, #8
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 faec 	bl	800b500 <USBH_Get_DevDesc>
 800af28:	4603      	mov	r3, r0
 800af2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d130      	bne.n	800af94 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	7919      	ldrb	r1, [r3, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800af56:	b292      	uxth	r2, r2
 800af58:	9202      	str	r2, [sp, #8]
 800af5a:	2200      	movs	r2, #0
 800af5c:	9201      	str	r2, [sp, #4]
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	4603      	mov	r3, r0
 800af62:	2280      	movs	r2, #128	; 0x80
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 fa73 	bl	800c450 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	7959      	ldrb	r1, [r3, #5]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af7e:	b292      	uxth	r2, r2
 800af80:	9202      	str	r2, [sp, #8]
 800af82:	2200      	movs	r2, #0
 800af84:	9201      	str	r2, [sp, #4]
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	4603      	mov	r3, r0
 800af8a:	2200      	movs	r2, #0
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f001 fa5f 	bl	800c450 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800af92:	e1bc      	b.n	800b30e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	2b03      	cmp	r3, #3
 800af98:	f040 81b9 	bne.w	800b30e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800afa2:	3301      	adds	r3, #1
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	d903      	bls.n	800afbe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	220d      	movs	r2, #13
 800afba:	701a      	strb	r2, [r3, #0]
      break;
 800afbc:	e1a7      	b.n	800b30e <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	795b      	ldrb	r3, [r3, #5]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 fa93 	bl	800c4f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	791b      	ldrb	r3, [r3, #4]
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f001 fa8d 	bl	800c4f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	701a      	strb	r2, [r3, #0]
      break;
 800afdc:	e197      	b.n	800b30e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800afde:	2112      	movs	r1, #18
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fa8d 	bl	800b500 <USBH_Get_DevDesc>
 800afe6:	4603      	mov	r3, r0
 800afe8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d103      	bne.n	800aff8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2202      	movs	r2, #2
 800aff4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aff6:	e18c      	b.n	800b312 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aff8:	7bbb      	ldrb	r3, [r7, #14]
 800affa:	2b03      	cmp	r3, #3
 800affc:	f040 8189 	bne.w	800b312 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b006:	3301      	adds	r3, #1
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b016:	2b03      	cmp	r3, #3
 800b018:	d903      	bls.n	800b022 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	220d      	movs	r2, #13
 800b01e:	701a      	strb	r2, [r3, #0]
      break;
 800b020:	e177      	b.n	800b312 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	795b      	ldrb	r3, [r3, #5]
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f001 fa61 	bl	800c4f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	791b      	ldrb	r3, [r3, #4]
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f001 fa5b 	bl	800c4f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	701a      	strb	r2, [r3, #0]
      break;
 800b046:	e164      	b.n	800b312 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b048:	2101      	movs	r1, #1
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fb17 	bl	800b67e <USBH_SetAddress>
 800b050:	4603      	mov	r3, r0
 800b052:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d132      	bne.n	800b0c0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b05a:	2002      	movs	r0, #2
 800b05c:	f006 fbd1 	bl	8011802 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2203      	movs	r2, #3
 800b06c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	7919      	ldrb	r1, [r3, #4]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b082:	b292      	uxth	r2, r2
 800b084:	9202      	str	r2, [sp, #8]
 800b086:	2200      	movs	r2, #0
 800b088:	9201      	str	r2, [sp, #4]
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	4603      	mov	r3, r0
 800b08e:	2280      	movs	r2, #128	; 0x80
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f001 f9dd 	bl	800c450 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	7959      	ldrb	r1, [r3, #5]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0aa:	b292      	uxth	r2, r2
 800b0ac:	9202      	str	r2, [sp, #8]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	9201      	str	r2, [sp, #4]
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 f9c9 	bl	800c450 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b0be:	e12a      	b.n	800b316 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	f040 8127 	bne.w	800b316 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	220d      	movs	r2, #13
 800b0cc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	705a      	strb	r2, [r3, #1]
      break;
 800b0d4:	e11f      	b.n	800b316 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b0d6:	2109      	movs	r1, #9
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fa3d 	bl	800b558 <USBH_Get_CfgDesc>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d103      	bne.n	800b0f0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2204      	movs	r2, #4
 800b0ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b0ee:	e114      	b.n	800b31a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	f040 8111 	bne.w	800b31a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0fe:	3301      	adds	r3, #1
 800b100:	b2da      	uxtb	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b10e:	2b03      	cmp	r3, #3
 800b110:	d903      	bls.n	800b11a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	220d      	movs	r2, #13
 800b116:	701a      	strb	r2, [r3, #0]
      break;
 800b118:	e0ff      	b.n	800b31a <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	795b      	ldrb	r3, [r3, #5]
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f001 f9e5 	bl	800c4f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	791b      	ldrb	r3, [r3, #4]
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f001 f9df 	bl	800c4f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	701a      	strb	r2, [r3, #0]
      break;
 800b13e:	e0ec      	b.n	800b31a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fa05 	bl	800b558 <USBH_Get_CfgDesc>
 800b14e:	4603      	mov	r3, r0
 800b150:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d103      	bne.n	800b160 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2205      	movs	r2, #5
 800b15c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b15e:	e0de      	b.n	800b31e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	2b03      	cmp	r3, #3
 800b164:	f040 80db 	bne.w	800b31e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b16e:	3301      	adds	r3, #1
 800b170:	b2da      	uxtb	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d903      	bls.n	800b18a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	220d      	movs	r2, #13
 800b186:	701a      	strb	r2, [r3, #0]
      break;
 800b188:	e0c9      	b.n	800b31e <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	795b      	ldrb	r3, [r3, #5]
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f001 f9ad 	bl	800c4f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	791b      	ldrb	r3, [r3, #4]
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f001 f9a7 	bl	800c4f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	701a      	strb	r2, [r3, #0]
      break;
 800b1ae:	e0b6      	b.n	800b31e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d036      	beq.n	800b228 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b1c6:	23ff      	movs	r3, #255	; 0xff
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f9ef 	bl	800b5ac <USBH_Get_StringDesc>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d111      	bne.n	800b1fc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2206      	movs	r2, #6
 800b1dc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2205      	movs	r2, #5
 800b1e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f003 fa4d 	bl	800e694 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b1fa:	e092      	b.n	800b322 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	f040 808f 	bne.w	800b322 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2206      	movs	r2, #6
 800b208:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2205      	movs	r2, #5
 800b20e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b21e:	2300      	movs	r3, #0
 800b220:	2200      	movs	r2, #0
 800b222:	f003 fa37 	bl	800e694 <osMessageQueuePut>
      break;
 800b226:	e07c      	b.n	800b322 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2206      	movs	r2, #6
 800b22c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2205      	movs	r2, #5
 800b232:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b242:	2300      	movs	r3, #0
 800b244:	2200      	movs	r2, #0
 800b246:	f003 fa25 	bl	800e694 <osMessageQueuePut>
      break;
 800b24a:	e06a      	b.n	800b322 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b252:	2b00      	cmp	r3, #0
 800b254:	d027      	beq.n	800b2a6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b262:	23ff      	movs	r3, #255	; 0xff
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f9a1 	bl	800b5ac <USBH_Get_StringDesc>
 800b26a:	4603      	mov	r3, r0
 800b26c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b26e:	7bbb      	ldrb	r3, [r7, #14]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d103      	bne.n	800b27c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2207      	movs	r2, #7
 800b278:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b27a:	e054      	b.n	800b326 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b27c:	7bbb      	ldrb	r3, [r7, #14]
 800b27e:	2b03      	cmp	r3, #3
 800b280:	d151      	bne.n	800b326 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2207      	movs	r2, #7
 800b286:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2205      	movs	r2, #5
 800b28c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b29c:	2300      	movs	r3, #0
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f003 f9f8 	bl	800e694 <osMessageQueuePut>
      break;
 800b2a4:	e03f      	b.n	800b326 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2207      	movs	r2, #7
 800b2aa:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2205      	movs	r2, #5
 800b2b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f003 f9e6 	bl	800e694 <osMessageQueuePut>
      break;
 800b2c8:	e02d      	b.n	800b326 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d017      	beq.n	800b304 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b2e0:	23ff      	movs	r3, #255	; 0xff
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f962 	bl	800b5ac <USBH_Get_StringDesc>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b2ec:	7bbb      	ldrb	r3, [r7, #14]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d102      	bne.n	800b2f8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b2f6:	e018      	b.n	800b32a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d115      	bne.n	800b32a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800b2fe:	2300      	movs	r3, #0
 800b300:	73fb      	strb	r3, [r7, #15]
      break;
 800b302:	e012      	b.n	800b32a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	73fb      	strb	r3, [r7, #15]
      break;
 800b308:	e00f      	b.n	800b32a <USBH_HandleEnum+0x44a>

    default:
      break;
 800b30a:	bf00      	nop
 800b30c:	e00e      	b.n	800b32c <USBH_HandleEnum+0x44c>
      break;
 800b30e:	bf00      	nop
 800b310:	e00c      	b.n	800b32c <USBH_HandleEnum+0x44c>
      break;
 800b312:	bf00      	nop
 800b314:	e00a      	b.n	800b32c <USBH_HandleEnum+0x44c>
      break;
 800b316:	bf00      	nop
 800b318:	e008      	b.n	800b32c <USBH_HandleEnum+0x44c>
      break;
 800b31a:	bf00      	nop
 800b31c:	e006      	b.n	800b32c <USBH_HandleEnum+0x44c>
      break;
 800b31e:	bf00      	nop
 800b320:	e004      	b.n	800b32c <USBH_HandleEnum+0x44c>
      break;
 800b322:	bf00      	nop
 800b324:	e002      	b.n	800b32c <USBH_HandleEnum+0x44c>
      break;
 800b326:	bf00      	nop
 800b328:	e000      	b.n	800b32c <USBH_HandleEnum+0x44c>
      break;
 800b32a:	bf00      	nop
  }
  return Status;
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop

0800b338 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b34a:	bf00      	nop
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b082      	sub	sp, #8
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f804 	bl	800b37a <USBH_HandleSof>
}
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b0b      	cmp	r3, #11
 800b38a:	d10a      	bne.n	800b3a2 <USBH_HandleSof+0x28>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b392:	2b00      	cmp	r3, #0
 800b394:	d005      	beq.n	800b3a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	4798      	blx	r3
  }
}
 800b3a2:	bf00      	nop
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f003 f95f 	bl	800e694 <osMessageQueuePut>
#endif
#endif

  return;
 800b3d6:	bf00      	nop
}
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b3de:	b480      	push	{r7}
 800b3e0:	b083      	sub	sp, #12
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b3ee:	bf00      	nop
}
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2201      	movs	r2, #1
 800b406:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b42e:	2300      	movs	r3, #0
 800b430:	2200      	movs	r2, #0
 800b432:	f003 f92f 	bl	800e694 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f006 f882 	bl	801156a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	791b      	ldrb	r3, [r3, #4]
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f001 f83f 	bl	800c4f0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	795b      	ldrb	r3, [r3, #5]
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f001 f839 	bl	800c4f0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2201      	movs	r2, #1
 800b482:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b492:	2300      	movs	r3, #0
 800b494:	2200      	movs	r2, #0
 800b496:	f003 f8fd 	bl	800e694 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f003 f949 	bl	800e754 <osMessageQueueGet>
 800b4c2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1f0      	bne.n	800b4ac <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7ff fa9c 	bl	800aa08 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b4d0:	e7ec      	b.n	800b4ac <USBH_Process_OS+0x8>

0800b4d2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b082      	sub	sp, #8
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f003 f8cf 	bl	800e694 <osMessageQueuePut>
#endif

  return USBH_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af02      	add	r7, sp, #8
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	460b      	mov	r3, r1
 800b50a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b50c:	887b      	ldrh	r3, [r7, #2]
 800b50e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b512:	d901      	bls.n	800b518 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b514:	2303      	movs	r3, #3
 800b516:	e01b      	b.n	800b550 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b51e:	887b      	ldrh	r3, [r7, #2]
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	4613      	mov	r3, r2
 800b524:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b528:	2100      	movs	r1, #0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f872 	bl	800b614 <USBH_GetDescriptor>
 800b530:	4603      	mov	r3, r0
 800b532:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b534:	7bfb      	ldrb	r3, [r7, #15]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d109      	bne.n	800b54e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b540:	887a      	ldrh	r2, [r7, #2]
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f929 	bl	800b79c <USBH_ParseDevDesc>
 800b54a:	4603      	mov	r3, r0
 800b54c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af02      	add	r7, sp, #8
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	460b      	mov	r3, r1
 800b562:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	331c      	adds	r3, #28
 800b568:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b56a:	887b      	ldrh	r3, [r7, #2]
 800b56c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b570:	d901      	bls.n	800b576 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b572:	2303      	movs	r3, #3
 800b574:	e016      	b.n	800b5a4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b576:	887b      	ldrh	r3, [r7, #2]
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b580:	2100      	movs	r1, #0
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f846 	bl	800b614 <USBH_GetDescriptor>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d107      	bne.n	800b5a2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b592:	887b      	ldrh	r3, [r7, #2]
 800b594:	461a      	mov	r2, r3
 800b596:	68b9      	ldr	r1, [r7, #8]
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 f9b3 	bl	800b904 <USBH_ParseCfgDesc>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af02      	add	r7, sp, #8
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	607a      	str	r2, [r7, #4]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	72fb      	strb	r3, [r7, #11]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b5c0:	893b      	ldrh	r3, [r7, #8]
 800b5c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5c6:	d802      	bhi.n	800b5ce <USBH_Get_StringDesc+0x22>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d101      	bne.n	800b5d2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b5ce:	2303      	movs	r3, #3
 800b5d0:	e01c      	b.n	800b60c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b5d2:	7afb      	ldrb	r3, [r7, #11]
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b5da:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b5e2:	893b      	ldrh	r3, [r7, #8]
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f000 f812 	bl	800b614 <USBH_GetDescriptor>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b5f4:	7dfb      	ldrb	r3, [r7, #23]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d107      	bne.n	800b60a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b600:	893a      	ldrh	r2, [r7, #8]
 800b602:	6879      	ldr	r1, [r7, #4]
 800b604:	4618      	mov	r0, r3
 800b606:	f000 fb93 	bl	800bd30 <USBH_ParseStringDesc>
  }

  return status;
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	607b      	str	r3, [r7, #4]
 800b61e:	460b      	mov	r3, r1
 800b620:	72fb      	strb	r3, [r7, #11]
 800b622:	4613      	mov	r3, r2
 800b624:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	789b      	ldrb	r3, [r3, #2]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d11c      	bne.n	800b668 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b62e:	7afb      	ldrb	r3, [r7, #11]
 800b630:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b634:	b2da      	uxtb	r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2206      	movs	r2, #6
 800b63e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	893a      	ldrh	r2, [r7, #8]
 800b644:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b646:	893b      	ldrh	r3, [r7, #8]
 800b648:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b64c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b650:	d104      	bne.n	800b65c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f240 4209 	movw	r2, #1033	; 0x409
 800b658:	829a      	strh	r2, [r3, #20]
 800b65a:	e002      	b.n	800b662 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	8b3a      	ldrh	r2, [r7, #24]
 800b666:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b668:	8b3b      	ldrh	r3, [r7, #24]
 800b66a:	461a      	mov	r2, r3
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f000 fbac 	bl	800bdcc <USBH_CtlReq>
 800b674:	4603      	mov	r3, r0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b082      	sub	sp, #8
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	460b      	mov	r3, r1
 800b688:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	789b      	ldrb	r3, [r3, #2]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d10f      	bne.n	800b6b2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2205      	movs	r2, #5
 800b69c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b69e:	78fb      	ldrb	r3, [r7, #3]
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fb88 	bl	800bdcc <USBH_CtlReq>
 800b6bc:	4603      	mov	r3, r0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	789b      	ldrb	r3, [r3, #2]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d10e      	bne.n	800b6f8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2209      	movs	r2, #9
 800b6e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	887a      	ldrh	r2, [r7, #2]
 800b6ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 fb65 	bl	800bdcc <USBH_CtlReq>
 800b702:	4603      	mov	r3, r0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3708      	adds	r7, #8
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	460b      	mov	r3, r1
 800b716:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	789b      	ldrb	r3, [r3, #2]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d10f      	bne.n	800b740 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2203      	movs	r2, #3
 800b72a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b72c:	78fb      	ldrb	r3, [r7, #3]
 800b72e:	b29a      	uxth	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b740:	2200      	movs	r2, #0
 800b742:	2100      	movs	r1, #0
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fb41 	bl	800bdcc <USBH_CtlReq>
 800b74a:	4603      	mov	r3, r0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	789b      	ldrb	r3, [r3, #2]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d10f      	bne.n	800b788 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2202      	movs	r2, #2
 800b76c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b77a:	78fb      	ldrb	r3, [r7, #3]
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b788:	2200      	movs	r2, #0
 800b78a:	2100      	movs	r1, #0
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fb1d 	bl	800bdcc <USBH_CtlReq>
 800b792:	4603      	mov	r3, r0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b087      	sub	sp, #28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b7b0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b7bc:	2302      	movs	r3, #2
 800b7be:	e098      	b.n	800b8f2 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	781a      	ldrb	r2, [r3, #0]
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	785a      	ldrb	r2, [r3, #1]
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	3302      	adds	r3, #2
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	3303      	adds	r3, #3
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	021b      	lsls	r3, r3, #8
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	791a      	ldrb	r2, [r3, #4]
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	795a      	ldrb	r2, [r3, #5]
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	799a      	ldrb	r2, [r3, #6]
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	79da      	ldrb	r2, [r3, #7]
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b812:	2b00      	cmp	r3, #0
 800b814:	d004      	beq.n	800b820 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d11b      	bne.n	800b858 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	79db      	ldrb	r3, [r3, #7]
 800b824:	2b20      	cmp	r3, #32
 800b826:	dc0f      	bgt.n	800b848 <USBH_ParseDevDesc+0xac>
 800b828:	2b08      	cmp	r3, #8
 800b82a:	db0f      	blt.n	800b84c <USBH_ParseDevDesc+0xb0>
 800b82c:	3b08      	subs	r3, #8
 800b82e:	4a34      	ldr	r2, [pc, #208]	; (800b900 <USBH_ParseDevDesc+0x164>)
 800b830:	fa22 f303 	lsr.w	r3, r2, r3
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b00      	cmp	r3, #0
 800b83a:	bf14      	ite	ne
 800b83c:	2301      	movne	r3, #1
 800b83e:	2300      	moveq	r3, #0
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d106      	bne.n	800b854 <USBH_ParseDevDesc+0xb8>
 800b846:	e001      	b.n	800b84c <USBH_ParseDevDesc+0xb0>
 800b848:	2b40      	cmp	r3, #64	; 0x40
 800b84a:	d003      	beq.n	800b854 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	2208      	movs	r2, #8
 800b850:	71da      	strb	r2, [r3, #7]
        break;
 800b852:	e000      	b.n	800b856 <USBH_ParseDevDesc+0xba>
        break;
 800b854:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b856:	e00e      	b.n	800b876 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d107      	bne.n	800b872 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	79db      	ldrb	r3, [r3, #7]
 800b866:	2b08      	cmp	r3, #8
 800b868:	d005      	beq.n	800b876 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	2208      	movs	r2, #8
 800b86e:	71da      	strb	r2, [r3, #7]
 800b870:	e001      	b.n	800b876 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b872:	2303      	movs	r3, #3
 800b874:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b876:	88fb      	ldrh	r3, [r7, #6]
 800b878:	2b08      	cmp	r3, #8
 800b87a:	d939      	bls.n	800b8f0 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	3308      	adds	r3, #8
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	b29a      	uxth	r2, r3
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	3309      	adds	r3, #9
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	021b      	lsls	r3, r3, #8
 800b88e:	b29b      	uxth	r3, r3
 800b890:	4313      	orrs	r3, r2
 800b892:	b29a      	uxth	r2, r3
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	330a      	adds	r3, #10
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	330b      	adds	r3, #11
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	021b      	lsls	r3, r3, #8
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	330c      	adds	r3, #12
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	330d      	adds	r3, #13
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	021b      	lsls	r3, r3, #8
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	7b9a      	ldrb	r2, [r3, #14]
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	7bda      	ldrb	r2, [r3, #15]
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	7c1a      	ldrb	r2, [r3, #16]
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	7c5a      	ldrb	r2, [r3, #17]
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b8f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	371c      	adds	r7, #28
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	01000101 	.word	0x01000101

0800b904 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08c      	sub	sp, #48	; 0x30
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	4613      	mov	r3, r2
 800b910:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b918:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b91a:	2300      	movs	r3, #0
 800b91c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b920:	2300      	movs	r3, #0
 800b922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b926:	2300      	movs	r3, #0
 800b928:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d101      	bne.n	800b936 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b932:	2302      	movs	r3, #2
 800b934:	e0db      	b.n	800baee <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b09      	cmp	r3, #9
 800b940:	d002      	beq.n	800b948 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b944:	2209      	movs	r2, #9
 800b946:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	781a      	ldrb	r2, [r3, #0]
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	785a      	ldrb	r2, [r3, #1]
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	3302      	adds	r3, #2
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	b29a      	uxth	r2, r3
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	3303      	adds	r3, #3
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	b29b      	uxth	r3, r3
 800b968:	021b      	lsls	r3, r3, #8
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	4313      	orrs	r3, r2
 800b96e:	b29b      	uxth	r3, r3
 800b970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b974:	bf28      	it	cs
 800b976:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	791a      	ldrb	r2, [r3, #4]
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	795a      	ldrb	r2, [r3, #5]
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	799a      	ldrb	r2, [r3, #6]
 800b994:	6a3b      	ldr	r3, [r7, #32]
 800b996:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	79da      	ldrb	r2, [r3, #7]
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	7a1a      	ldrb	r2, [r3, #8]
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b9a8:	88fb      	ldrh	r3, [r7, #6]
 800b9aa:	2b09      	cmp	r3, #9
 800b9ac:	f240 809d 	bls.w	800baea <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800b9b0:	2309      	movs	r3, #9
 800b9b2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b9b8:	e081      	b.n	800babe <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b9ba:	f107 0316 	add.w	r3, r7, #22
 800b9be:	4619      	mov	r1, r3
 800b9c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9c2:	f000 f9e8 	bl	800bd96 <USBH_GetNextDesc>
 800b9c6:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	785b      	ldrb	r3, [r3, #1]
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d176      	bne.n	800babe <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b09      	cmp	r3, #9
 800b9d6:	d002      	beq.n	800b9de <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	2209      	movs	r2, #9
 800b9dc:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b9de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9e2:	221a      	movs	r2, #26
 800b9e4:	fb02 f303 	mul.w	r3, r2, r3
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	6a3a      	ldr	r2, [r7, #32]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	3302      	adds	r3, #2
 800b9f0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b9f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9f4:	69f8      	ldr	r0, [r7, #28]
 800b9f6:	f000 f87e 	bl	800baf6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ba00:	2300      	movs	r3, #0
 800ba02:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ba04:	e043      	b.n	800ba8e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ba06:	f107 0316 	add.w	r3, r7, #22
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba0e:	f000 f9c2 	bl	800bd96 <USBH_GetNextDesc>
 800ba12:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	785b      	ldrb	r3, [r3, #1]
 800ba18:	2b05      	cmp	r3, #5
 800ba1a:	d138      	bne.n	800ba8e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	795b      	ldrb	r3, [r3, #5]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d113      	bne.n	800ba4c <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d003      	beq.n	800ba34 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	799b      	ldrb	r3, [r3, #6]
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d10b      	bne.n	800ba4c <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	79db      	ldrb	r3, [r3, #7]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10b      	bne.n	800ba54 <USBH_ParseCfgDesc+0x150>
 800ba3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b09      	cmp	r3, #9
 800ba42:	d007      	beq.n	800ba54 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800ba44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba46:	2209      	movs	r2, #9
 800ba48:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ba4a:	e003      	b.n	800ba54 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	2207      	movs	r2, #7
 800ba50:	701a      	strb	r2, [r3, #0]
 800ba52:	e000      	b.n	800ba56 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ba54:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ba56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ba5e:	3201      	adds	r2, #1
 800ba60:	00d2      	lsls	r2, r2, #3
 800ba62:	211a      	movs	r1, #26
 800ba64:	fb01 f303 	mul.w	r3, r1, r3
 800ba68:	4413      	add	r3, r2
 800ba6a:	3308      	adds	r3, #8
 800ba6c:	6a3a      	ldr	r2, [r7, #32]
 800ba6e:	4413      	add	r3, r2
 800ba70:	3304      	adds	r3, #4
 800ba72:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ba74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba76:	69b9      	ldr	r1, [r7, #24]
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 f870 	bl	800bb5e <USBH_ParseEPDesc>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ba84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba88:	3301      	adds	r3, #1
 800ba8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	791b      	ldrb	r3, [r3, #4]
 800ba92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d204      	bcs.n	800baa4 <USBH_ParseCfgDesc+0x1a0>
 800ba9a:	6a3b      	ldr	r3, [r7, #32]
 800ba9c:	885a      	ldrh	r2, [r3, #2]
 800ba9e:	8afb      	ldrh	r3, [r7, #22]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d8b0      	bhi.n	800ba06 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	791b      	ldrb	r3, [r3, #4]
 800baa8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800baac:	429a      	cmp	r2, r3
 800baae:	d201      	bcs.n	800bab4 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800bab0:	2303      	movs	r3, #3
 800bab2:	e01c      	b.n	800baee <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800bab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab8:	3301      	adds	r3, #1
 800baba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800babe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d805      	bhi.n	800bad2 <USBH_ParseCfgDesc+0x1ce>
 800bac6:	6a3b      	ldr	r3, [r7, #32]
 800bac8:	885a      	ldrh	r2, [r3, #2]
 800baca:	8afb      	ldrh	r3, [r7, #22]
 800bacc:	429a      	cmp	r2, r3
 800bace:	f63f af74 	bhi.w	800b9ba <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	791b      	ldrb	r3, [r3, #4]
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	bf28      	it	cs
 800bada:	2302      	movcs	r3, #2
 800badc:	b2db      	uxtb	r3, r3
 800bade:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d201      	bcs.n	800baea <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800bae6:	2303      	movs	r3, #3
 800bae8:	e001      	b.n	800baee <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800baea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3730      	adds	r7, #48	; 0x30
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800baf6:	b480      	push	{r7}
 800baf8:	b083      	sub	sp, #12
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	781a      	ldrb	r2, [r3, #0]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	785a      	ldrb	r2, [r3, #1]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	789a      	ldrb	r2, [r3, #2]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	78da      	ldrb	r2, [r3, #3]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	3304      	adds	r3, #4
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	bf28      	it	cs
 800bb2a:	2302      	movcs	r3, #2
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	795a      	ldrb	r2, [r3, #5]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	799a      	ldrb	r2, [r3, #6]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	79da      	ldrb	r2, [r3, #7]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	7a1a      	ldrb	r2, [r3, #8]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	721a      	strb	r2, [r3, #8]
}
 800bb52:	bf00      	nop
 800bb54:	370c      	adds	r7, #12
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800bb5e:	b480      	push	{r7}
 800bb60:	b087      	sub	sp, #28
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	60f8      	str	r0, [r7, #12]
 800bb66:	60b9      	str	r1, [r7, #8]
 800bb68:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	781a      	ldrb	r2, [r3, #0]
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	785a      	ldrb	r2, [r3, #1]
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	789a      	ldrb	r2, [r3, #2]
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	78da      	ldrb	r2, [r3, #3]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3304      	adds	r3, #4
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	3305      	adds	r3, #5
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	021b      	lsls	r3, r3, #8
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	4313      	orrs	r3, r2
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	799a      	ldrb	r2, [r3, #6]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	889b      	ldrh	r3, [r3, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d009      	beq.n	800bbce <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bbbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbc2:	d804      	bhi.n	800bbce <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bbc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbcc:	d901      	bls.n	800bbd2 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d136      	bne.n	800bc4a <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	78db      	ldrb	r3, [r3, #3]
 800bbe0:	f003 0303 	and.w	r3, r3, #3
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d108      	bne.n	800bbfa <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	889b      	ldrh	r3, [r3, #4]
 800bbec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbf0:	f240 8097 	bls.w	800bd22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	75fb      	strb	r3, [r7, #23]
 800bbf8:	e093      	b.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	78db      	ldrb	r3, [r3, #3]
 800bbfe:	f003 0303 	and.w	r3, r3, #3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d107      	bne.n	800bc16 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	889b      	ldrh	r3, [r3, #4]
 800bc0a:	2b40      	cmp	r3, #64	; 0x40
 800bc0c:	f240 8089 	bls.w	800bd22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bc10:	2303      	movs	r3, #3
 800bc12:	75fb      	strb	r3, [r7, #23]
 800bc14:	e085      	b.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	78db      	ldrb	r3, [r3, #3]
 800bc1a:	f003 0303 	and.w	r3, r3, #3
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d005      	beq.n	800bc2e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	78db      	ldrb	r3, [r3, #3]
 800bc26:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d10a      	bne.n	800bc44 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	799b      	ldrb	r3, [r3, #6]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <USBH_ParseEPDesc+0xe0>
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	799b      	ldrb	r3, [r3, #6]
 800bc3a:	2b10      	cmp	r3, #16
 800bc3c:	d970      	bls.n	800bd20 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bc42:	e06d      	b.n	800bd20 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bc44:	2303      	movs	r3, #3
 800bc46:	75fb      	strb	r3, [r7, #23]
 800bc48:	e06b      	b.n	800bd22 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d13c      	bne.n	800bcce <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	78db      	ldrb	r3, [r3, #3]
 800bc58:	f003 0303 	and.w	r3, r3, #3
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d005      	beq.n	800bc6c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	78db      	ldrb	r3, [r3, #3]
 800bc64:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d106      	bne.n	800bc7a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	889b      	ldrh	r3, [r3, #4]
 800bc70:	2b40      	cmp	r3, #64	; 0x40
 800bc72:	d956      	bls.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bc74:	2303      	movs	r3, #3
 800bc76:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bc78:	e053      	b.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	78db      	ldrb	r3, [r3, #3]
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d10e      	bne.n	800bca4 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	799b      	ldrb	r3, [r3, #6]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d007      	beq.n	800bc9e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800bc92:	2b10      	cmp	r3, #16
 800bc94:	d803      	bhi.n	800bc9e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800bc9a:	2b40      	cmp	r3, #64	; 0x40
 800bc9c:	d941      	bls.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	75fb      	strb	r3, [r7, #23]
 800bca2:	e03e      	b.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	78db      	ldrb	r3, [r3, #3]
 800bca8:	f003 0303 	and.w	r3, r3, #3
 800bcac:	2b03      	cmp	r3, #3
 800bcae:	d10b      	bne.n	800bcc8 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	799b      	ldrb	r3, [r3, #6]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d004      	beq.n	800bcc2 <USBH_ParseEPDesc+0x164>
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	889b      	ldrh	r3, [r3, #4]
 800bcbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcc0:	d32f      	bcc.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	75fb      	strb	r3, [r7, #23]
 800bcc6:	e02c      	b.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	75fb      	strb	r3, [r7, #23]
 800bccc:	e029      	b.n	800bd22 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d120      	bne.n	800bd1a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	78db      	ldrb	r3, [r3, #3]
 800bcdc:	f003 0303 	and.w	r3, r3, #3
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d106      	bne.n	800bcf2 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	889b      	ldrh	r3, [r3, #4]
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	d01a      	beq.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bcec:	2303      	movs	r3, #3
 800bcee:	75fb      	strb	r3, [r7, #23]
 800bcf0:	e017      	b.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	78db      	ldrb	r3, [r3, #3]
 800bcf6:	f003 0303 	and.w	r3, r3, #3
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	d10a      	bne.n	800bd14 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	799b      	ldrb	r3, [r3, #6]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d003      	beq.n	800bd0e <USBH_ParseEPDesc+0x1b0>
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	889b      	ldrh	r3, [r3, #4]
 800bd0a:	2b08      	cmp	r3, #8
 800bd0c:	d909      	bls.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	75fb      	strb	r3, [r7, #23]
 800bd12:	e006      	b.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bd14:	2303      	movs	r3, #3
 800bd16:	75fb      	strb	r3, [r7, #23]
 800bd18:	e003      	b.n	800bd22 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	75fb      	strb	r3, [r7, #23]
 800bd1e:	e000      	b.n	800bd22 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bd20:	bf00      	nop
  }

  return status;
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	371c      	adds	r7, #28
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	3301      	adds	r3, #1
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	d120      	bne.n	800bd8a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	1e9a      	subs	r2, r3, #2
 800bd4e:	88fb      	ldrh	r3, [r7, #6]
 800bd50:	4293      	cmp	r3, r2
 800bd52:	bf28      	it	cs
 800bd54:	4613      	movcs	r3, r2
 800bd56:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	3302      	adds	r3, #2
 800bd5c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bd5e:	2300      	movs	r3, #0
 800bd60:	82fb      	strh	r3, [r7, #22]
 800bd62:	e00b      	b.n	800bd7c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bd64:	8afb      	ldrh	r3, [r7, #22]
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	4413      	add	r3, r2
 800bd6a:	781a      	ldrb	r2, [r3, #0]
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	3301      	adds	r3, #1
 800bd74:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bd76:	8afb      	ldrh	r3, [r7, #22]
 800bd78:	3302      	adds	r3, #2
 800bd7a:	82fb      	strh	r3, [r7, #22]
 800bd7c:	8afa      	ldrh	r2, [r7, #22]
 800bd7e:	8abb      	ldrh	r3, [r7, #20]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d3ef      	bcc.n	800bd64 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	2200      	movs	r2, #0
 800bd88:	701a      	strb	r2, [r3, #0]
  }
}
 800bd8a:	bf00      	nop
 800bd8c:	371c      	adds	r7, #28
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b085      	sub	sp, #20
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	881a      	ldrh	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	4413      	add	r3, r2
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4413      	add	r3, r2
 800bdbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bdda:	2301      	movs	r3, #1
 800bddc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	789b      	ldrb	r3, [r3, #2]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d002      	beq.n	800bdec <USBH_CtlReq+0x20>
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	d01d      	beq.n	800be26 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800bdea:	e043      	b.n	800be74 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	88fa      	ldrh	r2, [r7, #6]
 800bdf6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2202      	movs	r2, #2
 800be02:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800be04:	2301      	movs	r3, #1
 800be06:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2203      	movs	r2, #3
 800be0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be1c:	2300      	movs	r3, #0
 800be1e:	2200      	movs	r2, #0
 800be20:	f002 fc38 	bl	800e694 <osMessageQueuePut>
      break;
 800be24:	e026      	b.n	800be74 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f000 f82a 	bl	800be80 <USBH_HandleControl>
 800be2c:	4603      	mov	r3, r0
 800be2e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d002      	beq.n	800be3c <USBH_CtlReq+0x70>
 800be36:	7dfb      	ldrb	r3, [r7, #23]
 800be38:	2b03      	cmp	r3, #3
 800be3a:	d106      	bne.n	800be4a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2201      	movs	r2, #1
 800be40:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2200      	movs	r2, #0
 800be46:	761a      	strb	r2, [r3, #24]
 800be48:	e005      	b.n	800be56 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800be4a:	7dfb      	ldrb	r3, [r7, #23]
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d102      	bne.n	800be56 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2201      	movs	r2, #1
 800be54:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2203      	movs	r2, #3
 800be5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be6a:	2300      	movs	r3, #0
 800be6c:	2200      	movs	r2, #0
 800be6e:	f002 fc11 	bl	800e694 <osMessageQueuePut>
      break;
 800be72:	bf00      	nop
  }
  return status;
 800be74:	7dfb      	ldrb	r3, [r7, #23]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3718      	adds	r7, #24
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
	...

0800be80 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af02      	add	r7, sp, #8
 800be86:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800be88:	2301      	movs	r3, #1
 800be8a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800be8c:	2300      	movs	r3, #0
 800be8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	7e1b      	ldrb	r3, [r3, #24]
 800be94:	3b01      	subs	r3, #1
 800be96:	2b0a      	cmp	r3, #10
 800be98:	f200 8229 	bhi.w	800c2ee <USBH_HandleControl+0x46e>
 800be9c:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <USBH_HandleControl+0x24>)
 800be9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea2:	bf00      	nop
 800bea4:	0800bed1 	.word	0x0800bed1
 800bea8:	0800beeb 	.word	0x0800beeb
 800beac:	0800bf8d 	.word	0x0800bf8d
 800beb0:	0800bfb3 	.word	0x0800bfb3
 800beb4:	0800c03f 	.word	0x0800c03f
 800beb8:	0800c069 	.word	0x0800c069
 800bebc:	0800c12b 	.word	0x0800c12b
 800bec0:	0800c14d 	.word	0x0800c14d
 800bec4:	0800c1df 	.word	0x0800c1df
 800bec8:	0800c205 	.word	0x0800c205
 800becc:	0800c297 	.word	0x0800c297
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f103 0110 	add.w	r1, r3, #16
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	795b      	ldrb	r3, [r3, #5]
 800beda:	461a      	mov	r2, r3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fa17 	bl	800c310 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2202      	movs	r2, #2
 800bee6:	761a      	strb	r2, [r3, #24]
      break;
 800bee8:	e20c      	b.n	800c304 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	795b      	ldrb	r3, [r3, #5]
 800beee:	4619      	mov	r1, r3
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f005 fc29 	bl	8011748 <USBH_LL_GetURBState>
 800bef6:	4603      	mov	r3, r0
 800bef8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800befa:	7bbb      	ldrb	r3, [r7, #14]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d12c      	bne.n	800bf5a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	7c1b      	ldrb	r3, [r3, #16]
 800bf04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf08:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	8adb      	ldrh	r3, [r3, #22]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00a      	beq.n	800bf28 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bf12:	7b7b      	ldrb	r3, [r7, #13]
 800bf14:	2b80      	cmp	r3, #128	; 0x80
 800bf16:	d103      	bne.n	800bf20 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2203      	movs	r2, #3
 800bf1c:	761a      	strb	r2, [r3, #24]
 800bf1e:	e00d      	b.n	800bf3c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2205      	movs	r2, #5
 800bf24:	761a      	strb	r2, [r3, #24]
 800bf26:	e009      	b.n	800bf3c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800bf28:	7b7b      	ldrb	r3, [r7, #13]
 800bf2a:	2b80      	cmp	r3, #128	; 0x80
 800bf2c:	d103      	bne.n	800bf36 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2209      	movs	r2, #9
 800bf32:	761a      	strb	r2, [r3, #24]
 800bf34:	e002      	b.n	800bf3c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2207      	movs	r2, #7
 800bf3a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2203      	movs	r2, #3
 800bf40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bf50:	2300      	movs	r3, #0
 800bf52:	2200      	movs	r2, #0
 800bf54:	f002 fb9e 	bl	800e694 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf58:	e1cb      	b.n	800c2f2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bf5a:	7bbb      	ldrb	r3, [r7, #14]
 800bf5c:	2b04      	cmp	r3, #4
 800bf5e:	d003      	beq.n	800bf68 <USBH_HandleControl+0xe8>
 800bf60:	7bbb      	ldrb	r3, [r7, #14]
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	f040 81c5 	bne.w	800c2f2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	220b      	movs	r2, #11
 800bf6c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2203      	movs	r2, #3
 800bf72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bf82:	2300      	movs	r3, #0
 800bf84:	2200      	movs	r2, #0
 800bf86:	f002 fb85 	bl	800e694 <osMessageQueuePut>
      break;
 800bf8a:	e1b2      	b.n	800c2f2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6899      	ldr	r1, [r3, #8]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	899a      	ldrh	r2, [r3, #12]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	791b      	ldrb	r3, [r3, #4]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f9f2 	bl	800c38e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2204      	movs	r2, #4
 800bfae:	761a      	strb	r2, [r3, #24]
      break;
 800bfb0:	e1a8      	b.n	800c304 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	791b      	ldrb	r3, [r3, #4]
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f005 fbc5 	bl	8011748 <USBH_LL_GetURBState>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bfc2:	7bbb      	ldrb	r3, [r7, #14]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d110      	bne.n	800bfea <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2209      	movs	r2, #9
 800bfcc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2203      	movs	r2, #3
 800bfd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f002 fb55 	bl	800e694 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bfea:	7bbb      	ldrb	r3, [r7, #14]
 800bfec:	2b05      	cmp	r3, #5
 800bfee:	d110      	bne.n	800c012 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bff0:	2303      	movs	r3, #3
 800bff2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2203      	movs	r2, #3
 800bff8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c008:	2300      	movs	r3, #0
 800c00a:	2200      	movs	r2, #0
 800c00c:	f002 fb42 	bl	800e694 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c010:	e171      	b.n	800c2f6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800c012:	7bbb      	ldrb	r3, [r7, #14]
 800c014:	2b04      	cmp	r3, #4
 800c016:	f040 816e 	bne.w	800c2f6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	220b      	movs	r2, #11
 800c01e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2203      	movs	r2, #3
 800c024:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c034:	2300      	movs	r3, #0
 800c036:	2200      	movs	r2, #0
 800c038:	f002 fb2c 	bl	800e694 <osMessageQueuePut>
      break;
 800c03c:	e15b      	b.n	800c2f6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6899      	ldr	r1, [r3, #8]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	899a      	ldrh	r2, [r3, #12]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	795b      	ldrb	r3, [r3, #5]
 800c04a:	2001      	movs	r0, #1
 800c04c:	9000      	str	r0, [sp, #0]
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 f978 	bl	800c344 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2206      	movs	r2, #6
 800c064:	761a      	strb	r2, [r3, #24]
      break;
 800c066:	e14d      	b.n	800c304 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	795b      	ldrb	r3, [r3, #5]
 800c06c:	4619      	mov	r1, r3
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f005 fb6a 	bl	8011748 <USBH_LL_GetURBState>
 800c074:	4603      	mov	r3, r0
 800c076:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d111      	bne.n	800c0a2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2207      	movs	r2, #7
 800c082:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2203      	movs	r2, #3
 800c088:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c098:	2300      	movs	r3, #0
 800c09a:	2200      	movs	r2, #0
 800c09c:	f002 fafa 	bl	800e694 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c0a0:	e12b      	b.n	800c2fa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800c0a2:	7bbb      	ldrb	r3, [r7, #14]
 800c0a4:	2b05      	cmp	r3, #5
 800c0a6:	d113      	bne.n	800c0d0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	220c      	movs	r2, #12
 800c0ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2203      	movs	r2, #3
 800c0b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f002 fae3 	bl	800e694 <osMessageQueuePut>
      break;
 800c0ce:	e114      	b.n	800c2fa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c0d0:	7bbb      	ldrb	r3, [r7, #14]
 800c0d2:	2b02      	cmp	r3, #2
 800c0d4:	d111      	bne.n	800c0fa <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2205      	movs	r2, #5
 800c0da:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2203      	movs	r2, #3
 800c0e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f002 face 	bl	800e694 <osMessageQueuePut>
      break;
 800c0f8:	e0ff      	b.n	800c2fa <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	f040 80fc 	bne.w	800c2fa <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	220b      	movs	r2, #11
 800c106:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c108:	2302      	movs	r3, #2
 800c10a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2203      	movs	r2, #3
 800c110:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c120:	2300      	movs	r3, #0
 800c122:	2200      	movs	r2, #0
 800c124:	f002 fab6 	bl	800e694 <osMessageQueuePut>
      break;
 800c128:	e0e7      	b.n	800c2fa <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	791b      	ldrb	r3, [r3, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	2100      	movs	r1, #0
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f92b 	bl	800c38e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c13e:	b29a      	uxth	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2208      	movs	r2, #8
 800c148:	761a      	strb	r2, [r3, #24]

      break;
 800c14a:	e0db      	b.n	800c304 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	791b      	ldrb	r3, [r3, #4]
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f005 faf8 	bl	8011748 <USBH_LL_GetURBState>
 800c158:	4603      	mov	r3, r0
 800c15a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c15c:	7bbb      	ldrb	r3, [r7, #14]
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d113      	bne.n	800c18a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	220d      	movs	r2, #13
 800c166:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c168:	2300      	movs	r3, #0
 800c16a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2203      	movs	r2, #3
 800c170:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c180:	2300      	movs	r3, #0
 800c182:	2200      	movs	r2, #0
 800c184:	f002 fa86 	bl	800e694 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c188:	e0b9      	b.n	800c2fe <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800c18a:	7bbb      	ldrb	r3, [r7, #14]
 800c18c:	2b04      	cmp	r3, #4
 800c18e:	d111      	bne.n	800c1b4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	220b      	movs	r2, #11
 800c194:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2203      	movs	r2, #3
 800c19a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f002 fa71 	bl	800e694 <osMessageQueuePut>
      break;
 800c1b2:	e0a4      	b.n	800c2fe <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	2b05      	cmp	r3, #5
 800c1b8:	f040 80a1 	bne.w	800c2fe <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2203      	movs	r2, #3
 800c1c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f002 fa5c 	bl	800e694 <osMessageQueuePut>
      break;
 800c1dc:	e08f      	b.n	800c2fe <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	795b      	ldrb	r3, [r3, #5]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	9200      	str	r2, [sp, #0]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f8aa 	bl	800c344 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	220a      	movs	r2, #10
 800c200:	761a      	strb	r2, [r3, #24]
      break;
 800c202:	e07f      	b.n	800c304 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	795b      	ldrb	r3, [r3, #5]
 800c208:	4619      	mov	r1, r3
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f005 fa9c 	bl	8011748 <USBH_LL_GetURBState>
 800c210:	4603      	mov	r3, r0
 800c212:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	2b01      	cmp	r3, #1
 800c218:	d113      	bne.n	800c242 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	220d      	movs	r2, #13
 800c222:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2203      	movs	r2, #3
 800c228:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c238:	2300      	movs	r3, #0
 800c23a:	2200      	movs	r2, #0
 800c23c:	f002 fa2a 	bl	800e694 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c240:	e05f      	b.n	800c302 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c242:	7bbb      	ldrb	r3, [r7, #14]
 800c244:	2b02      	cmp	r3, #2
 800c246:	d111      	bne.n	800c26c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2209      	movs	r2, #9
 800c24c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2203      	movs	r2, #3
 800c252:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c262:	2300      	movs	r3, #0
 800c264:	2200      	movs	r2, #0
 800c266:	f002 fa15 	bl	800e694 <osMessageQueuePut>
      break;
 800c26a:	e04a      	b.n	800c302 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800c26c:	7bbb      	ldrb	r3, [r7, #14]
 800c26e:	2b04      	cmp	r3, #4
 800c270:	d147      	bne.n	800c302 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	220b      	movs	r2, #11
 800c276:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2203      	movs	r2, #3
 800c27c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c28c:	2300      	movs	r3, #0
 800c28e:	2200      	movs	r2, #0
 800c290:	f002 fa00 	bl	800e694 <osMessageQueuePut>
      break;
 800c294:	e035      	b.n	800c302 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	7e5b      	ldrb	r3, [r3, #25]
 800c29a:	3301      	adds	r3, #1
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	765a      	strb	r2, [r3, #25]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	7e5b      	ldrb	r3, [r3, #25]
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d806      	bhi.n	800c2b8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c2b6:	e025      	b.n	800c304 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c2be:	2106      	movs	r1, #6
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	795b      	ldrb	r3, [r3, #5]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f90d 	bl	800c4f0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	791b      	ldrb	r3, [r3, #4]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 f907 	bl	800c4f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c2ec:	e00a      	b.n	800c304 <USBH_HandleControl+0x484>

    default:
      break;
 800c2ee:	bf00      	nop
 800c2f0:	e008      	b.n	800c304 <USBH_HandleControl+0x484>
      break;
 800c2f2:	bf00      	nop
 800c2f4:	e006      	b.n	800c304 <USBH_HandleControl+0x484>
      break;
 800c2f6:	bf00      	nop
 800c2f8:	e004      	b.n	800c304 <USBH_HandleControl+0x484>
      break;
 800c2fa:	bf00      	nop
 800c2fc:	e002      	b.n	800c304 <USBH_HandleControl+0x484>
      break;
 800c2fe:	bf00      	nop
 800c300:	e000      	b.n	800c304 <USBH_HandleControl+0x484>
      break;
 800c302:	bf00      	nop
  }

  return status;
 800c304:	7bfb      	ldrb	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop

0800c310 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af04      	add	r7, sp, #16
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	4613      	mov	r3, r2
 800c31c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c31e:	79f9      	ldrb	r1, [r7, #7]
 800c320:	2300      	movs	r3, #0
 800c322:	9303      	str	r3, [sp, #12]
 800c324:	2308      	movs	r3, #8
 800c326:	9302      	str	r3, [sp, #8]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	9301      	str	r3, [sp, #4]
 800c32c:	2300      	movs	r3, #0
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	2300      	movs	r3, #0
 800c332:	2200      	movs	r2, #0
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f005 f9d6 	bl	80116e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c33a:	2300      	movs	r3, #0
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3710      	adds	r7, #16
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b088      	sub	sp, #32
 800c348:	af04      	add	r7, sp, #16
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	4611      	mov	r1, r2
 800c350:	461a      	mov	r2, r3
 800c352:	460b      	mov	r3, r1
 800c354:	80fb      	strh	r3, [r7, #6]
 800c356:	4613      	mov	r3, r2
 800c358:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c360:	2b00      	cmp	r3, #0
 800c362:	d001      	beq.n	800c368 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c364:	2300      	movs	r3, #0
 800c366:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c368:	7979      	ldrb	r1, [r7, #5]
 800c36a:	7e3b      	ldrb	r3, [r7, #24]
 800c36c:	9303      	str	r3, [sp, #12]
 800c36e:	88fb      	ldrh	r3, [r7, #6]
 800c370:	9302      	str	r3, [sp, #8]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	9301      	str	r3, [sp, #4]
 800c376:	2301      	movs	r3, #1
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	2300      	movs	r3, #0
 800c37c:	2200      	movs	r2, #0
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f005 f9b1 	bl	80116e6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b088      	sub	sp, #32
 800c392:	af04      	add	r7, sp, #16
 800c394:	60f8      	str	r0, [r7, #12]
 800c396:	60b9      	str	r1, [r7, #8]
 800c398:	4611      	mov	r1, r2
 800c39a:	461a      	mov	r2, r3
 800c39c:	460b      	mov	r3, r1
 800c39e:	80fb      	strh	r3, [r7, #6]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c3a4:	7979      	ldrb	r1, [r7, #5]
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	9303      	str	r3, [sp, #12]
 800c3aa:	88fb      	ldrh	r3, [r7, #6]
 800c3ac:	9302      	str	r3, [sp, #8]
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	9301      	str	r3, [sp, #4]
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f005 f993 	bl	80116e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c3c0:	2300      	movs	r3, #0

}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b088      	sub	sp, #32
 800c3ce:	af04      	add	r7, sp, #16
 800c3d0:	60f8      	str	r0, [r7, #12]
 800c3d2:	60b9      	str	r1, [r7, #8]
 800c3d4:	4611      	mov	r1, r2
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	460b      	mov	r3, r1
 800c3da:	80fb      	strh	r3, [r7, #6]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c3ee:	7979      	ldrb	r1, [r7, #5]
 800c3f0:	7e3b      	ldrb	r3, [r7, #24]
 800c3f2:	9303      	str	r3, [sp, #12]
 800c3f4:	88fb      	ldrh	r3, [r7, #6]
 800c3f6:	9302      	str	r3, [sp, #8]
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	9301      	str	r3, [sp, #4]
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	2302      	movs	r3, #2
 800c402:	2200      	movs	r2, #0
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f005 f96e 	bl	80116e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b088      	sub	sp, #32
 800c418:	af04      	add	r7, sp, #16
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	4611      	mov	r1, r2
 800c420:	461a      	mov	r2, r3
 800c422:	460b      	mov	r3, r1
 800c424:	80fb      	strh	r3, [r7, #6]
 800c426:	4613      	mov	r3, r2
 800c428:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c42a:	7979      	ldrb	r1, [r7, #5]
 800c42c:	2300      	movs	r3, #0
 800c42e:	9303      	str	r3, [sp, #12]
 800c430:	88fb      	ldrh	r3, [r7, #6]
 800c432:	9302      	str	r3, [sp, #8]
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	9301      	str	r3, [sp, #4]
 800c438:	2301      	movs	r3, #1
 800c43a:	9300      	str	r3, [sp, #0]
 800c43c:	2302      	movs	r3, #2
 800c43e:	2201      	movs	r2, #1
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f005 f950 	bl	80116e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af04      	add	r7, sp, #16
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	4608      	mov	r0, r1
 800c45a:	4611      	mov	r1, r2
 800c45c:	461a      	mov	r2, r3
 800c45e:	4603      	mov	r3, r0
 800c460:	70fb      	strb	r3, [r7, #3]
 800c462:	460b      	mov	r3, r1
 800c464:	70bb      	strb	r3, [r7, #2]
 800c466:	4613      	mov	r3, r2
 800c468:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c46a:	7878      	ldrb	r0, [r7, #1]
 800c46c:	78ba      	ldrb	r2, [r7, #2]
 800c46e:	78f9      	ldrb	r1, [r7, #3]
 800c470:	8b3b      	ldrh	r3, [r7, #24]
 800c472:	9302      	str	r3, [sp, #8]
 800c474:	7d3b      	ldrb	r3, [r7, #20]
 800c476:	9301      	str	r3, [sp, #4]
 800c478:	7c3b      	ldrb	r3, [r7, #16]
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	4603      	mov	r3, r0
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f005 f8e3 	bl	801164a <USBH_LL_OpenPipe>

  return USBH_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b082      	sub	sp, #8
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	460b      	mov	r3, r1
 800c498:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c49a:	78fb      	ldrb	r3, [r7, #3]
 800c49c:	4619      	mov	r1, r3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f005 f902 	bl	80116a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f836 	bl	800c52c <USBH_GetFreePipe>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c4c4:	89fb      	ldrh	r3, [r7, #14]
 800c4c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d00a      	beq.n	800c4e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c4ce:	78fa      	ldrb	r2, [r7, #3]
 800c4d0:	89fb      	ldrh	r3, [r7, #14]
 800c4d2:	f003 030f 	and.w	r3, r3, #15
 800c4d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4da:	6879      	ldr	r1, [r7, #4]
 800c4dc:	33e0      	adds	r3, #224	; 0xe0
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	440b      	add	r3, r1
 800c4e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c4e4:	89fb      	ldrh	r3, [r7, #14]
 800c4e6:	b2db      	uxtb	r3, r3
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c4fc:	78fb      	ldrb	r3, [r7, #3]
 800c4fe:	2b0f      	cmp	r3, #15
 800c500:	d80d      	bhi.n	800c51e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c502:	78fb      	ldrb	r3, [r7, #3]
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	33e0      	adds	r3, #224	; 0xe0
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	685a      	ldr	r2, [r3, #4]
 800c50e:	78fb      	ldrb	r3, [r7, #3]
 800c510:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c514:	6879      	ldr	r1, [r7, #4]
 800c516:	33e0      	adds	r3, #224	; 0xe0
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	440b      	add	r3, r1
 800c51c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c534:	2300      	movs	r3, #0
 800c536:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c538:	2300      	movs	r3, #0
 800c53a:	73fb      	strb	r3, [r7, #15]
 800c53c:	e00f      	b.n	800c55e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c53e:	7bfb      	ldrb	r3, [r7, #15]
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	33e0      	adds	r3, #224	; 0xe0
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	4413      	add	r3, r2
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d102      	bne.n	800c558 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c552:	7bfb      	ldrb	r3, [r7, #15]
 800c554:	b29b      	uxth	r3, r3
 800c556:	e007      	b.n	800c568 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c558:	7bfb      	ldrb	r3, [r7, #15]
 800c55a:	3301      	adds	r3, #1
 800c55c:	73fb      	strb	r3, [r7, #15]
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
 800c560:	2b0f      	cmp	r3, #15
 800c562:	d9ec      	bls.n	800c53e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c564:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800c578:	f000 fbc4 	bl	800cd04 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800c57c:	20ca      	movs	r0, #202	; 0xca
 800c57e:	f000 f95d 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800c582:	20c3      	movs	r0, #195	; 0xc3
 800c584:	f000 f967 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800c588:	2008      	movs	r0, #8
 800c58a:	f000 f964 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800c58e:	2050      	movs	r0, #80	; 0x50
 800c590:	f000 f961 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800c594:	20cf      	movs	r0, #207	; 0xcf
 800c596:	f000 f951 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800c59a:	2000      	movs	r0, #0
 800c59c:	f000 f95b 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800c5a0:	20c1      	movs	r0, #193	; 0xc1
 800c5a2:	f000 f958 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800c5a6:	2030      	movs	r0, #48	; 0x30
 800c5a8:	f000 f955 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800c5ac:	20ed      	movs	r0, #237	; 0xed
 800c5ae:	f000 f945 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800c5b2:	2064      	movs	r0, #100	; 0x64
 800c5b4:	f000 f94f 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800c5b8:	2003      	movs	r0, #3
 800c5ba:	f000 f94c 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800c5be:	2012      	movs	r0, #18
 800c5c0:	f000 f949 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800c5c4:	2081      	movs	r0, #129	; 0x81
 800c5c6:	f000 f946 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800c5ca:	20e8      	movs	r0, #232	; 0xe8
 800c5cc:	f000 f936 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800c5d0:	2085      	movs	r0, #133	; 0x85
 800c5d2:	f000 f940 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	f000 f93d 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800c5dc:	2078      	movs	r0, #120	; 0x78
 800c5de:	f000 f93a 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800c5e2:	20cb      	movs	r0, #203	; 0xcb
 800c5e4:	f000 f92a 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800c5e8:	2039      	movs	r0, #57	; 0x39
 800c5ea:	f000 f934 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800c5ee:	202c      	movs	r0, #44	; 0x2c
 800c5f0:	f000 f931 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	f000 f92e 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800c5fa:	2034      	movs	r0, #52	; 0x34
 800c5fc:	f000 f92b 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800c600:	2002      	movs	r0, #2
 800c602:	f000 f928 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800c606:	20f7      	movs	r0, #247	; 0xf7
 800c608:	f000 f918 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800c60c:	2020      	movs	r0, #32
 800c60e:	f000 f922 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800c612:	20ea      	movs	r0, #234	; 0xea
 800c614:	f000 f912 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800c618:	2000      	movs	r0, #0
 800c61a:	f000 f91c 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800c61e:	2000      	movs	r0, #0
 800c620:	f000 f919 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800c624:	20b1      	movs	r0, #177	; 0xb1
 800c626:	f000 f909 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800c62a:	2000      	movs	r0, #0
 800c62c:	f000 f913 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800c630:	201b      	movs	r0, #27
 800c632:	f000 f910 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800c636:	20b6      	movs	r0, #182	; 0xb6
 800c638:	f000 f900 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800c63c:	200a      	movs	r0, #10
 800c63e:	f000 f90a 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800c642:	20a2      	movs	r0, #162	; 0xa2
 800c644:	f000 f907 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800c648:	20c0      	movs	r0, #192	; 0xc0
 800c64a:	f000 f8f7 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800c64e:	2010      	movs	r0, #16
 800c650:	f000 f901 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800c654:	20c1      	movs	r0, #193	; 0xc1
 800c656:	f000 f8f1 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800c65a:	2010      	movs	r0, #16
 800c65c:	f000 f8fb 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800c660:	20c5      	movs	r0, #197	; 0xc5
 800c662:	f000 f8eb 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800c666:	2045      	movs	r0, #69	; 0x45
 800c668:	f000 f8f5 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800c66c:	2015      	movs	r0, #21
 800c66e:	f000 f8f2 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800c672:	20c7      	movs	r0, #199	; 0xc7
 800c674:	f000 f8e2 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800c678:	2090      	movs	r0, #144	; 0x90
 800c67a:	f000 f8ec 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800c67e:	2036      	movs	r0, #54	; 0x36
 800c680:	f000 f8dc 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800c684:	20c8      	movs	r0, #200	; 0xc8
 800c686:	f000 f8e6 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800c68a:	20f2      	movs	r0, #242	; 0xf2
 800c68c:	f000 f8d6 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800c690:	2000      	movs	r0, #0
 800c692:	f000 f8e0 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800c696:	20b0      	movs	r0, #176	; 0xb0
 800c698:	f000 f8d0 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800c69c:	20c2      	movs	r0, #194	; 0xc2
 800c69e:	f000 f8da 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800c6a2:	20b6      	movs	r0, #182	; 0xb6
 800c6a4:	f000 f8ca 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800c6a8:	200a      	movs	r0, #10
 800c6aa:	f000 f8d4 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800c6ae:	20a7      	movs	r0, #167	; 0xa7
 800c6b0:	f000 f8d1 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800c6b4:	2027      	movs	r0, #39	; 0x27
 800c6b6:	f000 f8ce 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800c6ba:	2004      	movs	r0, #4
 800c6bc:	f000 f8cb 	bl	800c856 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800c6c0:	202a      	movs	r0, #42	; 0x2a
 800c6c2:	f000 f8bb 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	f000 f8c5 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	f000 f8c2 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	f000 f8bf 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800c6d8:	20ef      	movs	r0, #239	; 0xef
 800c6da:	f000 f8bc 	bl	800c856 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800c6de:	202b      	movs	r0, #43	; 0x2b
 800c6e0:	f000 f8ac 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	f000 f8b6 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	f000 f8b3 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800c6f0:	2001      	movs	r0, #1
 800c6f2:	f000 f8b0 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800c6f6:	203f      	movs	r0, #63	; 0x3f
 800c6f8:	f000 f8ad 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800c6fc:	20f6      	movs	r0, #246	; 0xf6
 800c6fe:	f000 f89d 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800c702:	2001      	movs	r0, #1
 800c704:	f000 f8a7 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800c708:	2000      	movs	r0, #0
 800c70a:	f000 f8a4 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800c70e:	2006      	movs	r0, #6
 800c710:	f000 f8a1 	bl	800c856 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800c714:	202c      	movs	r0, #44	; 0x2c
 800c716:	f000 f891 	bl	800c83c <ili9341_WriteReg>
  LCD_Delay(200);
 800c71a:	20c8      	movs	r0, #200	; 0xc8
 800c71c:	f000 fbe0 	bl	800cee0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800c720:	2026      	movs	r0, #38	; 0x26
 800c722:	f000 f88b 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800c726:	2001      	movs	r0, #1
 800c728:	f000 f895 	bl	800c856 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800c72c:	20e0      	movs	r0, #224	; 0xe0
 800c72e:	f000 f885 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800c732:	200f      	movs	r0, #15
 800c734:	f000 f88f 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800c738:	2029      	movs	r0, #41	; 0x29
 800c73a:	f000 f88c 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800c73e:	2024      	movs	r0, #36	; 0x24
 800c740:	f000 f889 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800c744:	200c      	movs	r0, #12
 800c746:	f000 f886 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800c74a:	200e      	movs	r0, #14
 800c74c:	f000 f883 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800c750:	2009      	movs	r0, #9
 800c752:	f000 f880 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800c756:	204e      	movs	r0, #78	; 0x4e
 800c758:	f000 f87d 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800c75c:	2078      	movs	r0, #120	; 0x78
 800c75e:	f000 f87a 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800c762:	203c      	movs	r0, #60	; 0x3c
 800c764:	f000 f877 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800c768:	2009      	movs	r0, #9
 800c76a:	f000 f874 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800c76e:	2013      	movs	r0, #19
 800c770:	f000 f871 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800c774:	2005      	movs	r0, #5
 800c776:	f000 f86e 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800c77a:	2017      	movs	r0, #23
 800c77c:	f000 f86b 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800c780:	2011      	movs	r0, #17
 800c782:	f000 f868 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800c786:	2000      	movs	r0, #0
 800c788:	f000 f865 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800c78c:	20e1      	movs	r0, #225	; 0xe1
 800c78e:	f000 f855 	bl	800c83c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800c792:	2000      	movs	r0, #0
 800c794:	f000 f85f 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800c798:	2016      	movs	r0, #22
 800c79a:	f000 f85c 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800c79e:	201b      	movs	r0, #27
 800c7a0:	f000 f859 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800c7a4:	2004      	movs	r0, #4
 800c7a6:	f000 f856 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800c7aa:	2011      	movs	r0, #17
 800c7ac:	f000 f853 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800c7b0:	2007      	movs	r0, #7
 800c7b2:	f000 f850 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800c7b6:	2031      	movs	r0, #49	; 0x31
 800c7b8:	f000 f84d 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800c7bc:	2033      	movs	r0, #51	; 0x33
 800c7be:	f000 f84a 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800c7c2:	2042      	movs	r0, #66	; 0x42
 800c7c4:	f000 f847 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800c7c8:	2005      	movs	r0, #5
 800c7ca:	f000 f844 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800c7ce:	200c      	movs	r0, #12
 800c7d0:	f000 f841 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800c7d4:	200a      	movs	r0, #10
 800c7d6:	f000 f83e 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800c7da:	2028      	movs	r0, #40	; 0x28
 800c7dc:	f000 f83b 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800c7e0:	202f      	movs	r0, #47	; 0x2f
 800c7e2:	f000 f838 	bl	800c856 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800c7e6:	200f      	movs	r0, #15
 800c7e8:	f000 f835 	bl	800c856 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800c7ec:	2011      	movs	r0, #17
 800c7ee:	f000 f825 	bl	800c83c <ili9341_WriteReg>
  LCD_Delay(200);
 800c7f2:	20c8      	movs	r0, #200	; 0xc8
 800c7f4:	f000 fb74 	bl	800cee0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800c7f8:	2029      	movs	r0, #41	; 0x29
 800c7fa:	f000 f81f 	bl	800c83c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800c7fe:	202c      	movs	r0, #44	; 0x2c
 800c800:	f000 f81c 	bl	800c83c <ili9341_WriteReg>
}
 800c804:	bf00      	nop
 800c806:	bd80      	pop	{r7, pc}

0800c808 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800c80c:	f000 fa7a 	bl	800cd04 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800c810:	2103      	movs	r1, #3
 800c812:	20d3      	movs	r0, #211	; 0xd3
 800c814:	f000 f82c 	bl	800c870 <ili9341_ReadData>
 800c818:	4603      	mov	r3, r0
 800c81a:	b29b      	uxth	r3, r3
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800c824:	2029      	movs	r0, #41	; 0x29
 800c826:	f000 f809 	bl	800c83c <ili9341_WriteReg>
}
 800c82a:	bf00      	nop
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800c832:	2028      	movs	r0, #40	; 0x28
 800c834:	f000 f802 	bl	800c83c <ili9341_WriteReg>
}
 800c838:	bf00      	nop
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	4603      	mov	r3, r0
 800c844:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	4618      	mov	r0, r3
 800c84a:	f000 faf5 	bl	800ce38 <LCD_IO_WriteReg>
}
 800c84e:	bf00      	nop
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}

0800c856 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800c856:	b580      	push	{r7, lr}
 800c858:	b082      	sub	sp, #8
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	4603      	mov	r3, r0
 800c85e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800c860:	88fb      	ldrh	r3, [r7, #6]
 800c862:	4618      	mov	r0, r3
 800c864:	f000 fac6 	bl	800cdf4 <LCD_IO_WriteData>
}
 800c868:	bf00      	nop
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	4603      	mov	r3, r0
 800c878:	460a      	mov	r2, r1
 800c87a:	80fb      	strh	r3, [r7, #6]
 800c87c:	4613      	mov	r3, r2
 800c87e:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800c880:	797a      	ldrb	r2, [r7, #5]
 800c882:	88fb      	ldrh	r3, [r7, #6]
 800c884:	4611      	mov	r1, r2
 800c886:	4618      	mov	r0, r3
 800c888:	f000 faf8 	bl	800ce7c <LCD_IO_ReadData>
 800c88c:	4603      	mov	r3, r0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800c896:	b480      	push	{r7}
 800c898:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800c89a:	23f0      	movs	r3, #240	; 0xf0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800c8a6:	b480      	push	{r7}
 800c8a8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800c8aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08a      	sub	sp, #40	; 0x28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a33      	ldr	r2, [pc, #204]	; (800c994 <I2Cx_MspInit+0xdc>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d15f      	bne.n	800c98a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	613b      	str	r3, [r7, #16]
 800c8ce:	4b32      	ldr	r3, [pc, #200]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d2:	4a31      	ldr	r2, [pc, #196]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c8d4:	f043 0304 	orr.w	r3, r3, #4
 800c8d8:	6313      	str	r3, [r2, #48]	; 0x30
 800c8da:	4b2f      	ldr	r3, [pc, #188]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8de:	f003 0304 	and.w	r3, r3, #4
 800c8e2:	613b      	str	r3, [r7, #16]
 800c8e4:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	60fb      	str	r3, [r7, #12]
 800c8ea:	4b2b      	ldr	r3, [pc, #172]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ee:	4a2a      	ldr	r2, [pc, #168]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c8f0:	f043 0301 	orr.w	r3, r3, #1
 800c8f4:	6313      	str	r3, [r2, #48]	; 0x30
 800c8f6:	4b28      	ldr	r3, [pc, #160]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	60fb      	str	r3, [r7, #12]
 800c900:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800c902:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800c908:	2312      	movs	r3, #18
 800c90a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800c90c:	2300      	movs	r3, #0
 800c90e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800c910:	2302      	movs	r3, #2
 800c912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800c914:	2304      	movs	r3, #4
 800c916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800c918:	f107 0314 	add.w	r3, r7, #20
 800c91c:	4619      	mov	r1, r3
 800c91e:	481f      	ldr	r0, [pc, #124]	; (800c99c <I2Cx_MspInit+0xe4>)
 800c920:	f7f5 fbe6 	bl	80020f0 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800c924:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c928:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800c92a:	f107 0314 	add.w	r3, r7, #20
 800c92e:	4619      	mov	r1, r3
 800c930:	481b      	ldr	r0, [pc, #108]	; (800c9a0 <I2Cx_MspInit+0xe8>)
 800c932:	f7f5 fbdd 	bl	80020f0 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800c936:	2300      	movs	r3, #0
 800c938:	60bb      	str	r3, [r7, #8]
 800c93a:	4b17      	ldr	r3, [pc, #92]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93e:	4a16      	ldr	r2, [pc, #88]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c940:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c944:	6413      	str	r3, [r2, #64]	; 0x40
 800c946:	4b14      	ldr	r3, [pc, #80]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c94e:	60bb      	str	r3, [r7, #8]
 800c950:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800c952:	4b11      	ldr	r3, [pc, #68]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	4a10      	ldr	r2, [pc, #64]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c958:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c95c:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800c95e:	4b0e      	ldr	r3, [pc, #56]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	4a0d      	ldr	r2, [pc, #52]	; (800c998 <I2Cx_MspInit+0xe0>)
 800c964:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c968:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800c96a:	2200      	movs	r2, #0
 800c96c:	210f      	movs	r1, #15
 800c96e:	2048      	movs	r0, #72	; 0x48
 800c970:	f7f4 ffce 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800c974:	2048      	movs	r0, #72	; 0x48
 800c976:	f7f4 ffe7 	bl	8001948 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800c97a:	2200      	movs	r2, #0
 800c97c:	210f      	movs	r1, #15
 800c97e:	2049      	movs	r0, #73	; 0x49
 800c980:	f7f4 ffc6 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800c984:	2049      	movs	r0, #73	; 0x49
 800c986:	f7f4 ffdf 	bl	8001948 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800c98a:	bf00      	nop
 800c98c:	3728      	adds	r7, #40	; 0x28
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	40005c00 	.word	0x40005c00
 800c998:	40023800 	.word	0x40023800
 800c99c:	40020000 	.word	0x40020000
 800c9a0:	40020800 	.word	0x40020800

0800c9a4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800c9a8:	4814      	ldr	r0, [pc, #80]	; (800c9fc <I2Cx_Init+0x58>)
 800c9aa:	f7f8 fc47 	bl	800523c <HAL_I2C_GetState>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d121      	bne.n	800c9f8 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 800c9b4:	4b11      	ldr	r3, [pc, #68]	; (800c9fc <I2Cx_Init+0x58>)
 800c9b6:	4a12      	ldr	r2, [pc, #72]	; (800ca00 <I2Cx_Init+0x5c>)
 800c9b8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800c9ba:	4b10      	ldr	r3, [pc, #64]	; (800c9fc <I2Cx_Init+0x58>)
 800c9bc:	4a11      	ldr	r2, [pc, #68]	; (800ca04 <I2Cx_Init+0x60>)
 800c9be:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 800c9c0:	4b0e      	ldr	r3, [pc, #56]	; (800c9fc <I2Cx_Init+0x58>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800c9c6:	4b0d      	ldr	r3, [pc, #52]	; (800c9fc <I2Cx_Init+0x58>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800c9cc:	4b0b      	ldr	r3, [pc, #44]	; (800c9fc <I2Cx_Init+0x58>)
 800c9ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c9d2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800c9d4:	4b09      	ldr	r3, [pc, #36]	; (800c9fc <I2Cx_Init+0x58>)
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800c9da:	4b08      	ldr	r3, [pc, #32]	; (800c9fc <I2Cx_Init+0x58>)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 800c9e0:	4b06      	ldr	r3, [pc, #24]	; (800c9fc <I2Cx_Init+0x58>)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800c9e6:	4b05      	ldr	r3, [pc, #20]	; (800c9fc <I2Cx_Init+0x58>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800c9ec:	4803      	ldr	r0, [pc, #12]	; (800c9fc <I2Cx_Init+0x58>)
 800c9ee:	f7ff ff63 	bl	800c8b8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800c9f2:	4802      	ldr	r0, [pc, #8]	; (800c9fc <I2Cx_Init+0x58>)
 800c9f4:	f7f7 ff82 	bl	80048fc <HAL_I2C_Init>
  }
}
 800c9f8:	bf00      	nop
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	200003e8 	.word	0x200003e8
 800ca00:	40005c00 	.word	0x40005c00
 800ca04:	000186a0 	.word	0x000186a0

0800ca08 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b086      	sub	sp, #24
 800ca0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800ca0e:	2300      	movs	r3, #0
 800ca10:	603b      	str	r3, [r7, #0]
 800ca12:	4b13      	ldr	r3, [pc, #76]	; (800ca60 <I2Cx_ITConfig+0x58>)
 800ca14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca16:	4a12      	ldr	r2, [pc, #72]	; (800ca60 <I2Cx_ITConfig+0x58>)
 800ca18:	f043 0301 	orr.w	r3, r3, #1
 800ca1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ca1e:	4b10      	ldr	r3, [pc, #64]	; (800ca60 <I2Cx_ITConfig+0x58>)
 800ca20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca22:	f003 0301 	and.w	r3, r3, #1
 800ca26:	603b      	str	r3, [r7, #0]
 800ca28:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800ca2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800ca30:	2301      	movs	r3, #1
 800ca32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800ca34:	2300      	movs	r3, #0
 800ca36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800ca38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800ca3c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800ca3e:	1d3b      	adds	r3, r7, #4
 800ca40:	4619      	mov	r1, r3
 800ca42:	4808      	ldr	r0, [pc, #32]	; (800ca64 <I2Cx_ITConfig+0x5c>)
 800ca44:	f7f5 fb54 	bl	80020f0 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800ca48:	2200      	movs	r2, #0
 800ca4a:	210f      	movs	r1, #15
 800ca4c:	2028      	movs	r0, #40	; 0x28
 800ca4e:	f7f4 ff5f 	bl	8001910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800ca52:	2028      	movs	r0, #40	; 0x28
 800ca54:	f7f4 ff78 	bl	8001948 <HAL_NVIC_EnableIRQ>
}
 800ca58:	bf00      	nop
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	40023800 	.word	0x40023800
 800ca64:	40020000 	.word	0x40020000

0800ca68 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b088      	sub	sp, #32
 800ca6c:	af04      	add	r7, sp, #16
 800ca6e:	4603      	mov	r3, r0
 800ca70:	71fb      	strb	r3, [r7, #7]
 800ca72:	460b      	mov	r3, r1
 800ca74:	71bb      	strb	r3, [r7, #6]
 800ca76:	4613      	mov	r3, r2
 800ca78:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800ca7e:	79fb      	ldrb	r3, [r7, #7]
 800ca80:	b299      	uxth	r1, r3
 800ca82:	79bb      	ldrb	r3, [r7, #6]
 800ca84:	b29a      	uxth	r2, r3
 800ca86:	4b0b      	ldr	r3, [pc, #44]	; (800cab4 <I2Cx_WriteData+0x4c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	9302      	str	r3, [sp, #8]
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	9301      	str	r3, [sp, #4]
 800ca90:	1d7b      	adds	r3, r7, #5
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	2301      	movs	r3, #1
 800ca96:	4808      	ldr	r0, [pc, #32]	; (800cab8 <I2Cx_WriteData+0x50>)
 800ca98:	f7f8 f8a4 	bl	8004be4 <HAL_I2C_Mem_Write>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800caa6:	f000 f863 	bl	800cb70 <I2Cx_Error>
  }        
}
 800caaa:	bf00      	nop
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20000064 	.word	0x20000064
 800cab8:	200003e8 	.word	0x200003e8

0800cabc <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af04      	add	r7, sp, #16
 800cac2:	4603      	mov	r3, r0
 800cac4:	460a      	mov	r2, r1
 800cac6:	71fb      	strb	r3, [r7, #7]
 800cac8:	4613      	mov	r3, r2
 800caca:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800cacc:	2300      	movs	r3, #0
 800cace:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800cad4:	79fb      	ldrb	r3, [r7, #7]
 800cad6:	b299      	uxth	r1, r3
 800cad8:	79bb      	ldrb	r3, [r7, #6]
 800cada:	b29a      	uxth	r2, r3
 800cadc:	4b0b      	ldr	r3, [pc, #44]	; (800cb0c <I2Cx_ReadData+0x50>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	9302      	str	r3, [sp, #8]
 800cae2:	2301      	movs	r3, #1
 800cae4:	9301      	str	r3, [sp, #4]
 800cae6:	f107 030e 	add.w	r3, r7, #14
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	2301      	movs	r3, #1
 800caee:	4808      	ldr	r0, [pc, #32]	; (800cb10 <I2Cx_ReadData+0x54>)
 800caf0:	f7f8 f972 	bl	8004dd8 <HAL_I2C_Mem_Read>
 800caf4:	4603      	mov	r3, r0
 800caf6:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800cafe:	f000 f837 	bl	800cb70 <I2Cx_Error>
  
  }
  return value;
 800cb02:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	20000064 	.word	0x20000064
 800cb10:	200003e8 	.word	0x200003e8

0800cb14 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b088      	sub	sp, #32
 800cb18:	af04      	add	r7, sp, #16
 800cb1a:	603a      	str	r2, [r7, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	4603      	mov	r3, r0
 800cb20:	71fb      	strb	r3, [r7, #7]
 800cb22:	460b      	mov	r3, r1
 800cb24:	71bb      	strb	r3, [r7, #6]
 800cb26:	4613      	mov	r3, r2
 800cb28:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
 800cb30:	b299      	uxth	r1, r3
 800cb32:	79bb      	ldrb	r3, [r7, #6]
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	4b0c      	ldr	r3, [pc, #48]	; (800cb68 <I2Cx_ReadBuffer+0x54>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	9302      	str	r3, [sp, #8]
 800cb3c:	88bb      	ldrh	r3, [r7, #4]
 800cb3e:	9301      	str	r3, [sp, #4]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	2301      	movs	r3, #1
 800cb46:	4809      	ldr	r0, [pc, #36]	; (800cb6c <I2Cx_ReadBuffer+0x58>)
 800cb48:	f7f8 f946 	bl	8004dd8 <HAL_I2C_Mem_Read>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d101      	bne.n	800cb5a <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	e002      	b.n	800cb60 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800cb5a:	f000 f809 	bl	800cb70 <I2Cx_Error>

    return 1;
 800cb5e:	2301      	movs	r3, #1
  }
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	20000064 	.word	0x20000064
 800cb6c:	200003e8 	.word	0x200003e8

0800cb70 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800cb74:	4803      	ldr	r0, [pc, #12]	; (800cb84 <I2Cx_Error+0x14>)
 800cb76:	f7f8 f805 	bl	8004b84 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800cb7a:	f7ff ff13 	bl	800c9a4 <I2Cx_Init>
}
 800cb7e:	bf00      	nop
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	200003e8 	.word	0x200003e8

0800cb88 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800cb8c:	4819      	ldr	r0, [pc, #100]	; (800cbf4 <SPIx_Init+0x6c>)
 800cb8e:	f7fa fef7 	bl	8007980 <HAL_SPI_GetState>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d12b      	bne.n	800cbf0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800cb98:	4b16      	ldr	r3, [pc, #88]	; (800cbf4 <SPIx_Init+0x6c>)
 800cb9a:	4a17      	ldr	r2, [pc, #92]	; (800cbf8 <SPIx_Init+0x70>)
 800cb9c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800cb9e:	4b15      	ldr	r3, [pc, #84]	; (800cbf4 <SPIx_Init+0x6c>)
 800cba0:	2218      	movs	r2, #24
 800cba2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800cba4:	4b13      	ldr	r3, [pc, #76]	; (800cbf4 <SPIx_Init+0x6c>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800cbaa:	4b12      	ldr	r3, [pc, #72]	; (800cbf4 <SPIx_Init+0x6c>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800cbb0:	4b10      	ldr	r3, [pc, #64]	; (800cbf4 <SPIx_Init+0x6c>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800cbb6:	4b0f      	ldr	r3, [pc, #60]	; (800cbf4 <SPIx_Init+0x6c>)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800cbbc:	4b0d      	ldr	r3, [pc, #52]	; (800cbf4 <SPIx_Init+0x6c>)
 800cbbe:	2207      	movs	r2, #7
 800cbc0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800cbc2:	4b0c      	ldr	r3, [pc, #48]	; (800cbf4 <SPIx_Init+0x6c>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800cbc8:	4b0a      	ldr	r3, [pc, #40]	; (800cbf4 <SPIx_Init+0x6c>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800cbce:	4b09      	ldr	r3, [pc, #36]	; (800cbf4 <SPIx_Init+0x6c>)
 800cbd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbd4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800cbd6:	4b07      	ldr	r3, [pc, #28]	; (800cbf4 <SPIx_Init+0x6c>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800cbdc:	4b05      	ldr	r3, [pc, #20]	; (800cbf4 <SPIx_Init+0x6c>)
 800cbde:	f44f 7282 	mov.w	r2, #260	; 0x104
 800cbe2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800cbe4:	4803      	ldr	r0, [pc, #12]	; (800cbf4 <SPIx_Init+0x6c>)
 800cbe6:	f000 f853 	bl	800cc90 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800cbea:	4802      	ldr	r0, [pc, #8]	; (800cbf4 <SPIx_Init+0x6c>)
 800cbec:	f7fa fa11 	bl	8007012 <HAL_SPI_Init>
  } 
}
 800cbf0:	bf00      	nop
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	2000043c 	.word	0x2000043c
 800cbf8:	40015000 	.word	0x40015000

0800cbfc <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	4603      	mov	r3, r0
 800cc04:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800cc06:	2300      	movs	r3, #0
 800cc08:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800cc0a:	79fb      	ldrb	r3, [r7, #7]
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	4b09      	ldr	r3, [pc, #36]	; (800cc34 <SPIx_Read+0x38>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f107 0108 	add.w	r1, r7, #8
 800cc16:	4808      	ldr	r0, [pc, #32]	; (800cc38 <SPIx_Read+0x3c>)
 800cc18:	f7fa fbf0 	bl	80073fc <HAL_SPI_Receive>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800cc26:	f000 f827 	bl	800cc78 <SPIx_Error>
  }
  
  return readvalue;
 800cc2a:	68bb      	ldr	r3, [r7, #8]
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20000068 	.word	0x20000068
 800cc38:	2000043c 	.word	0x2000043c

0800cc3c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800cc46:	2300      	movs	r3, #0
 800cc48:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800cc4a:	4b09      	ldr	r3, [pc, #36]	; (800cc70 <SPIx_Write+0x34>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	1db9      	adds	r1, r7, #6
 800cc50:	2201      	movs	r2, #1
 800cc52:	4808      	ldr	r0, [pc, #32]	; (800cc74 <SPIx_Write+0x38>)
 800cc54:	f7fa fa8e 	bl	8007174 <HAL_SPI_Transmit>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800cc5c:	7bfb      	ldrb	r3, [r7, #15]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d001      	beq.n	800cc66 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800cc62:	f000 f809 	bl	800cc78 <SPIx_Error>
  }
}
 800cc66:	bf00      	nop
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	20000068 	.word	0x20000068
 800cc74:	2000043c 	.word	0x2000043c

0800cc78 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800cc7c:	4803      	ldr	r0, [pc, #12]	; (800cc8c <SPIx_Error+0x14>)
 800cc7e:	f7fa fa51 	bl	8007124 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800cc82:	f7ff ff81 	bl	800cb88 <SPIx_Init>
}
 800cc86:	bf00      	nop
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	2000043c 	.word	0x2000043c

0800cc90 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b08a      	sub	sp, #40	; 0x28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800cc98:	2300      	movs	r3, #0
 800cc9a:	613b      	str	r3, [r7, #16]
 800cc9c:	4b17      	ldr	r3, [pc, #92]	; (800ccfc <SPIx_MspInit+0x6c>)
 800cc9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cca0:	4a16      	ldr	r2, [pc, #88]	; (800ccfc <SPIx_MspInit+0x6c>)
 800cca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cca6:	6453      	str	r3, [r2, #68]	; 0x44
 800cca8:	4b14      	ldr	r3, [pc, #80]	; (800ccfc <SPIx_MspInit+0x6c>)
 800ccaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ccb0:	613b      	str	r3, [r7, #16]
 800ccb2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	60fb      	str	r3, [r7, #12]
 800ccb8:	4b10      	ldr	r3, [pc, #64]	; (800ccfc <SPIx_MspInit+0x6c>)
 800ccba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccbc:	4a0f      	ldr	r2, [pc, #60]	; (800ccfc <SPIx_MspInit+0x6c>)
 800ccbe:	f043 0320 	orr.w	r3, r3, #32
 800ccc2:	6313      	str	r3, [r2, #48]	; 0x30
 800ccc4:	4b0d      	ldr	r3, [pc, #52]	; (800ccfc <SPIx_MspInit+0x6c>)
 800ccc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc8:	f003 0320 	and.w	r3, r3, #32
 800cccc:	60fb      	str	r3, [r7, #12]
 800ccce:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800ccd0:	f44f 7360 	mov.w	r3, #896	; 0x380
 800ccd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800ccda:	2302      	movs	r3, #2
 800ccdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800ccde:	2301      	movs	r3, #1
 800cce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800cce2:	2305      	movs	r3, #5
 800cce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800cce6:	f107 0314 	add.w	r3, r7, #20
 800ccea:	4619      	mov	r1, r3
 800ccec:	4804      	ldr	r0, [pc, #16]	; (800cd00 <SPIx_MspInit+0x70>)
 800ccee:	f7f5 f9ff 	bl	80020f0 <HAL_GPIO_Init>
}
 800ccf2:	bf00      	nop
 800ccf4:	3728      	adds	r7, #40	; 0x28
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	40023800 	.word	0x40023800
 800cd00:	40021400 	.word	0x40021400

0800cd04 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b088      	sub	sp, #32
 800cd08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800cd0a:	4b36      	ldr	r3, [pc, #216]	; (800cde4 <LCD_IO_Init+0xe0>)
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d164      	bne.n	800cddc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800cd12:	4b34      	ldr	r3, [pc, #208]	; (800cde4 <LCD_IO_Init+0xe0>)
 800cd14:	2201      	movs	r2, #1
 800cd16:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800cd18:	2300      	movs	r3, #0
 800cd1a:	60bb      	str	r3, [r7, #8]
 800cd1c:	4b32      	ldr	r3, [pc, #200]	; (800cde8 <LCD_IO_Init+0xe4>)
 800cd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd20:	4a31      	ldr	r2, [pc, #196]	; (800cde8 <LCD_IO_Init+0xe4>)
 800cd22:	f043 0308 	orr.w	r3, r3, #8
 800cd26:	6313      	str	r3, [r2, #48]	; 0x30
 800cd28:	4b2f      	ldr	r3, [pc, #188]	; (800cde8 <LCD_IO_Init+0xe4>)
 800cd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd2c:	f003 0308 	and.w	r3, r3, #8
 800cd30:	60bb      	str	r3, [r7, #8]
 800cd32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800cd34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800cd42:	2302      	movs	r3, #2
 800cd44:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800cd46:	f107 030c 	add.w	r3, r7, #12
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	4827      	ldr	r0, [pc, #156]	; (800cdec <LCD_IO_Init+0xe8>)
 800cd4e:	f7f5 f9cf 	bl	80020f0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800cd52:	2300      	movs	r3, #0
 800cd54:	607b      	str	r3, [r7, #4]
 800cd56:	4b24      	ldr	r3, [pc, #144]	; (800cde8 <LCD_IO_Init+0xe4>)
 800cd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd5a:	4a23      	ldr	r2, [pc, #140]	; (800cde8 <LCD_IO_Init+0xe4>)
 800cd5c:	f043 0308 	orr.w	r3, r3, #8
 800cd60:	6313      	str	r3, [r2, #48]	; 0x30
 800cd62:	4b21      	ldr	r3, [pc, #132]	; (800cde8 <LCD_IO_Init+0xe4>)
 800cd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd66:	f003 0308 	and.w	r3, r3, #8
 800cd6a:	607b      	str	r3, [r7, #4]
 800cd6c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800cd6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800cd74:	2301      	movs	r3, #1
 800cd76:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800cd80:	f107 030c 	add.w	r3, r7, #12
 800cd84:	4619      	mov	r1, r3
 800cd86:	4819      	ldr	r0, [pc, #100]	; (800cdec <LCD_IO_Init+0xe8>)
 800cd88:	f7f5 f9b2 	bl	80020f0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	603b      	str	r3, [r7, #0]
 800cd90:	4b15      	ldr	r3, [pc, #84]	; (800cde8 <LCD_IO_Init+0xe4>)
 800cd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd94:	4a14      	ldr	r2, [pc, #80]	; (800cde8 <LCD_IO_Init+0xe4>)
 800cd96:	f043 0304 	orr.w	r3, r3, #4
 800cd9a:	6313      	str	r3, [r2, #48]	; 0x30
 800cd9c:	4b12      	ldr	r3, [pc, #72]	; (800cde8 <LCD_IO_Init+0xe4>)
 800cd9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda0:	f003 0304 	and.w	r3, r3, #4
 800cda4:	603b      	str	r3, [r7, #0]
 800cda6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800cda8:	2304      	movs	r3, #4
 800cdaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800cdac:	2301      	movs	r3, #1
 800cdae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800cdb8:	f107 030c 	add.w	r3, r7, #12
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	480c      	ldr	r0, [pc, #48]	; (800cdf0 <LCD_IO_Init+0xec>)
 800cdc0:	f7f5 f996 	bl	80020f0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	2104      	movs	r1, #4
 800cdc8:	4809      	ldr	r0, [pc, #36]	; (800cdf0 <LCD_IO_Init+0xec>)
 800cdca:	f7f5 fc49 	bl	8002660 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800cdce:	2201      	movs	r2, #1
 800cdd0:	2104      	movs	r1, #4
 800cdd2:	4807      	ldr	r0, [pc, #28]	; (800cdf0 <LCD_IO_Init+0xec>)
 800cdd4:	f7f5 fc44 	bl	8002660 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800cdd8:	f7ff fed6 	bl	800cb88 <SPIx_Init>
  }
}
 800cddc:	bf00      	nop
 800cdde:	3720      	adds	r7, #32
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	20000494 	.word	0x20000494
 800cde8:	40023800 	.word	0x40023800
 800cdec:	40020c00 	.word	0x40020c00
 800cdf0:	40020800 	.word	0x40020800

0800cdf4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ce04:	480a      	ldr	r0, [pc, #40]	; (800ce30 <LCD_IO_WriteData+0x3c>)
 800ce06:	f7f5 fc2b 	bl	8002660 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	2104      	movs	r1, #4
 800ce0e:	4809      	ldr	r0, [pc, #36]	; (800ce34 <LCD_IO_WriteData+0x40>)
 800ce10:	f7f5 fc26 	bl	8002660 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800ce14:	88fb      	ldrh	r3, [r7, #6]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff ff10 	bl	800cc3c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	2104      	movs	r1, #4
 800ce20:	4804      	ldr	r0, [pc, #16]	; (800ce34 <LCD_IO_WriteData+0x40>)
 800ce22:	f7f5 fc1d 	bl	8002660 <HAL_GPIO_WritePin>
}
 800ce26:	bf00      	nop
 800ce28:	3708      	adds	r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	40020c00 	.word	0x40020c00
 800ce34:	40020800 	.word	0x40020800

0800ce38 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	4603      	mov	r3, r0
 800ce40:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800ce42:	2200      	movs	r2, #0
 800ce44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ce48:	480a      	ldr	r0, [pc, #40]	; (800ce74 <LCD_IO_WriteReg+0x3c>)
 800ce4a:	f7f5 fc09 	bl	8002660 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800ce4e:	2200      	movs	r2, #0
 800ce50:	2104      	movs	r1, #4
 800ce52:	4809      	ldr	r0, [pc, #36]	; (800ce78 <LCD_IO_WriteReg+0x40>)
 800ce54:	f7f5 fc04 	bl	8002660 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800ce58:	79fb      	ldrb	r3, [r7, #7]
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff feed 	bl	800cc3c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800ce62:	2201      	movs	r2, #1
 800ce64:	2104      	movs	r1, #4
 800ce66:	4804      	ldr	r0, [pc, #16]	; (800ce78 <LCD_IO_WriteReg+0x40>)
 800ce68:	f7f5 fbfa 	bl	8002660 <HAL_GPIO_WritePin>
}
 800ce6c:	bf00      	nop
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	40020c00 	.word	0x40020c00
 800ce78:	40020800 	.word	0x40020800

0800ce7c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	460a      	mov	r2, r1
 800ce86:	80fb      	strh	r3, [r7, #6]
 800ce88:	4613      	mov	r3, r2
 800ce8a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800ce90:	2200      	movs	r2, #0
 800ce92:	2104      	movs	r1, #4
 800ce94:	4810      	ldr	r0, [pc, #64]	; (800ced8 <LCD_IO_ReadData+0x5c>)
 800ce96:	f7f5 fbe3 	bl	8002660 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cea0:	480e      	ldr	r0, [pc, #56]	; (800cedc <LCD_IO_ReadData+0x60>)
 800cea2:	f7f5 fbdd 	bl	8002660 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800cea6:	88fb      	ldrh	r3, [r7, #6]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7ff fec7 	bl	800cc3c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800ceae:	797b      	ldrb	r3, [r7, #5]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7ff fea3 	bl	800cbfc <SPIx_Read>
 800ceb6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800ceb8:	2201      	movs	r2, #1
 800ceba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cebe:	4807      	ldr	r0, [pc, #28]	; (800cedc <LCD_IO_ReadData+0x60>)
 800cec0:	f7f5 fbce 	bl	8002660 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800cec4:	2201      	movs	r2, #1
 800cec6:	2104      	movs	r1, #4
 800cec8:	4803      	ldr	r0, [pc, #12]	; (800ced8 <LCD_IO_ReadData+0x5c>)
 800ceca:	f7f5 fbc9 	bl	8002660 <HAL_GPIO_WritePin>
  
  return readvalue;
 800cece:	68fb      	ldr	r3, [r7, #12]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3710      	adds	r7, #16
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	40020800 	.word	0x40020800
 800cedc:	40020c00 	.word	0x40020c00

0800cee0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7f4 fc35 	bl	8001758 <HAL_Delay>
}
 800ceee:	bf00      	nop
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800cefa:	f7ff fd53 	bl	800c9a4 <I2Cx_Init>
}
 800cefe:	bf00      	nop
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800cf06:	f7ff fd7f 	bl	800ca08 <I2Cx_ITConfig>
}
 800cf0a:	bf00      	nop
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b082      	sub	sp, #8
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	4603      	mov	r3, r0
 800cf16:	71fb      	strb	r3, [r7, #7]
 800cf18:	460b      	mov	r3, r1
 800cf1a:	71bb      	strb	r3, [r7, #6]
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 800cf20:	797a      	ldrb	r2, [r7, #5]
 800cf22:	79b9      	ldrb	r1, [r7, #6]
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7ff fd9e 	bl	800ca68 <I2Cx_WriteData>
}
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	460a      	mov	r2, r1
 800cf3e:	71fb      	strb	r3, [r7, #7]
 800cf40:	4613      	mov	r3, r2
 800cf42:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800cf44:	79ba      	ldrb	r2, [r7, #6]
 800cf46:	79fb      	ldrb	r3, [r7, #7]
 800cf48:	4611      	mov	r1, r2
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff fdb6 	bl	800cabc <I2Cx_ReadData>
 800cf50:	4603      	mov	r3, r0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	603a      	str	r2, [r7, #0]
 800cf62:	461a      	mov	r2, r3
 800cf64:	4603      	mov	r3, r0
 800cf66:	71fb      	strb	r3, [r7, #7]
 800cf68:	460b      	mov	r3, r1
 800cf6a:	71bb      	strb	r3, [r7, #6]
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 800cf70:	88bb      	ldrh	r3, [r7, #4]
 800cf72:	79b9      	ldrb	r1, [r7, #6]
 800cf74:	79f8      	ldrb	r0, [r7, #7]
 800cf76:	683a      	ldr	r2, [r7, #0]
 800cf78:	f7ff fdcc 	bl	800cb14 <I2Cx_ReadBuffer>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	b29b      	uxth	r3, r3
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f7f4 fbe1 	bl	8001758 <HAL_Delay>
}
 800cf96:	bf00      	nop
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
	...

0800cfa0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800cfa4:	4b2b      	ldr	r3, [pc, #172]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cfa6:	4a2c      	ldr	r2, [pc, #176]	; (800d058 <BSP_LCD_Init+0xb8>)
 800cfa8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800cfaa:	4b2a      	ldr	r3, [pc, #168]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cfac:	2209      	movs	r2, #9
 800cfae:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800cfb0:	4b28      	ldr	r3, [pc, #160]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800cfb6:	4b27      	ldr	r3, [pc, #156]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cfb8:	221d      	movs	r2, #29
 800cfba:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800cfbc:	4b25      	ldr	r3, [pc, #148]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cfbe:	2203      	movs	r2, #3
 800cfc0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800cfc2:	4b24      	ldr	r3, [pc, #144]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cfc4:	f240 120d 	movw	r2, #269	; 0x10d
 800cfc8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800cfca:	4b22      	ldr	r3, [pc, #136]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cfcc:	f240 1243 	movw	r2, #323	; 0x143
 800cfd0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800cfd2:	4b20      	ldr	r3, [pc, #128]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cfd4:	f240 1217 	movw	r2, #279	; 0x117
 800cfd8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800cfda:	4b1e      	ldr	r3, [pc, #120]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cfdc:	f240 1247 	movw	r2, #327	; 0x147
 800cfe0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800cfe2:	4b1c      	ldr	r3, [pc, #112]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800cfea:	4b1a      	ldr	r3, [pc, #104]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800cff2:	4b18      	ldr	r3, [pc, #96]	; (800d054 <BSP_LCD_Init+0xb4>)
 800cff4:	2200      	movs	r2, #0
 800cff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800cffa:	4b18      	ldr	r3, [pc, #96]	; (800d05c <BSP_LCD_Init+0xbc>)
 800cffc:	2208      	movs	r2, #8
 800cffe:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800d000:	4b16      	ldr	r3, [pc, #88]	; (800d05c <BSP_LCD_Init+0xbc>)
 800d002:	22c0      	movs	r2, #192	; 0xc0
 800d004:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800d006:	4b15      	ldr	r3, [pc, #84]	; (800d05c <BSP_LCD_Init+0xbc>)
 800d008:	2204      	movs	r2, #4
 800d00a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800d00c:	4b13      	ldr	r3, [pc, #76]	; (800d05c <BSP_LCD_Init+0xbc>)
 800d00e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d012:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800d014:	4811      	ldr	r0, [pc, #68]	; (800d05c <BSP_LCD_Init+0xbc>)
 800d016:	f7f9 fdab 	bl	8006b70 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800d01a:	4b0e      	ldr	r3, [pc, #56]	; (800d054 <BSP_LCD_Init+0xb4>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800d020:	4b0c      	ldr	r3, [pc, #48]	; (800d054 <BSP_LCD_Init+0xb4>)
 800d022:	2200      	movs	r2, #0
 800d024:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800d026:	4b0b      	ldr	r3, [pc, #44]	; (800d054 <BSP_LCD_Init+0xb4>)
 800d028:	2200      	movs	r2, #0
 800d02a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800d02c:	4b09      	ldr	r3, [pc, #36]	; (800d054 <BSP_LCD_Init+0xb4>)
 800d02e:	2200      	movs	r2, #0
 800d030:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800d032:	f000 f8bf 	bl	800d1b4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800d036:	4807      	ldr	r0, [pc, #28]	; (800d054 <BSP_LCD_Init+0xb4>)
 800d038:	f7f8 fd3e 	bl	8005ab8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800d03c:	4b08      	ldr	r3, [pc, #32]	; (800d060 <BSP_LCD_Init+0xc0>)
 800d03e:	4a09      	ldr	r2, [pc, #36]	; (800d064 <BSP_LCD_Init+0xc4>)
 800d040:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800d042:	4b07      	ldr	r3, [pc, #28]	; (800d060 <BSP_LCD_Init+0xc0>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800d04a:	f000 f989 	bl	800d360 <BSP_SDRAM_Init>

  return LCD_OK;
 800d04e:	2300      	movs	r3, #0
}  
 800d050:	4618      	mov	r0, r3
 800d052:	bd80      	pop	{r7, pc}
 800d054:	20000498 	.word	0x20000498
 800d058:	40016800 	.word	0x40016800
 800d05c:	20000540 	.word	0x20000540
 800d060:	20000580 	.word	0x20000580
 800d064:	2000002c 	.word	0x2000002c

0800d068 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800d06c:	4b03      	ldr	r3, [pc, #12]	; (800d07c <BSP_LCD_GetXSize+0x14>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d072:	4798      	blx	r3
 800d074:	4603      	mov	r3, r0
}
 800d076:	4618      	mov	r0, r3
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	20000580 	.word	0x20000580

0800d080 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800d084:	4b03      	ldr	r3, [pc, #12]	; (800d094 <BSP_LCD_GetYSize+0x14>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08a:	4798      	blx	r3
 800d08c:	4603      	mov	r3, r0
}
 800d08e:	4618      	mov	r0, r3
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	20000580 	.word	0x20000580

0800d098 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800d098:	b580      	push	{r7, lr}
 800d09a:	b090      	sub	sp, #64	; 0x40
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	4603      	mov	r3, r0
 800d0a0:	6039      	str	r1, [r7, #0]
 800d0a2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800d0a8:	f7ff ffde 	bl	800d068 <BSP_LCD_GetXSize>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800d0b4:	f7ff ffe4 	bl	800d080 <BSP_LCD_GetYSize>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800d0c4:	23ff      	movs	r3, #255	; 0xff
 800d0c6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800d0de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800d0e2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800d0e4:	2307      	movs	r3, #7
 800d0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800d0e8:	f7ff ffbe 	bl	800d068 <BSP_LCD_GetXSize>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800d0f0:	f7ff ffc6 	bl	800d080 <BSP_LCD_GetYSize>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800d0f8:	88fa      	ldrh	r2, [r7, #6]
 800d0fa:	f107 030c 	add.w	r3, r7, #12
 800d0fe:	4619      	mov	r1, r3
 800d100:	480b      	ldr	r0, [pc, #44]	; (800d130 <BSP_LCD_LayerDefaultInit+0x98>)
 800d102:	f7f8 fe6b 	bl	8005ddc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800d106:	88fb      	ldrh	r3, [r7, #6]
 800d108:	4a0a      	ldr	r2, [pc, #40]	; (800d134 <BSP_LCD_LayerDefaultInit+0x9c>)
 800d10a:	00db      	lsls	r3, r3, #3
 800d10c:	4413      	add	r3, r2
 800d10e:	f04f 32ff 	mov.w	r2, #4294967295
 800d112:	605a      	str	r2, [r3, #4]

  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800d114:	88fb      	ldrh	r3, [r7, #6]
 800d116:	4a07      	ldr	r2, [pc, #28]	; (800d134 <BSP_LCD_LayerDefaultInit+0x9c>)
 800d118:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 800d11c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800d120:	4803      	ldr	r0, [pc, #12]	; (800d130 <BSP_LCD_LayerDefaultInit+0x98>)
 800d122:	f7f8 fe99 	bl	8005e58 <HAL_LTDC_EnableDither>
}
 800d126:	bf00      	nop
 800d128:	3740      	adds	r7, #64	; 0x40
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	20000498 	.word	0x20000498
 800d134:	20000570 	.word	0x20000570

0800d138 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	460b      	mov	r3, r1
 800d142:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 800d144:	78fb      	ldrb	r3, [r7, #3]
 800d146:	2b01      	cmp	r3, #1
 800d148:	d112      	bne.n	800d170 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 800d14a:	4b19      	ldr	r3, [pc, #100]	; (800d1b0 <BSP_LCD_SetLayerVisible+0x78>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	01db      	lsls	r3, r3, #7
 800d154:	4413      	add	r3, r2
 800d156:	3384      	adds	r3, #132	; 0x84
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a15      	ldr	r2, [pc, #84]	; (800d1b0 <BSP_LCD_SetLayerVisible+0x78>)
 800d15c:	6812      	ldr	r2, [r2, #0]
 800d15e:	4611      	mov	r1, r2
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	01d2      	lsls	r2, r2, #7
 800d164:	440a      	add	r2, r1
 800d166:	3284      	adds	r2, #132	; 0x84
 800d168:	f043 0301 	orr.w	r3, r3, #1
 800d16c:	6013      	str	r3, [r2, #0]
 800d16e:	e011      	b.n	800d194 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 800d170:	4b0f      	ldr	r3, [pc, #60]	; (800d1b0 <BSP_LCD_SetLayerVisible+0x78>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	461a      	mov	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	01db      	lsls	r3, r3, #7
 800d17a:	4413      	add	r3, r2
 800d17c:	3384      	adds	r3, #132	; 0x84
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a0b      	ldr	r2, [pc, #44]	; (800d1b0 <BSP_LCD_SetLayerVisible+0x78>)
 800d182:	6812      	ldr	r2, [r2, #0]
 800d184:	4611      	mov	r1, r2
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	01d2      	lsls	r2, r2, #7
 800d18a:	440a      	add	r2, r1
 800d18c:	3284      	adds	r2, #132	; 0x84
 800d18e:	f023 0301 	bic.w	r3, r3, #1
 800d192:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 800d194:	4b06      	ldr	r3, [pc, #24]	; (800d1b0 <BSP_LCD_SetLayerVisible+0x78>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d19a:	4b05      	ldr	r3, [pc, #20]	; (800d1b0 <BSP_LCD_SetLayerVisible+0x78>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f042 0201 	orr.w	r2, r2, #1
 800d1a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d1a4:	bf00      	nop
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr
 800d1b0:	20000498 	.word	0x20000498

0800d1b4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b08e      	sub	sp, #56	; 0x38
 800d1b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	623b      	str	r3, [r7, #32]
 800d1be:	4b61      	ldr	r3, [pc, #388]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1c2:	4a60      	ldr	r2, [pc, #384]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d1c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d1c8:	6453      	str	r3, [r2, #68]	; 0x44
 800d1ca:	4b5e      	ldr	r3, [pc, #376]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d1d2:	623b      	str	r3, [r7, #32]
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	61fb      	str	r3, [r7, #28]
 800d1da:	4b5a      	ldr	r3, [pc, #360]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1de:	4a59      	ldr	r2, [pc, #356]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d1e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d1e4:	6313      	str	r3, [r2, #48]	; 0x30
 800d1e6:	4b57      	ldr	r3, [pc, #348]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1ee:	61fb      	str	r3, [r7, #28]
 800d1f0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	61bb      	str	r3, [r7, #24]
 800d1f6:	4b53      	ldr	r3, [pc, #332]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1fa:	4a52      	ldr	r2, [pc, #328]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d1fc:	f043 0301 	orr.w	r3, r3, #1
 800d200:	6313      	str	r3, [r2, #48]	; 0x30
 800d202:	4b50      	ldr	r3, [pc, #320]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d206:	f003 0301 	and.w	r3, r3, #1
 800d20a:	61bb      	str	r3, [r7, #24]
 800d20c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d20e:	2300      	movs	r3, #0
 800d210:	617b      	str	r3, [r7, #20]
 800d212:	4b4c      	ldr	r3, [pc, #304]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d216:	4a4b      	ldr	r2, [pc, #300]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d218:	f043 0302 	orr.w	r3, r3, #2
 800d21c:	6313      	str	r3, [r2, #48]	; 0x30
 800d21e:	4b49      	ldr	r3, [pc, #292]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d222:	f003 0302 	and.w	r3, r3, #2
 800d226:	617b      	str	r3, [r7, #20]
 800d228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d22a:	2300      	movs	r3, #0
 800d22c:	613b      	str	r3, [r7, #16]
 800d22e:	4b45      	ldr	r3, [pc, #276]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d232:	4a44      	ldr	r2, [pc, #272]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d234:	f043 0304 	orr.w	r3, r3, #4
 800d238:	6313      	str	r3, [r2, #48]	; 0x30
 800d23a:	4b42      	ldr	r3, [pc, #264]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d23e:	f003 0304 	and.w	r3, r3, #4
 800d242:	613b      	str	r3, [r7, #16]
 800d244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d246:	2300      	movs	r3, #0
 800d248:	60fb      	str	r3, [r7, #12]
 800d24a:	4b3e      	ldr	r3, [pc, #248]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d24e:	4a3d      	ldr	r2, [pc, #244]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d250:	f043 0308 	orr.w	r3, r3, #8
 800d254:	6313      	str	r3, [r2, #48]	; 0x30
 800d256:	4b3b      	ldr	r3, [pc, #236]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25a:	f003 0308 	and.w	r3, r3, #8
 800d25e:	60fb      	str	r3, [r7, #12]
 800d260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d262:	2300      	movs	r3, #0
 800d264:	60bb      	str	r3, [r7, #8]
 800d266:	4b37      	ldr	r3, [pc, #220]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d26a:	4a36      	ldr	r2, [pc, #216]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d26c:	f043 0320 	orr.w	r3, r3, #32
 800d270:	6313      	str	r3, [r2, #48]	; 0x30
 800d272:	4b34      	ldr	r3, [pc, #208]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d276:	f003 0320 	and.w	r3, r3, #32
 800d27a:	60bb      	str	r3, [r7, #8]
 800d27c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d27e:	2300      	movs	r3, #0
 800d280:	607b      	str	r3, [r7, #4]
 800d282:	4b30      	ldr	r3, [pc, #192]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d286:	4a2f      	ldr	r2, [pc, #188]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d28c:	6313      	str	r3, [r2, #48]	; 0x30
 800d28e:	4b2d      	ldr	r3, [pc, #180]	; (800d344 <BSP_LCD_MspInit+0x190>)
 800d290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d296:	607b      	str	r3, [r7, #4]
 800d298:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800d29a:	f641 0358 	movw	r3, #6232	; 0x1858
 800d29e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800d2ac:	230e      	movs	r3, #14
 800d2ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800d2b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4824      	ldr	r0, [pc, #144]	; (800d348 <BSP_LCD_MspInit+0x194>)
 800d2b8:	f7f4 ff1a 	bl	80020f0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800d2bc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800d2c0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800d2c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	4820      	ldr	r0, [pc, #128]	; (800d34c <BSP_LCD_MspInit+0x198>)
 800d2ca:	f7f4 ff11 	bl	80020f0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800d2ce:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800d2d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800d2d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2d8:	4619      	mov	r1, r3
 800d2da:	481d      	ldr	r0, [pc, #116]	; (800d350 <BSP_LCD_MspInit+0x19c>)
 800d2dc:	f7f4 ff08 	bl	80020f0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800d2e0:	2348      	movs	r3, #72	; 0x48
 800d2e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800d2e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	481a      	ldr	r0, [pc, #104]	; (800d354 <BSP_LCD_MspInit+0x1a0>)
 800d2ec:	f7f4 ff00 	bl	80020f0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800d2f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800d2f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4816      	ldr	r0, [pc, #88]	; (800d358 <BSP_LCD_MspInit+0x1a4>)
 800d2fe:	f7f4 fef7 	bl	80020f0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800d302:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800d306:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800d308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d30c:	4619      	mov	r1, r3
 800d30e:	4813      	ldr	r0, [pc, #76]	; (800d35c <BSP_LCD_MspInit+0x1a8>)
 800d310:	f7f4 feee 	bl	80020f0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800d314:	2303      	movs	r3, #3
 800d316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800d318:	2309      	movs	r3, #9
 800d31a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800d31c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d320:	4619      	mov	r1, r3
 800d322:	480a      	ldr	r0, [pc, #40]	; (800d34c <BSP_LCD_MspInit+0x198>)
 800d324:	f7f4 fee4 	bl	80020f0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800d328:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d32c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800d32e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d332:	4619      	mov	r1, r3
 800d334:	4809      	ldr	r0, [pc, #36]	; (800d35c <BSP_LCD_MspInit+0x1a8>)
 800d336:	f7f4 fedb 	bl	80020f0 <HAL_GPIO_Init>
}
 800d33a:	bf00      	nop
 800d33c:	3738      	adds	r7, #56	; 0x38
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	40023800 	.word	0x40023800
 800d348:	40020000 	.word	0x40020000
 800d34c:	40020400 	.word	0x40020400
 800d350:	40020800 	.word	0x40020800
 800d354:	40020c00 	.word	0x40020c00
 800d358:	40021400 	.word	0x40021400
 800d35c:	40021800 	.word	0x40021800

0800d360 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800d364:	4b29      	ldr	r3, [pc, #164]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d366:	4a2a      	ldr	r2, [pc, #168]	; (800d410 <BSP_SDRAM_Init+0xb0>)
 800d368:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800d36a:	4b2a      	ldr	r3, [pc, #168]	; (800d414 <BSP_SDRAM_Init+0xb4>)
 800d36c:	2202      	movs	r2, #2
 800d36e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800d370:	4b28      	ldr	r3, [pc, #160]	; (800d414 <BSP_SDRAM_Init+0xb4>)
 800d372:	2207      	movs	r2, #7
 800d374:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800d376:	4b27      	ldr	r3, [pc, #156]	; (800d414 <BSP_SDRAM_Init+0xb4>)
 800d378:	2204      	movs	r2, #4
 800d37a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800d37c:	4b25      	ldr	r3, [pc, #148]	; (800d414 <BSP_SDRAM_Init+0xb4>)
 800d37e:	2207      	movs	r2, #7
 800d380:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800d382:	4b24      	ldr	r3, [pc, #144]	; (800d414 <BSP_SDRAM_Init+0xb4>)
 800d384:	2202      	movs	r2, #2
 800d386:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800d388:	4b22      	ldr	r3, [pc, #136]	; (800d414 <BSP_SDRAM_Init+0xb4>)
 800d38a:	2202      	movs	r2, #2
 800d38c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800d38e:	4b21      	ldr	r3, [pc, #132]	; (800d414 <BSP_SDRAM_Init+0xb4>)
 800d390:	2202      	movs	r2, #2
 800d392:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800d394:	4b1d      	ldr	r3, [pc, #116]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d396:	2201      	movs	r2, #1
 800d398:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800d39a:	4b1c      	ldr	r3, [pc, #112]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d39c:	2200      	movs	r2, #0
 800d39e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800d3a0:	4b1a      	ldr	r3, [pc, #104]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d3a2:	2204      	movs	r2, #4
 800d3a4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800d3a6:	4b19      	ldr	r3, [pc, #100]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d3a8:	2210      	movs	r2, #16
 800d3aa:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800d3ac:	4b17      	ldr	r3, [pc, #92]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d3ae:	2240      	movs	r2, #64	; 0x40
 800d3b0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800d3b2:	4b16      	ldr	r3, [pc, #88]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d3b4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800d3b8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800d3ba:	4b14      	ldr	r3, [pc, #80]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800d3c0:	4b12      	ldr	r3, [pc, #72]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d3c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3c6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800d3c8:	4b10      	ldr	r3, [pc, #64]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800d3ce:	4b0f      	ldr	r3, [pc, #60]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d3d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d3d4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	480c      	ldr	r0, [pc, #48]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d3da:	f000 f87f 	bl	800d4dc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800d3de:	490d      	ldr	r1, [pc, #52]	; (800d414 <BSP_SDRAM_Init+0xb4>)
 800d3e0:	480a      	ldr	r0, [pc, #40]	; (800d40c <BSP_SDRAM_Init+0xac>)
 800d3e2:	f7f9 fd85 	bl	8006ef0 <HAL_SDRAM_Init>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d003      	beq.n	800d3f4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800d3ec:	4b0a      	ldr	r3, [pc, #40]	; (800d418 <BSP_SDRAM_Init+0xb8>)
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	701a      	strb	r2, [r3, #0]
 800d3f2:	e002      	b.n	800d3fa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800d3f4:	4b08      	ldr	r3, [pc, #32]	; (800d418 <BSP_SDRAM_Init+0xb8>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800d3fa:	f240 506a 	movw	r0, #1386	; 0x56a
 800d3fe:	f000 f80d 	bl	800d41c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800d402:	4b05      	ldr	r3, [pc, #20]	; (800d418 <BSP_SDRAM_Init+0xb8>)
 800d404:	781b      	ldrb	r3, [r3, #0]
}
 800d406:	4618      	mov	r0, r3
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	20000584 	.word	0x20000584
 800d410:	a0000140 	.word	0xa0000140
 800d414:	200005b8 	.word	0x200005b8
 800d418:	2000006c 	.word	0x2000006c

0800d41c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800d424:	2300      	movs	r3, #0
 800d426:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800d428:	4b2a      	ldr	r3, [pc, #168]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d42a:	2201      	movs	r2, #1
 800d42c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800d42e:	4b29      	ldr	r3, [pc, #164]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d430:	2208      	movs	r2, #8
 800d432:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800d434:	4b27      	ldr	r3, [pc, #156]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d436:	2201      	movs	r2, #1
 800d438:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800d43a:	4b26      	ldr	r3, [pc, #152]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d43c:	2200      	movs	r2, #0
 800d43e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800d440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d444:	4923      	ldr	r1, [pc, #140]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d446:	4824      	ldr	r0, [pc, #144]	; (800d4d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800d448:	f7f9 fd86 	bl	8006f58 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800d44c:	2001      	movs	r0, #1
 800d44e:	f7f4 f983 	bl	8001758 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800d452:	4b20      	ldr	r3, [pc, #128]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d454:	2202      	movs	r2, #2
 800d456:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800d458:	4b1e      	ldr	r3, [pc, #120]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d45a:	2208      	movs	r2, #8
 800d45c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800d45e:	4b1d      	ldr	r3, [pc, #116]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d460:	2201      	movs	r2, #1
 800d462:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800d464:	4b1b      	ldr	r3, [pc, #108]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d466:	2200      	movs	r2, #0
 800d468:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800d46a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d46e:	4919      	ldr	r1, [pc, #100]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d470:	4819      	ldr	r0, [pc, #100]	; (800d4d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800d472:	f7f9 fd71 	bl	8006f58 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800d476:	4b17      	ldr	r3, [pc, #92]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d478:	2203      	movs	r2, #3
 800d47a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800d47c:	4b15      	ldr	r3, [pc, #84]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d47e:	2208      	movs	r2, #8
 800d480:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800d482:	4b14      	ldr	r3, [pc, #80]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d484:	2204      	movs	r2, #4
 800d486:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800d488:	4b12      	ldr	r3, [pc, #72]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800d48e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d492:	4910      	ldr	r1, [pc, #64]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d494:	4810      	ldr	r0, [pc, #64]	; (800d4d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800d496:	f7f9 fd5f 	bl	8006f58 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800d49a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800d49e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800d4a0:	4b0c      	ldr	r3, [pc, #48]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d4a2:	2204      	movs	r2, #4
 800d4a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800d4a6:	4b0b      	ldr	r3, [pc, #44]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d4a8:	2208      	movs	r2, #8
 800d4aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800d4ac:	4b09      	ldr	r3, [pc, #36]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	4a07      	ldr	r2, [pc, #28]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d4b6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800d4b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4bc:	4905      	ldr	r1, [pc, #20]	; (800d4d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800d4be:	4806      	ldr	r0, [pc, #24]	; (800d4d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800d4c0:	f7f9 fd4a 	bl	8006f58 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800d4c4:	6879      	ldr	r1, [r7, #4]
 800d4c6:	4804      	ldr	r0, [pc, #16]	; (800d4d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800d4c8:	f7f9 fd7b 	bl	8006fc2 <HAL_SDRAM_ProgramRefreshRate>
}
 800d4cc:	bf00      	nop
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	200005d4 	.word	0x200005d4
 800d4d8:	20000584 	.word	0x20000584

0800d4dc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b090      	sub	sp, #64	; 0x40
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	f000 80ec 	beq.w	800d6c6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4f2:	4b77      	ldr	r3, [pc, #476]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f6:	4a76      	ldr	r2, [pc, #472]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d4f8:	f043 0301 	orr.w	r3, r3, #1
 800d4fc:	6393      	str	r3, [r2, #56]	; 0x38
 800d4fe:	4b74      	ldr	r3, [pc, #464]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d502:	f003 0301 	and.w	r3, r3, #1
 800d506:	62bb      	str	r3, [r7, #40]	; 0x28
 800d508:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800d50a:	2300      	movs	r3, #0
 800d50c:	627b      	str	r3, [r7, #36]	; 0x24
 800d50e:	4b70      	ldr	r3, [pc, #448]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d512:	4a6f      	ldr	r2, [pc, #444]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d518:	6313      	str	r3, [r2, #48]	; 0x30
 800d51a:	4b6d      	ldr	r3, [pc, #436]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d51e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d522:	627b      	str	r3, [r7, #36]	; 0x24
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d526:	2300      	movs	r3, #0
 800d528:	623b      	str	r3, [r7, #32]
 800d52a:	4b69      	ldr	r3, [pc, #420]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d52e:	4a68      	ldr	r2, [pc, #416]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d530:	f043 0302 	orr.w	r3, r3, #2
 800d534:	6313      	str	r3, [r2, #48]	; 0x30
 800d536:	4b66      	ldr	r3, [pc, #408]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d53a:	f003 0302 	and.w	r3, r3, #2
 800d53e:	623b      	str	r3, [r7, #32]
 800d540:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d542:	2300      	movs	r3, #0
 800d544:	61fb      	str	r3, [r7, #28]
 800d546:	4b62      	ldr	r3, [pc, #392]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d54a:	4a61      	ldr	r2, [pc, #388]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d54c:	f043 0304 	orr.w	r3, r3, #4
 800d550:	6313      	str	r3, [r2, #48]	; 0x30
 800d552:	4b5f      	ldr	r3, [pc, #380]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d556:	f003 0304 	and.w	r3, r3, #4
 800d55a:	61fb      	str	r3, [r7, #28]
 800d55c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d55e:	2300      	movs	r3, #0
 800d560:	61bb      	str	r3, [r7, #24]
 800d562:	4b5b      	ldr	r3, [pc, #364]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d566:	4a5a      	ldr	r2, [pc, #360]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d568:	f043 0308 	orr.w	r3, r3, #8
 800d56c:	6313      	str	r3, [r2, #48]	; 0x30
 800d56e:	4b58      	ldr	r3, [pc, #352]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d572:	f003 0308 	and.w	r3, r3, #8
 800d576:	61bb      	str	r3, [r7, #24]
 800d578:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d57a:	2300      	movs	r3, #0
 800d57c:	617b      	str	r3, [r7, #20]
 800d57e:	4b54      	ldr	r3, [pc, #336]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d582:	4a53      	ldr	r2, [pc, #332]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d584:	f043 0310 	orr.w	r3, r3, #16
 800d588:	6313      	str	r3, [r2, #48]	; 0x30
 800d58a:	4b51      	ldr	r3, [pc, #324]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d58e:	f003 0310 	and.w	r3, r3, #16
 800d592:	617b      	str	r3, [r7, #20]
 800d594:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d596:	2300      	movs	r3, #0
 800d598:	613b      	str	r3, [r7, #16]
 800d59a:	4b4d      	ldr	r3, [pc, #308]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d59e:	4a4c      	ldr	r2, [pc, #304]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d5a0:	f043 0320 	orr.w	r3, r3, #32
 800d5a4:	6313      	str	r3, [r2, #48]	; 0x30
 800d5a6:	4b4a      	ldr	r3, [pc, #296]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5aa:	f003 0320 	and.w	r3, r3, #32
 800d5ae:	613b      	str	r3, [r7, #16]
 800d5b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	60fb      	str	r3, [r7, #12]
 800d5b6:	4b46      	ldr	r3, [pc, #280]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ba:	4a45      	ldr	r2, [pc, #276]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5c0:	6313      	str	r3, [r2, #48]	; 0x30
 800d5c2:	4b43      	ldr	r3, [pc, #268]	; (800d6d0 <BSP_SDRAM_MspInit+0x1f4>)
 800d5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ca:	60fb      	str	r3, [r7, #12]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800d5ce:	2302      	movs	r3, #2
 800d5d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800d5d2:	2302      	movs	r3, #2
 800d5d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800d5da:	230c      	movs	r3, #12
 800d5dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800d5de:	2360      	movs	r3, #96	; 0x60
 800d5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800d5e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	483a      	ldr	r0, [pc, #232]	; (800d6d4 <BSP_SDRAM_MspInit+0x1f8>)
 800d5ea:	f7f4 fd81 	bl	80020f0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800d5f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4837      	ldr	r0, [pc, #220]	; (800d6d8 <BSP_SDRAM_MspInit+0x1fc>)
 800d5fa:	f7f4 fd79 	bl	80020f0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800d5fe:	f24c 7303 	movw	r3, #50947	; 0xc703
 800d602:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800d604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d608:	4619      	mov	r1, r3
 800d60a:	4834      	ldr	r0, [pc, #208]	; (800d6dc <BSP_SDRAM_MspInit+0x200>)
 800d60c:	f7f4 fd70 	bl	80020f0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800d610:	f64f 7383 	movw	r3, #65411	; 0xff83
 800d614:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800d616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d61a:	4619      	mov	r1, r3
 800d61c:	4830      	ldr	r0, [pc, #192]	; (800d6e0 <BSP_SDRAM_MspInit+0x204>)
 800d61e:	f7f4 fd67 	bl	80020f0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800d622:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800d626:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800d628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d62c:	4619      	mov	r1, r3
 800d62e:	482d      	ldr	r0, [pc, #180]	; (800d6e4 <BSP_SDRAM_MspInit+0x208>)
 800d630:	f7f4 fd5e 	bl	80020f0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800d634:	f248 1333 	movw	r3, #33075	; 0x8133
 800d638:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800d63a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d63e:	4619      	mov	r1, r3
 800d640:	4829      	ldr	r0, [pc, #164]	; (800d6e8 <BSP_SDRAM_MspInit+0x20c>)
 800d642:	f7f4 fd55 	bl	80020f0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800d646:	4b29      	ldr	r3, [pc, #164]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d648:	2200      	movs	r2, #0
 800d64a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800d64c:	4b27      	ldr	r3, [pc, #156]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d64e:	2280      	movs	r2, #128	; 0x80
 800d650:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800d652:	4b26      	ldr	r3, [pc, #152]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d654:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d658:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800d65a:	4b24      	ldr	r3, [pc, #144]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d65c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d660:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d662:	4b22      	ldr	r3, [pc, #136]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d664:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d668:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800d66a:	4b20      	ldr	r3, [pc, #128]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d66c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d670:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800d672:	4b1e      	ldr	r3, [pc, #120]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d674:	2200      	movs	r2, #0
 800d676:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800d678:	4b1c      	ldr	r3, [pc, #112]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d67a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d67e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800d680:	4b1a      	ldr	r3, [pc, #104]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d682:	2200      	movs	r2, #0
 800d684:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800d686:	4b19      	ldr	r3, [pc, #100]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d688:	2203      	movs	r2, #3
 800d68a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800d68c:	4b17      	ldr	r3, [pc, #92]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d68e:	2200      	movs	r2, #0
 800d690:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800d692:	4b16      	ldr	r3, [pc, #88]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d694:	2200      	movs	r2, #0
 800d696:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800d698:	4b14      	ldr	r3, [pc, #80]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d69a:	4a15      	ldr	r2, [pc, #84]	; (800d6f0 <BSP_SDRAM_MspInit+0x214>)
 800d69c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	4a12      	ldr	r2, [pc, #72]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d6a2:	631a      	str	r2, [r3, #48]	; 0x30
 800d6a4:	4a11      	ldr	r2, [pc, #68]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800d6aa:	4810      	ldr	r0, [pc, #64]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d6ac:	f7f4 fa24 	bl	8001af8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800d6b0:	480e      	ldr	r0, [pc, #56]	; (800d6ec <BSP_SDRAM_MspInit+0x210>)
 800d6b2:	f7f4 f973 	bl	800199c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	210f      	movs	r1, #15
 800d6ba:	2038      	movs	r0, #56	; 0x38
 800d6bc:	f7f4 f928 	bl	8001910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800d6c0:	2038      	movs	r0, #56	; 0x38
 800d6c2:	f7f4 f941 	bl	8001948 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800d6c6:	bf00      	nop
 800d6c8:	3740      	adds	r7, #64	; 0x40
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	40023800 	.word	0x40023800
 800d6d4:	40020400 	.word	0x40020400
 800d6d8:	40020800 	.word	0x40020800
 800d6dc:	40020c00 	.word	0x40020c00
 800d6e0:	40021000 	.word	0x40021000
 800d6e4:	40021400 	.word	0x40021400
 800d6e8:	40021800 	.word	0x40021800
 800d6ec:	200005e4 	.word	0x200005e4
 800d6f0:	40026410 	.word	0x40026410

0800d6f4 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	460a      	mov	r2, r1
 800d6fe:	80fb      	strh	r3, [r7, #6]
 800d700:	4613      	mov	r3, r2
 800d702:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 800d704:	2301      	movs	r3, #1
 800d706:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800d708:	4a13      	ldr	r2, [pc, #76]	; (800d758 <BSP_TS_Init+0x64>)
 800d70a:	88fb      	ldrh	r3, [r7, #6]
 800d70c:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800d70e:	4a13      	ldr	r2, [pc, #76]	; (800d75c <BSP_TS_Init+0x68>)
 800d710:	88bb      	ldrh	r3, [r7, #4]
 800d712:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800d714:	4b12      	ldr	r3, [pc, #72]	; (800d760 <BSP_TS_Init+0x6c>)
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	2082      	movs	r0, #130	; 0x82
 800d71a:	4798      	blx	r3
 800d71c:	4603      	mov	r3, r0
 800d71e:	461a      	mov	r2, r3
 800d720:	f640 0311 	movw	r3, #2065	; 0x811
 800d724:	429a      	cmp	r2, r3
 800d726:	d104      	bne.n	800d732 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800d728:	4b0e      	ldr	r3, [pc, #56]	; (800d764 <BSP_TS_Init+0x70>)
 800d72a:	4a0d      	ldr	r2, [pc, #52]	; (800d760 <BSP_TS_Init+0x6c>)
 800d72c:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800d732:	7bfb      	ldrb	r3, [r7, #15]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d109      	bne.n	800d74c <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800d738:	4b0a      	ldr	r3, [pc, #40]	; (800d764 <BSP_TS_Init+0x70>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2082      	movs	r0, #130	; 0x82
 800d740:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800d742:	4b08      	ldr	r3, [pc, #32]	; (800d764 <BSP_TS_Init+0x70>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	2082      	movs	r0, #130	; 0x82
 800d74a:	4798      	blx	r3
  }

  return ret;
 800d74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20000648 	.word	0x20000648
 800d75c:	2000064a 	.word	0x2000064a
 800d760:	20000070 	.word	0x20000070
 800d764:	20000644 	.word	0x20000644

0800d768 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	4603      	mov	r3, r0
 800d770:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800d772:	88fb      	ldrh	r3, [r7, #6]
 800d774:	4618      	mov	r0, r3
 800d776:	f000 fa59 	bl	800dc2c <stmpe811_GetInstance>
 800d77a:	4603      	mov	r3, r0
 800d77c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800d77e:	7bfb      	ldrb	r3, [r7, #15]
 800d780:	2bff      	cmp	r3, #255	; 0xff
 800d782:	d112      	bne.n	800d7aa <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800d784:	2000      	movs	r0, #0
 800d786:	f000 fa51 	bl	800dc2c <stmpe811_GetInstance>
 800d78a:	4603      	mov	r3, r0
 800d78c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800d78e:	7bbb      	ldrb	r3, [r7, #14]
 800d790:	2b01      	cmp	r3, #1
 800d792:	d80a      	bhi.n	800d7aa <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800d794:	7bbb      	ldrb	r3, [r7, #14]
 800d796:	88fa      	ldrh	r2, [r7, #6]
 800d798:	b2d1      	uxtb	r1, r2
 800d79a:	4a06      	ldr	r2, [pc, #24]	; (800d7b4 <stmpe811_Init+0x4c>)
 800d79c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800d79e:	f7ff fbaa 	bl	800cef6 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800d7a2:	88fb      	ldrh	r3, [r7, #6]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f000 f807 	bl	800d7b8 <stmpe811_Reset>
    }
  }
}
 800d7aa:	bf00      	nop
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	2000064c 	.word	0x2000064c

0800d7b8 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	4603      	mov	r3, r0
 800d7c0:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800d7c2:	88fb      	ldrh	r3, [r7, #6]
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	2202      	movs	r2, #2
 800d7c8:	2103      	movs	r1, #3
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7ff fb9f 	bl	800cf0e <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800d7d0:	200a      	movs	r0, #10
 800d7d2:	f7ff fbd9 	bl	800cf88 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800d7d6:	88fb      	ldrh	r3, [r7, #6]
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	2200      	movs	r2, #0
 800d7dc:	2103      	movs	r1, #3
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7ff fb95 	bl	800cf0e <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800d7e4:	2002      	movs	r0, #2
 800d7e6:	f7ff fbcf 	bl	800cf88 <IOE_Delay>
}
 800d7ea:	bf00      	nop
 800d7ec:	3708      	adds	r7, #8
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800d7f2:	b590      	push	{r4, r7, lr}
 800d7f4:	b083      	sub	sp, #12
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 800d7fc:	f7ff fb7b 	bl	800cef6 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800d800:	88fb      	ldrh	r3, [r7, #6]
 800d802:	b2db      	uxtb	r3, r3
 800d804:	2100      	movs	r1, #0
 800d806:	4618      	mov	r0, r3
 800d808:	f7ff fb94 	bl	800cf34 <IOE_Read>
 800d80c:	4603      	mov	r3, r0
 800d80e:	021b      	lsls	r3, r3, #8
 800d810:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800d812:	88fb      	ldrh	r3, [r7, #6]
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2101      	movs	r1, #1
 800d818:	4618      	mov	r0, r3
 800d81a:	f7ff fb8b 	bl	800cf34 <IOE_Read>
 800d81e:	4603      	mov	r3, r0
 800d820:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800d822:	4323      	orrs	r3, r4
 800d824:	b21b      	sxth	r3, r3
 800d826:	b29b      	uxth	r3, r3
}
 800d828:	4618      	mov	r0, r3
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd90      	pop	{r4, r7, pc}

0800d830 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	4603      	mov	r3, r0
 800d838:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800d83a:	2300      	movs	r3, #0
 800d83c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800d83e:	88fb      	ldrh	r3, [r7, #6]
 800d840:	b2db      	uxtb	r3, r3
 800d842:	2109      	movs	r1, #9
 800d844:	4618      	mov	r0, r3
 800d846:	f7ff fb75 	bl	800cf34 <IOE_Read>
 800d84a:	4603      	mov	r3, r0
 800d84c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
 800d850:	f043 0301 	orr.w	r3, r3, #1
 800d854:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800d856:	88fb      	ldrh	r3, [r7, #6]
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	7bfa      	ldrb	r2, [r7, #15]
 800d85c:	2109      	movs	r1, #9
 800d85e:	4618      	mov	r0, r3
 800d860:	f7ff fb55 	bl	800cf0e <IOE_Write>
}
 800d864:	bf00      	nop
 800d866:	3710      	adds	r7, #16
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	4603      	mov	r3, r0
 800d874:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800d876:	2300      	movs	r3, #0
 800d878:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800d87a:	88fb      	ldrh	r3, [r7, #6]
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	2109      	movs	r1, #9
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff fb57 	bl	800cf34 <IOE_Read>
 800d886:	4603      	mov	r3, r0
 800d888:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800d88a:	7bfb      	ldrb	r3, [r7, #15]
 800d88c:	f023 0301 	bic.w	r3, r3, #1
 800d890:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800d892:	88fb      	ldrh	r3, [r7, #6]
 800d894:	b2db      	uxtb	r3, r3
 800d896:	7bfa      	ldrb	r2, [r7, #15]
 800d898:	2109      	movs	r1, #9
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7ff fb37 	bl	800cf0e <IOE_Write>
    
}
 800d8a0:	bf00      	nop
 800d8a2:	3710      	adds	r7, #16
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	460a      	mov	r2, r1
 800d8b2:	80fb      	strh	r3, [r7, #6]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800d8bc:	88fb      	ldrh	r3, [r7, #6]
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	210a      	movs	r1, #10
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7ff fb36 	bl	800cf34 <IOE_Read>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 800d8cc:	7bfa      	ldrb	r2, [r7, #15]
 800d8ce:	797b      	ldrb	r3, [r7, #5]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800d8d4:	88fb      	ldrh	r3, [r7, #6]
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	7bfa      	ldrb	r2, [r7, #15]
 800d8da:	210a      	movs	r1, #10
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7ff fb16 	bl	800cf0e <IOE_Write>
}
 800d8e2:	bf00      	nop
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}

0800d8ea <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	b084      	sub	sp, #16
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	460a      	mov	r2, r1
 800d8f4:	80fb      	strh	r3, [r7, #6]
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800d8fe:	88fb      	ldrh	r3, [r7, #6]
 800d900:	b2db      	uxtb	r3, r3
 800d902:	210a      	movs	r1, #10
 800d904:	4618      	mov	r0, r3
 800d906:	f7ff fb15 	bl	800cf34 <IOE_Read>
 800d90a:	4603      	mov	r3, r0
 800d90c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800d90e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800d912:	43db      	mvns	r3, r3
 800d914:	b25a      	sxtb	r2, r3
 800d916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d91a:	4013      	ands	r3, r2
 800d91c:	b25b      	sxtb	r3, r3
 800d91e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800d920:	88fb      	ldrh	r3, [r7, #6]
 800d922:	b2db      	uxtb	r3, r3
 800d924:	7bfa      	ldrb	r2, [r7, #15]
 800d926:	210a      	movs	r1, #10
 800d928:	4618      	mov	r0, r3
 800d92a:	f7ff faf0 	bl	800cf0e <IOE_Write>
}
 800d92e:	bf00      	nop
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	4603      	mov	r3, r0
 800d93e:	460a      	mov	r2, r1
 800d940:	80fb      	strh	r3, [r7, #6]
 800d942:	4613      	mov	r3, r2
 800d944:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800d946:	88fb      	ldrh	r3, [r7, #6]
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	210b      	movs	r1, #11
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7ff faf1 	bl	800cf34 <IOE_Read>
 800d952:	4603      	mov	r3, r0
 800d954:	461a      	mov	r2, r3
 800d956:	797b      	ldrb	r3, [r7, #5]
 800d958:	4013      	ands	r3, r2
 800d95a:	b2db      	uxtb	r3, r3
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	4603      	mov	r3, r0
 800d96c:	460a      	mov	r2, r1
 800d96e:	80fb      	strh	r3, [r7, #6]
 800d970:	4613      	mov	r3, r2
 800d972:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800d974:	88fb      	ldrh	r3, [r7, #6]
 800d976:	b2db      	uxtb	r3, r3
 800d978:	797a      	ldrb	r2, [r7, #5]
 800d97a:	210b      	movs	r1, #11
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7ff fac6 	bl	800cf0e <IOE_Write>
}
 800d982:	bf00      	nop
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b084      	sub	sp, #16
 800d98e:	af00      	add	r7, sp, #0
 800d990:	4603      	mov	r3, r0
 800d992:	6039      	str	r1, [r7, #0]
 800d994:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800d996:	2300      	movs	r3, #0
 800d998:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800d99a:	88fb      	ldrh	r3, [r7, #6]
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	2117      	movs	r1, #23
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7ff fac7 	bl	800cf34 <IOE_Read>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	b25b      	sxtb	r3, r3
 800d9ae:	43db      	mvns	r3, r3
 800d9b0:	b25a      	sxtb	r2, r3
 800d9b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	b25b      	sxtb	r3, r3
 800d9ba:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800d9bc:	88fb      	ldrh	r3, [r7, #6]
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	7bfa      	ldrb	r2, [r7, #15]
 800d9c2:	2117      	movs	r1, #23
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7ff faa2 	bl	800cf0e <IOE_Write>
}
 800d9ca:	bf00      	nop
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b084      	sub	sp, #16
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	4603      	mov	r3, r0
 800d9da:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800d9dc:	88fb      	ldrh	r3, [r7, #6]
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2104      	movs	r1, #4
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7ff faa6 	bl	800cf34 <IOE_Read>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
 800d9ee:	f023 0304 	bic.w	r3, r3, #4
 800d9f2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800d9f4:	88fb      	ldrh	r3, [r7, #6]
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	7bfa      	ldrb	r2, [r7, #15]
 800d9fa:	2104      	movs	r1, #4
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7ff fa86 	bl	800cf0e <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800da02:	88fb      	ldrh	r3, [r7, #6]
 800da04:	21f0      	movs	r1, #240	; 0xf0
 800da06:	4618      	mov	r0, r3
 800da08:	f7ff ffbf 	bl	800d98a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 800da0c:	7bfb      	ldrb	r3, [r7, #15]
 800da0e:	f023 0303 	bic.w	r3, r3, #3
 800da12:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800da14:	88fb      	ldrh	r3, [r7, #6]
 800da16:	b2db      	uxtb	r3, r3
 800da18:	7bfa      	ldrb	r2, [r7, #15]
 800da1a:	2104      	movs	r1, #4
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7ff fa76 	bl	800cf0e <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800da22:	88fb      	ldrh	r3, [r7, #6]
 800da24:	b2db      	uxtb	r3, r3
 800da26:	2249      	movs	r2, #73	; 0x49
 800da28:	2120      	movs	r1, #32
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7ff fa6f 	bl	800cf0e <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 800da30:	2002      	movs	r0, #2
 800da32:	f7ff faa9 	bl	800cf88 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800da36:	88fb      	ldrh	r3, [r7, #6]
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	2201      	movs	r2, #1
 800da3c:	2121      	movs	r1, #33	; 0x21
 800da3e:	4618      	mov	r0, r3
 800da40:	f7ff fa65 	bl	800cf0e <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800da44:	88fb      	ldrh	r3, [r7, #6]
 800da46:	b2db      	uxtb	r3, r3
 800da48:	229a      	movs	r2, #154	; 0x9a
 800da4a:	2141      	movs	r1, #65	; 0x41
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7ff fa5e 	bl	800cf0e <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800da52:	88fb      	ldrh	r3, [r7, #6]
 800da54:	b2db      	uxtb	r3, r3
 800da56:	2201      	movs	r2, #1
 800da58:	214a      	movs	r1, #74	; 0x4a
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7ff fa57 	bl	800cf0e <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800da60:	88fb      	ldrh	r3, [r7, #6]
 800da62:	b2db      	uxtb	r3, r3
 800da64:	2201      	movs	r2, #1
 800da66:	214b      	movs	r1, #75	; 0x4b
 800da68:	4618      	mov	r0, r3
 800da6a:	f7ff fa50 	bl	800cf0e <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800da6e:	88fb      	ldrh	r3, [r7, #6]
 800da70:	b2db      	uxtb	r3, r3
 800da72:	2200      	movs	r2, #0
 800da74:	214b      	movs	r1, #75	; 0x4b
 800da76:	4618      	mov	r0, r3
 800da78:	f7ff fa49 	bl	800cf0e <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800da7c:	88fb      	ldrh	r3, [r7, #6]
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2201      	movs	r2, #1
 800da82:	2156      	movs	r1, #86	; 0x56
 800da84:	4618      	mov	r0, r3
 800da86:	f7ff fa42 	bl	800cf0e <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800da8a:	88fb      	ldrh	r3, [r7, #6]
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	2201      	movs	r2, #1
 800da90:	2158      	movs	r1, #88	; 0x58
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fa3b 	bl	800cf0e <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800da98:	88fb      	ldrh	r3, [r7, #6]
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	2201      	movs	r2, #1
 800da9e:	2140      	movs	r1, #64	; 0x40
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff fa34 	bl	800cf0e <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800daa6:	88fb      	ldrh	r3, [r7, #6]
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	22ff      	movs	r2, #255	; 0xff
 800daac:	210b      	movs	r1, #11
 800daae:	4618      	mov	r0, r3
 800dab0:	f7ff fa2d 	bl	800cf0e <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 800dab4:	2002      	movs	r0, #2
 800dab6:	f7ff fa67 	bl	800cf88 <IOE_Delay>
}
 800daba:	bf00      	nop
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	4603      	mov	r3, r0
 800daca:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 800dacc:	2300      	movs	r3, #0
 800dace:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800dad0:	88fb      	ldrh	r3, [r7, #6]
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	2140      	movs	r1, #64	; 0x40
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7ff fa2c 	bl	800cf34 <IOE_Read>
 800dadc:	4603      	mov	r3, r0
 800dade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dae2:	2b80      	cmp	r3, #128	; 0x80
 800dae4:	bf0c      	ite	eq
 800dae6:	2301      	moveq	r3, #1
 800dae8:	2300      	movne	r3, #0
 800daea:	b2db      	uxtb	r3, r3
 800daec:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800daee:	7bbb      	ldrb	r3, [r7, #14]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d00b      	beq.n	800db0c <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800daf4:	88fb      	ldrh	r3, [r7, #6]
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	214c      	movs	r1, #76	; 0x4c
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff fa1a 	bl	800cf34 <IOE_Read>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d010      	beq.n	800db28 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800db06:	2301      	movs	r3, #1
 800db08:	73fb      	strb	r3, [r7, #15]
 800db0a:	e00d      	b.n	800db28 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800db0c:	88fb      	ldrh	r3, [r7, #6]
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	2201      	movs	r2, #1
 800db12:	214b      	movs	r1, #75	; 0x4b
 800db14:	4618      	mov	r0, r3
 800db16:	f7ff f9fa 	bl	800cf0e <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800db1a:	88fb      	ldrh	r3, [r7, #6]
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	2200      	movs	r2, #0
 800db20:	214b      	movs	r1, #75	; 0x4b
 800db22:	4618      	mov	r0, r3
 800db24:	f7ff f9f3 	bl	800cf0e <IOE_Write>
  }
  
  return ret;
 800db28:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800db32:	b580      	push	{r7, lr}
 800db34:	b086      	sub	sp, #24
 800db36:	af00      	add	r7, sp, #0
 800db38:	4603      	mov	r3, r0
 800db3a:	60b9      	str	r1, [r7, #8]
 800db3c:	607a      	str	r2, [r7, #4]
 800db3e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800db40:	89fb      	ldrh	r3, [r7, #14]
 800db42:	b2d8      	uxtb	r0, r3
 800db44:	f107 0210 	add.w	r2, r7, #16
 800db48:	2304      	movs	r3, #4
 800db4a:	21d7      	movs	r1, #215	; 0xd7
 800db4c:	f7ff fa05 	bl	800cf5a <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800db50:	7c3b      	ldrb	r3, [r7, #16]
 800db52:	061a      	lsls	r2, r3, #24
 800db54:	7c7b      	ldrb	r3, [r7, #17]
 800db56:	041b      	lsls	r3, r3, #16
 800db58:	431a      	orrs	r2, r3
 800db5a:	7cbb      	ldrb	r3, [r7, #18]
 800db5c:	021b      	lsls	r3, r3, #8
 800db5e:	4313      	orrs	r3, r2
 800db60:	7cfa      	ldrb	r2, [r7, #19]
 800db62:	4313      	orrs	r3, r2
 800db64:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	0d1b      	lsrs	r3, r3, #20
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	0a1b      	lsrs	r3, r3, #8
 800db74:	b29b      	uxth	r3, r3
 800db76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800db80:	89fb      	ldrh	r3, [r7, #14]
 800db82:	b2db      	uxtb	r3, r3
 800db84:	2201      	movs	r2, #1
 800db86:	214b      	movs	r1, #75	; 0x4b
 800db88:	4618      	mov	r0, r3
 800db8a:	f7ff f9c0 	bl	800cf0e <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800db8e:	89fb      	ldrh	r3, [r7, #14]
 800db90:	b2db      	uxtb	r3, r3
 800db92:	2200      	movs	r2, #0
 800db94:	214b      	movs	r1, #75	; 0x4b
 800db96:	4618      	mov	r0, r3
 800db98:	f7ff f9b9 	bl	800cf0e <IOE_Write>
}
 800db9c:	bf00      	nop
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	4603      	mov	r3, r0
 800dbac:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800dbae:	f7ff f9a8 	bl	800cf02 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800dbb2:	88fb      	ldrh	r3, [r7, #6]
 800dbb4:	211f      	movs	r1, #31
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7ff fe76 	bl	800d8a8 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800dbbc:	88fb      	ldrh	r3, [r7, #6]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7ff fe36 	bl	800d830 <stmpe811_EnableGlobalIT>
}
 800dbc4:	bf00      	nop
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800dbd6:	88fb      	ldrh	r3, [r7, #6]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7ff fe47 	bl	800d86c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800dbde:	88fb      	ldrh	r3, [r7, #6]
 800dbe0:	211f      	movs	r1, #31
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7ff fe81 	bl	800d8ea <stmpe811_DisableITSource>
}
 800dbe8:	bf00      	nop
 800dbea:	3708      	adds	r7, #8
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800dbfa:	88fb      	ldrh	r3, [r7, #6]
 800dbfc:	211f      	movs	r1, #31
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff fe99 	bl	800d936 <stmpe811_ReadGITStatus>
 800dc04:	4603      	mov	r3, r0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b082      	sub	sp, #8
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	4603      	mov	r3, r0
 800dc16:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800dc18:	88fb      	ldrh	r3, [r7, #6]
 800dc1a:	211f      	movs	r1, #31
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7ff fea1 	bl	800d964 <stmpe811_ClearGlobalIT>
}
 800dc22:	bf00      	nop
 800dc24:	3708      	adds	r7, #8
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
	...

0800dc2c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	4603      	mov	r3, r0
 800dc34:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800dc36:	2300      	movs	r3, #0
 800dc38:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	73fb      	strb	r3, [r7, #15]
 800dc3e:	e00b      	b.n	800dc58 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 800dc40:	7bfb      	ldrb	r3, [r7, #15]
 800dc42:	4a0a      	ldr	r2, [pc, #40]	; (800dc6c <stmpe811_GetInstance+0x40>)
 800dc44:	5cd3      	ldrb	r3, [r2, r3]
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	88fa      	ldrh	r2, [r7, #6]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d101      	bne.n	800dc52 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800dc4e:	7bfb      	ldrb	r3, [r7, #15]
 800dc50:	e006      	b.n	800dc60 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800dc52:	7bfb      	ldrb	r3, [r7, #15]
 800dc54:	3301      	adds	r3, #1
 800dc56:	73fb      	strb	r3, [r7, #15]
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d9f0      	bls.n	800dc40 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800dc5e:	23ff      	movs	r3, #255	; 0xff
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3714      	adds	r7, #20
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr
 800dc6c:	2000064c 	.word	0x2000064c

0800dc70 <InicializaLineGraph>:
//------------------------------------------------------------------------------------------------------------
// funciones: inicialiszacion de los componenetes

void InicializaLineGraph(LineGraph *lineGraph, int16_t xInicial, uint16_t yInicial, uint16_t ancho,
		uint16_t alto, int T, uint32_t backgroundColor, uint32_t axisColor, uint32_t graphColor,
                         int graphPadding){
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	4608      	mov	r0, r1
 800dc7a:	4611      	mov	r1, r2
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	4603      	mov	r3, r0
 800dc80:	817b      	strh	r3, [r7, #10]
 800dc82:	460b      	mov	r3, r1
 800dc84:	813b      	strh	r3, [r7, #8]
 800dc86:	4613      	mov	r3, r2
 800dc88:	80fb      	strh	r3, [r7, #6]

	lineGraph -> xInicial = xInicial;
 800dc8a:	897a      	ldrh	r2, [r7, #10]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	801a      	strh	r2, [r3, #0]
	lineGraph -> yInicial = yInicial;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	893a      	ldrh	r2, [r7, #8]
 800dc94:	805a      	strh	r2, [r3, #2]
	lineGraph -> ancho = ancho;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	88fa      	ldrh	r2, [r7, #6]
 800dc9a:	809a      	strh	r2, [r3, #4]
	lineGraph -> alto = alto;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	8b3a      	ldrh	r2, [r7, #24]
 800dca0:	80da      	strh	r2, [r3, #6]
	lineGraph -> T = T;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	69fa      	ldr	r2, [r7, #28]
 800dca6:	609a      	str	r2, [r3, #8]
	lineGraph -> backgroundColor = backgroundColor;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6a3a      	ldr	r2, [r7, #32]
 800dcac:	611a      	str	r2, [r3, #16]
	lineGraph -> axisColor = axisColor;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcb2:	615a      	str	r2, [r3, #20]
	lineGraph -> graphColor = graphColor;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcb8:	619a      	str	r2, [r3, #24]
	lineGraph -> graphPadding = graphPadding;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcbe:	61da      	str	r2, [r3, #28]

}
 800dcc0:	bf00      	nop
 800dcc2:	3714      	adds	r7, #20
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <DrawGraph>:


//-------------------------------------------------------------------------------------------------------
// funciones: Dibujamos la grafica

void DrawGraph(LineGraph *lineGraph, int enBlancoYNegro, int transparencia){
 800dccc:	b5b0      	push	{r4, r5, r7, lr}
 800dcce:	b090      	sub	sp, #64	; 0x40
 800dcd0:	af04      	add	r7, sp, #16
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]

	int16_t xInicial = lineGraph -> xInicial ;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	881b      	ldrh	r3, [r3, #0]
 800dcdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t yInicial = lineGraph -> yInicial;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	885b      	ldrh	r3, [r3, #2]
 800dce2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	int16_t ancho = lineGraph -> ancho;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	889b      	ldrh	r3, [r3, #4]
 800dce8:	857b      	strh	r3, [r7, #42]	; 0x2a
	int16_t alto = lineGraph -> alto;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	88db      	ldrh	r3, [r3, #6]
 800dcee:	853b      	strh	r3, [r7, #40]	; 0x28
	int T = lineGraph -> T;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	689b      	ldr	r3, [r3, #8]
 800dcf4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t backgroundColor = lineGraph -> backgroundColor;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	691b      	ldr	r3, [r3, #16]
 800dcfa:	623b      	str	r3, [r7, #32]
	uint32_t axisColor = lineGraph -> axisColor;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	695b      	ldr	r3, [r3, #20]
 800dd00:	61fb      	str	r3, [r7, #28]
	uint32_t graphColor = lineGraph -> graphColor;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	699b      	ldr	r3, [r3, #24]
 800dd06:	61bb      	str	r3, [r7, #24]
	int graphPadding = lineGraph -> graphPadding;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	69db      	ldr	r3, [r3, #28]
 800dd0c:	617b      	str	r3, [r7, #20]

	LCD_dibujaRectanguloRelleno(xInicial, yInicial, ancho, alto, backgroundColor, enBlancoYNegro,transparencia);
 800dd0e:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800dd10:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800dd12:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800dd14:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	9302      	str	r3, [sp, #8]
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	9301      	str	r3, [sp, #4]
 800dd1e:	6a3b      	ldr	r3, [r7, #32]
 800dd20:	9300      	str	r3, [sp, #0]
 800dd22:	4623      	mov	r3, r4
 800dd24:	f000 f9ce 	bl	800e0c4 <LCD_dibujaRectanguloRelleno>
	LCD_dibujaLinea(xInicial, yInicial + alto/2, xInicial + ancho, yInicial + alto/2, axisColor, enBlancoYNegro,transparencia);
 800dd28:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800dd2c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800dd30:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800dd34:	0fd9      	lsrs	r1, r3, #31
 800dd36:	440b      	add	r3, r1
 800dd38:	105b      	asrs	r3, r3, #1
 800dd3a:	b21b      	sxth	r3, r3
 800dd3c:	18d4      	adds	r4, r2, r3
 800dd3e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800dd42:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800dd46:	18d5      	adds	r5, r2, r3
 800dd48:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800dd4c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800dd50:	0fd9      	lsrs	r1, r3, #31
 800dd52:	440b      	add	r3, r1
 800dd54:	105b      	asrs	r3, r3, #1
 800dd56:	b21b      	sxth	r3, r3
 800dd58:	441a      	add	r2, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	9302      	str	r3, [sp, #8]
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	9301      	str	r3, [sp, #4]
 800dd62:	69fb      	ldr	r3, [r7, #28]
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	4613      	mov	r3, r2
 800dd68:	462a      	mov	r2, r5
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	f000 fa7a 	bl	800e264 <LCD_dibujaLinea>
	LCD_dibujaLinea(xInicial, yInicial, xInicial, yInicial + alto, axisColor, enBlancoYNegro,transparencia);
 800dd70:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800dd74:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800dd78:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 800dd7c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800dd80:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800dd84:	441a      	add	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	9302      	str	r3, [sp, #8]
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	9301      	str	r3, [sp, #4]
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	4613      	mov	r3, r2
 800dd94:	4622      	mov	r2, r4
 800dd96:	f000 fa65 	bl	800e264 <LCD_dibujaLinea>
}
 800dd9a:	bf00      	nop
 800dd9c:	3730      	adds	r7, #48	; 0x30
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800dda4 <LCD_inicializa2Buffers>:

static int invertida;

// -----------------------------------------------------------------------------------------

void LCD_inicializa2Buffers(int enHorizontal, int estaInvertida) {
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]

	horizontal = enHorizontal;  // Guarda el parámetro
 800ddae:	4a24      	ldr	r2, [pc, #144]	; (800de40 <LCD_inicializa2Buffers+0x9c>)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6013      	str	r3, [r2, #0]
	invertida = estaInvertida;
 800ddb4:	4a23      	ldr	r2, [pc, #140]	; (800de44 <LCD_inicializa2Buffers+0xa0>)
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	6013      	str	r3, [r2, #0]

    BSP_LCD_Init();
 800ddba:	f7ff f8f1 	bl	800cfa0 <BSP_LCD_Init>
    BSP_LCD_Init();  // Inicializa la pantalla LCD
 800ddbe:	f7ff f8ef 	bl	800cfa0 <BSP_LCD_Init>

    if (horizontal) {
 800ddc2:	4b1f      	ldr	r3, [pc, #124]	; (800de40 <LCD_inicializa2Buffers+0x9c>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00c      	beq.n	800dde4 <LCD_inicializa2Buffers+0x40>
    	lcd_ancho = BSP_LCD_GetYSize();  // Obtiene el ancho de la pantalla
 800ddca:	f7ff f959 	bl	800d080 <BSP_LCD_GetYSize>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	4b1d      	ldr	r3, [pc, #116]	; (800de48 <LCD_inicializa2Buffers+0xa4>)
 800ddd4:	801a      	strh	r2, [r3, #0]
    	lcd_alto = BSP_LCD_GetXSize();  // Obtiene el alto de la pantalla
 800ddd6:	f7ff f947 	bl	800d068 <BSP_LCD_GetXSize>
 800ddda:	4603      	mov	r3, r0
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	4b1b      	ldr	r3, [pc, #108]	; (800de4c <LCD_inicializa2Buffers+0xa8>)
 800dde0:	801a      	strh	r2, [r3, #0]
 800dde2:	e00b      	b.n	800ddfc <LCD_inicializa2Buffers+0x58>
    } else {
        lcd_ancho = BSP_LCD_GetXSize();  // Obtiene el ancho de la pantalla
 800dde4:	f7ff f940 	bl	800d068 <BSP_LCD_GetXSize>
 800dde8:	4603      	mov	r3, r0
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	4b16      	ldr	r3, [pc, #88]	; (800de48 <LCD_inicializa2Buffers+0xa4>)
 800ddee:	801a      	strh	r2, [r3, #0]
        lcd_alto = BSP_LCD_GetYSize();  // Obtiene el alto de la pantalla
 800ddf0:	f7ff f946 	bl	800d080 <BSP_LCD_GetYSize>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	4b14      	ldr	r3, [pc, #80]	; (800de4c <LCD_inicializa2Buffers+0xa8>)
 800ddfa:	801a      	strh	r2, [r3, #0]
    }
    lcd_buffers[0] = (uint32_t*)LCD_FRAME_BUFFER_LAYER_0;  // Dirección del frame buffer número 0
 800ddfc:	4b14      	ldr	r3, [pc, #80]	; (800de50 <LCD_inicializa2Buffers+0xac>)
 800ddfe:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 800de02:	601a      	str	r2, [r3, #0]
    lcd_buffers[1] = (uint32_t*)LCD_FRAME_BUFFER_LAYER_1;  // Dirección del frame buffer número 1
 800de04:	4b12      	ldr	r3, [pc, #72]	; (800de50 <LCD_inicializa2Buffers+0xac>)
 800de06:	4a13      	ldr	r2, [pc, #76]	; (800de54 <LCD_inicializa2Buffers+0xb0>)
 800de08:	605a      	str	r2, [r3, #4]

    lcd_pulsando = 0;  // Inicialmente la pantalla no se está pulsando
 800de0a:	4b13      	ldr	r3, [pc, #76]	; (800de58 <LCD_inicializa2Buffers+0xb4>)
 800de0c:	2200      	movs	r2, #0
 800de0e:	601a      	str	r2, [r3, #0]

    BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER_0);  // Inicializa frame buffer 0
 800de10:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800de14:	2000      	movs	r0, #0
 800de16:	f7ff f93f 	bl	800d098 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER_1);  // Inicializa frame buffer 1
 800de1a:	490e      	ldr	r1, [pc, #56]	; (800de54 <LCD_inicializa2Buffers+0xb0>)
 800de1c:	2001      	movs	r0, #1
 800de1e:	f7ff f93b 	bl	800d098 <BSP_LCD_LayerDefaultInit>

    lcd_bufferOculto = 0;  // Selecciona el frame buffer 0 para dibujar
 800de22:	4b0e      	ldr	r3, [pc, #56]	; (800de5c <LCD_inicializa2Buffers+0xb8>)
 800de24:	2200      	movs	r2, #0
 800de26:	601a      	str	r2, [r3, #0]

    BSP_TS_Init(lcd_ancho, lcd_alto);
 800de28:	4b07      	ldr	r3, [pc, #28]	; (800de48 <LCD_inicializa2Buffers+0xa4>)
 800de2a:	881b      	ldrh	r3, [r3, #0]
 800de2c:	4a07      	ldr	r2, [pc, #28]	; (800de4c <LCD_inicializa2Buffers+0xa8>)
 800de2e:	8812      	ldrh	r2, [r2, #0]
 800de30:	4611      	mov	r1, r2
 800de32:	4618      	mov	r0, r3
 800de34:	f7ff fc5e 	bl	800d6f4 <BSP_TS_Init>
    // Indica a la interfaz táctil el ancho y alto de la pantalla en puntos
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	20000664 	.word	0x20000664
 800de44:	20000668 	.word	0x20000668
 800de48:	2000064e 	.word	0x2000064e
 800de4c:	20000650 	.word	0x20000650
 800de50:	20000654 	.word	0x20000654
 800de54:	d0130000 	.word	0xd0130000
 800de58:	20000660 	.word	0x20000660
 800de5c:	2000065c 	.word	0x2000065c

0800de60 <LCD_setFondoColor>:
    } else lcd_pulsando = 0;  // Indica que no se pulsó
}

// -----------------------------------------------------------------------------------------

void LCD_setFondoColor(uint32_t color) {
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af02      	add	r7, sp, #8
 800de66:	6078      	str	r0, [r7, #4]
    // Borra toda la pantalla y establece como fondo el color indicado por parámetro

    LCD_dibujaRectanguloRellenoOpaco(0, 0, lcd_ancho, lcd_alto, color);
 800de68:	4b07      	ldr	r3, [pc, #28]	; (800de88 <LCD_setFondoColor+0x28>)
 800de6a:	881a      	ldrh	r2, [r3, #0]
 800de6c:	4b07      	ldr	r3, [pc, #28]	; (800de8c <LCD_setFondoColor+0x2c>)
 800de6e:	8819      	ldrh	r1, [r3, #0]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	460b      	mov	r3, r1
 800de76:	2100      	movs	r1, #0
 800de78:	2000      	movs	r0, #0
 800de7a:	f000 f959 	bl	800e130 <LCD_dibujaRectanguloRellenoOpaco>
    // Pone todos los puntos en el frame buffer oculto al color indicado
}
 800de7e:	bf00      	nop
 800de80:	3708      	adds	r7, #8
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	2000064e 	.word	0x2000064e
 800de8c:	20000650 	.word	0x20000650

0800de90 <LCD_intercambiaBuffers>:
    // Dibuja la imagen de fondo
}

// -----------------------------------------------------------------------------------------

void LCD_intercambiaBuffers() {
 800de90:	b580      	push	{r7, lr}
 800de92:	af00      	add	r7, sp, #0
    // Cambia en qué frame buffer se dibuja y qué frame buffer se visualiza

    while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS));  // Espera a que la GPU finalice sincronismo con pantalla
 800de94:	bf00      	nop
 800de96:	4b11      	ldr	r3, [pc, #68]	; (800dedc <LCD_intercambiaBuffers+0x4c>)
 800de98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de9a:	f003 0304 	and.w	r3, r3, #4
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d0f9      	beq.n	800de96 <LCD_intercambiaBuffers+0x6>
    if (lcd_bufferOculto == 0) {  // Si se dibujó en el buffer 0
 800dea2:	4b0f      	ldr	r3, [pc, #60]	; (800dee0 <LCD_intercambiaBuffers+0x50>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10b      	bne.n	800dec2 <LCD_intercambiaBuffers+0x32>
        BSP_LCD_SetLayerVisible(1, DISABLE);  // Buffer 1 invisible
 800deaa:	2100      	movs	r1, #0
 800deac:	2001      	movs	r0, #1
 800deae:	f7ff f943 	bl	800d138 <BSP_LCD_SetLayerVisible>
        BSP_LCD_SetLayerVisible(0, ENABLE);  // Buffer 0 visible
 800deb2:	2101      	movs	r1, #1
 800deb4:	2000      	movs	r0, #0
 800deb6:	f7ff f93f 	bl	800d138 <BSP_LCD_SetLayerVisible>
        lcd_bufferOculto = 1;  // Buffer donde se va a dibujar
 800deba:	4b09      	ldr	r3, [pc, #36]	; (800dee0 <LCD_intercambiaBuffers+0x50>)
 800debc:	2201      	movs	r2, #1
 800debe:	601a      	str	r2, [r3, #0]
    } else {
        BSP_LCD_SetLayerVisible(0, DISABLE);  // Buffer 0 invisible
        BSP_LCD_SetLayerVisible(1, ENABLE);  // Buffer 1 ivisible
        lcd_bufferOculto = 0;  // Buffer donde se dibuja
    }
}
 800dec0:	e00a      	b.n	800ded8 <LCD_intercambiaBuffers+0x48>
        BSP_LCD_SetLayerVisible(0, DISABLE);  // Buffer 0 invisible
 800dec2:	2100      	movs	r1, #0
 800dec4:	2000      	movs	r0, #0
 800dec6:	f7ff f937 	bl	800d138 <BSP_LCD_SetLayerVisible>
        BSP_LCD_SetLayerVisible(1, ENABLE);  // Buffer 1 ivisible
 800deca:	2101      	movs	r1, #1
 800decc:	2001      	movs	r0, #1
 800dece:	f7ff f933 	bl	800d138 <BSP_LCD_SetLayerVisible>
        lcd_bufferOculto = 0;  // Buffer donde se dibuja
 800ded2:	4b03      	ldr	r3, [pc, #12]	; (800dee0 <LCD_intercambiaBuffers+0x50>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	601a      	str	r2, [r3, #0]
}
 800ded8:	bf00      	nop
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	40016800 	.word	0x40016800
 800dee0:	2000065c 	.word	0x2000065c

0800dee4 <LCD_dibujaPunto>:

// -----------------------------------------------------------------------------------------

void LCD_dibujaPunto(uint16_t x, uint16_t y, uint32_t color, int enBlancoYNegro, int transparencia) {
 800dee4:	b480      	push	{r7}
 800dee6:	b089      	sub	sp, #36	; 0x24
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60ba      	str	r2, [r7, #8]
 800deec:	607b      	str	r3, [r7, #4]
 800deee:	4603      	mov	r3, r0
 800def0:	81fb      	strh	r3, [r7, #14]
 800def2:	460b      	mov	r3, r1
 800def4:	81bb      	strh	r3, [r7, #12]
    // Dibuja un punto en coordenadas ('x', 'y') con el color indicado en 'color'
    // Si 'enBlancoYNegro' es un buleano cierto, convierte el color a niveles de gris
    // 'transparencia' es un factor entre 0 y 100 para aplicar un nivel de transparencia al color, desde
    // completamente transparente (valor 0) a transparencia original (valor 100)
    uint8_t * pColor = (uint8_t*) &color;  // Para acceder a los bytes del nuevo color
 800def6:	f107 0308 	add.w	r3, r7, #8
 800defa:	61bb      	str	r3, [r7, #24]

    if (enBlancoYNegro) {  // Si hay que convertir a niveles de gris ...
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d01b      	beq.n	800df3a <LCD_dibujaPunto+0x56>

        uint8_t gris = ((int)pColor[0] + pColor[1] + pColor[2]) / 3;
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	461a      	mov	r2, r3
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	3301      	adds	r3, #1
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	4413      	add	r3, r2
 800df10:	69ba      	ldr	r2, [r7, #24]
 800df12:	3202      	adds	r2, #2
 800df14:	7812      	ldrb	r2, [r2, #0]
 800df16:	4413      	add	r3, r2
 800df18:	4a61      	ldr	r2, [pc, #388]	; (800e0a0 <LCD_dibujaPunto+0x1bc>)
 800df1a:	fb82 1203 	smull	r1, r2, r2, r3
 800df1e:	17db      	asrs	r3, r3, #31
 800df20:	1ad3      	subs	r3, r2, r3
 800df22:	75fb      	strb	r3, [r7, #23]
        // Obtiene la media de las componentes RGB

        pColor[0] = gris;
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	7dfa      	ldrb	r2, [r7, #23]
 800df28:	701a      	strb	r2, [r3, #0]
        pColor[1] = gris;
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	3301      	adds	r3, #1
 800df2e:	7dfa      	ldrb	r2, [r7, #23]
 800df30:	701a      	strb	r2, [r3, #0]
        pColor[2] = gris;
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	3302      	adds	r3, #2
 800df36:	7dfa      	ldrb	r2, [r7, #23]
 800df38:	701a      	strb	r2, [r3, #0]
        // Guarda la media en las componentes RGB del color
    }

    uint8_t alpha = pColor[3] * transparencia / 100;
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	3303      	adds	r3, #3
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	461a      	mov	r2, r3
 800df42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df44:	fb02 f303 	mul.w	r3, r2, r3
 800df48:	4a56      	ldr	r2, [pc, #344]	; (800e0a4 <LCD_dibujaPunto+0x1c0>)
 800df4a:	fb82 1203 	smull	r1, r2, r2, r3
 800df4e:	1152      	asrs	r2, r2, #5
 800df50:	17db      	asrs	r3, r3, #31
 800df52:	1ad3      	subs	r3, r2, r3
 800df54:	75bb      	strb	r3, [r7, #22]
    // Canal alpha del nuevo color modificado por el grado de transparencia a aplicar

    uint32_t * p32;

  	if (invertida) {
 800df56:	4b54      	ldr	r3, [pc, #336]	; (800e0a8 <LCD_dibujaPunto+0x1c4>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d009      	beq.n	800df72 <LCD_dibujaPunto+0x8e>

  		 x = lcd_ancho - x;
 800df5e:	4b53      	ldr	r3, [pc, #332]	; (800e0ac <LCD_dibujaPunto+0x1c8>)
 800df60:	881a      	ldrh	r2, [r3, #0]
 800df62:	89fb      	ldrh	r3, [r7, #14]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	81fb      	strh	r3, [r7, #14]
		 y = lcd_alto - y;
 800df68:	4b51      	ldr	r3, [pc, #324]	; (800e0b0 <LCD_dibujaPunto+0x1cc>)
 800df6a:	881a      	ldrh	r2, [r3, #0]
 800df6c:	89bb      	ldrh	r3, [r7, #12]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	81bb      	strh	r3, [r7, #12]
    }

    if (horizontal){
 800df72:	4b50      	ldr	r3, [pc, #320]	; (800e0b4 <LCD_dibujaPunto+0x1d0>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d012      	beq.n	800dfa0 <LCD_dibujaPunto+0xbc>

    	p32 = lcd_buffers[lcd_bufferOculto] + (239 - y) + lcd_alto * x;
 800df7a:	4b4f      	ldr	r3, [pc, #316]	; (800e0b8 <LCD_dibujaPunto+0x1d4>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a4f      	ldr	r2, [pc, #316]	; (800e0bc <LCD_dibujaPunto+0x1d8>)
 800df80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800df84:	4b4a      	ldr	r3, [pc, #296]	; (800e0b0 <LCD_dibujaPunto+0x1cc>)
 800df86:	881b      	ldrh	r3, [r3, #0]
 800df88:	4619      	mov	r1, r3
 800df8a:	89fb      	ldrh	r3, [r7, #14]
 800df8c:	fb01 f303 	mul.w	r3, r1, r3
 800df90:	4619      	mov	r1, r3
 800df92:	89bb      	ldrh	r3, [r7, #12]
 800df94:	1acb      	subs	r3, r1, r3
 800df96:	33ef      	adds	r3, #239	; 0xef
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	4413      	add	r3, r2
 800df9c:	61fb      	str	r3, [r7, #28]
 800df9e:	e00f      	b.n	800dfc0 <LCD_dibujaPunto+0xdc>
    }
    else{

    	p32 = lcd_buffers[lcd_bufferOculto] + y * lcd_ancho + x;
 800dfa0:	4b45      	ldr	r3, [pc, #276]	; (800e0b8 <LCD_dibujaPunto+0x1d4>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a45      	ldr	r2, [pc, #276]	; (800e0bc <LCD_dibujaPunto+0x1d8>)
 800dfa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dfaa:	89bb      	ldrh	r3, [r7, #12]
 800dfac:	493f      	ldr	r1, [pc, #252]	; (800e0ac <LCD_dibujaPunto+0x1c8>)
 800dfae:	8809      	ldrh	r1, [r1, #0]
 800dfb0:	fb01 f303 	mul.w	r3, r1, r3
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	89fb      	ldrh	r3, [r7, #14]
 800dfb8:	440b      	add	r3, r1
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	4413      	add	r3, r2
 800dfbe:	61fb      	str	r3, [r7, #28]

    }

    if (alpha > 0 && alpha < 255) {
 800dfc0:	7dbb      	ldrb	r3, [r7, #22]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d05b      	beq.n	800e07e <LCD_dibujaPunto+0x19a>
 800dfc6:	7dbb      	ldrb	r3, [r7, #22]
 800dfc8:	2bff      	cmp	r3, #255	; 0xff
 800dfca:	d058      	beq.n	800e07e <LCD_dibujaPunto+0x19a>
        // Si el nuevo color es semitransparente, hay que mezclar

        uint8_t * p8 = (uint8_t*)p32;  // Dirección del punto en el frame buffer
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	613b      	str	r3, [r7, #16]

        p8[0] = (p8[0] * (0xFF - alpha) + pColor[0] * alpha) / 0xFF;
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	7dbb      	ldrb	r3, [r7, #22]
 800dfd8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800dfdc:	fb03 f202 	mul.w	r2, r3, r2
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	7dbb      	ldrb	r3, [r7, #22]
 800dfe8:	fb01 f303 	mul.w	r3, r1, r3
 800dfec:	4413      	add	r3, r2
 800dfee:	4a34      	ldr	r2, [pc, #208]	; (800e0c0 <LCD_dibujaPunto+0x1dc>)
 800dff0:	fb82 1203 	smull	r1, r2, r2, r3
 800dff4:	441a      	add	r2, r3
 800dff6:	11d2      	asrs	r2, r2, #7
 800dff8:	17db      	asrs	r3, r3, #31
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	b2da      	uxtb	r2, r3
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	701a      	strb	r2, [r3, #0]
        p8[1] = (p8[1] * (0xFF - alpha) + pColor[1] * alpha) / 0xFF;
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	3301      	adds	r3, #1
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	461a      	mov	r2, r3
 800e00a:	7dbb      	ldrb	r3, [r7, #22]
 800e00c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800e010:	fb03 f202 	mul.w	r2, r3, r2
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	3301      	adds	r3, #1
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	4619      	mov	r1, r3
 800e01c:	7dbb      	ldrb	r3, [r7, #22]
 800e01e:	fb01 f303 	mul.w	r3, r1, r3
 800e022:	4413      	add	r3, r2
 800e024:	4a26      	ldr	r2, [pc, #152]	; (800e0c0 <LCD_dibujaPunto+0x1dc>)
 800e026:	fb82 1203 	smull	r1, r2, r2, r3
 800e02a:	441a      	add	r2, r3
 800e02c:	11d2      	asrs	r2, r2, #7
 800e02e:	17db      	asrs	r3, r3, #31
 800e030:	1ad2      	subs	r2, r2, r3
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	3301      	adds	r3, #1
 800e036:	b2d2      	uxtb	r2, r2
 800e038:	701a      	strb	r2, [r3, #0]
        p8[2] = (p8[2] * (0xFF - alpha) + pColor[2] * alpha) / 0xFF;
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	3302      	adds	r3, #2
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	461a      	mov	r2, r3
 800e042:	7dbb      	ldrb	r3, [r7, #22]
 800e044:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800e048:	fb03 f202 	mul.w	r2, r3, r2
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	3302      	adds	r3, #2
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	4619      	mov	r1, r3
 800e054:	7dbb      	ldrb	r3, [r7, #22]
 800e056:	fb01 f303 	mul.w	r3, r1, r3
 800e05a:	4413      	add	r3, r2
 800e05c:	4a18      	ldr	r2, [pc, #96]	; (800e0c0 <LCD_dibujaPunto+0x1dc>)
 800e05e:	fb82 1203 	smull	r1, r2, r2, r3
 800e062:	441a      	add	r2, r3
 800e064:	11d2      	asrs	r2, r2, #7
 800e066:	17db      	asrs	r3, r3, #31
 800e068:	1ad2      	subs	r2, r2, r3
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	3302      	adds	r3, #2
 800e06e:	b2d2      	uxtb	r2, r2
 800e070:	701a      	strb	r2, [r3, #0]
        p8[3] = 0xFF;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	3303      	adds	r3, #3
 800e076:	22ff      	movs	r2, #255	; 0xff
 800e078:	701a      	strb	r2, [r3, #0]
    if (alpha > 0 && alpha < 255) {
 800e07a:	bf00      	nop
    } else if (alpha == 0xFF) { // El color es opaco y hay que sustituir el color
        pColor[3] = alpha;  // Le pone al nuevo color un alpha de 0xFF
        *p32 = color;
        // Copia el nuevo color en el frame buffer
    }
}
 800e07c:	e009      	b.n	800e092 <LCD_dibujaPunto+0x1ae>
    } else if (alpha == 0xFF) { // El color es opaco y hay que sustituir el color
 800e07e:	7dbb      	ldrb	r3, [r7, #22]
 800e080:	2bff      	cmp	r3, #255	; 0xff
 800e082:	d106      	bne.n	800e092 <LCD_dibujaPunto+0x1ae>
        pColor[3] = alpha;  // Le pone al nuevo color un alpha de 0xFF
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	3303      	adds	r3, #3
 800e088:	7dba      	ldrb	r2, [r7, #22]
 800e08a:	701a      	strb	r2, [r3, #0]
        *p32 = color;
 800e08c:	68ba      	ldr	r2, [r7, #8]
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	601a      	str	r2, [r3, #0]
}
 800e092:	bf00      	nop
 800e094:	3724      	adds	r7, #36	; 0x24
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr
 800e09e:	bf00      	nop
 800e0a0:	55555556 	.word	0x55555556
 800e0a4:	51eb851f 	.word	0x51eb851f
 800e0a8:	20000668 	.word	0x20000668
 800e0ac:	2000064e 	.word	0x2000064e
 800e0b0:	20000650 	.word	0x20000650
 800e0b4:	20000664 	.word	0x20000664
 800e0b8:	2000065c 	.word	0x2000065c
 800e0bc:	20000654 	.word	0x20000654
 800e0c0:	80808081 	.word	0x80808081

0800e0c4 <LCD_dibujaRectanguloRelleno>:
}

// -----------------------------------------------------------------------------------------

void LCD_dibujaRectanguloRelleno(uint16_t xInicial, uint16_t yInicial, uint16_t ancho, uint16_t alto,
    uint32_t color, int enBlancoYNegro, int transparencia) {
 800e0c4:	b590      	push	{r4, r7, lr}
 800e0c6:	b087      	sub	sp, #28
 800e0c8:	af02      	add	r7, sp, #8
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	4608      	mov	r0, r1
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	4623      	mov	r3, r4
 800e0d4:	80fb      	strh	r3, [r7, #6]
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	80bb      	strh	r3, [r7, #4]
 800e0da:	460b      	mov	r3, r1
 800e0dc:	807b      	strh	r3, [r7, #2]
 800e0de:	4613      	mov	r3, r2
 800e0e0:	803b      	strh	r3, [r7, #0]
    // donde se indica el alto y ancho el color de sus puntos.
    // Si 'enBlancoYNegro' es un buleano cierto, convierte el color a gris
    // 'transparencia' es un factor entre 0 y 100 para aplicar un nivel de transparencia al color, desde
    // completamente transparente (valor 0) a transparencia original (valor 100)

    for(int x = xInicial; x < xInicial + ancho; x++)  // Recorriendo el lcd_ancho del rectángulo
 800e0e2:	88fb      	ldrh	r3, [r7, #6]
 800e0e4:	60fb      	str	r3, [r7, #12]
 800e0e6:	e018      	b.n	800e11a <LCD_dibujaRectanguloRelleno+0x56>
        for(int y = yInicial; y < yInicial + alto; y++)  // y el alto
 800e0e8:	88bb      	ldrh	r3, [r7, #4]
 800e0ea:	60bb      	str	r3, [r7, #8]
 800e0ec:	e00c      	b.n	800e108 <LCD_dibujaRectanguloRelleno+0x44>
            LCD_dibujaPunto(x, y, color, enBlancoYNegro, transparencia);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	b298      	uxth	r0, r3
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	b299      	uxth	r1, r3
 800e0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	6a3a      	ldr	r2, [r7, #32]
 800e0fe:	f7ff fef1 	bl	800dee4 <LCD_dibujaPunto>
        for(int y = yInicial; y < yInicial + alto; y++)  // y el alto
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	3301      	adds	r3, #1
 800e106:	60bb      	str	r3, [r7, #8]
 800e108:	88ba      	ldrh	r2, [r7, #4]
 800e10a:	883b      	ldrh	r3, [r7, #0]
 800e10c:	4413      	add	r3, r2
 800e10e:	68ba      	ldr	r2, [r7, #8]
 800e110:	429a      	cmp	r2, r3
 800e112:	dbec      	blt.n	800e0ee <LCD_dibujaRectanguloRelleno+0x2a>
    for(int x = xInicial; x < xInicial + ancho; x++)  // Recorriendo el lcd_ancho del rectángulo
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3301      	adds	r3, #1
 800e118:	60fb      	str	r3, [r7, #12]
 800e11a:	88fa      	ldrh	r2, [r7, #6]
 800e11c:	887b      	ldrh	r3, [r7, #2]
 800e11e:	4413      	add	r3, r2
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	429a      	cmp	r2, r3
 800e124:	dbe0      	blt.n	800e0e8 <LCD_dibujaRectanguloRelleno+0x24>
            // Dibuja cada punto del rectángulo con su color
}
 800e126:	bf00      	nop
 800e128:	bf00      	nop
 800e12a:	3714      	adds	r7, #20
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd90      	pop	{r4, r7, pc}

0800e130 <LCD_dibujaRectanguloRellenoOpaco>:

// -----------------------------------------------------------------------------------------

void LCD_dibujaRectanguloRellenoOpaco(uint16_t xInicial, uint16_t yInicial, uint16_t ancho, uint16_t alto,
    uint32_t color) {
 800e130:	b490      	push	{r4, r7}
 800e132:	b08c      	sub	sp, #48	; 0x30
 800e134:	af00      	add	r7, sp, #0
 800e136:	4604      	mov	r4, r0
 800e138:	4608      	mov	r0, r1
 800e13a:	4611      	mov	r1, r2
 800e13c:	461a      	mov	r2, r3
 800e13e:	4623      	mov	r3, r4
 800e140:	80fb      	strh	r3, [r7, #6]
 800e142:	4603      	mov	r3, r0
 800e144:	80bb      	strh	r3, [r7, #4]
 800e146:	460b      	mov	r3, r1
 800e148:	807b      	strh	r3, [r7, #2]
 800e14a:	4613      	mov	r3, r2
 800e14c:	803b      	strh	r3, [r7, #0]
// Dibuja un rectángulo relleno de un color opaco.
// 'xInicial' e 'yInicial' indican las coordenadas de la esquina superior izquierda.
// 'ancho' y 'alto' son las dimensiones del rectángulo.

	int yFinal = yInicial + alto - 1;
 800e14e:	88ba      	ldrh	r2, [r7, #4]
 800e150:	883b      	ldrh	r3, [r7, #0]
 800e152:	4413      	add	r3, r2
 800e154:	3b01      	subs	r3, #1
 800e156:	617b      	str	r3, [r7, #20]
	int xFinal = xInicial + ancho - 1;
 800e158:	88fa      	ldrh	r2, [r7, #6]
 800e15a:	887b      	ldrh	r3, [r7, #2]
 800e15c:	4413      	add	r3, r2
 800e15e:	3b01      	subs	r3, #1
 800e160:	613b      	str	r3, [r7, #16]
	if (horizontal) {
 800e162:	4b3b      	ldr	r3, [pc, #236]	; (800e250 <LCD_dibujaRectanguloRellenoOpaco+0x120>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d039      	beq.n	800e1de <LCD_dibujaRectanguloRellenoOpaco+0xae>
		uint32_t* p = lcd_buffers[lcd_bufferOculto] + (239 - yInicial - alto + 1) + lcd_alto * xInicial;
 800e16a:	4b3a      	ldr	r3, [pc, #232]	; (800e254 <LCD_dibujaRectanguloRellenoOpaco+0x124>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4a3a      	ldr	r2, [pc, #232]	; (800e258 <LCD_dibujaRectanguloRellenoOpaco+0x128>)
 800e170:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e174:	88bb      	ldrh	r3, [r7, #4]
 800e176:	f1c3 01ef 	rsb	r1, r3, #239	; 0xef
 800e17a:	883b      	ldrh	r3, [r7, #0]
 800e17c:	1acb      	subs	r3, r1, r3
 800e17e:	4619      	mov	r1, r3
 800e180:	4b36      	ldr	r3, [pc, #216]	; (800e25c <LCD_dibujaRectanguloRellenoOpaco+0x12c>)
 800e182:	881b      	ldrh	r3, [r3, #0]
 800e184:	4618      	mov	r0, r3
 800e186:	88fb      	ldrh	r3, [r7, #6]
 800e188:	fb00 f303 	mul.w	r3, r0, r3
 800e18c:	440b      	add	r3, r1
 800e18e:	3301      	adds	r3, #1
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	4413      	add	r3, r2
 800e194:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint16_t salto = lcd_alto - alto;
 800e196:	4b31      	ldr	r3, [pc, #196]	; (800e25c <LCD_dibujaRectanguloRellenoOpaco+0x12c>)
 800e198:	881a      	ldrh	r2, [r3, #0]
 800e19a:	883b      	ldrh	r3, [r7, #0]
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	81bb      	strh	r3, [r7, #12]
	    for(int x = xInicial; x <= xFinal; x++) { // Para cada fila de puntos
 800e1a0:	88fb      	ldrh	r3, [r7, #6]
 800e1a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1a4:	e016      	b.n	800e1d4 <LCD_dibujaRectanguloRellenoOpaco+0xa4>
	        for(int y = yInicial; y <= yFinal; y++) // Recorre los puntos de la fila
 800e1a6:	88bb      	ldrh	r3, [r7, #4]
 800e1a8:	627b      	str	r3, [r7, #36]	; 0x24
 800e1aa:	e007      	b.n	800e1bc <LCD_dibujaRectanguloRellenoOpaco+0x8c>
	        	*(p++) = color;  // Establece el color del punto y apunta al siguiente
 800e1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ae:	1d1a      	adds	r2, r3, #4
 800e1b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e1b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1b4:	601a      	str	r2, [r3, #0]
	        for(int y = yInicial; y <= yFinal; y++) // Recorre los puntos de la fila
 800e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	ddf3      	ble.n	800e1ac <LCD_dibujaRectanguloRellenoOpaco+0x7c>
	        p += salto;  // Apunta al primer punto de la siguiente fila
 800e1c4:	89bb      	ldrh	r3, [r7, #12]
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1ca:	4413      	add	r3, r2
 800e1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	    for(int x = xInicial; x <= xFinal; x++) { // Para cada fila de puntos
 800e1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	dde4      	ble.n	800e1a6 <LCD_dibujaRectanguloRellenoOpaco+0x76>
	        for(int x = xInicial; x <= xFinal; x++) // Recorre los puntos de la fila
	        	*(p++) = color;  // Establece el color del punto y apunta al siguiente
	        p += salto;  // Apunta al primer punto de la siguiente fila
        }
	}
}
 800e1dc:	e032      	b.n	800e244 <LCD_dibujaRectanguloRellenoOpaco+0x114>
		uint32_t* p = lcd_buffers[lcd_bufferOculto] + yInicial * lcd_ancho + xInicial;
 800e1de:	4b1d      	ldr	r3, [pc, #116]	; (800e254 <LCD_dibujaRectanguloRellenoOpaco+0x124>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a1d      	ldr	r2, [pc, #116]	; (800e258 <LCD_dibujaRectanguloRellenoOpaco+0x128>)
 800e1e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e1e8:	88bb      	ldrh	r3, [r7, #4]
 800e1ea:	491d      	ldr	r1, [pc, #116]	; (800e260 <LCD_dibujaRectanguloRellenoOpaco+0x130>)
 800e1ec:	8809      	ldrh	r1, [r1, #0]
 800e1ee:	fb01 f303 	mul.w	r3, r1, r3
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	88fb      	ldrh	r3, [r7, #6]
 800e1f6:	440b      	add	r3, r1
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	623b      	str	r3, [r7, #32]
		uint16_t salto = lcd_ancho - ancho;
 800e1fe:	4b18      	ldr	r3, [pc, #96]	; (800e260 <LCD_dibujaRectanguloRellenoOpaco+0x130>)
 800e200:	881a      	ldrh	r2, [r3, #0]
 800e202:	887b      	ldrh	r3, [r7, #2]
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	81fb      	strh	r3, [r7, #14]
	    for(int y = yInicial; y <= yFinal; y++) { // Para cada fila de puntos
 800e208:	88bb      	ldrh	r3, [r7, #4]
 800e20a:	61fb      	str	r3, [r7, #28]
 800e20c:	e016      	b.n	800e23c <LCD_dibujaRectanguloRellenoOpaco+0x10c>
	        for(int x = xInicial; x <= xFinal; x++) // Recorre los puntos de la fila
 800e20e:	88fb      	ldrh	r3, [r7, #6]
 800e210:	61bb      	str	r3, [r7, #24]
 800e212:	e007      	b.n	800e224 <LCD_dibujaRectanguloRellenoOpaco+0xf4>
	        	*(p++) = color;  // Establece el color del punto y apunta al siguiente
 800e214:	6a3b      	ldr	r3, [r7, #32]
 800e216:	1d1a      	adds	r2, r3, #4
 800e218:	623a      	str	r2, [r7, #32]
 800e21a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e21c:	601a      	str	r2, [r3, #0]
	        for(int x = xInicial; x <= xFinal; x++) // Recorre los puntos de la fila
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	3301      	adds	r3, #1
 800e222:	61bb      	str	r3, [r7, #24]
 800e224:	69ba      	ldr	r2, [r7, #24]
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	429a      	cmp	r2, r3
 800e22a:	ddf3      	ble.n	800e214 <LCD_dibujaRectanguloRellenoOpaco+0xe4>
	        p += salto;  // Apunta al primer punto de la siguiente fila
 800e22c:	89fb      	ldrh	r3, [r7, #14]
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	6a3a      	ldr	r2, [r7, #32]
 800e232:	4413      	add	r3, r2
 800e234:	623b      	str	r3, [r7, #32]
	    for(int y = yInicial; y <= yFinal; y++) { // Para cada fila de puntos
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	3301      	adds	r3, #1
 800e23a:	61fb      	str	r3, [r7, #28]
 800e23c:	69fa      	ldr	r2, [r7, #28]
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	429a      	cmp	r2, r3
 800e242:	dde4      	ble.n	800e20e <LCD_dibujaRectanguloRellenoOpaco+0xde>
}
 800e244:	bf00      	nop
 800e246:	3730      	adds	r7, #48	; 0x30
 800e248:	46bd      	mov	sp, r7
 800e24a:	bc90      	pop	{r4, r7}
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	20000664 	.word	0x20000664
 800e254:	2000065c 	.word	0x2000065c
 800e258:	20000654 	.word	0x20000654
 800e25c:	20000650 	.word	0x20000650
 800e260:	2000064e 	.word	0x2000064e

0800e264 <LCD_dibujaLinea>:

// -----------------------------------------------------------------------------------------

void LCD_dibujaLinea(int x0, int y0, int x1, int y1, uint32_t color, int enBlancoYNegro, int transparencia) {
 800e264:	b580      	push	{r7, lr}
 800e266:	b08c      	sub	sp, #48	; 0x30
 800e268:	af02      	add	r7, sp, #8
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
 800e270:	603b      	str	r3, [r7, #0]
    // https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm
    // Si 'enBlancoYNegro' es un buleano cierto, convierte el color a gris
    // 'transparencia' es un factor entre 0 y 100 para aplicar un nivel de transparencia al color, desde
    // completamente transparente (valor 0) a transparencia original (valor 100)

    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	1ad3      	subs	r3, r2, r3
 800e278:	2b00      	cmp	r3, #0
 800e27a:	bfb8      	it	lt
 800e27c:	425b      	neglt	r3, r3
 800e27e:	623b      	str	r3, [r7, #32]
 800e280:	68fa      	ldr	r2, [r7, #12]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	429a      	cmp	r2, r3
 800e286:	da01      	bge.n	800e28c <LCD_dibujaLinea+0x28>
 800e288:	2301      	movs	r3, #1
 800e28a:	e001      	b.n	800e290 <LCD_dibujaLinea+0x2c>
 800e28c:	f04f 33ff 	mov.w	r3, #4294967295
 800e290:	61fb      	str	r3, [r7, #28]
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
 800e292:	683a      	ldr	r2, [r7, #0]
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	1ad3      	subs	r3, r2, r3
 800e298:	2b00      	cmp	r3, #0
 800e29a:	bfb8      	it	lt
 800e29c:	425b      	neglt	r3, r3
 800e29e:	61bb      	str	r3, [r7, #24]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	da01      	bge.n	800e2ac <LCD_dibujaLinea+0x48>
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e001      	b.n	800e2b0 <LCD_dibujaLinea+0x4c>
 800e2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b0:	617b      	str	r3, [r7, #20]
    int err = (dx>dy ? dx : -dy)/2, e2;
 800e2b2:	6a3a      	ldr	r2, [r7, #32]
 800e2b4:	69bb      	ldr	r3, [r7, #24]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	dc05      	bgt.n	800e2c6 <LCD_dibujaLinea+0x62>
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	0fda      	lsrs	r2, r3, #31
 800e2be:	4413      	add	r3, r2
 800e2c0:	105b      	asrs	r3, r3, #1
 800e2c2:	425b      	negs	r3, r3
 800e2c4:	e003      	b.n	800e2ce <LCD_dibujaLinea+0x6a>
 800e2c6:	6a3b      	ldr	r3, [r7, #32]
 800e2c8:	0fda      	lsrs	r2, r3, #31
 800e2ca:	4413      	add	r3, r2
 800e2cc:	105b      	asrs	r3, r3, #1
 800e2ce:	627b      	str	r3, [r7, #36]	; 0x24

    while(1) {
        LCD_dibujaPunto(x0, y0, color, enBlancoYNegro, transparencia);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	b298      	uxth	r0, r3
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	b299      	uxth	r1, r3
 800e2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2e0:	f7ff fe00 	bl	800dee4 <LCD_dibujaPunto>
        if (x0==x1 && y0==y1) break;
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d103      	bne.n	800e2f4 <LCD_dibujaLinea+0x90>
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d01b      	beq.n	800e32c <LCD_dibujaLinea+0xc8>
        e2 = err;
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f6:	613b      	str	r3, [r7, #16]
        if (e2 >-dx) { err -= dy; x0 += sx; }
 800e2f8:	6a3b      	ldr	r3, [r7, #32]
 800e2fa:	425b      	negs	r3, r3
 800e2fc:	693a      	ldr	r2, [r7, #16]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	dd07      	ble.n	800e312 <LCD_dibujaLinea+0xae>
 800e302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	1ad3      	subs	r3, r2, r3
 800e308:	627b      	str	r3, [r7, #36]	; 0x24
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	4413      	add	r3, r2
 800e310:	60fb      	str	r3, [r7, #12]
        if (e2 < dy) { err += dx; y0 += sy; }
 800e312:	693a      	ldr	r2, [r7, #16]
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	429a      	cmp	r2, r3
 800e318:	dada      	bge.n	800e2d0 <LCD_dibujaLinea+0x6c>
 800e31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e31c:	6a3b      	ldr	r3, [r7, #32]
 800e31e:	4413      	add	r3, r2
 800e320:	627b      	str	r3, [r7, #36]	; 0x24
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	4413      	add	r3, r2
 800e328:	60bb      	str	r3, [r7, #8]
        LCD_dibujaPunto(x0, y0, color, enBlancoYNegro, transparencia);
 800e32a:	e7d1      	b.n	800e2d0 <LCD_dibujaLinea+0x6c>
        if (x0==x1 && y0==y1) break;
 800e32c:	bf00      	nop
    }
}
 800e32e:	bf00      	nop
 800e330:	3728      	adds	r7, #40	; 0x28
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
	...

0800e338 <__NVIC_SetPriority>:
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	6039      	str	r1, [r7, #0]
 800e342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	db0a      	blt.n	800e362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	b2da      	uxtb	r2, r3
 800e350:	490c      	ldr	r1, [pc, #48]	; (800e384 <__NVIC_SetPriority+0x4c>)
 800e352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e356:	0112      	lsls	r2, r2, #4
 800e358:	b2d2      	uxtb	r2, r2
 800e35a:	440b      	add	r3, r1
 800e35c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e360:	e00a      	b.n	800e378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	b2da      	uxtb	r2, r3
 800e366:	4908      	ldr	r1, [pc, #32]	; (800e388 <__NVIC_SetPriority+0x50>)
 800e368:	79fb      	ldrb	r3, [r7, #7]
 800e36a:	f003 030f 	and.w	r3, r3, #15
 800e36e:	3b04      	subs	r3, #4
 800e370:	0112      	lsls	r2, r2, #4
 800e372:	b2d2      	uxtb	r2, r2
 800e374:	440b      	add	r3, r1
 800e376:	761a      	strb	r2, [r3, #24]
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr
 800e384:	e000e100 	.word	0xe000e100
 800e388:	e000ed00 	.word	0xe000ed00

0800e38c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e38c:	b580      	push	{r7, lr}
 800e38e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e390:	4b05      	ldr	r3, [pc, #20]	; (800e3a8 <SysTick_Handler+0x1c>)
 800e392:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e394:	f001 ff10 	bl	80101b8 <xTaskGetSchedulerState>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d001      	beq.n	800e3a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e39e:	f002 fcfb 	bl	8010d98 <xPortSysTickHandler>
  }
}
 800e3a2:	bf00      	nop
 800e3a4:	bd80      	pop	{r7, pc}
 800e3a6:	bf00      	nop
 800e3a8:	e000e010 	.word	0xe000e010

0800e3ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e3b0:	2100      	movs	r1, #0
 800e3b2:	f06f 0004 	mvn.w	r0, #4
 800e3b6:	f7ff ffbf 	bl	800e338 <__NVIC_SetPriority>
#endif
}
 800e3ba:	bf00      	nop
 800e3bc:	bd80      	pop	{r7, pc}
	...

0800e3c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3c6:	f3ef 8305 	mrs	r3, IPSR
 800e3ca:	603b      	str	r3, [r7, #0]
  return(result);
 800e3cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d003      	beq.n	800e3da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e3d2:	f06f 0305 	mvn.w	r3, #5
 800e3d6:	607b      	str	r3, [r7, #4]
 800e3d8:	e00c      	b.n	800e3f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e3da:	4b0a      	ldr	r3, [pc, #40]	; (800e404 <osKernelInitialize+0x44>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d105      	bne.n	800e3ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e3e2:	4b08      	ldr	r3, [pc, #32]	; (800e404 <osKernelInitialize+0x44>)
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	607b      	str	r3, [r7, #4]
 800e3ec:	e002      	b.n	800e3f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e3f4:	687b      	ldr	r3, [r7, #4]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	370c      	adds	r7, #12
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	2000066c 	.word	0x2000066c

0800e408 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e40e:	f3ef 8305 	mrs	r3, IPSR
 800e412:	603b      	str	r3, [r7, #0]
  return(result);
 800e414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e416:	2b00      	cmp	r3, #0
 800e418:	d003      	beq.n	800e422 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e41a:	f06f 0305 	mvn.w	r3, #5
 800e41e:	607b      	str	r3, [r7, #4]
 800e420:	e010      	b.n	800e444 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e422:	4b0b      	ldr	r3, [pc, #44]	; (800e450 <osKernelStart+0x48>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d109      	bne.n	800e43e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e42a:	f7ff ffbf 	bl	800e3ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e42e:	4b08      	ldr	r3, [pc, #32]	; (800e450 <osKernelStart+0x48>)
 800e430:	2202      	movs	r2, #2
 800e432:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e434:	f001 fa52 	bl	800f8dc <vTaskStartScheduler>
      stat = osOK;
 800e438:	2300      	movs	r3, #0
 800e43a:	607b      	str	r3, [r7, #4]
 800e43c:	e002      	b.n	800e444 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e43e:	f04f 33ff 	mov.w	r3, #4294967295
 800e442:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e444:	687b      	ldr	r3, [r7, #4]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	2000066c 	.word	0x2000066c

0800e454 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e454:	b580      	push	{r7, lr}
 800e456:	b08e      	sub	sp, #56	; 0x38
 800e458:	af04      	add	r7, sp, #16
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e460:	2300      	movs	r3, #0
 800e462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e464:	f3ef 8305 	mrs	r3, IPSR
 800e468:	617b      	str	r3, [r7, #20]
  return(result);
 800e46a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d17e      	bne.n	800e56e <osThreadNew+0x11a>
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d07b      	beq.n	800e56e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e476:	2380      	movs	r3, #128	; 0x80
 800e478:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e47a:	2318      	movs	r3, #24
 800e47c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e47e:	2300      	movs	r3, #0
 800e480:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e482:	f04f 33ff 	mov.w	r3, #4294967295
 800e486:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d045      	beq.n	800e51a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d002      	beq.n	800e49c <osThreadNew+0x48>
        name = attr->name;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	699b      	ldr	r3, [r3, #24]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d002      	beq.n	800e4aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d008      	beq.n	800e4c2 <osThreadNew+0x6e>
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	2b38      	cmp	r3, #56	; 0x38
 800e4b4:	d805      	bhi.n	800e4c2 <osThreadNew+0x6e>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	f003 0301 	and.w	r3, r3, #1
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d001      	beq.n	800e4c6 <osThreadNew+0x72>
        return (NULL);
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	e054      	b.n	800e570 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	695b      	ldr	r3, [r3, #20]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d003      	beq.n	800e4d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	695b      	ldr	r3, [r3, #20]
 800e4d2:	089b      	lsrs	r3, r3, #2
 800e4d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	689b      	ldr	r3, [r3, #8]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00e      	beq.n	800e4fc <osThreadNew+0xa8>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	2b5f      	cmp	r3, #95	; 0x5f
 800e4e4:	d90a      	bls.n	800e4fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d006      	beq.n	800e4fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	695b      	ldr	r3, [r3, #20]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d002      	beq.n	800e4fc <osThreadNew+0xa8>
        mem = 1;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	61bb      	str	r3, [r7, #24]
 800e4fa:	e010      	b.n	800e51e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	689b      	ldr	r3, [r3, #8]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d10c      	bne.n	800e51e <osThreadNew+0xca>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d108      	bne.n	800e51e <osThreadNew+0xca>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	691b      	ldr	r3, [r3, #16]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d104      	bne.n	800e51e <osThreadNew+0xca>
          mem = 0;
 800e514:	2300      	movs	r3, #0
 800e516:	61bb      	str	r3, [r7, #24]
 800e518:	e001      	b.n	800e51e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e51e:	69bb      	ldr	r3, [r7, #24]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d110      	bne.n	800e546 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e52c:	9202      	str	r2, [sp, #8]
 800e52e:	9301      	str	r3, [sp, #4]
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	6a3a      	ldr	r2, [r7, #32]
 800e538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f000 fff6 	bl	800f52c <xTaskCreateStatic>
 800e540:	4603      	mov	r3, r0
 800e542:	613b      	str	r3, [r7, #16]
 800e544:	e013      	b.n	800e56e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e546:	69bb      	ldr	r3, [r7, #24]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d110      	bne.n	800e56e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e54c:	6a3b      	ldr	r3, [r7, #32]
 800e54e:	b29a      	uxth	r2, r3
 800e550:	f107 0310 	add.w	r3, r7, #16
 800e554:	9301      	str	r3, [sp, #4]
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	9300      	str	r3, [sp, #0]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e55e:	68f8      	ldr	r0, [r7, #12]
 800e560:	f001 f841 	bl	800f5e6 <xTaskCreate>
 800e564:	4603      	mov	r3, r0
 800e566:	2b01      	cmp	r3, #1
 800e568:	d001      	beq.n	800e56e <osThreadNew+0x11a>
            hTask = NULL;
 800e56a:	2300      	movs	r3, #0
 800e56c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e56e:	693b      	ldr	r3, [r7, #16]
}
 800e570:	4618      	mov	r0, r3
 800e572:	3728      	adds	r7, #40	; 0x28
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e580:	f3ef 8305 	mrs	r3, IPSR
 800e584:	60bb      	str	r3, [r7, #8]
  return(result);
 800e586:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d003      	beq.n	800e594 <osDelay+0x1c>
    stat = osErrorISR;
 800e58c:	f06f 0305 	mvn.w	r3, #5
 800e590:	60fb      	str	r3, [r7, #12]
 800e592:	e007      	b.n	800e5a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e594:	2300      	movs	r3, #0
 800e596:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d002      	beq.n	800e5a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f001 f968 	bl	800f874 <vTaskDelay>
    }
  }

  return (stat);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3710      	adds	r7, #16
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b08a      	sub	sp, #40	; 0x28
 800e5b2:	af02      	add	r7, sp, #8
 800e5b4:	60f8      	str	r0, [r7, #12]
 800e5b6:	60b9      	str	r1, [r7, #8]
 800e5b8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5be:	f3ef 8305 	mrs	r3, IPSR
 800e5c2:	613b      	str	r3, [r7, #16]
  return(result);
 800e5c4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d15f      	bne.n	800e68a <osMessageQueueNew+0xdc>
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d05c      	beq.n	800e68a <osMessageQueueNew+0xdc>
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d059      	beq.n	800e68a <osMessageQueueNew+0xdc>
    mem = -1;
 800e5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d029      	beq.n	800e636 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d012      	beq.n	800e610 <osMessageQueueNew+0x62>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	2b4f      	cmp	r3, #79	; 0x4f
 800e5f0:	d90e      	bls.n	800e610 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00a      	beq.n	800e610 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	695a      	ldr	r2, [r3, #20]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	68b9      	ldr	r1, [r7, #8]
 800e602:	fb01 f303 	mul.w	r3, r1, r3
 800e606:	429a      	cmp	r2, r3
 800e608:	d302      	bcc.n	800e610 <osMessageQueueNew+0x62>
        mem = 1;
 800e60a:	2301      	movs	r3, #1
 800e60c:	61bb      	str	r3, [r7, #24]
 800e60e:	e014      	b.n	800e63a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d110      	bne.n	800e63a <osMessageQueueNew+0x8c>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d10c      	bne.n	800e63a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e624:	2b00      	cmp	r3, #0
 800e626:	d108      	bne.n	800e63a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	695b      	ldr	r3, [r3, #20]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d104      	bne.n	800e63a <osMessageQueueNew+0x8c>
          mem = 0;
 800e630:	2300      	movs	r3, #0
 800e632:	61bb      	str	r3, [r7, #24]
 800e634:	e001      	b.n	800e63a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e636:	2300      	movs	r3, #0
 800e638:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d10b      	bne.n	800e658 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	691a      	ldr	r2, [r3, #16]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	2100      	movs	r1, #0
 800e64a:	9100      	str	r1, [sp, #0]
 800e64c:	68b9      	ldr	r1, [r7, #8]
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	f000 fa2e 	bl	800eab0 <xQueueGenericCreateStatic>
 800e654:	61f8      	str	r0, [r7, #28]
 800e656:	e008      	b.n	800e66a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e658:	69bb      	ldr	r3, [r7, #24]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d105      	bne.n	800e66a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e65e:	2200      	movs	r2, #0
 800e660:	68b9      	ldr	r1, [r7, #8]
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f000 fa9c 	bl	800eba0 <xQueueGenericCreate>
 800e668:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00c      	beq.n	800e68a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d003      	beq.n	800e67e <osMessageQueueNew+0xd0>
        name = attr->name;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	617b      	str	r3, [r7, #20]
 800e67c:	e001      	b.n	800e682 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e682:	6979      	ldr	r1, [r7, #20]
 800e684:	69f8      	ldr	r0, [r7, #28]
 800e686:	f000 fef3 	bl	800f470 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e68a:	69fb      	ldr	r3, [r7, #28]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3720      	adds	r7, #32
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e694:	b580      	push	{r7, lr}
 800e696:	b088      	sub	sp, #32
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	603b      	str	r3, [r7, #0]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6ac:	f3ef 8305 	mrs	r3, IPSR
 800e6b0:	617b      	str	r3, [r7, #20]
  return(result);
 800e6b2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d028      	beq.n	800e70a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d005      	beq.n	800e6ca <osMessageQueuePut+0x36>
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d002      	beq.n	800e6ca <osMessageQueuePut+0x36>
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d003      	beq.n	800e6d2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e6ca:	f06f 0303 	mvn.w	r3, #3
 800e6ce:	61fb      	str	r3, [r7, #28]
 800e6d0:	e038      	b.n	800e744 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e6d6:	f107 0210 	add.w	r2, r7, #16
 800e6da:	2300      	movs	r3, #0
 800e6dc:	68b9      	ldr	r1, [r7, #8]
 800e6de:	69b8      	ldr	r0, [r7, #24]
 800e6e0:	f000 fbba 	bl	800ee58 <xQueueGenericSendFromISR>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d003      	beq.n	800e6f2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e6ea:	f06f 0302 	mvn.w	r3, #2
 800e6ee:	61fb      	str	r3, [r7, #28]
 800e6f0:	e028      	b.n	800e744 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d025      	beq.n	800e744 <osMessageQueuePut+0xb0>
 800e6f8:	4b15      	ldr	r3, [pc, #84]	; (800e750 <osMessageQueuePut+0xbc>)
 800e6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6fe:	601a      	str	r2, [r3, #0]
 800e700:	f3bf 8f4f 	dsb	sy
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	e01c      	b.n	800e744 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d002      	beq.n	800e716 <osMessageQueuePut+0x82>
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d103      	bne.n	800e71e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e716:	f06f 0303 	mvn.w	r3, #3
 800e71a:	61fb      	str	r3, [r7, #28]
 800e71c:	e012      	b.n	800e744 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e71e:	2300      	movs	r3, #0
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	68b9      	ldr	r1, [r7, #8]
 800e724:	69b8      	ldr	r0, [r7, #24]
 800e726:	f000 fa99 	bl	800ec5c <xQueueGenericSend>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d009      	beq.n	800e744 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d003      	beq.n	800e73e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e736:	f06f 0301 	mvn.w	r3, #1
 800e73a:	61fb      	str	r3, [r7, #28]
 800e73c:	e002      	b.n	800e744 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e73e:	f06f 0302 	mvn.w	r3, #2
 800e742:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e744:	69fb      	ldr	r3, [r7, #28]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3720      	adds	r7, #32
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	e000ed04 	.word	0xe000ed04

0800e754 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e754:	b580      	push	{r7, lr}
 800e756:	b088      	sub	sp, #32
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]
 800e760:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e766:	2300      	movs	r3, #0
 800e768:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e76a:	f3ef 8305 	mrs	r3, IPSR
 800e76e:	617b      	str	r3, [r7, #20]
  return(result);
 800e770:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e772:	2b00      	cmp	r3, #0
 800e774:	d028      	beq.n	800e7c8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d005      	beq.n	800e788 <osMessageQueueGet+0x34>
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d002      	beq.n	800e788 <osMessageQueueGet+0x34>
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d003      	beq.n	800e790 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e788:	f06f 0303 	mvn.w	r3, #3
 800e78c:	61fb      	str	r3, [r7, #28]
 800e78e:	e037      	b.n	800e800 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e790:	2300      	movs	r3, #0
 800e792:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e794:	f107 0310 	add.w	r3, r7, #16
 800e798:	461a      	mov	r2, r3
 800e79a:	68b9      	ldr	r1, [r7, #8]
 800e79c:	69b8      	ldr	r0, [r7, #24]
 800e79e:	f000 fcd7 	bl	800f150 <xQueueReceiveFromISR>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d003      	beq.n	800e7b0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e7a8:	f06f 0302 	mvn.w	r3, #2
 800e7ac:	61fb      	str	r3, [r7, #28]
 800e7ae:	e027      	b.n	800e800 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d024      	beq.n	800e800 <osMessageQueueGet+0xac>
 800e7b6:	4b15      	ldr	r3, [pc, #84]	; (800e80c <osMessageQueueGet+0xb8>)
 800e7b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7bc:	601a      	str	r2, [r3, #0]
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	e01b      	b.n	800e800 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d002      	beq.n	800e7d4 <osMessageQueueGet+0x80>
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d103      	bne.n	800e7dc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e7d4:	f06f 0303 	mvn.w	r3, #3
 800e7d8:	61fb      	str	r3, [r7, #28]
 800e7da:	e011      	b.n	800e800 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e7dc:	683a      	ldr	r2, [r7, #0]
 800e7de:	68b9      	ldr	r1, [r7, #8]
 800e7e0:	69b8      	ldr	r0, [r7, #24]
 800e7e2:	f000 fbd5 	bl	800ef90 <xQueueReceive>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d009      	beq.n	800e800 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d003      	beq.n	800e7fa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e7f2:	f06f 0301 	mvn.w	r3, #1
 800e7f6:	61fb      	str	r3, [r7, #28]
 800e7f8:	e002      	b.n	800e800 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e7fa:	f06f 0302 	mvn.w	r3, #2
 800e7fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e800:	69fb      	ldr	r3, [r7, #28]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3720      	adds	r7, #32
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	e000ed04 	.word	0xe000ed04

0800e810 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e810:	b480      	push	{r7}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	4a07      	ldr	r2, [pc, #28]	; (800e83c <vApplicationGetIdleTaskMemory+0x2c>)
 800e820:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	4a06      	ldr	r2, [pc, #24]	; (800e840 <vApplicationGetIdleTaskMemory+0x30>)
 800e826:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2280      	movs	r2, #128	; 0x80
 800e82c:	601a      	str	r2, [r3, #0]
}
 800e82e:	bf00      	nop
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	20000670 	.word	0x20000670
 800e840:	200006d0 	.word	0x200006d0

0800e844 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	4a07      	ldr	r2, [pc, #28]	; (800e870 <vApplicationGetTimerTaskMemory+0x2c>)
 800e854:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	4a06      	ldr	r2, [pc, #24]	; (800e874 <vApplicationGetTimerTaskMemory+0x30>)
 800e85a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e862:	601a      	str	r2, [r3, #0]
}
 800e864:	bf00      	nop
 800e866:	3714      	adds	r7, #20
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	200008d0 	.word	0x200008d0
 800e874:	20000930 	.word	0x20000930

0800e878 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f103 0208 	add.w	r2, r3, #8
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f04f 32ff 	mov.w	r2, #4294967295
 800e890:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f103 0208 	add.w	r2, r3, #8
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f103 0208 	add.w	r2, r3, #8
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e8ac:	bf00      	nop
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e8c6:	bf00      	nop
 800e8c8:	370c      	adds	r7, #12
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr

0800e8d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e8d2:	b480      	push	{r7}
 800e8d4:	b085      	sub	sp, #20
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
 800e8da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	689a      	ldr	r2, [r3, #8]
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	683a      	ldr	r2, [r7, #0]
 800e8f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	683a      	ldr	r2, [r7, #0]
 800e8fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	1c5a      	adds	r2, r3, #1
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	601a      	str	r2, [r3, #0]
}
 800e90e:	bf00      	nop
 800e910:	3714      	adds	r7, #20
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e91a:	b480      	push	{r7}
 800e91c:	b085      	sub	sp, #20
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e930:	d103      	bne.n	800e93a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	691b      	ldr	r3, [r3, #16]
 800e936:	60fb      	str	r3, [r7, #12]
 800e938:	e00c      	b.n	800e954 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	3308      	adds	r3, #8
 800e93e:	60fb      	str	r3, [r7, #12]
 800e940:	e002      	b.n	800e948 <vListInsert+0x2e>
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	60fb      	str	r3, [r7, #12]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	429a      	cmp	r2, r3
 800e952:	d2f6      	bcs.n	800e942 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	685a      	ldr	r2, [r3, #4]
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	683a      	ldr	r2, [r7, #0]
 800e962:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	683a      	ldr	r2, [r7, #0]
 800e96e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	687a      	ldr	r2, [r7, #4]
 800e974:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	601a      	str	r2, [r3, #0]
}
 800e980:	bf00      	nop
 800e982:	3714      	adds	r7, #20
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e98c:	b480      	push	{r7}
 800e98e:	b085      	sub	sp, #20
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	691b      	ldr	r3, [r3, #16]
 800e998:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	6892      	ldr	r2, [r2, #8]
 800e9a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	6852      	ldr	r2, [r2, #4]
 800e9ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d103      	bne.n	800e9c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	689a      	ldr	r2, [r3, #8]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	1e5a      	subs	r2, r3, #1
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3714      	adds	r7, #20
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d10a      	bne.n	800ea0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f8:	f383 8811 	msr	BASEPRI, r3
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f3bf 8f4f 	dsb	sy
 800ea04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ea06:	bf00      	nop
 800ea08:	e7fe      	b.n	800ea08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ea0a:	f002 f933 	bl	8010c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea16:	68f9      	ldr	r1, [r7, #12]
 800ea18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ea1a:	fb01 f303 	mul.w	r3, r1, r3
 800ea1e:	441a      	add	r2, r3
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2200      	movs	r2, #0
 800ea28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea3a:	3b01      	subs	r3, #1
 800ea3c:	68f9      	ldr	r1, [r7, #12]
 800ea3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ea40:	fb01 f303 	mul.w	r3, r1, r3
 800ea44:	441a      	add	r2, r3
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	22ff      	movs	r2, #255	; 0xff
 800ea4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	22ff      	movs	r2, #255	; 0xff
 800ea56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d114      	bne.n	800ea8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	691b      	ldr	r3, [r3, #16]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d01a      	beq.n	800ea9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	3310      	adds	r3, #16
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f001 f9e3 	bl	800fe38 <xTaskRemoveFromEventList>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d012      	beq.n	800ea9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ea78:	4b0c      	ldr	r3, [pc, #48]	; (800eaac <xQueueGenericReset+0xcc>)
 800ea7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea7e:	601a      	str	r2, [r3, #0]
 800ea80:	f3bf 8f4f 	dsb	sy
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	e009      	b.n	800ea9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	3310      	adds	r3, #16
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7ff fef2 	bl	800e878 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	3324      	adds	r3, #36	; 0x24
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7ff feed 	bl	800e878 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ea9e:	f002 f919 	bl	8010cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eaa2:	2301      	movs	r3, #1
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	e000ed04 	.word	0xe000ed04

0800eab0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b08e      	sub	sp, #56	; 0x38
 800eab4:	af02      	add	r7, sp, #8
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
 800eabc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d10a      	bne.n	800eada <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800eac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac8:	f383 8811 	msr	BASEPRI, r3
 800eacc:	f3bf 8f6f 	isb	sy
 800ead0:	f3bf 8f4f 	dsb	sy
 800ead4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ead6:	bf00      	nop
 800ead8:	e7fe      	b.n	800ead8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d10a      	bne.n	800eaf6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800eae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae4:	f383 8811 	msr	BASEPRI, r3
 800eae8:	f3bf 8f6f 	isb	sy
 800eaec:	f3bf 8f4f 	dsb	sy
 800eaf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eaf2:	bf00      	nop
 800eaf4:	e7fe      	b.n	800eaf4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d002      	beq.n	800eb02 <xQueueGenericCreateStatic+0x52>
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d001      	beq.n	800eb06 <xQueueGenericCreateStatic+0x56>
 800eb02:	2301      	movs	r3, #1
 800eb04:	e000      	b.n	800eb08 <xQueueGenericCreateStatic+0x58>
 800eb06:	2300      	movs	r3, #0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d10a      	bne.n	800eb22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800eb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb10:	f383 8811 	msr	BASEPRI, r3
 800eb14:	f3bf 8f6f 	isb	sy
 800eb18:	f3bf 8f4f 	dsb	sy
 800eb1c:	623b      	str	r3, [r7, #32]
}
 800eb1e:	bf00      	nop
 800eb20:	e7fe      	b.n	800eb20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d102      	bne.n	800eb2e <xQueueGenericCreateStatic+0x7e>
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d101      	bne.n	800eb32 <xQueueGenericCreateStatic+0x82>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e000      	b.n	800eb34 <xQueueGenericCreateStatic+0x84>
 800eb32:	2300      	movs	r3, #0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d10a      	bne.n	800eb4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800eb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb3c:	f383 8811 	msr	BASEPRI, r3
 800eb40:	f3bf 8f6f 	isb	sy
 800eb44:	f3bf 8f4f 	dsb	sy
 800eb48:	61fb      	str	r3, [r7, #28]
}
 800eb4a:	bf00      	nop
 800eb4c:	e7fe      	b.n	800eb4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800eb4e:	2350      	movs	r3, #80	; 0x50
 800eb50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	2b50      	cmp	r3, #80	; 0x50
 800eb56:	d00a      	beq.n	800eb6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800eb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb5c:	f383 8811 	msr	BASEPRI, r3
 800eb60:	f3bf 8f6f 	isb	sy
 800eb64:	f3bf 8f4f 	dsb	sy
 800eb68:	61bb      	str	r3, [r7, #24]
}
 800eb6a:	bf00      	nop
 800eb6c:	e7fe      	b.n	800eb6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800eb6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800eb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00d      	beq.n	800eb96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800eb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eb82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800eb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	68b9      	ldr	r1, [r7, #8]
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f000 f83f 	bl	800ec14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3730      	adds	r7, #48	; 0x30
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08a      	sub	sp, #40	; 0x28
 800eba4:	af02      	add	r7, sp, #8
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	4613      	mov	r3, r2
 800ebac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10a      	bne.n	800ebca <xQueueGenericCreate+0x2a>
	__asm volatile
 800ebb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	613b      	str	r3, [r7, #16]
}
 800ebc6:	bf00      	nop
 800ebc8:	e7fe      	b.n	800ebc8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	68ba      	ldr	r2, [r7, #8]
 800ebce:	fb02 f303 	mul.w	r3, r2, r3
 800ebd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	3350      	adds	r3, #80	; 0x50
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f002 f96d 	bl	8010eb8 <pvPortMalloc>
 800ebde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d011      	beq.n	800ec0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	3350      	adds	r3, #80	; 0x50
 800ebee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ebf8:	79fa      	ldrb	r2, [r7, #7]
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	697a      	ldr	r2, [r7, #20]
 800ec02:	68b9      	ldr	r1, [r7, #8]
 800ec04:	68f8      	ldr	r0, [r7, #12]
 800ec06:	f000 f805 	bl	800ec14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec0a:	69bb      	ldr	r3, [r7, #24]
	}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3720      	adds	r7, #32
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
 800ec20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d103      	bne.n	800ec30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	69ba      	ldr	r2, [r7, #24]
 800ec2c:	601a      	str	r2, [r3, #0]
 800ec2e:	e002      	b.n	800ec36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	68fa      	ldr	r2, [r7, #12]
 800ec3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	68ba      	ldr	r2, [r7, #8]
 800ec40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ec42:	2101      	movs	r1, #1
 800ec44:	69b8      	ldr	r0, [r7, #24]
 800ec46:	f7ff fecb 	bl	800e9e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	78fa      	ldrb	r2, [r7, #3]
 800ec4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ec52:	bf00      	nop
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
	...

0800ec5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b08e      	sub	sp, #56	; 0x38
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	607a      	str	r2, [r7, #4]
 800ec68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d10a      	bne.n	800ec8e <xQueueGenericSend+0x32>
	__asm volatile
 800ec78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7c:	f383 8811 	msr	BASEPRI, r3
 800ec80:	f3bf 8f6f 	isb	sy
 800ec84:	f3bf 8f4f 	dsb	sy
 800ec88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ec8a:	bf00      	nop
 800ec8c:	e7fe      	b.n	800ec8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d103      	bne.n	800ec9c <xQueueGenericSend+0x40>
 800ec94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d101      	bne.n	800eca0 <xQueueGenericSend+0x44>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	e000      	b.n	800eca2 <xQueueGenericSend+0x46>
 800eca0:	2300      	movs	r3, #0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d10a      	bne.n	800ecbc <xQueueGenericSend+0x60>
	__asm volatile
 800eca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecaa:	f383 8811 	msr	BASEPRI, r3
 800ecae:	f3bf 8f6f 	isb	sy
 800ecb2:	f3bf 8f4f 	dsb	sy
 800ecb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ecb8:	bf00      	nop
 800ecba:	e7fe      	b.n	800ecba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	d103      	bne.n	800ecca <xQueueGenericSend+0x6e>
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d101      	bne.n	800ecce <xQueueGenericSend+0x72>
 800ecca:	2301      	movs	r3, #1
 800eccc:	e000      	b.n	800ecd0 <xQueueGenericSend+0x74>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10a      	bne.n	800ecea <xQueueGenericSend+0x8e>
	__asm volatile
 800ecd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	623b      	str	r3, [r7, #32]
}
 800ece6:	bf00      	nop
 800ece8:	e7fe      	b.n	800ece8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ecea:	f001 fa65 	bl	80101b8 <xTaskGetSchedulerState>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d102      	bne.n	800ecfa <xQueueGenericSend+0x9e>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d101      	bne.n	800ecfe <xQueueGenericSend+0xa2>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e000      	b.n	800ed00 <xQueueGenericSend+0xa4>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d10a      	bne.n	800ed1a <xQueueGenericSend+0xbe>
	__asm volatile
 800ed04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed08:	f383 8811 	msr	BASEPRI, r3
 800ed0c:	f3bf 8f6f 	isb	sy
 800ed10:	f3bf 8f4f 	dsb	sy
 800ed14:	61fb      	str	r3, [r7, #28]
}
 800ed16:	bf00      	nop
 800ed18:	e7fe      	b.n	800ed18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ed1a:	f001 ffab 	bl	8010c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d302      	bcc.n	800ed30 <xQueueGenericSend+0xd4>
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	2b02      	cmp	r3, #2
 800ed2e:	d129      	bne.n	800ed84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed30:	683a      	ldr	r2, [r7, #0]
 800ed32:	68b9      	ldr	r1, [r7, #8]
 800ed34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed36:	f000 fa8b 	bl	800f250 <prvCopyDataToQueue>
 800ed3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d010      	beq.n	800ed66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed46:	3324      	adds	r3, #36	; 0x24
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f001 f875 	bl	800fe38 <xTaskRemoveFromEventList>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d013      	beq.n	800ed7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ed54:	4b3f      	ldr	r3, [pc, #252]	; (800ee54 <xQueueGenericSend+0x1f8>)
 800ed56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed5a:	601a      	str	r2, [r3, #0]
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	f3bf 8f6f 	isb	sy
 800ed64:	e00a      	b.n	800ed7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ed66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d007      	beq.n	800ed7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ed6c:	4b39      	ldr	r3, [pc, #228]	; (800ee54 <xQueueGenericSend+0x1f8>)
 800ed6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed72:	601a      	str	r2, [r3, #0]
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ed7c:	f001 ffaa 	bl	8010cd4 <vPortExitCritical>
				return pdPASS;
 800ed80:	2301      	movs	r3, #1
 800ed82:	e063      	b.n	800ee4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d103      	bne.n	800ed92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ed8a:	f001 ffa3 	bl	8010cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	e05c      	b.n	800ee4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d106      	bne.n	800eda6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed98:	f107 0314 	add.w	r3, r7, #20
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f001 f8af 	bl	800ff00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eda2:	2301      	movs	r3, #1
 800eda4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eda6:	f001 ff95 	bl	8010cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800edaa:	f000 fdfd 	bl	800f9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800edae:	f001 ff61 	bl	8010c74 <vPortEnterCritical>
 800edb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800edb8:	b25b      	sxtb	r3, r3
 800edba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edbe:	d103      	bne.n	800edc8 <xQueueGenericSend+0x16c>
 800edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc2:	2200      	movs	r2, #0
 800edc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edce:	b25b      	sxtb	r3, r3
 800edd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd4:	d103      	bne.n	800edde <xQueueGenericSend+0x182>
 800edd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd8:	2200      	movs	r2, #0
 800edda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edde:	f001 ff79 	bl	8010cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ede2:	1d3a      	adds	r2, r7, #4
 800ede4:	f107 0314 	add.w	r3, r7, #20
 800ede8:	4611      	mov	r1, r2
 800edea:	4618      	mov	r0, r3
 800edec:	f001 f89e 	bl	800ff2c <xTaskCheckForTimeOut>
 800edf0:	4603      	mov	r3, r0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d124      	bne.n	800ee40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800edf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edf8:	f000 fb22 	bl	800f440 <prvIsQueueFull>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d018      	beq.n	800ee34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ee02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee04:	3310      	adds	r3, #16
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	4611      	mov	r1, r2
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f000 ffc4 	bl	800fd98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ee10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee12:	f000 faad 	bl	800f370 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ee16:	f000 fdd5 	bl	800f9c4 <xTaskResumeAll>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	f47f af7c 	bne.w	800ed1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ee22:	4b0c      	ldr	r3, [pc, #48]	; (800ee54 <xQueueGenericSend+0x1f8>)
 800ee24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee28:	601a      	str	r2, [r3, #0]
 800ee2a:	f3bf 8f4f 	dsb	sy
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	e772      	b.n	800ed1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ee34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee36:	f000 fa9b 	bl	800f370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee3a:	f000 fdc3 	bl	800f9c4 <xTaskResumeAll>
 800ee3e:	e76c      	b.n	800ed1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ee40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee42:	f000 fa95 	bl	800f370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee46:	f000 fdbd 	bl	800f9c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ee4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3738      	adds	r7, #56	; 0x38
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	e000ed04 	.word	0xe000ed04

0800ee58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b090      	sub	sp, #64	; 0x40
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
 800ee64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ee6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d10a      	bne.n	800ee86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ee70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee74:	f383 8811 	msr	BASEPRI, r3
 800ee78:	f3bf 8f6f 	isb	sy
 800ee7c:	f3bf 8f4f 	dsb	sy
 800ee80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee82:	bf00      	nop
 800ee84:	e7fe      	b.n	800ee84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d103      	bne.n	800ee94 <xQueueGenericSendFromISR+0x3c>
 800ee8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d101      	bne.n	800ee98 <xQueueGenericSendFromISR+0x40>
 800ee94:	2301      	movs	r3, #1
 800ee96:	e000      	b.n	800ee9a <xQueueGenericSendFromISR+0x42>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d10a      	bne.n	800eeb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ee9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea2:	f383 8811 	msr	BASEPRI, r3
 800eea6:	f3bf 8f6f 	isb	sy
 800eeaa:	f3bf 8f4f 	dsb	sy
 800eeae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eeb0:	bf00      	nop
 800eeb2:	e7fe      	b.n	800eeb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	d103      	bne.n	800eec2 <xQueueGenericSendFromISR+0x6a>
 800eeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	d101      	bne.n	800eec6 <xQueueGenericSendFromISR+0x6e>
 800eec2:	2301      	movs	r3, #1
 800eec4:	e000      	b.n	800eec8 <xQueueGenericSendFromISR+0x70>
 800eec6:	2300      	movs	r3, #0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10a      	bne.n	800eee2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800eecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed0:	f383 8811 	msr	BASEPRI, r3
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	623b      	str	r3, [r7, #32]
}
 800eede:	bf00      	nop
 800eee0:	e7fe      	b.n	800eee0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eee2:	f001 ffa9 	bl	8010e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800eee6:	f3ef 8211 	mrs	r2, BASEPRI
 800eeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeee:	f383 8811 	msr	BASEPRI, r3
 800eef2:	f3bf 8f6f 	isb	sy
 800eef6:	f3bf 8f4f 	dsb	sy
 800eefa:	61fa      	str	r2, [r7, #28]
 800eefc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eefe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d302      	bcc.n	800ef14 <xQueueGenericSendFromISR+0xbc>
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	d12f      	bne.n	800ef74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ef14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef24:	683a      	ldr	r2, [r7, #0]
 800ef26:	68b9      	ldr	r1, [r7, #8]
 800ef28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef2a:	f000 f991 	bl	800f250 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ef2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ef32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef36:	d112      	bne.n	800ef5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d016      	beq.n	800ef6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef42:	3324      	adds	r3, #36	; 0x24
 800ef44:	4618      	mov	r0, r3
 800ef46:	f000 ff77 	bl	800fe38 <xTaskRemoveFromEventList>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d00e      	beq.n	800ef6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00b      	beq.n	800ef6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	601a      	str	r2, [r3, #0]
 800ef5c:	e007      	b.n	800ef6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ef5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef62:	3301      	adds	r3, #1
 800ef64:	b2db      	uxtb	r3, r3
 800ef66:	b25a      	sxtb	r2, r3
 800ef68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ef72:	e001      	b.n	800ef78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ef74:	2300      	movs	r3, #0
 800ef76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ef82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3740      	adds	r7, #64	; 0x40
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
	...

0800ef90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b08c      	sub	sp, #48	; 0x30
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800efa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10a      	bne.n	800efc0 <xQueueReceive+0x30>
	__asm volatile
 800efaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efae:	f383 8811 	msr	BASEPRI, r3
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	623b      	str	r3, [r7, #32]
}
 800efbc:	bf00      	nop
 800efbe:	e7fe      	b.n	800efbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d103      	bne.n	800efce <xQueueReceive+0x3e>
 800efc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d101      	bne.n	800efd2 <xQueueReceive+0x42>
 800efce:	2301      	movs	r3, #1
 800efd0:	e000      	b.n	800efd4 <xQueueReceive+0x44>
 800efd2:	2300      	movs	r3, #0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d10a      	bne.n	800efee <xQueueReceive+0x5e>
	__asm volatile
 800efd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efdc:	f383 8811 	msr	BASEPRI, r3
 800efe0:	f3bf 8f6f 	isb	sy
 800efe4:	f3bf 8f4f 	dsb	sy
 800efe8:	61fb      	str	r3, [r7, #28]
}
 800efea:	bf00      	nop
 800efec:	e7fe      	b.n	800efec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800efee:	f001 f8e3 	bl	80101b8 <xTaskGetSchedulerState>
 800eff2:	4603      	mov	r3, r0
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d102      	bne.n	800effe <xQueueReceive+0x6e>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d101      	bne.n	800f002 <xQueueReceive+0x72>
 800effe:	2301      	movs	r3, #1
 800f000:	e000      	b.n	800f004 <xQueueReceive+0x74>
 800f002:	2300      	movs	r3, #0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10a      	bne.n	800f01e <xQueueReceive+0x8e>
	__asm volatile
 800f008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00c:	f383 8811 	msr	BASEPRI, r3
 800f010:	f3bf 8f6f 	isb	sy
 800f014:	f3bf 8f4f 	dsb	sy
 800f018:	61bb      	str	r3, [r7, #24]
}
 800f01a:	bf00      	nop
 800f01c:	e7fe      	b.n	800f01c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f01e:	f001 fe29 	bl	8010c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f026:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d01f      	beq.n	800f06e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f02e:	68b9      	ldr	r1, [r7, #8]
 800f030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f032:	f000 f977 	bl	800f324 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f038:	1e5a      	subs	r2, r3, #1
 800f03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f040:	691b      	ldr	r3, [r3, #16]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00f      	beq.n	800f066 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f048:	3310      	adds	r3, #16
 800f04a:	4618      	mov	r0, r3
 800f04c:	f000 fef4 	bl	800fe38 <xTaskRemoveFromEventList>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d007      	beq.n	800f066 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f056:	4b3d      	ldr	r3, [pc, #244]	; (800f14c <xQueueReceive+0x1bc>)
 800f058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f05c:	601a      	str	r2, [r3, #0]
 800f05e:	f3bf 8f4f 	dsb	sy
 800f062:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f066:	f001 fe35 	bl	8010cd4 <vPortExitCritical>
				return pdPASS;
 800f06a:	2301      	movs	r3, #1
 800f06c:	e069      	b.n	800f142 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d103      	bne.n	800f07c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f074:	f001 fe2e 	bl	8010cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f078:	2300      	movs	r3, #0
 800f07a:	e062      	b.n	800f142 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d106      	bne.n	800f090 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f082:	f107 0310 	add.w	r3, r7, #16
 800f086:	4618      	mov	r0, r3
 800f088:	f000 ff3a 	bl	800ff00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f08c:	2301      	movs	r3, #1
 800f08e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f090:	f001 fe20 	bl	8010cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f094:	f000 fc88 	bl	800f9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f098:	f001 fdec 	bl	8010c74 <vPortEnterCritical>
 800f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0a2:	b25b      	sxtb	r3, r3
 800f0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a8:	d103      	bne.n	800f0b2 <xQueueReceive+0x122>
 800f0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0b8:	b25b      	sxtb	r3, r3
 800f0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0be:	d103      	bne.n	800f0c8 <xQueueReceive+0x138>
 800f0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0c8:	f001 fe04 	bl	8010cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0cc:	1d3a      	adds	r2, r7, #4
 800f0ce:	f107 0310 	add.w	r3, r7, #16
 800f0d2:	4611      	mov	r1, r2
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f000 ff29 	bl	800ff2c <xTaskCheckForTimeOut>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d123      	bne.n	800f128 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0e2:	f000 f997 	bl	800f414 <prvIsQueueEmpty>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d017      	beq.n	800f11c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ee:	3324      	adds	r3, #36	; 0x24
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	4611      	mov	r1, r2
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f000 fe4f 	bl	800fd98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f0fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0fc:	f000 f938 	bl	800f370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f100:	f000 fc60 	bl	800f9c4 <xTaskResumeAll>
 800f104:	4603      	mov	r3, r0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d189      	bne.n	800f01e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f10a:	4b10      	ldr	r3, [pc, #64]	; (800f14c <xQueueReceive+0x1bc>)
 800f10c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f110:	601a      	str	r2, [r3, #0]
 800f112:	f3bf 8f4f 	dsb	sy
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	e780      	b.n	800f01e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f11c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f11e:	f000 f927 	bl	800f370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f122:	f000 fc4f 	bl	800f9c4 <xTaskResumeAll>
 800f126:	e77a      	b.n	800f01e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f12a:	f000 f921 	bl	800f370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f12e:	f000 fc49 	bl	800f9c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f134:	f000 f96e 	bl	800f414 <prvIsQueueEmpty>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f43f af6f 	beq.w	800f01e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f140:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f142:	4618      	mov	r0, r3
 800f144:	3730      	adds	r7, #48	; 0x30
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	e000ed04 	.word	0xe000ed04

0800f150 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b08e      	sub	sp, #56	; 0x38
 800f154:	af00      	add	r7, sp, #0
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	60b9      	str	r1, [r7, #8]
 800f15a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f162:	2b00      	cmp	r3, #0
 800f164:	d10a      	bne.n	800f17c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16a:	f383 8811 	msr	BASEPRI, r3
 800f16e:	f3bf 8f6f 	isb	sy
 800f172:	f3bf 8f4f 	dsb	sy
 800f176:	623b      	str	r3, [r7, #32]
}
 800f178:	bf00      	nop
 800f17a:	e7fe      	b.n	800f17a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d103      	bne.n	800f18a <xQueueReceiveFromISR+0x3a>
 800f182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f186:	2b00      	cmp	r3, #0
 800f188:	d101      	bne.n	800f18e <xQueueReceiveFromISR+0x3e>
 800f18a:	2301      	movs	r3, #1
 800f18c:	e000      	b.n	800f190 <xQueueReceiveFromISR+0x40>
 800f18e:	2300      	movs	r3, #0
 800f190:	2b00      	cmp	r3, #0
 800f192:	d10a      	bne.n	800f1aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f198:	f383 8811 	msr	BASEPRI, r3
 800f19c:	f3bf 8f6f 	isb	sy
 800f1a0:	f3bf 8f4f 	dsb	sy
 800f1a4:	61fb      	str	r3, [r7, #28]
}
 800f1a6:	bf00      	nop
 800f1a8:	e7fe      	b.n	800f1a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f1aa:	f001 fe45 	bl	8010e38 <vPortValidateInterruptPriority>
	__asm volatile
 800f1ae:	f3ef 8211 	mrs	r2, BASEPRI
 800f1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b6:	f383 8811 	msr	BASEPRI, r3
 800f1ba:	f3bf 8f6f 	isb	sy
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	61ba      	str	r2, [r7, #24]
 800f1c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f1c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d02f      	beq.n	800f236 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1e0:	68b9      	ldr	r1, [r7, #8]
 800f1e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1e4:	f000 f89e 	bl	800f324 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ea:	1e5a      	subs	r2, r3, #1
 800f1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f1f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f8:	d112      	bne.n	800f220 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fc:	691b      	ldr	r3, [r3, #16]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d016      	beq.n	800f230 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f204:	3310      	adds	r3, #16
 800f206:	4618      	mov	r0, r3
 800f208:	f000 fe16 	bl	800fe38 <xTaskRemoveFromEventList>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00e      	beq.n	800f230 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d00b      	beq.n	800f230 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2201      	movs	r2, #1
 800f21c:	601a      	str	r2, [r3, #0]
 800f21e:	e007      	b.n	800f230 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f224:	3301      	adds	r3, #1
 800f226:	b2db      	uxtb	r3, r3
 800f228:	b25a      	sxtb	r2, r3
 800f22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f230:	2301      	movs	r3, #1
 800f232:	637b      	str	r3, [r7, #52]	; 0x34
 800f234:	e001      	b.n	800f23a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f236:	2300      	movs	r3, #0
 800f238:	637b      	str	r3, [r7, #52]	; 0x34
 800f23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	f383 8811 	msr	BASEPRI, r3
}
 800f244:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3738      	adds	r7, #56	; 0x38
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b086      	sub	sp, #24
 800f254:	af00      	add	r7, sp, #0
 800f256:	60f8      	str	r0, [r7, #12]
 800f258:	60b9      	str	r1, [r7, #8]
 800f25a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f25c:	2300      	movs	r3, #0
 800f25e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f264:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d10d      	bne.n	800f28a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d14d      	bne.n	800f312 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f000 ffba 	bl	80101f4 <xTaskPriorityDisinherit>
 800f280:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2200      	movs	r2, #0
 800f286:	609a      	str	r2, [r3, #8]
 800f288:	e043      	b.n	800f312 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d119      	bne.n	800f2c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6858      	ldr	r0, [r3, #4]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f298:	461a      	mov	r2, r3
 800f29a:	68b9      	ldr	r1, [r7, #8]
 800f29c:	f002 fc04 	bl	8011aa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	685a      	ldr	r2, [r3, #4]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2a8:	441a      	add	r2, r3
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	685a      	ldr	r2, [r3, #4]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	689b      	ldr	r3, [r3, #8]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d32b      	bcc.n	800f312 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	605a      	str	r2, [r3, #4]
 800f2c2:	e026      	b.n	800f312 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	68d8      	ldr	r0, [r3, #12]
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	68b9      	ldr	r1, [r7, #8]
 800f2d0:	f002 fbea 	bl	8011aa8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	68da      	ldr	r2, [r3, #12]
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2dc:	425b      	negs	r3, r3
 800f2de:	441a      	add	r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	68da      	ldr	r2, [r3, #12]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d207      	bcs.n	800f300 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	689a      	ldr	r2, [r3, #8]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f8:	425b      	negs	r3, r3
 800f2fa:	441a      	add	r2, r3
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2b02      	cmp	r3, #2
 800f304:	d105      	bne.n	800f312 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d002      	beq.n	800f312 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	3b01      	subs	r3, #1
 800f310:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	1c5a      	adds	r2, r3, #1
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f31a:	697b      	ldr	r3, [r7, #20]
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3718      	adds	r7, #24
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f332:	2b00      	cmp	r3, #0
 800f334:	d018      	beq.n	800f368 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	68da      	ldr	r2, [r3, #12]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f33e:	441a      	add	r2, r3
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	68da      	ldr	r2, [r3, #12]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d303      	bcc.n	800f358 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	68d9      	ldr	r1, [r3, #12]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f360:	461a      	mov	r2, r3
 800f362:	6838      	ldr	r0, [r7, #0]
 800f364:	f002 fba0 	bl	8011aa8 <memcpy>
	}
}
 800f368:	bf00      	nop
 800f36a:	3708      	adds	r7, #8
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f378:	f001 fc7c 	bl	8010c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f382:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f384:	e011      	b.n	800f3aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d012      	beq.n	800f3b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	3324      	adds	r3, #36	; 0x24
 800f392:	4618      	mov	r0, r3
 800f394:	f000 fd50 	bl	800fe38 <xTaskRemoveFromEventList>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d001      	beq.n	800f3a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f39e:	f000 fe27 	bl	800fff0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f3a2:	7bfb      	ldrb	r3, [r7, #15]
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	dce9      	bgt.n	800f386 <prvUnlockQueue+0x16>
 800f3b2:	e000      	b.n	800f3b6 <prvUnlockQueue+0x46>
					break;
 800f3b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	22ff      	movs	r2, #255	; 0xff
 800f3ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f3be:	f001 fc89 	bl	8010cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f3c2:	f001 fc57 	bl	8010c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f3ce:	e011      	b.n	800f3f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	691b      	ldr	r3, [r3, #16]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d012      	beq.n	800f3fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	3310      	adds	r3, #16
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f000 fd2b 	bl	800fe38 <xTaskRemoveFromEventList>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d001      	beq.n	800f3ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f3e8:	f000 fe02 	bl	800fff0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f3ec:	7bbb      	ldrb	r3, [r7, #14]
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f3f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	dce9      	bgt.n	800f3d0 <prvUnlockQueue+0x60>
 800f3fc:	e000      	b.n	800f400 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f3fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	22ff      	movs	r2, #255	; 0xff
 800f404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f408:	f001 fc64 	bl	8010cd4 <vPortExitCritical>
}
 800f40c:	bf00      	nop
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f41c:	f001 fc2a 	bl	8010c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f424:	2b00      	cmp	r3, #0
 800f426:	d102      	bne.n	800f42e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f428:	2301      	movs	r3, #1
 800f42a:	60fb      	str	r3, [r7, #12]
 800f42c:	e001      	b.n	800f432 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f42e:	2300      	movs	r3, #0
 800f430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f432:	f001 fc4f 	bl	8010cd4 <vPortExitCritical>

	return xReturn;
 800f436:	68fb      	ldr	r3, [r7, #12]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f448:	f001 fc14 	bl	8010c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f454:	429a      	cmp	r2, r3
 800f456:	d102      	bne.n	800f45e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f458:	2301      	movs	r3, #1
 800f45a:	60fb      	str	r3, [r7, #12]
 800f45c:	e001      	b.n	800f462 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f45e:	2300      	movs	r3, #0
 800f460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f462:	f001 fc37 	bl	8010cd4 <vPortExitCritical>

	return xReturn;
 800f466:	68fb      	ldr	r3, [r7, #12]
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3710      	adds	r7, #16
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f47a:	2300      	movs	r3, #0
 800f47c:	60fb      	str	r3, [r7, #12]
 800f47e:	e014      	b.n	800f4aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f480:	4a0f      	ldr	r2, [pc, #60]	; (800f4c0 <vQueueAddToRegistry+0x50>)
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d10b      	bne.n	800f4a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f48c:	490c      	ldr	r1, [pc, #48]	; (800f4c0 <vQueueAddToRegistry+0x50>)
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	683a      	ldr	r2, [r7, #0]
 800f492:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f496:	4a0a      	ldr	r2, [pc, #40]	; (800f4c0 <vQueueAddToRegistry+0x50>)
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	00db      	lsls	r3, r3, #3
 800f49c:	4413      	add	r3, r2
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f4a2:	e006      	b.n	800f4b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	60fb      	str	r3, [r7, #12]
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2b07      	cmp	r3, #7
 800f4ae:	d9e7      	bls.n	800f480 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f4b0:	bf00      	nop
 800f4b2:	bf00      	nop
 800f4b4:	3714      	adds	r7, #20
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4bc:	4770      	bx	lr
 800f4be:	bf00      	nop
 800f4c0:	20000d30 	.word	0x20000d30

0800f4c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b086      	sub	sp, #24
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f4d4:	f001 fbce 	bl	8010c74 <vPortEnterCritical>
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4de:	b25b      	sxtb	r3, r3
 800f4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e4:	d103      	bne.n	800f4ee <vQueueWaitForMessageRestricted+0x2a>
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4f4:	b25b      	sxtb	r3, r3
 800f4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4fa:	d103      	bne.n	800f504 <vQueueWaitForMessageRestricted+0x40>
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	2200      	movs	r2, #0
 800f500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f504:	f001 fbe6 	bl	8010cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d106      	bne.n	800f51e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	3324      	adds	r3, #36	; 0x24
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	68b9      	ldr	r1, [r7, #8]
 800f518:	4618      	mov	r0, r3
 800f51a:	f000 fc61 	bl	800fde0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f51e:	6978      	ldr	r0, [r7, #20]
 800f520:	f7ff ff26 	bl	800f370 <prvUnlockQueue>
	}
 800f524:	bf00      	nop
 800f526:	3718      	adds	r7, #24
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b08e      	sub	sp, #56	; 0x38
 800f530:	af04      	add	r7, sp, #16
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
 800f538:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d10a      	bne.n	800f556 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f544:	f383 8811 	msr	BASEPRI, r3
 800f548:	f3bf 8f6f 	isb	sy
 800f54c:	f3bf 8f4f 	dsb	sy
 800f550:	623b      	str	r3, [r7, #32]
}
 800f552:	bf00      	nop
 800f554:	e7fe      	b.n	800f554 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d10a      	bne.n	800f572 <xTaskCreateStatic+0x46>
	__asm volatile
 800f55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f560:	f383 8811 	msr	BASEPRI, r3
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	61fb      	str	r3, [r7, #28]
}
 800f56e:	bf00      	nop
 800f570:	e7fe      	b.n	800f570 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f572:	2360      	movs	r3, #96	; 0x60
 800f574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	2b60      	cmp	r3, #96	; 0x60
 800f57a:	d00a      	beq.n	800f592 <xTaskCreateStatic+0x66>
	__asm volatile
 800f57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f580:	f383 8811 	msr	BASEPRI, r3
 800f584:	f3bf 8f6f 	isb	sy
 800f588:	f3bf 8f4f 	dsb	sy
 800f58c:	61bb      	str	r3, [r7, #24]
}
 800f58e:	bf00      	nop
 800f590:	e7fe      	b.n	800f590 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f592:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f596:	2b00      	cmp	r3, #0
 800f598:	d01e      	beq.n	800f5d8 <xTaskCreateStatic+0xac>
 800f59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d01b      	beq.n	800f5d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ac:	2202      	movs	r2, #2
 800f5ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	9303      	str	r3, [sp, #12]
 800f5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b8:	9302      	str	r3, [sp, #8]
 800f5ba:	f107 0314 	add.w	r3, r7, #20
 800f5be:	9301      	str	r3, [sp, #4]
 800f5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	687a      	ldr	r2, [r7, #4]
 800f5c8:	68b9      	ldr	r1, [r7, #8]
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f000 f850 	bl	800f670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5d2:	f000 f8df 	bl	800f794 <prvAddNewTaskToReadyList>
 800f5d6:	e001      	b.n	800f5dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f5dc:	697b      	ldr	r3, [r7, #20]
	}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3728      	adds	r7, #40	; 0x28
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b08c      	sub	sp, #48	; 0x30
 800f5ea:	af04      	add	r7, sp, #16
 800f5ec:	60f8      	str	r0, [r7, #12]
 800f5ee:	60b9      	str	r1, [r7, #8]
 800f5f0:	603b      	str	r3, [r7, #0]
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f5f6:	88fb      	ldrh	r3, [r7, #6]
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f001 fc5c 	bl	8010eb8 <pvPortMalloc>
 800f600:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d00e      	beq.n	800f626 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f608:	2060      	movs	r0, #96	; 0x60
 800f60a:	f001 fc55 	bl	8010eb8 <pvPortMalloc>
 800f60e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d003      	beq.n	800f61e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	697a      	ldr	r2, [r7, #20]
 800f61a:	631a      	str	r2, [r3, #48]	; 0x30
 800f61c:	e005      	b.n	800f62a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f61e:	6978      	ldr	r0, [r7, #20]
 800f620:	f001 fd1a 	bl	8011058 <vPortFree>
 800f624:	e001      	b.n	800f62a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f626:	2300      	movs	r3, #0
 800f628:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d017      	beq.n	800f660 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	2200      	movs	r2, #0
 800f634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f638:	88fa      	ldrh	r2, [r7, #6]
 800f63a:	2300      	movs	r3, #0
 800f63c:	9303      	str	r3, [sp, #12]
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	9302      	str	r3, [sp, #8]
 800f642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f644:	9301      	str	r3, [sp, #4]
 800f646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f648:	9300      	str	r3, [sp, #0]
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	68b9      	ldr	r1, [r7, #8]
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f000 f80e 	bl	800f670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f654:	69f8      	ldr	r0, [r7, #28]
 800f656:	f000 f89d 	bl	800f794 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f65a:	2301      	movs	r3, #1
 800f65c:	61bb      	str	r3, [r7, #24]
 800f65e:	e002      	b.n	800f666 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f660:	f04f 33ff 	mov.w	r3, #4294967295
 800f664:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f666:	69bb      	ldr	r3, [r7, #24]
	}
 800f668:	4618      	mov	r0, r3
 800f66a:	3720      	adds	r7, #32
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b088      	sub	sp, #32
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	607a      	str	r2, [r7, #4]
 800f67c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	461a      	mov	r2, r3
 800f688:	21a5      	movs	r1, #165	; 0xa5
 800f68a:	f002 f9c9 	bl	8011a20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f698:	3b01      	subs	r3, #1
 800f69a:	009b      	lsls	r3, r3, #2
 800f69c:	4413      	add	r3, r2
 800f69e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f6a0:	69bb      	ldr	r3, [r7, #24]
 800f6a2:	f023 0307 	bic.w	r3, r3, #7
 800f6a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	f003 0307 	and.w	r3, r3, #7
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d00a      	beq.n	800f6c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b6:	f383 8811 	msr	BASEPRI, r3
 800f6ba:	f3bf 8f6f 	isb	sy
 800f6be:	f3bf 8f4f 	dsb	sy
 800f6c2:	617b      	str	r3, [r7, #20]
}
 800f6c4:	bf00      	nop
 800f6c6:	e7fe      	b.n	800f6c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d01f      	beq.n	800f70e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	61fb      	str	r3, [r7, #28]
 800f6d2:	e012      	b.n	800f6fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f6d4:	68ba      	ldr	r2, [r7, #8]
 800f6d6:	69fb      	ldr	r3, [r7, #28]
 800f6d8:	4413      	add	r3, r2
 800f6da:	7819      	ldrb	r1, [r3, #0]
 800f6dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	3334      	adds	r3, #52	; 0x34
 800f6e4:	460a      	mov	r2, r1
 800f6e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f6e8:	68ba      	ldr	r2, [r7, #8]
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d006      	beq.n	800f702 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	61fb      	str	r3, [r7, #28]
 800f6fa:	69fb      	ldr	r3, [r7, #28]
 800f6fc:	2b0f      	cmp	r3, #15
 800f6fe:	d9e9      	bls.n	800f6d4 <prvInitialiseNewTask+0x64>
 800f700:	e000      	b.n	800f704 <prvInitialiseNewTask+0x94>
			{
				break;
 800f702:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f706:	2200      	movs	r2, #0
 800f708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f70c:	e003      	b.n	800f716 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f710:	2200      	movs	r2, #0
 800f712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f718:	2b37      	cmp	r3, #55	; 0x37
 800f71a:	d901      	bls.n	800f720 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f71c:	2337      	movs	r3, #55	; 0x37
 800f71e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f724:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f72a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72e:	2200      	movs	r2, #0
 800f730:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f734:	3304      	adds	r3, #4
 800f736:	4618      	mov	r0, r3
 800f738:	f7ff f8be 	bl	800e8b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73e:	3318      	adds	r3, #24
 800f740:	4618      	mov	r0, r3
 800f742:	f7ff f8b9 	bl	800e8b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f74a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f74e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f75a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75e:	2200      	movs	r2, #0
 800f760:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f764:	2200      	movs	r2, #0
 800f766:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76a:	2200      	movs	r2, #0
 800f76c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f770:	683a      	ldr	r2, [r7, #0]
 800f772:	68f9      	ldr	r1, [r7, #12]
 800f774:	69b8      	ldr	r0, [r7, #24]
 800f776:	f001 f94d 	bl	8010a14 <pxPortInitialiseStack>
 800f77a:	4602      	mov	r2, r0
 800f77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f782:	2b00      	cmp	r3, #0
 800f784:	d002      	beq.n	800f78c <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f78a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f78c:	bf00      	nop
 800f78e:	3720      	adds	r7, #32
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f79c:	f001 fa6a 	bl	8010c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f7a0:	4b2d      	ldr	r3, [pc, #180]	; (800f858 <prvAddNewTaskToReadyList+0xc4>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	4a2c      	ldr	r2, [pc, #176]	; (800f858 <prvAddNewTaskToReadyList+0xc4>)
 800f7a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f7aa:	4b2c      	ldr	r3, [pc, #176]	; (800f85c <prvAddNewTaskToReadyList+0xc8>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d109      	bne.n	800f7c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f7b2:	4a2a      	ldr	r2, [pc, #168]	; (800f85c <prvAddNewTaskToReadyList+0xc8>)
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f7b8:	4b27      	ldr	r3, [pc, #156]	; (800f858 <prvAddNewTaskToReadyList+0xc4>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d110      	bne.n	800f7e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f7c0:	f000 fc3c 	bl	801003c <prvInitialiseTaskLists>
 800f7c4:	e00d      	b.n	800f7e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f7c6:	4b26      	ldr	r3, [pc, #152]	; (800f860 <prvAddNewTaskToReadyList+0xcc>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d109      	bne.n	800f7e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f7ce:	4b23      	ldr	r3, [pc, #140]	; (800f85c <prvAddNewTaskToReadyList+0xc8>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d802      	bhi.n	800f7e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f7dc:	4a1f      	ldr	r2, [pc, #124]	; (800f85c <prvAddNewTaskToReadyList+0xc8>)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f7e2:	4b20      	ldr	r3, [pc, #128]	; (800f864 <prvAddNewTaskToReadyList+0xd0>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	4a1e      	ldr	r2, [pc, #120]	; (800f864 <prvAddNewTaskToReadyList+0xd0>)
 800f7ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f7ec:	4b1d      	ldr	r3, [pc, #116]	; (800f864 <prvAddNewTaskToReadyList+0xd0>)
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7f8:	4b1b      	ldr	r3, [pc, #108]	; (800f868 <prvAddNewTaskToReadyList+0xd4>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d903      	bls.n	800f808 <prvAddNewTaskToReadyList+0x74>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f804:	4a18      	ldr	r2, [pc, #96]	; (800f868 <prvAddNewTaskToReadyList+0xd4>)
 800f806:	6013      	str	r3, [r2, #0]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f80c:	4613      	mov	r3, r2
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	4413      	add	r3, r2
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	4a15      	ldr	r2, [pc, #84]	; (800f86c <prvAddNewTaskToReadyList+0xd8>)
 800f816:	441a      	add	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	3304      	adds	r3, #4
 800f81c:	4619      	mov	r1, r3
 800f81e:	4610      	mov	r0, r2
 800f820:	f7ff f857 	bl	800e8d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f824:	f001 fa56 	bl	8010cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f828:	4b0d      	ldr	r3, [pc, #52]	; (800f860 <prvAddNewTaskToReadyList+0xcc>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d00e      	beq.n	800f84e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f830:	4b0a      	ldr	r3, [pc, #40]	; (800f85c <prvAddNewTaskToReadyList+0xc8>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d207      	bcs.n	800f84e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f83e:	4b0c      	ldr	r3, [pc, #48]	; (800f870 <prvAddNewTaskToReadyList+0xdc>)
 800f840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f844:	601a      	str	r2, [r3, #0]
 800f846:	f3bf 8f4f 	dsb	sy
 800f84a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f84e:	bf00      	nop
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	20001244 	.word	0x20001244
 800f85c:	20000d70 	.word	0x20000d70
 800f860:	20001250 	.word	0x20001250
 800f864:	20001260 	.word	0x20001260
 800f868:	2000124c 	.word	0x2000124c
 800f86c:	20000d74 	.word	0x20000d74
 800f870:	e000ed04 	.word	0xe000ed04

0800f874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f87c:	2300      	movs	r3, #0
 800f87e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d017      	beq.n	800f8b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f886:	4b13      	ldr	r3, [pc, #76]	; (800f8d4 <vTaskDelay+0x60>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d00a      	beq.n	800f8a4 <vTaskDelay+0x30>
	__asm volatile
 800f88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f892:	f383 8811 	msr	BASEPRI, r3
 800f896:	f3bf 8f6f 	isb	sy
 800f89a:	f3bf 8f4f 	dsb	sy
 800f89e:	60bb      	str	r3, [r7, #8]
}
 800f8a0:	bf00      	nop
 800f8a2:	e7fe      	b.n	800f8a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f8a4:	f000 f880 	bl	800f9a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f8a8:	2100      	movs	r1, #0
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 fd10 	bl	80102d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f8b0:	f000 f888 	bl	800f9c4 <xTaskResumeAll>
 800f8b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d107      	bne.n	800f8cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f8bc:	4b06      	ldr	r3, [pc, #24]	; (800f8d8 <vTaskDelay+0x64>)
 800f8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8c2:	601a      	str	r2, [r3, #0]
 800f8c4:	f3bf 8f4f 	dsb	sy
 800f8c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8cc:	bf00      	nop
 800f8ce:	3710      	adds	r7, #16
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	2000126c 	.word	0x2000126c
 800f8d8:	e000ed04 	.word	0xe000ed04

0800f8dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b08a      	sub	sp, #40	; 0x28
 800f8e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f8ea:	463a      	mov	r2, r7
 800f8ec:	1d39      	adds	r1, r7, #4
 800f8ee:	f107 0308 	add.w	r3, r7, #8
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fe ff8c 	bl	800e810 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f8f8:	6839      	ldr	r1, [r7, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	68ba      	ldr	r2, [r7, #8]
 800f8fe:	9202      	str	r2, [sp, #8]
 800f900:	9301      	str	r3, [sp, #4]
 800f902:	2300      	movs	r3, #0
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	2300      	movs	r3, #0
 800f908:	460a      	mov	r2, r1
 800f90a:	4921      	ldr	r1, [pc, #132]	; (800f990 <vTaskStartScheduler+0xb4>)
 800f90c:	4821      	ldr	r0, [pc, #132]	; (800f994 <vTaskStartScheduler+0xb8>)
 800f90e:	f7ff fe0d 	bl	800f52c <xTaskCreateStatic>
 800f912:	4603      	mov	r3, r0
 800f914:	4a20      	ldr	r2, [pc, #128]	; (800f998 <vTaskStartScheduler+0xbc>)
 800f916:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f918:	4b1f      	ldr	r3, [pc, #124]	; (800f998 <vTaskStartScheduler+0xbc>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d002      	beq.n	800f926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f920:	2301      	movs	r3, #1
 800f922:	617b      	str	r3, [r7, #20]
 800f924:	e001      	b.n	800f92a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f926:	2300      	movs	r3, #0
 800f928:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	d102      	bne.n	800f936 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f930:	f000 fd22 	bl	8010378 <xTimerCreateTimerTask>
 800f934:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d116      	bne.n	800f96a <vTaskStartScheduler+0x8e>
	__asm volatile
 800f93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f940:	f383 8811 	msr	BASEPRI, r3
 800f944:	f3bf 8f6f 	isb	sy
 800f948:	f3bf 8f4f 	dsb	sy
 800f94c:	613b      	str	r3, [r7, #16]
}
 800f94e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f950:	4b12      	ldr	r3, [pc, #72]	; (800f99c <vTaskStartScheduler+0xc0>)
 800f952:	f04f 32ff 	mov.w	r2, #4294967295
 800f956:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f958:	4b11      	ldr	r3, [pc, #68]	; (800f9a0 <vTaskStartScheduler+0xc4>)
 800f95a:	2201      	movs	r2, #1
 800f95c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f95e:	4b11      	ldr	r3, [pc, #68]	; (800f9a4 <vTaskStartScheduler+0xc8>)
 800f960:	2200      	movs	r2, #0
 800f962:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f964:	f001 f8e4 	bl	8010b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f968:	e00e      	b.n	800f988 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f970:	d10a      	bne.n	800f988 <vTaskStartScheduler+0xac>
	__asm volatile
 800f972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f976:	f383 8811 	msr	BASEPRI, r3
 800f97a:	f3bf 8f6f 	isb	sy
 800f97e:	f3bf 8f4f 	dsb	sy
 800f982:	60fb      	str	r3, [r7, #12]
}
 800f984:	bf00      	nop
 800f986:	e7fe      	b.n	800f986 <vTaskStartScheduler+0xaa>
}
 800f988:	bf00      	nop
 800f98a:	3718      	adds	r7, #24
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	08011ba0 	.word	0x08011ba0
 800f994:	08010009 	.word	0x08010009
 800f998:	20001268 	.word	0x20001268
 800f99c:	20001264 	.word	0x20001264
 800f9a0:	20001250 	.word	0x20001250
 800f9a4:	20001248 	.word	0x20001248

0800f9a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f9ac:	4b04      	ldr	r3, [pc, #16]	; (800f9c0 <vTaskSuspendAll+0x18>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	4a03      	ldr	r2, [pc, #12]	; (800f9c0 <vTaskSuspendAll+0x18>)
 800f9b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f9b6:	bf00      	nop
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr
 800f9c0:	2000126c 	.word	0x2000126c

0800f9c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f9d2:	4b42      	ldr	r3, [pc, #264]	; (800fadc <xTaskResumeAll+0x118>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d10a      	bne.n	800f9f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800f9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9de:	f383 8811 	msr	BASEPRI, r3
 800f9e2:	f3bf 8f6f 	isb	sy
 800f9e6:	f3bf 8f4f 	dsb	sy
 800f9ea:	603b      	str	r3, [r7, #0]
}
 800f9ec:	bf00      	nop
 800f9ee:	e7fe      	b.n	800f9ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f9f0:	f001 f940 	bl	8010c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f9f4:	4b39      	ldr	r3, [pc, #228]	; (800fadc <xTaskResumeAll+0x118>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	3b01      	subs	r3, #1
 800f9fa:	4a38      	ldr	r2, [pc, #224]	; (800fadc <xTaskResumeAll+0x118>)
 800f9fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9fe:	4b37      	ldr	r3, [pc, #220]	; (800fadc <xTaskResumeAll+0x118>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d162      	bne.n	800facc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fa06:	4b36      	ldr	r3, [pc, #216]	; (800fae0 <xTaskResumeAll+0x11c>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d05e      	beq.n	800facc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa0e:	e02f      	b.n	800fa70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa10:	4b34      	ldr	r3, [pc, #208]	; (800fae4 <xTaskResumeAll+0x120>)
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	3318      	adds	r3, #24
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fe ffb5 	bl	800e98c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	3304      	adds	r3, #4
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fe ffb0 	bl	800e98c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa30:	4b2d      	ldr	r3, [pc, #180]	; (800fae8 <xTaskResumeAll+0x124>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d903      	bls.n	800fa40 <xTaskResumeAll+0x7c>
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa3c:	4a2a      	ldr	r2, [pc, #168]	; (800fae8 <xTaskResumeAll+0x124>)
 800fa3e:	6013      	str	r3, [r2, #0]
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa44:	4613      	mov	r3, r2
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4413      	add	r3, r2
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	4a27      	ldr	r2, [pc, #156]	; (800faec <xTaskResumeAll+0x128>)
 800fa4e:	441a      	add	r2, r3
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	3304      	adds	r3, #4
 800fa54:	4619      	mov	r1, r3
 800fa56:	4610      	mov	r0, r2
 800fa58:	f7fe ff3b 	bl	800e8d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa60:	4b23      	ldr	r3, [pc, #140]	; (800faf0 <xTaskResumeAll+0x12c>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d302      	bcc.n	800fa70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fa6a:	4b22      	ldr	r3, [pc, #136]	; (800faf4 <xTaskResumeAll+0x130>)
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa70:	4b1c      	ldr	r3, [pc, #112]	; (800fae4 <xTaskResumeAll+0x120>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d1cb      	bne.n	800fa10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d001      	beq.n	800fa82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fa7e:	f000 fb7b 	bl	8010178 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fa82:	4b1d      	ldr	r3, [pc, #116]	; (800faf8 <xTaskResumeAll+0x134>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d010      	beq.n	800fab0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fa8e:	f000 f847 	bl	800fb20 <xTaskIncrementTick>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d002      	beq.n	800fa9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fa98:	4b16      	ldr	r3, [pc, #88]	; (800faf4 <xTaskResumeAll+0x130>)
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	3b01      	subs	r3, #1
 800faa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d1f1      	bne.n	800fa8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800faaa:	4b13      	ldr	r3, [pc, #76]	; (800faf8 <xTaskResumeAll+0x134>)
 800faac:	2200      	movs	r2, #0
 800faae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fab0:	4b10      	ldr	r3, [pc, #64]	; (800faf4 <xTaskResumeAll+0x130>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d009      	beq.n	800facc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fab8:	2301      	movs	r3, #1
 800faba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fabc:	4b0f      	ldr	r3, [pc, #60]	; (800fafc <xTaskResumeAll+0x138>)
 800fabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fac2:	601a      	str	r2, [r3, #0]
 800fac4:	f3bf 8f4f 	dsb	sy
 800fac8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800facc:	f001 f902 	bl	8010cd4 <vPortExitCritical>

	return xAlreadyYielded;
 800fad0:	68bb      	ldr	r3, [r7, #8]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	2000126c 	.word	0x2000126c
 800fae0:	20001244 	.word	0x20001244
 800fae4:	20001204 	.word	0x20001204
 800fae8:	2000124c 	.word	0x2000124c
 800faec:	20000d74 	.word	0x20000d74
 800faf0:	20000d70 	.word	0x20000d70
 800faf4:	20001258 	.word	0x20001258
 800faf8:	20001254 	.word	0x20001254
 800fafc:	e000ed04 	.word	0xe000ed04

0800fb00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fb06:	4b05      	ldr	r3, [pc, #20]	; (800fb1c <xTaskGetTickCount+0x1c>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fb0c:	687b      	ldr	r3, [r7, #4]
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	370c      	adds	r7, #12
 800fb12:	46bd      	mov	sp, r7
 800fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb18:	4770      	bx	lr
 800fb1a:	bf00      	nop
 800fb1c:	20001248 	.word	0x20001248

0800fb20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b086      	sub	sp, #24
 800fb24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fb26:	2300      	movs	r3, #0
 800fb28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb2a:	4b4f      	ldr	r3, [pc, #316]	; (800fc68 <xTaskIncrementTick+0x148>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	f040 808f 	bne.w	800fc52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fb34:	4b4d      	ldr	r3, [pc, #308]	; (800fc6c <xTaskIncrementTick+0x14c>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	3301      	adds	r3, #1
 800fb3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fb3c:	4a4b      	ldr	r2, [pc, #300]	; (800fc6c <xTaskIncrementTick+0x14c>)
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d120      	bne.n	800fb8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb48:	4b49      	ldr	r3, [pc, #292]	; (800fc70 <xTaskIncrementTick+0x150>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d00a      	beq.n	800fb68 <xTaskIncrementTick+0x48>
	__asm volatile
 800fb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb56:	f383 8811 	msr	BASEPRI, r3
 800fb5a:	f3bf 8f6f 	isb	sy
 800fb5e:	f3bf 8f4f 	dsb	sy
 800fb62:	603b      	str	r3, [r7, #0]
}
 800fb64:	bf00      	nop
 800fb66:	e7fe      	b.n	800fb66 <xTaskIncrementTick+0x46>
 800fb68:	4b41      	ldr	r3, [pc, #260]	; (800fc70 <xTaskIncrementTick+0x150>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	60fb      	str	r3, [r7, #12]
 800fb6e:	4b41      	ldr	r3, [pc, #260]	; (800fc74 <xTaskIncrementTick+0x154>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	4a3f      	ldr	r2, [pc, #252]	; (800fc70 <xTaskIncrementTick+0x150>)
 800fb74:	6013      	str	r3, [r2, #0]
 800fb76:	4a3f      	ldr	r2, [pc, #252]	; (800fc74 <xTaskIncrementTick+0x154>)
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	6013      	str	r3, [r2, #0]
 800fb7c:	4b3e      	ldr	r3, [pc, #248]	; (800fc78 <xTaskIncrementTick+0x158>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	3301      	adds	r3, #1
 800fb82:	4a3d      	ldr	r2, [pc, #244]	; (800fc78 <xTaskIncrementTick+0x158>)
 800fb84:	6013      	str	r3, [r2, #0]
 800fb86:	f000 faf7 	bl	8010178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fb8a:	4b3c      	ldr	r3, [pc, #240]	; (800fc7c <xTaskIncrementTick+0x15c>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	693a      	ldr	r2, [r7, #16]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d349      	bcc.n	800fc28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb94:	4b36      	ldr	r3, [pc, #216]	; (800fc70 <xTaskIncrementTick+0x150>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d104      	bne.n	800fba8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb9e:	4b37      	ldr	r3, [pc, #220]	; (800fc7c <xTaskIncrementTick+0x15c>)
 800fba0:	f04f 32ff 	mov.w	r2, #4294967295
 800fba4:	601a      	str	r2, [r3, #0]
					break;
 800fba6:	e03f      	b.n	800fc28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fba8:	4b31      	ldr	r3, [pc, #196]	; (800fc70 <xTaskIncrementTick+0x150>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fbb8:	693a      	ldr	r2, [r7, #16]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d203      	bcs.n	800fbc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fbc0:	4a2e      	ldr	r2, [pc, #184]	; (800fc7c <xTaskIncrementTick+0x15c>)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fbc6:	e02f      	b.n	800fc28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	3304      	adds	r3, #4
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fe fedd 	bl	800e98c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d004      	beq.n	800fbe4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	3318      	adds	r3, #24
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fe fed4 	bl	800e98c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbe8:	4b25      	ldr	r3, [pc, #148]	; (800fc80 <xTaskIncrementTick+0x160>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d903      	bls.n	800fbf8 <xTaskIncrementTick+0xd8>
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf4:	4a22      	ldr	r2, [pc, #136]	; (800fc80 <xTaskIncrementTick+0x160>)
 800fbf6:	6013      	str	r3, [r2, #0]
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbfc:	4613      	mov	r3, r2
 800fbfe:	009b      	lsls	r3, r3, #2
 800fc00:	4413      	add	r3, r2
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	4a1f      	ldr	r2, [pc, #124]	; (800fc84 <xTaskIncrementTick+0x164>)
 800fc06:	441a      	add	r2, r3
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	4610      	mov	r0, r2
 800fc10:	f7fe fe5f 	bl	800e8d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc18:	4b1b      	ldr	r3, [pc, #108]	; (800fc88 <xTaskIncrementTick+0x168>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d3b8      	bcc.n	800fb94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fc22:	2301      	movs	r3, #1
 800fc24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc26:	e7b5      	b.n	800fb94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc28:	4b17      	ldr	r3, [pc, #92]	; (800fc88 <xTaskIncrementTick+0x168>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc2e:	4915      	ldr	r1, [pc, #84]	; (800fc84 <xTaskIncrementTick+0x164>)
 800fc30:	4613      	mov	r3, r2
 800fc32:	009b      	lsls	r3, r3, #2
 800fc34:	4413      	add	r3, r2
 800fc36:	009b      	lsls	r3, r3, #2
 800fc38:	440b      	add	r3, r1
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d901      	bls.n	800fc44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fc40:	2301      	movs	r3, #1
 800fc42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fc44:	4b11      	ldr	r3, [pc, #68]	; (800fc8c <xTaskIncrementTick+0x16c>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d007      	beq.n	800fc5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	617b      	str	r3, [r7, #20]
 800fc50:	e004      	b.n	800fc5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fc52:	4b0f      	ldr	r3, [pc, #60]	; (800fc90 <xTaskIncrementTick+0x170>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	3301      	adds	r3, #1
 800fc58:	4a0d      	ldr	r2, [pc, #52]	; (800fc90 <xTaskIncrementTick+0x170>)
 800fc5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fc5c:	697b      	ldr	r3, [r7, #20]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3718      	adds	r7, #24
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	2000126c 	.word	0x2000126c
 800fc6c:	20001248 	.word	0x20001248
 800fc70:	200011fc 	.word	0x200011fc
 800fc74:	20001200 	.word	0x20001200
 800fc78:	2000125c 	.word	0x2000125c
 800fc7c:	20001264 	.word	0x20001264
 800fc80:	2000124c 	.word	0x2000124c
 800fc84:	20000d74 	.word	0x20000d74
 800fc88:	20000d70 	.word	0x20000d70
 800fc8c:	20001258 	.word	0x20001258
 800fc90:	20001254 	.word	0x20001254

0800fc94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fc9a:	4b3a      	ldr	r3, [pc, #232]	; (800fd84 <vTaskSwitchContext+0xf0>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d003      	beq.n	800fcaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fca2:	4b39      	ldr	r3, [pc, #228]	; (800fd88 <vTaskSwitchContext+0xf4>)
 800fca4:	2201      	movs	r2, #1
 800fca6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fca8:	e068      	b.n	800fd7c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800fcaa:	4b37      	ldr	r3, [pc, #220]	; (800fd88 <vTaskSwitchContext+0xf4>)
 800fcac:	2200      	movs	r2, #0
 800fcae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fcb0:	4b36      	ldr	r3, [pc, #216]	; (800fd8c <vTaskSwitchContext+0xf8>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcb6:	613b      	str	r3, [r7, #16]
 800fcb8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800fcbc:	60fb      	str	r3, [r7, #12]
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d111      	bne.n	800fcec <vTaskSwitchContext+0x58>
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	3304      	adds	r3, #4
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d10b      	bne.n	800fcec <vTaskSwitchContext+0x58>
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	3308      	adds	r3, #8
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	68fa      	ldr	r2, [r7, #12]
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d105      	bne.n	800fcec <vTaskSwitchContext+0x58>
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	330c      	adds	r3, #12
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	68fa      	ldr	r2, [r7, #12]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d008      	beq.n	800fcfe <vTaskSwitchContext+0x6a>
 800fcec:	4b27      	ldr	r3, [pc, #156]	; (800fd8c <vTaskSwitchContext+0xf8>)
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	4b26      	ldr	r3, [pc, #152]	; (800fd8c <vTaskSwitchContext+0xf8>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	3334      	adds	r3, #52	; 0x34
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	4610      	mov	r0, r2
 800fcfa:	f7f0 fbfe 	bl	80004fa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcfe:	4b24      	ldr	r3, [pc, #144]	; (800fd90 <vTaskSwitchContext+0xfc>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	617b      	str	r3, [r7, #20]
 800fd04:	e010      	b.n	800fd28 <vTaskSwitchContext+0x94>
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d10a      	bne.n	800fd22 <vTaskSwitchContext+0x8e>
	__asm volatile
 800fd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd10:	f383 8811 	msr	BASEPRI, r3
 800fd14:	f3bf 8f6f 	isb	sy
 800fd18:	f3bf 8f4f 	dsb	sy
 800fd1c:	607b      	str	r3, [r7, #4]
}
 800fd1e:	bf00      	nop
 800fd20:	e7fe      	b.n	800fd20 <vTaskSwitchContext+0x8c>
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	3b01      	subs	r3, #1
 800fd26:	617b      	str	r3, [r7, #20]
 800fd28:	491a      	ldr	r1, [pc, #104]	; (800fd94 <vTaskSwitchContext+0x100>)
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	4613      	mov	r3, r2
 800fd2e:	009b      	lsls	r3, r3, #2
 800fd30:	4413      	add	r3, r2
 800fd32:	009b      	lsls	r3, r3, #2
 800fd34:	440b      	add	r3, r1
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d0e4      	beq.n	800fd06 <vTaskSwitchContext+0x72>
 800fd3c:	697a      	ldr	r2, [r7, #20]
 800fd3e:	4613      	mov	r3, r2
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	4413      	add	r3, r2
 800fd44:	009b      	lsls	r3, r3, #2
 800fd46:	4a13      	ldr	r2, [pc, #76]	; (800fd94 <vTaskSwitchContext+0x100>)
 800fd48:	4413      	add	r3, r2
 800fd4a:	60bb      	str	r3, [r7, #8]
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	685a      	ldr	r2, [r3, #4]
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	605a      	str	r2, [r3, #4]
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	685a      	ldr	r2, [r3, #4]
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	3308      	adds	r3, #8
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d104      	bne.n	800fd6c <vTaskSwitchContext+0xd8>
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	685a      	ldr	r2, [r3, #4]
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	605a      	str	r2, [r3, #4]
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	4a06      	ldr	r2, [pc, #24]	; (800fd8c <vTaskSwitchContext+0xf8>)
 800fd74:	6013      	str	r3, [r2, #0]
 800fd76:	4a06      	ldr	r2, [pc, #24]	; (800fd90 <vTaskSwitchContext+0xfc>)
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	6013      	str	r3, [r2, #0]
}
 800fd7c:	bf00      	nop
 800fd7e:	3718      	adds	r7, #24
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	2000126c 	.word	0x2000126c
 800fd88:	20001258 	.word	0x20001258
 800fd8c:	20000d70 	.word	0x20000d70
 800fd90:	2000124c 	.word	0x2000124c
 800fd94:	20000d74 	.word	0x20000d74

0800fd98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d10a      	bne.n	800fdbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdac:	f383 8811 	msr	BASEPRI, r3
 800fdb0:	f3bf 8f6f 	isb	sy
 800fdb4:	f3bf 8f4f 	dsb	sy
 800fdb8:	60fb      	str	r3, [r7, #12]
}
 800fdba:	bf00      	nop
 800fdbc:	e7fe      	b.n	800fdbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fdbe:	4b07      	ldr	r3, [pc, #28]	; (800fddc <vTaskPlaceOnEventList+0x44>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	3318      	adds	r3, #24
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f7fe fda7 	bl	800e91a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fdcc:	2101      	movs	r1, #1
 800fdce:	6838      	ldr	r0, [r7, #0]
 800fdd0:	f000 fa7e 	bl	80102d0 <prvAddCurrentTaskToDelayedList>
}
 800fdd4:	bf00      	nop
 800fdd6:	3710      	adds	r7, #16
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	20000d70 	.word	0x20000d70

0800fde0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b086      	sub	sp, #24
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d10a      	bne.n	800fe08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf6:	f383 8811 	msr	BASEPRI, r3
 800fdfa:	f3bf 8f6f 	isb	sy
 800fdfe:	f3bf 8f4f 	dsb	sy
 800fe02:	617b      	str	r3, [r7, #20]
}
 800fe04:	bf00      	nop
 800fe06:	e7fe      	b.n	800fe06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe08:	4b0a      	ldr	r3, [pc, #40]	; (800fe34 <vTaskPlaceOnEventListRestricted+0x54>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	3318      	adds	r3, #24
 800fe0e:	4619      	mov	r1, r3
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	f7fe fd5e 	bl	800e8d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d002      	beq.n	800fe22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fe1c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fe22:	6879      	ldr	r1, [r7, #4]
 800fe24:	68b8      	ldr	r0, [r7, #8]
 800fe26:	f000 fa53 	bl	80102d0 <prvAddCurrentTaskToDelayedList>
	}
 800fe2a:	bf00      	nop
 800fe2c:	3718      	adds	r7, #24
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	20000d70 	.word	0x20000d70

0800fe38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b086      	sub	sp, #24
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d10a      	bne.n	800fe64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fe4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	60fb      	str	r3, [r7, #12]
}
 800fe60:	bf00      	nop
 800fe62:	e7fe      	b.n	800fe62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	3318      	adds	r3, #24
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7fe fd8f 	bl	800e98c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe6e:	4b1e      	ldr	r3, [pc, #120]	; (800fee8 <xTaskRemoveFromEventList+0xb0>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d11d      	bne.n	800feb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	3304      	adds	r3, #4
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7fe fd86 	bl	800e98c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe84:	4b19      	ldr	r3, [pc, #100]	; (800feec <xTaskRemoveFromEventList+0xb4>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d903      	bls.n	800fe94 <xTaskRemoveFromEventList+0x5c>
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe90:	4a16      	ldr	r2, [pc, #88]	; (800feec <xTaskRemoveFromEventList+0xb4>)
 800fe92:	6013      	str	r3, [r2, #0]
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe98:	4613      	mov	r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	4413      	add	r3, r2
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	4a13      	ldr	r2, [pc, #76]	; (800fef0 <xTaskRemoveFromEventList+0xb8>)
 800fea2:	441a      	add	r2, r3
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	3304      	adds	r3, #4
 800fea8:	4619      	mov	r1, r3
 800feaa:	4610      	mov	r0, r2
 800feac:	f7fe fd11 	bl	800e8d2 <vListInsertEnd>
 800feb0:	e005      	b.n	800febe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	3318      	adds	r3, #24
 800feb6:	4619      	mov	r1, r3
 800feb8:	480e      	ldr	r0, [pc, #56]	; (800fef4 <xTaskRemoveFromEventList+0xbc>)
 800feba:	f7fe fd0a 	bl	800e8d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800febe:	693b      	ldr	r3, [r7, #16]
 800fec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec2:	4b0d      	ldr	r3, [pc, #52]	; (800fef8 <xTaskRemoveFromEventList+0xc0>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fec8:	429a      	cmp	r2, r3
 800feca:	d905      	bls.n	800fed8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fecc:	2301      	movs	r3, #1
 800fece:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fed0:	4b0a      	ldr	r3, [pc, #40]	; (800fefc <xTaskRemoveFromEventList+0xc4>)
 800fed2:	2201      	movs	r2, #1
 800fed4:	601a      	str	r2, [r3, #0]
 800fed6:	e001      	b.n	800fedc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fed8:	2300      	movs	r3, #0
 800feda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fedc:	697b      	ldr	r3, [r7, #20]
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3718      	adds	r7, #24
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	2000126c 	.word	0x2000126c
 800feec:	2000124c 	.word	0x2000124c
 800fef0:	20000d74 	.word	0x20000d74
 800fef4:	20001204 	.word	0x20001204
 800fef8:	20000d70 	.word	0x20000d70
 800fefc:	20001258 	.word	0x20001258

0800ff00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff08:	4b06      	ldr	r3, [pc, #24]	; (800ff24 <vTaskInternalSetTimeOutState+0x24>)
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ff10:	4b05      	ldr	r3, [pc, #20]	; (800ff28 <vTaskInternalSetTimeOutState+0x28>)
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	605a      	str	r2, [r3, #4]
}
 800ff18:	bf00      	nop
 800ff1a:	370c      	adds	r7, #12
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr
 800ff24:	2000125c 	.word	0x2000125c
 800ff28:	20001248 	.word	0x20001248

0800ff2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b088      	sub	sp, #32
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d10a      	bne.n	800ff52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ff3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff40:	f383 8811 	msr	BASEPRI, r3
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	613b      	str	r3, [r7, #16]
}
 800ff4e:	bf00      	nop
 800ff50:	e7fe      	b.n	800ff50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10a      	bne.n	800ff6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ff58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5c:	f383 8811 	msr	BASEPRI, r3
 800ff60:	f3bf 8f6f 	isb	sy
 800ff64:	f3bf 8f4f 	dsb	sy
 800ff68:	60fb      	str	r3, [r7, #12]
}
 800ff6a:	bf00      	nop
 800ff6c:	e7fe      	b.n	800ff6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ff6e:	f000 fe81 	bl	8010c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ff72:	4b1d      	ldr	r3, [pc, #116]	; (800ffe8 <xTaskCheckForTimeOut+0xbc>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	69ba      	ldr	r2, [r7, #24]
 800ff7e:	1ad3      	subs	r3, r2, r3
 800ff80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff8a:	d102      	bne.n	800ff92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	61fb      	str	r3, [r7, #28]
 800ff90:	e023      	b.n	800ffda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	4b15      	ldr	r3, [pc, #84]	; (800ffec <xTaskCheckForTimeOut+0xc0>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d007      	beq.n	800ffae <xTaskCheckForTimeOut+0x82>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	69ba      	ldr	r2, [r7, #24]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d302      	bcc.n	800ffae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	61fb      	str	r3, [r7, #28]
 800ffac:	e015      	b.n	800ffda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	697a      	ldr	r2, [r7, #20]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d20b      	bcs.n	800ffd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	1ad2      	subs	r2, r2, r3
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7ff ff9b 	bl	800ff00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	61fb      	str	r3, [r7, #28]
 800ffce:	e004      	b.n	800ffda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ffda:	f000 fe7b 	bl	8010cd4 <vPortExitCritical>

	return xReturn;
 800ffde:	69fb      	ldr	r3, [r7, #28]
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3720      	adds	r7, #32
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	20001248 	.word	0x20001248
 800ffec:	2000125c 	.word	0x2000125c

0800fff0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fff0:	b480      	push	{r7}
 800fff2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fff4:	4b03      	ldr	r3, [pc, #12]	; (8010004 <vTaskMissedYield+0x14>)
 800fff6:	2201      	movs	r2, #1
 800fff8:	601a      	str	r2, [r3, #0]
}
 800fffa:	bf00      	nop
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr
 8010004:	20001258 	.word	0x20001258

08010008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010010:	f000 f854 	bl	80100bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010014:	4b07      	ldr	r3, [pc, #28]	; (8010034 <prvIdleTask+0x2c>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	2b01      	cmp	r3, #1
 801001a:	d907      	bls.n	801002c <prvIdleTask+0x24>
			{
				taskYIELD();
 801001c:	4b06      	ldr	r3, [pc, #24]	; (8010038 <prvIdleTask+0x30>)
 801001e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010022:	601a      	str	r2, [r3, #0]
 8010024:	f3bf 8f4f 	dsb	sy
 8010028:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801002c:	f7f0 fa5e 	bl	80004ec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8010030:	e7ee      	b.n	8010010 <prvIdleTask+0x8>
 8010032:	bf00      	nop
 8010034:	20000d74 	.word	0x20000d74
 8010038:	e000ed04 	.word	0xe000ed04

0801003c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010042:	2300      	movs	r3, #0
 8010044:	607b      	str	r3, [r7, #4]
 8010046:	e00c      	b.n	8010062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	4613      	mov	r3, r2
 801004c:	009b      	lsls	r3, r3, #2
 801004e:	4413      	add	r3, r2
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	4a12      	ldr	r2, [pc, #72]	; (801009c <prvInitialiseTaskLists+0x60>)
 8010054:	4413      	add	r3, r2
 8010056:	4618      	mov	r0, r3
 8010058:	f7fe fc0e 	bl	800e878 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	3301      	adds	r3, #1
 8010060:	607b      	str	r3, [r7, #4]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2b37      	cmp	r3, #55	; 0x37
 8010066:	d9ef      	bls.n	8010048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010068:	480d      	ldr	r0, [pc, #52]	; (80100a0 <prvInitialiseTaskLists+0x64>)
 801006a:	f7fe fc05 	bl	800e878 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801006e:	480d      	ldr	r0, [pc, #52]	; (80100a4 <prvInitialiseTaskLists+0x68>)
 8010070:	f7fe fc02 	bl	800e878 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010074:	480c      	ldr	r0, [pc, #48]	; (80100a8 <prvInitialiseTaskLists+0x6c>)
 8010076:	f7fe fbff 	bl	800e878 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801007a:	480c      	ldr	r0, [pc, #48]	; (80100ac <prvInitialiseTaskLists+0x70>)
 801007c:	f7fe fbfc 	bl	800e878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010080:	480b      	ldr	r0, [pc, #44]	; (80100b0 <prvInitialiseTaskLists+0x74>)
 8010082:	f7fe fbf9 	bl	800e878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010086:	4b0b      	ldr	r3, [pc, #44]	; (80100b4 <prvInitialiseTaskLists+0x78>)
 8010088:	4a05      	ldr	r2, [pc, #20]	; (80100a0 <prvInitialiseTaskLists+0x64>)
 801008a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801008c:	4b0a      	ldr	r3, [pc, #40]	; (80100b8 <prvInitialiseTaskLists+0x7c>)
 801008e:	4a05      	ldr	r2, [pc, #20]	; (80100a4 <prvInitialiseTaskLists+0x68>)
 8010090:	601a      	str	r2, [r3, #0]
}
 8010092:	bf00      	nop
 8010094:	3708      	adds	r7, #8
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	20000d74 	.word	0x20000d74
 80100a0:	200011d4 	.word	0x200011d4
 80100a4:	200011e8 	.word	0x200011e8
 80100a8:	20001204 	.word	0x20001204
 80100ac:	20001218 	.word	0x20001218
 80100b0:	20001230 	.word	0x20001230
 80100b4:	200011fc 	.word	0x200011fc
 80100b8:	20001200 	.word	0x20001200

080100bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100c2:	e019      	b.n	80100f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80100c4:	f000 fdd6 	bl	8010c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100c8:	4b10      	ldr	r3, [pc, #64]	; (801010c <prvCheckTasksWaitingTermination+0x50>)
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	3304      	adds	r3, #4
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7fe fc59 	bl	800e98c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80100da:	4b0d      	ldr	r3, [pc, #52]	; (8010110 <prvCheckTasksWaitingTermination+0x54>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	3b01      	subs	r3, #1
 80100e0:	4a0b      	ldr	r2, [pc, #44]	; (8010110 <prvCheckTasksWaitingTermination+0x54>)
 80100e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80100e4:	4b0b      	ldr	r3, [pc, #44]	; (8010114 <prvCheckTasksWaitingTermination+0x58>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	3b01      	subs	r3, #1
 80100ea:	4a0a      	ldr	r2, [pc, #40]	; (8010114 <prvCheckTasksWaitingTermination+0x58>)
 80100ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80100ee:	f000 fdf1 	bl	8010cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 f810 	bl	8010118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100f8:	4b06      	ldr	r3, [pc, #24]	; (8010114 <prvCheckTasksWaitingTermination+0x58>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d1e1      	bne.n	80100c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010100:	bf00      	nop
 8010102:	bf00      	nop
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	20001218 	.word	0x20001218
 8010110:	20001244 	.word	0x20001244
 8010114:	2000122c 	.word	0x2000122c

08010118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010126:	2b00      	cmp	r3, #0
 8010128:	d108      	bne.n	801013c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801012e:	4618      	mov	r0, r3
 8010130:	f000 ff92 	bl	8011058 <vPortFree>
				vPortFree( pxTCB );
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f000 ff8f 	bl	8011058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801013a:	e018      	b.n	801016e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010142:	2b01      	cmp	r3, #1
 8010144:	d103      	bne.n	801014e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f000 ff86 	bl	8011058 <vPortFree>
	}
 801014c:	e00f      	b.n	801016e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010154:	2b02      	cmp	r3, #2
 8010156:	d00a      	beq.n	801016e <prvDeleteTCB+0x56>
	__asm volatile
 8010158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801015c:	f383 8811 	msr	BASEPRI, r3
 8010160:	f3bf 8f6f 	isb	sy
 8010164:	f3bf 8f4f 	dsb	sy
 8010168:	60fb      	str	r3, [r7, #12]
}
 801016a:	bf00      	nop
 801016c:	e7fe      	b.n	801016c <prvDeleteTCB+0x54>
	}
 801016e:	bf00      	nop
 8010170:	3710      	adds	r7, #16
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
	...

08010178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801017e:	4b0c      	ldr	r3, [pc, #48]	; (80101b0 <prvResetNextTaskUnblockTime+0x38>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d104      	bne.n	8010192 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010188:	4b0a      	ldr	r3, [pc, #40]	; (80101b4 <prvResetNextTaskUnblockTime+0x3c>)
 801018a:	f04f 32ff 	mov.w	r2, #4294967295
 801018e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010190:	e008      	b.n	80101a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010192:	4b07      	ldr	r3, [pc, #28]	; (80101b0 <prvResetNextTaskUnblockTime+0x38>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	68db      	ldr	r3, [r3, #12]
 801019a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	4a04      	ldr	r2, [pc, #16]	; (80101b4 <prvResetNextTaskUnblockTime+0x3c>)
 80101a2:	6013      	str	r3, [r2, #0]
}
 80101a4:	bf00      	nop
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr
 80101b0:	200011fc 	.word	0x200011fc
 80101b4:	20001264 	.word	0x20001264

080101b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80101be:	4b0b      	ldr	r3, [pc, #44]	; (80101ec <xTaskGetSchedulerState+0x34>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d102      	bne.n	80101cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80101c6:	2301      	movs	r3, #1
 80101c8:	607b      	str	r3, [r7, #4]
 80101ca:	e008      	b.n	80101de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101cc:	4b08      	ldr	r3, [pc, #32]	; (80101f0 <xTaskGetSchedulerState+0x38>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d102      	bne.n	80101da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80101d4:	2302      	movs	r3, #2
 80101d6:	607b      	str	r3, [r7, #4]
 80101d8:	e001      	b.n	80101de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80101da:	2300      	movs	r3, #0
 80101dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80101de:	687b      	ldr	r3, [r7, #4]
	}
 80101e0:	4618      	mov	r0, r3
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr
 80101ec:	20001250 	.word	0x20001250
 80101f0:	2000126c 	.word	0x2000126c

080101f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b086      	sub	sp, #24
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010200:	2300      	movs	r3, #0
 8010202:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d056      	beq.n	80102b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801020a:	4b2e      	ldr	r3, [pc, #184]	; (80102c4 <xTaskPriorityDisinherit+0xd0>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	693a      	ldr	r2, [r7, #16]
 8010210:	429a      	cmp	r2, r3
 8010212:	d00a      	beq.n	801022a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010218:	f383 8811 	msr	BASEPRI, r3
 801021c:	f3bf 8f6f 	isb	sy
 8010220:	f3bf 8f4f 	dsb	sy
 8010224:	60fb      	str	r3, [r7, #12]
}
 8010226:	bf00      	nop
 8010228:	e7fe      	b.n	8010228 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801022e:	2b00      	cmp	r3, #0
 8010230:	d10a      	bne.n	8010248 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010236:	f383 8811 	msr	BASEPRI, r3
 801023a:	f3bf 8f6f 	isb	sy
 801023e:	f3bf 8f4f 	dsb	sy
 8010242:	60bb      	str	r3, [r7, #8]
}
 8010244:	bf00      	nop
 8010246:	e7fe      	b.n	8010246 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801024c:	1e5a      	subs	r2, r3, #1
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801025a:	429a      	cmp	r2, r3
 801025c:	d02c      	beq.n	80102b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010262:	2b00      	cmp	r3, #0
 8010264:	d128      	bne.n	80102b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	3304      	adds	r3, #4
 801026a:	4618      	mov	r0, r3
 801026c:	f7fe fb8e 	bl	800e98c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801027c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010288:	4b0f      	ldr	r3, [pc, #60]	; (80102c8 <xTaskPriorityDisinherit+0xd4>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	429a      	cmp	r2, r3
 801028e:	d903      	bls.n	8010298 <xTaskPriorityDisinherit+0xa4>
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010294:	4a0c      	ldr	r2, [pc, #48]	; (80102c8 <xTaskPriorityDisinherit+0xd4>)
 8010296:	6013      	str	r3, [r2, #0]
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801029c:	4613      	mov	r3, r2
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	4413      	add	r3, r2
 80102a2:	009b      	lsls	r3, r3, #2
 80102a4:	4a09      	ldr	r2, [pc, #36]	; (80102cc <xTaskPriorityDisinherit+0xd8>)
 80102a6:	441a      	add	r2, r3
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	3304      	adds	r3, #4
 80102ac:	4619      	mov	r1, r3
 80102ae:	4610      	mov	r0, r2
 80102b0:	f7fe fb0f 	bl	800e8d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80102b4:	2301      	movs	r3, #1
 80102b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80102b8:	697b      	ldr	r3, [r7, #20]
	}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3718      	adds	r7, #24
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	20000d70 	.word	0x20000d70
 80102c8:	2000124c 	.word	0x2000124c
 80102cc:	20000d74 	.word	0x20000d74

080102d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80102da:	4b21      	ldr	r3, [pc, #132]	; (8010360 <prvAddCurrentTaskToDelayedList+0x90>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102e0:	4b20      	ldr	r3, [pc, #128]	; (8010364 <prvAddCurrentTaskToDelayedList+0x94>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	3304      	adds	r3, #4
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe fb50 	bl	800e98c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102f2:	d10a      	bne.n	801030a <prvAddCurrentTaskToDelayedList+0x3a>
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d007      	beq.n	801030a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102fa:	4b1a      	ldr	r3, [pc, #104]	; (8010364 <prvAddCurrentTaskToDelayedList+0x94>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	3304      	adds	r3, #4
 8010300:	4619      	mov	r1, r3
 8010302:	4819      	ldr	r0, [pc, #100]	; (8010368 <prvAddCurrentTaskToDelayedList+0x98>)
 8010304:	f7fe fae5 	bl	800e8d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010308:	e026      	b.n	8010358 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801030a:	68fa      	ldr	r2, [r7, #12]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	4413      	add	r3, r2
 8010310:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010312:	4b14      	ldr	r3, [pc, #80]	; (8010364 <prvAddCurrentTaskToDelayedList+0x94>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	68ba      	ldr	r2, [r7, #8]
 8010318:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801031a:	68ba      	ldr	r2, [r7, #8]
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	429a      	cmp	r2, r3
 8010320:	d209      	bcs.n	8010336 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010322:	4b12      	ldr	r3, [pc, #72]	; (801036c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	4b0f      	ldr	r3, [pc, #60]	; (8010364 <prvAddCurrentTaskToDelayedList+0x94>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	3304      	adds	r3, #4
 801032c:	4619      	mov	r1, r3
 801032e:	4610      	mov	r0, r2
 8010330:	f7fe faf3 	bl	800e91a <vListInsert>
}
 8010334:	e010      	b.n	8010358 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010336:	4b0e      	ldr	r3, [pc, #56]	; (8010370 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	4b0a      	ldr	r3, [pc, #40]	; (8010364 <prvAddCurrentTaskToDelayedList+0x94>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	3304      	adds	r3, #4
 8010340:	4619      	mov	r1, r3
 8010342:	4610      	mov	r0, r2
 8010344:	f7fe fae9 	bl	800e91a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010348:	4b0a      	ldr	r3, [pc, #40]	; (8010374 <prvAddCurrentTaskToDelayedList+0xa4>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	68ba      	ldr	r2, [r7, #8]
 801034e:	429a      	cmp	r2, r3
 8010350:	d202      	bcs.n	8010358 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010352:	4a08      	ldr	r2, [pc, #32]	; (8010374 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	6013      	str	r3, [r2, #0]
}
 8010358:	bf00      	nop
 801035a:	3710      	adds	r7, #16
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}
 8010360:	20001248 	.word	0x20001248
 8010364:	20000d70 	.word	0x20000d70
 8010368:	20001230 	.word	0x20001230
 801036c:	20001200 	.word	0x20001200
 8010370:	200011fc 	.word	0x200011fc
 8010374:	20001264 	.word	0x20001264

08010378 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b08a      	sub	sp, #40	; 0x28
 801037c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801037e:	2300      	movs	r3, #0
 8010380:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010382:	f000 fb07 	bl	8010994 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010386:	4b1c      	ldr	r3, [pc, #112]	; (80103f8 <xTimerCreateTimerTask+0x80>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d021      	beq.n	80103d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801038e:	2300      	movs	r3, #0
 8010390:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010392:	2300      	movs	r3, #0
 8010394:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010396:	1d3a      	adds	r2, r7, #4
 8010398:	f107 0108 	add.w	r1, r7, #8
 801039c:	f107 030c 	add.w	r3, r7, #12
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7fe fa4f 	bl	800e844 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80103a6:	6879      	ldr	r1, [r7, #4]
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	9202      	str	r2, [sp, #8]
 80103ae:	9301      	str	r3, [sp, #4]
 80103b0:	2302      	movs	r3, #2
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	2300      	movs	r3, #0
 80103b6:	460a      	mov	r2, r1
 80103b8:	4910      	ldr	r1, [pc, #64]	; (80103fc <xTimerCreateTimerTask+0x84>)
 80103ba:	4811      	ldr	r0, [pc, #68]	; (8010400 <xTimerCreateTimerTask+0x88>)
 80103bc:	f7ff f8b6 	bl	800f52c <xTaskCreateStatic>
 80103c0:	4603      	mov	r3, r0
 80103c2:	4a10      	ldr	r2, [pc, #64]	; (8010404 <xTimerCreateTimerTask+0x8c>)
 80103c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80103c6:	4b0f      	ldr	r3, [pc, #60]	; (8010404 <xTimerCreateTimerTask+0x8c>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d001      	beq.n	80103d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80103ce:	2301      	movs	r3, #1
 80103d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10a      	bne.n	80103ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80103d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103dc:	f383 8811 	msr	BASEPRI, r3
 80103e0:	f3bf 8f6f 	isb	sy
 80103e4:	f3bf 8f4f 	dsb	sy
 80103e8:	613b      	str	r3, [r7, #16]
}
 80103ea:	bf00      	nop
 80103ec:	e7fe      	b.n	80103ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80103ee:	697b      	ldr	r3, [r7, #20]
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3718      	adds	r7, #24
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	200012a0 	.word	0x200012a0
 80103fc:	08011ba8 	.word	0x08011ba8
 8010400:	0801053d 	.word	0x0801053d
 8010404:	200012a4 	.word	0x200012a4

08010408 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b08a      	sub	sp, #40	; 0x28
 801040c:	af00      	add	r7, sp, #0
 801040e:	60f8      	str	r0, [r7, #12]
 8010410:	60b9      	str	r1, [r7, #8]
 8010412:	607a      	str	r2, [r7, #4]
 8010414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010416:	2300      	movs	r3, #0
 8010418:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d10a      	bne.n	8010436 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010424:	f383 8811 	msr	BASEPRI, r3
 8010428:	f3bf 8f6f 	isb	sy
 801042c:	f3bf 8f4f 	dsb	sy
 8010430:	623b      	str	r3, [r7, #32]
}
 8010432:	bf00      	nop
 8010434:	e7fe      	b.n	8010434 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010436:	4b1a      	ldr	r3, [pc, #104]	; (80104a0 <xTimerGenericCommand+0x98>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d02a      	beq.n	8010494 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	2b05      	cmp	r3, #5
 801044e:	dc18      	bgt.n	8010482 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010450:	f7ff feb2 	bl	80101b8 <xTaskGetSchedulerState>
 8010454:	4603      	mov	r3, r0
 8010456:	2b02      	cmp	r3, #2
 8010458:	d109      	bne.n	801046e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801045a:	4b11      	ldr	r3, [pc, #68]	; (80104a0 <xTimerGenericCommand+0x98>)
 801045c:	6818      	ldr	r0, [r3, #0]
 801045e:	f107 0110 	add.w	r1, r7, #16
 8010462:	2300      	movs	r3, #0
 8010464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010466:	f7fe fbf9 	bl	800ec5c <xQueueGenericSend>
 801046a:	6278      	str	r0, [r7, #36]	; 0x24
 801046c:	e012      	b.n	8010494 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801046e:	4b0c      	ldr	r3, [pc, #48]	; (80104a0 <xTimerGenericCommand+0x98>)
 8010470:	6818      	ldr	r0, [r3, #0]
 8010472:	f107 0110 	add.w	r1, r7, #16
 8010476:	2300      	movs	r3, #0
 8010478:	2200      	movs	r2, #0
 801047a:	f7fe fbef 	bl	800ec5c <xQueueGenericSend>
 801047e:	6278      	str	r0, [r7, #36]	; 0x24
 8010480:	e008      	b.n	8010494 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010482:	4b07      	ldr	r3, [pc, #28]	; (80104a0 <xTimerGenericCommand+0x98>)
 8010484:	6818      	ldr	r0, [r3, #0]
 8010486:	f107 0110 	add.w	r1, r7, #16
 801048a:	2300      	movs	r3, #0
 801048c:	683a      	ldr	r2, [r7, #0]
 801048e:	f7fe fce3 	bl	800ee58 <xQueueGenericSendFromISR>
 8010492:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010496:	4618      	mov	r0, r3
 8010498:	3728      	adds	r7, #40	; 0x28
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	200012a0 	.word	0x200012a0

080104a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b088      	sub	sp, #32
 80104a8:	af02      	add	r7, sp, #8
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104ae:	4b22      	ldr	r3, [pc, #136]	; (8010538 <prvProcessExpiredTimer+0x94>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	68db      	ldr	r3, [r3, #12]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	3304      	adds	r3, #4
 80104bc:	4618      	mov	r0, r3
 80104be:	f7fe fa65 	bl	800e98c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104c8:	f003 0304 	and.w	r3, r3, #4
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d022      	beq.n	8010516 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	699a      	ldr	r2, [r3, #24]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	18d1      	adds	r1, r2, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	683a      	ldr	r2, [r7, #0]
 80104dc:	6978      	ldr	r0, [r7, #20]
 80104de:	f000 f8d1 	bl	8010684 <prvInsertTimerInActiveList>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d01f      	beq.n	8010528 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80104e8:	2300      	movs	r3, #0
 80104ea:	9300      	str	r3, [sp, #0]
 80104ec:	2300      	movs	r3, #0
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	2100      	movs	r1, #0
 80104f2:	6978      	ldr	r0, [r7, #20]
 80104f4:	f7ff ff88 	bl	8010408 <xTimerGenericCommand>
 80104f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d113      	bne.n	8010528 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010504:	f383 8811 	msr	BASEPRI, r3
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	f3bf 8f4f 	dsb	sy
 8010510:	60fb      	str	r3, [r7, #12]
}
 8010512:	bf00      	nop
 8010514:	e7fe      	b.n	8010514 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801051c:	f023 0301 	bic.w	r3, r3, #1
 8010520:	b2da      	uxtb	r2, r3
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	6a1b      	ldr	r3, [r3, #32]
 801052c:	6978      	ldr	r0, [r7, #20]
 801052e:	4798      	blx	r3
}
 8010530:	bf00      	nop
 8010532:	3718      	adds	r7, #24
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}
 8010538:	20001298 	.word	0x20001298

0801053c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010544:	f107 0308 	add.w	r3, r7, #8
 8010548:	4618      	mov	r0, r3
 801054a:	f000 f857 	bl	80105fc <prvGetNextExpireTime>
 801054e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	4619      	mov	r1, r3
 8010554:	68f8      	ldr	r0, [r7, #12]
 8010556:	f000 f803 	bl	8010560 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801055a:	f000 f8d5 	bl	8010708 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801055e:	e7f1      	b.n	8010544 <prvTimerTask+0x8>

08010560 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b084      	sub	sp, #16
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801056a:	f7ff fa1d 	bl	800f9a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801056e:	f107 0308 	add.w	r3, r7, #8
 8010572:	4618      	mov	r0, r3
 8010574:	f000 f866 	bl	8010644 <prvSampleTimeNow>
 8010578:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d130      	bne.n	80105e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d10a      	bne.n	801059c <prvProcessTimerOrBlockTask+0x3c>
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	429a      	cmp	r2, r3
 801058c:	d806      	bhi.n	801059c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801058e:	f7ff fa19 	bl	800f9c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010592:	68f9      	ldr	r1, [r7, #12]
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f7ff ff85 	bl	80104a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801059a:	e024      	b.n	80105e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d008      	beq.n	80105b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80105a2:	4b13      	ldr	r3, [pc, #76]	; (80105f0 <prvProcessTimerOrBlockTask+0x90>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d101      	bne.n	80105b0 <prvProcessTimerOrBlockTask+0x50>
 80105ac:	2301      	movs	r3, #1
 80105ae:	e000      	b.n	80105b2 <prvProcessTimerOrBlockTask+0x52>
 80105b0:	2300      	movs	r3, #0
 80105b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80105b4:	4b0f      	ldr	r3, [pc, #60]	; (80105f4 <prvProcessTimerOrBlockTask+0x94>)
 80105b6:	6818      	ldr	r0, [r3, #0]
 80105b8:	687a      	ldr	r2, [r7, #4]
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	1ad3      	subs	r3, r2, r3
 80105be:	683a      	ldr	r2, [r7, #0]
 80105c0:	4619      	mov	r1, r3
 80105c2:	f7fe ff7f 	bl	800f4c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80105c6:	f7ff f9fd 	bl	800f9c4 <xTaskResumeAll>
 80105ca:	4603      	mov	r3, r0
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d10a      	bne.n	80105e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80105d0:	4b09      	ldr	r3, [pc, #36]	; (80105f8 <prvProcessTimerOrBlockTask+0x98>)
 80105d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105d6:	601a      	str	r2, [r3, #0]
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	f3bf 8f6f 	isb	sy
}
 80105e0:	e001      	b.n	80105e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80105e2:	f7ff f9ef 	bl	800f9c4 <xTaskResumeAll>
}
 80105e6:	bf00      	nop
 80105e8:	3710      	adds	r7, #16
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	2000129c 	.word	0x2000129c
 80105f4:	200012a0 	.word	0x200012a0
 80105f8:	e000ed04 	.word	0xe000ed04

080105fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80105fc:	b480      	push	{r7}
 80105fe:	b085      	sub	sp, #20
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010604:	4b0e      	ldr	r3, [pc, #56]	; (8010640 <prvGetNextExpireTime+0x44>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d101      	bne.n	8010612 <prvGetNextExpireTime+0x16>
 801060e:	2201      	movs	r2, #1
 8010610:	e000      	b.n	8010614 <prvGetNextExpireTime+0x18>
 8010612:	2200      	movs	r2, #0
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d105      	bne.n	801062c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010620:	4b07      	ldr	r3, [pc, #28]	; (8010640 <prvGetNextExpireTime+0x44>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	60fb      	str	r3, [r7, #12]
 801062a:	e001      	b.n	8010630 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801062c:	2300      	movs	r3, #0
 801062e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010630:	68fb      	ldr	r3, [r7, #12]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3714      	adds	r7, #20
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	20001298 	.word	0x20001298

08010644 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801064c:	f7ff fa58 	bl	800fb00 <xTaskGetTickCount>
 8010650:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010652:	4b0b      	ldr	r3, [pc, #44]	; (8010680 <prvSampleTimeNow+0x3c>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	68fa      	ldr	r2, [r7, #12]
 8010658:	429a      	cmp	r2, r3
 801065a:	d205      	bcs.n	8010668 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801065c:	f000 f936 	bl	80108cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2201      	movs	r2, #1
 8010664:	601a      	str	r2, [r3, #0]
 8010666:	e002      	b.n	801066e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801066e:	4a04      	ldr	r2, [pc, #16]	; (8010680 <prvSampleTimeNow+0x3c>)
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010674:	68fb      	ldr	r3, [r7, #12]
}
 8010676:	4618      	mov	r0, r3
 8010678:	3710      	adds	r7, #16
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	200012a8 	.word	0x200012a8

08010684 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b086      	sub	sp, #24
 8010688:	af00      	add	r7, sp, #0
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	607a      	str	r2, [r7, #4]
 8010690:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010692:	2300      	movs	r3, #0
 8010694:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	68ba      	ldr	r2, [r7, #8]
 801069a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	68fa      	ldr	r2, [r7, #12]
 80106a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80106a2:	68ba      	ldr	r2, [r7, #8]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d812      	bhi.n	80106d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	1ad2      	subs	r2, r2, r3
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	699b      	ldr	r3, [r3, #24]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d302      	bcc.n	80106be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80106b8:	2301      	movs	r3, #1
 80106ba:	617b      	str	r3, [r7, #20]
 80106bc:	e01b      	b.n	80106f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80106be:	4b10      	ldr	r3, [pc, #64]	; (8010700 <prvInsertTimerInActiveList+0x7c>)
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	3304      	adds	r3, #4
 80106c6:	4619      	mov	r1, r3
 80106c8:	4610      	mov	r0, r2
 80106ca:	f7fe f926 	bl	800e91a <vListInsert>
 80106ce:	e012      	b.n	80106f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d206      	bcs.n	80106e6 <prvInsertTimerInActiveList+0x62>
 80106d8:	68ba      	ldr	r2, [r7, #8]
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d302      	bcc.n	80106e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80106e0:	2301      	movs	r3, #1
 80106e2:	617b      	str	r3, [r7, #20]
 80106e4:	e007      	b.n	80106f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80106e6:	4b07      	ldr	r3, [pc, #28]	; (8010704 <prvInsertTimerInActiveList+0x80>)
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	3304      	adds	r3, #4
 80106ee:	4619      	mov	r1, r3
 80106f0:	4610      	mov	r0, r2
 80106f2:	f7fe f912 	bl	800e91a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80106f6:	697b      	ldr	r3, [r7, #20]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3718      	adds	r7, #24
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	2000129c 	.word	0x2000129c
 8010704:	20001298 	.word	0x20001298

08010708 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b08e      	sub	sp, #56	; 0x38
 801070c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801070e:	e0ca      	b.n	80108a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2b00      	cmp	r3, #0
 8010714:	da18      	bge.n	8010748 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010716:	1d3b      	adds	r3, r7, #4
 8010718:	3304      	adds	r3, #4
 801071a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801071c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071e:	2b00      	cmp	r3, #0
 8010720:	d10a      	bne.n	8010738 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010726:	f383 8811 	msr	BASEPRI, r3
 801072a:	f3bf 8f6f 	isb	sy
 801072e:	f3bf 8f4f 	dsb	sy
 8010732:	61fb      	str	r3, [r7, #28]
}
 8010734:	bf00      	nop
 8010736:	e7fe      	b.n	8010736 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801073e:	6850      	ldr	r0, [r2, #4]
 8010740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010742:	6892      	ldr	r2, [r2, #8]
 8010744:	4611      	mov	r1, r2
 8010746:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	f2c0 80ab 	blt.w	80108a6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010756:	695b      	ldr	r3, [r3, #20]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d004      	beq.n	8010766 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075e:	3304      	adds	r3, #4
 8010760:	4618      	mov	r0, r3
 8010762:	f7fe f913 	bl	800e98c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010766:	463b      	mov	r3, r7
 8010768:	4618      	mov	r0, r3
 801076a:	f7ff ff6b 	bl	8010644 <prvSampleTimeNow>
 801076e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b09      	cmp	r3, #9
 8010774:	f200 8096 	bhi.w	80108a4 <prvProcessReceivedCommands+0x19c>
 8010778:	a201      	add	r2, pc, #4	; (adr r2, 8010780 <prvProcessReceivedCommands+0x78>)
 801077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801077e:	bf00      	nop
 8010780:	080107a9 	.word	0x080107a9
 8010784:	080107a9 	.word	0x080107a9
 8010788:	080107a9 	.word	0x080107a9
 801078c:	0801081d 	.word	0x0801081d
 8010790:	08010831 	.word	0x08010831
 8010794:	0801087b 	.word	0x0801087b
 8010798:	080107a9 	.word	0x080107a9
 801079c:	080107a9 	.word	0x080107a9
 80107a0:	0801081d 	.word	0x0801081d
 80107a4:	08010831 	.word	0x08010831
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80107a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107ae:	f043 0301 	orr.w	r3, r3, #1
 80107b2:	b2da      	uxtb	r2, r3
 80107b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80107ba:	68ba      	ldr	r2, [r7, #8]
 80107bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107be:	699b      	ldr	r3, [r3, #24]
 80107c0:	18d1      	adds	r1, r2, r3
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107c8:	f7ff ff5c 	bl	8010684 <prvInsertTimerInActiveList>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d069      	beq.n	80108a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d4:	6a1b      	ldr	r3, [r3, #32]
 80107d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107e0:	f003 0304 	and.w	r3, r3, #4
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d05e      	beq.n	80108a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80107e8:	68ba      	ldr	r2, [r7, #8]
 80107ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ec:	699b      	ldr	r3, [r3, #24]
 80107ee:	441a      	add	r2, r3
 80107f0:	2300      	movs	r3, #0
 80107f2:	9300      	str	r3, [sp, #0]
 80107f4:	2300      	movs	r3, #0
 80107f6:	2100      	movs	r1, #0
 80107f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107fa:	f7ff fe05 	bl	8010408 <xTimerGenericCommand>
 80107fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010800:	6a3b      	ldr	r3, [r7, #32]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d14f      	bne.n	80108a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801080a:	f383 8811 	msr	BASEPRI, r3
 801080e:	f3bf 8f6f 	isb	sy
 8010812:	f3bf 8f4f 	dsb	sy
 8010816:	61bb      	str	r3, [r7, #24]
}
 8010818:	bf00      	nop
 801081a:	e7fe      	b.n	801081a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010822:	f023 0301 	bic.w	r3, r3, #1
 8010826:	b2da      	uxtb	r2, r3
 8010828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801082e:	e03a      	b.n	80108a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010836:	f043 0301 	orr.w	r3, r3, #1
 801083a:	b2da      	uxtb	r2, r3
 801083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010842:	68ba      	ldr	r2, [r7, #8]
 8010844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010846:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084a:	699b      	ldr	r3, [r3, #24]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d10a      	bne.n	8010866 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010854:	f383 8811 	msr	BASEPRI, r3
 8010858:	f3bf 8f6f 	isb	sy
 801085c:	f3bf 8f4f 	dsb	sy
 8010860:	617b      	str	r3, [r7, #20]
}
 8010862:	bf00      	nop
 8010864:	e7fe      	b.n	8010864 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010868:	699a      	ldr	r2, [r3, #24]
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	18d1      	adds	r1, r2, r3
 801086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010874:	f7ff ff06 	bl	8010684 <prvInsertTimerInActiveList>
					break;
 8010878:	e015      	b.n	80108a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010880:	f003 0302 	and.w	r3, r3, #2
 8010884:	2b00      	cmp	r3, #0
 8010886:	d103      	bne.n	8010890 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801088a:	f000 fbe5 	bl	8011058 <vPortFree>
 801088e:	e00a      	b.n	80108a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010896:	f023 0301 	bic.w	r3, r3, #1
 801089a:	b2da      	uxtb	r2, r3
 801089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80108a2:	e000      	b.n	80108a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80108a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80108a6:	4b08      	ldr	r3, [pc, #32]	; (80108c8 <prvProcessReceivedCommands+0x1c0>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	1d39      	adds	r1, r7, #4
 80108ac:	2200      	movs	r2, #0
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fe fb6e 	bl	800ef90 <xQueueReceive>
 80108b4:	4603      	mov	r3, r0
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	f47f af2a 	bne.w	8010710 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80108bc:	bf00      	nop
 80108be:	bf00      	nop
 80108c0:	3730      	adds	r7, #48	; 0x30
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	200012a0 	.word	0x200012a0

080108cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b088      	sub	sp, #32
 80108d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80108d2:	e048      	b.n	8010966 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80108d4:	4b2d      	ldr	r3, [pc, #180]	; (801098c <prvSwitchTimerLists+0xc0>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	68db      	ldr	r3, [r3, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108de:	4b2b      	ldr	r3, [pc, #172]	; (801098c <prvSwitchTimerLists+0xc0>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	68db      	ldr	r3, [r3, #12]
 80108e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	3304      	adds	r3, #4
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7fe f84d 	bl	800e98c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	6a1b      	ldr	r3, [r3, #32]
 80108f6:	68f8      	ldr	r0, [r7, #12]
 80108f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010900:	f003 0304 	and.w	r3, r3, #4
 8010904:	2b00      	cmp	r3, #0
 8010906:	d02e      	beq.n	8010966 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	699b      	ldr	r3, [r3, #24]
 801090c:	693a      	ldr	r2, [r7, #16]
 801090e:	4413      	add	r3, r2
 8010910:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010912:	68ba      	ldr	r2, [r7, #8]
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	429a      	cmp	r2, r3
 8010918:	d90e      	bls.n	8010938 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	68ba      	ldr	r2, [r7, #8]
 801091e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	68fa      	ldr	r2, [r7, #12]
 8010924:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010926:	4b19      	ldr	r3, [pc, #100]	; (801098c <prvSwitchTimerLists+0xc0>)
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	3304      	adds	r3, #4
 801092e:	4619      	mov	r1, r3
 8010930:	4610      	mov	r0, r2
 8010932:	f7fd fff2 	bl	800e91a <vListInsert>
 8010936:	e016      	b.n	8010966 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010938:	2300      	movs	r3, #0
 801093a:	9300      	str	r3, [sp, #0]
 801093c:	2300      	movs	r3, #0
 801093e:	693a      	ldr	r2, [r7, #16]
 8010940:	2100      	movs	r1, #0
 8010942:	68f8      	ldr	r0, [r7, #12]
 8010944:	f7ff fd60 	bl	8010408 <xTimerGenericCommand>
 8010948:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d10a      	bne.n	8010966 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010954:	f383 8811 	msr	BASEPRI, r3
 8010958:	f3bf 8f6f 	isb	sy
 801095c:	f3bf 8f4f 	dsb	sy
 8010960:	603b      	str	r3, [r7, #0]
}
 8010962:	bf00      	nop
 8010964:	e7fe      	b.n	8010964 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010966:	4b09      	ldr	r3, [pc, #36]	; (801098c <prvSwitchTimerLists+0xc0>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d1b1      	bne.n	80108d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010970:	4b06      	ldr	r3, [pc, #24]	; (801098c <prvSwitchTimerLists+0xc0>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010976:	4b06      	ldr	r3, [pc, #24]	; (8010990 <prvSwitchTimerLists+0xc4>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4a04      	ldr	r2, [pc, #16]	; (801098c <prvSwitchTimerLists+0xc0>)
 801097c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801097e:	4a04      	ldr	r2, [pc, #16]	; (8010990 <prvSwitchTimerLists+0xc4>)
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	6013      	str	r3, [r2, #0]
}
 8010984:	bf00      	nop
 8010986:	3718      	adds	r7, #24
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}
 801098c:	20001298 	.word	0x20001298
 8010990:	2000129c 	.word	0x2000129c

08010994 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801099a:	f000 f96b 	bl	8010c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801099e:	4b15      	ldr	r3, [pc, #84]	; (80109f4 <prvCheckForValidListAndQueue+0x60>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d120      	bne.n	80109e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80109a6:	4814      	ldr	r0, [pc, #80]	; (80109f8 <prvCheckForValidListAndQueue+0x64>)
 80109a8:	f7fd ff66 	bl	800e878 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80109ac:	4813      	ldr	r0, [pc, #76]	; (80109fc <prvCheckForValidListAndQueue+0x68>)
 80109ae:	f7fd ff63 	bl	800e878 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80109b2:	4b13      	ldr	r3, [pc, #76]	; (8010a00 <prvCheckForValidListAndQueue+0x6c>)
 80109b4:	4a10      	ldr	r2, [pc, #64]	; (80109f8 <prvCheckForValidListAndQueue+0x64>)
 80109b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80109b8:	4b12      	ldr	r3, [pc, #72]	; (8010a04 <prvCheckForValidListAndQueue+0x70>)
 80109ba:	4a10      	ldr	r2, [pc, #64]	; (80109fc <prvCheckForValidListAndQueue+0x68>)
 80109bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80109be:	2300      	movs	r3, #0
 80109c0:	9300      	str	r3, [sp, #0]
 80109c2:	4b11      	ldr	r3, [pc, #68]	; (8010a08 <prvCheckForValidListAndQueue+0x74>)
 80109c4:	4a11      	ldr	r2, [pc, #68]	; (8010a0c <prvCheckForValidListAndQueue+0x78>)
 80109c6:	2110      	movs	r1, #16
 80109c8:	200a      	movs	r0, #10
 80109ca:	f7fe f871 	bl	800eab0 <xQueueGenericCreateStatic>
 80109ce:	4603      	mov	r3, r0
 80109d0:	4a08      	ldr	r2, [pc, #32]	; (80109f4 <prvCheckForValidListAndQueue+0x60>)
 80109d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80109d4:	4b07      	ldr	r3, [pc, #28]	; (80109f4 <prvCheckForValidListAndQueue+0x60>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d005      	beq.n	80109e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80109dc:	4b05      	ldr	r3, [pc, #20]	; (80109f4 <prvCheckForValidListAndQueue+0x60>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	490b      	ldr	r1, [pc, #44]	; (8010a10 <prvCheckForValidListAndQueue+0x7c>)
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7fe fd44 	bl	800f470 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80109e8:	f000 f974 	bl	8010cd4 <vPortExitCritical>
}
 80109ec:	bf00      	nop
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	200012a0 	.word	0x200012a0
 80109f8:	20001270 	.word	0x20001270
 80109fc:	20001284 	.word	0x20001284
 8010a00:	20001298 	.word	0x20001298
 8010a04:	2000129c 	.word	0x2000129c
 8010a08:	2000134c 	.word	0x2000134c
 8010a0c:	200012ac 	.word	0x200012ac
 8010a10:	08011bb0 	.word	0x08011bb0

08010a14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010a14:	b480      	push	{r7}
 8010a16:	b085      	sub	sp, #20
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	60f8      	str	r0, [r7, #12]
 8010a1c:	60b9      	str	r1, [r7, #8]
 8010a1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	3b04      	subs	r3, #4
 8010a24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	3b04      	subs	r3, #4
 8010a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	f023 0201 	bic.w	r2, r3, #1
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	3b04      	subs	r3, #4
 8010a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010a44:	4a0c      	ldr	r2, [pc, #48]	; (8010a78 <pxPortInitialiseStack+0x64>)
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	3b14      	subs	r3, #20
 8010a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	3b04      	subs	r3, #4
 8010a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f06f 0202 	mvn.w	r2, #2
 8010a62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	3b20      	subs	r3, #32
 8010a68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3714      	adds	r7, #20
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr
 8010a78:	08010a7d 	.word	0x08010a7d

08010a7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b085      	sub	sp, #20
 8010a80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010a82:	2300      	movs	r3, #0
 8010a84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010a86:	4b12      	ldr	r3, [pc, #72]	; (8010ad0 <prvTaskExitError+0x54>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a8e:	d00a      	beq.n	8010aa6 <prvTaskExitError+0x2a>
	__asm volatile
 8010a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a94:	f383 8811 	msr	BASEPRI, r3
 8010a98:	f3bf 8f6f 	isb	sy
 8010a9c:	f3bf 8f4f 	dsb	sy
 8010aa0:	60fb      	str	r3, [r7, #12]
}
 8010aa2:	bf00      	nop
 8010aa4:	e7fe      	b.n	8010aa4 <prvTaskExitError+0x28>
	__asm volatile
 8010aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aaa:	f383 8811 	msr	BASEPRI, r3
 8010aae:	f3bf 8f6f 	isb	sy
 8010ab2:	f3bf 8f4f 	dsb	sy
 8010ab6:	60bb      	str	r3, [r7, #8]
}
 8010ab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010aba:	bf00      	nop
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d0fc      	beq.n	8010abc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010ac2:	bf00      	nop
 8010ac4:	bf00      	nop
 8010ac6:	3714      	adds	r7, #20
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ace:	4770      	bx	lr
 8010ad0:	20000098 	.word	0x20000098
	...

08010ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010ae0:	4b07      	ldr	r3, [pc, #28]	; (8010b00 <pxCurrentTCBConst2>)
 8010ae2:	6819      	ldr	r1, [r3, #0]
 8010ae4:	6808      	ldr	r0, [r1, #0]
 8010ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aea:	f380 8809 	msr	PSP, r0
 8010aee:	f3bf 8f6f 	isb	sy
 8010af2:	f04f 0000 	mov.w	r0, #0
 8010af6:	f380 8811 	msr	BASEPRI, r0
 8010afa:	4770      	bx	lr
 8010afc:	f3af 8000 	nop.w

08010b00 <pxCurrentTCBConst2>:
 8010b00:	20000d70 	.word	0x20000d70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010b04:	bf00      	nop
 8010b06:	bf00      	nop

08010b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010b08:	4808      	ldr	r0, [pc, #32]	; (8010b2c <prvPortStartFirstTask+0x24>)
 8010b0a:	6800      	ldr	r0, [r0, #0]
 8010b0c:	6800      	ldr	r0, [r0, #0]
 8010b0e:	f380 8808 	msr	MSP, r0
 8010b12:	f04f 0000 	mov.w	r0, #0
 8010b16:	f380 8814 	msr	CONTROL, r0
 8010b1a:	b662      	cpsie	i
 8010b1c:	b661      	cpsie	f
 8010b1e:	f3bf 8f4f 	dsb	sy
 8010b22:	f3bf 8f6f 	isb	sy
 8010b26:	df00      	svc	0
 8010b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010b2a:	bf00      	nop
 8010b2c:	e000ed08 	.word	0xe000ed08

08010b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b086      	sub	sp, #24
 8010b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010b36:	4b46      	ldr	r3, [pc, #280]	; (8010c50 <xPortStartScheduler+0x120>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4a46      	ldr	r2, [pc, #280]	; (8010c54 <xPortStartScheduler+0x124>)
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	d10a      	bne.n	8010b56 <xPortStartScheduler+0x26>
	__asm volatile
 8010b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b44:	f383 8811 	msr	BASEPRI, r3
 8010b48:	f3bf 8f6f 	isb	sy
 8010b4c:	f3bf 8f4f 	dsb	sy
 8010b50:	613b      	str	r3, [r7, #16]
}
 8010b52:	bf00      	nop
 8010b54:	e7fe      	b.n	8010b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010b56:	4b3e      	ldr	r3, [pc, #248]	; (8010c50 <xPortStartScheduler+0x120>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	4a3f      	ldr	r2, [pc, #252]	; (8010c58 <xPortStartScheduler+0x128>)
 8010b5c:	4293      	cmp	r3, r2
 8010b5e:	d10a      	bne.n	8010b76 <xPortStartScheduler+0x46>
	__asm volatile
 8010b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b64:	f383 8811 	msr	BASEPRI, r3
 8010b68:	f3bf 8f6f 	isb	sy
 8010b6c:	f3bf 8f4f 	dsb	sy
 8010b70:	60fb      	str	r3, [r7, #12]
}
 8010b72:	bf00      	nop
 8010b74:	e7fe      	b.n	8010b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010b76:	4b39      	ldr	r3, [pc, #228]	; (8010c5c <xPortStartScheduler+0x12c>)
 8010b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	781b      	ldrb	r3, [r3, #0]
 8010b7e:	b2db      	uxtb	r3, r3
 8010b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	22ff      	movs	r2, #255	; 0xff
 8010b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010b90:	78fb      	ldrb	r3, [r7, #3]
 8010b92:	b2db      	uxtb	r3, r3
 8010b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010b98:	b2da      	uxtb	r2, r3
 8010b9a:	4b31      	ldr	r3, [pc, #196]	; (8010c60 <xPortStartScheduler+0x130>)
 8010b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010b9e:	4b31      	ldr	r3, [pc, #196]	; (8010c64 <xPortStartScheduler+0x134>)
 8010ba0:	2207      	movs	r2, #7
 8010ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ba4:	e009      	b.n	8010bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010ba6:	4b2f      	ldr	r3, [pc, #188]	; (8010c64 <xPortStartScheduler+0x134>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	3b01      	subs	r3, #1
 8010bac:	4a2d      	ldr	r2, [pc, #180]	; (8010c64 <xPortStartScheduler+0x134>)
 8010bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010bb0:	78fb      	ldrb	r3, [r7, #3]
 8010bb2:	b2db      	uxtb	r3, r3
 8010bb4:	005b      	lsls	r3, r3, #1
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010bba:	78fb      	ldrb	r3, [r7, #3]
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bc2:	2b80      	cmp	r3, #128	; 0x80
 8010bc4:	d0ef      	beq.n	8010ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010bc6:	4b27      	ldr	r3, [pc, #156]	; (8010c64 <xPortStartScheduler+0x134>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f1c3 0307 	rsb	r3, r3, #7
 8010bce:	2b04      	cmp	r3, #4
 8010bd0:	d00a      	beq.n	8010be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd6:	f383 8811 	msr	BASEPRI, r3
 8010bda:	f3bf 8f6f 	isb	sy
 8010bde:	f3bf 8f4f 	dsb	sy
 8010be2:	60bb      	str	r3, [r7, #8]
}
 8010be4:	bf00      	nop
 8010be6:	e7fe      	b.n	8010be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010be8:	4b1e      	ldr	r3, [pc, #120]	; (8010c64 <xPortStartScheduler+0x134>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	021b      	lsls	r3, r3, #8
 8010bee:	4a1d      	ldr	r2, [pc, #116]	; (8010c64 <xPortStartScheduler+0x134>)
 8010bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010bf2:	4b1c      	ldr	r3, [pc, #112]	; (8010c64 <xPortStartScheduler+0x134>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010bfa:	4a1a      	ldr	r2, [pc, #104]	; (8010c64 <xPortStartScheduler+0x134>)
 8010bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	b2da      	uxtb	r2, r3
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010c06:	4b18      	ldr	r3, [pc, #96]	; (8010c68 <xPortStartScheduler+0x138>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	4a17      	ldr	r2, [pc, #92]	; (8010c68 <xPortStartScheduler+0x138>)
 8010c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010c12:	4b15      	ldr	r3, [pc, #84]	; (8010c68 <xPortStartScheduler+0x138>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4a14      	ldr	r2, [pc, #80]	; (8010c68 <xPortStartScheduler+0x138>)
 8010c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010c1e:	f000 f8dd 	bl	8010ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010c22:	4b12      	ldr	r3, [pc, #72]	; (8010c6c <xPortStartScheduler+0x13c>)
 8010c24:	2200      	movs	r2, #0
 8010c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010c28:	f000 f8fc 	bl	8010e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010c2c:	4b10      	ldr	r3, [pc, #64]	; (8010c70 <xPortStartScheduler+0x140>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4a0f      	ldr	r2, [pc, #60]	; (8010c70 <xPortStartScheduler+0x140>)
 8010c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010c38:	f7ff ff66 	bl	8010b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010c3c:	f7ff f82a 	bl	800fc94 <vTaskSwitchContext>
	prvTaskExitError();
 8010c40:	f7ff ff1c 	bl	8010a7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010c44:	2300      	movs	r3, #0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3718      	adds	r7, #24
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	e000ed00 	.word	0xe000ed00
 8010c54:	410fc271 	.word	0x410fc271
 8010c58:	410fc270 	.word	0x410fc270
 8010c5c:	e000e400 	.word	0xe000e400
 8010c60:	2000139c 	.word	0x2000139c
 8010c64:	200013a0 	.word	0x200013a0
 8010c68:	e000ed20 	.word	0xe000ed20
 8010c6c:	20000098 	.word	0x20000098
 8010c70:	e000ef34 	.word	0xe000ef34

08010c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010c74:	b480      	push	{r7}
 8010c76:	b083      	sub	sp, #12
 8010c78:	af00      	add	r7, sp, #0
	__asm volatile
 8010c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7e:	f383 8811 	msr	BASEPRI, r3
 8010c82:	f3bf 8f6f 	isb	sy
 8010c86:	f3bf 8f4f 	dsb	sy
 8010c8a:	607b      	str	r3, [r7, #4]
}
 8010c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010c8e:	4b0f      	ldr	r3, [pc, #60]	; (8010ccc <vPortEnterCritical+0x58>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	3301      	adds	r3, #1
 8010c94:	4a0d      	ldr	r2, [pc, #52]	; (8010ccc <vPortEnterCritical+0x58>)
 8010c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010c98:	4b0c      	ldr	r3, [pc, #48]	; (8010ccc <vPortEnterCritical+0x58>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d10f      	bne.n	8010cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010ca0:	4b0b      	ldr	r3, [pc, #44]	; (8010cd0 <vPortEnterCritical+0x5c>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	b2db      	uxtb	r3, r3
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d00a      	beq.n	8010cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cae:	f383 8811 	msr	BASEPRI, r3
 8010cb2:	f3bf 8f6f 	isb	sy
 8010cb6:	f3bf 8f4f 	dsb	sy
 8010cba:	603b      	str	r3, [r7, #0]
}
 8010cbc:	bf00      	nop
 8010cbe:	e7fe      	b.n	8010cbe <vPortEnterCritical+0x4a>
	}
}
 8010cc0:	bf00      	nop
 8010cc2:	370c      	adds	r7, #12
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr
 8010ccc:	20000098 	.word	0x20000098
 8010cd0:	e000ed04 	.word	0xe000ed04

08010cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	b083      	sub	sp, #12
 8010cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010cda:	4b12      	ldr	r3, [pc, #72]	; (8010d24 <vPortExitCritical+0x50>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d10a      	bne.n	8010cf8 <vPortExitCritical+0x24>
	__asm volatile
 8010ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce6:	f383 8811 	msr	BASEPRI, r3
 8010cea:	f3bf 8f6f 	isb	sy
 8010cee:	f3bf 8f4f 	dsb	sy
 8010cf2:	607b      	str	r3, [r7, #4]
}
 8010cf4:	bf00      	nop
 8010cf6:	e7fe      	b.n	8010cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010cf8:	4b0a      	ldr	r3, [pc, #40]	; (8010d24 <vPortExitCritical+0x50>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	3b01      	subs	r3, #1
 8010cfe:	4a09      	ldr	r2, [pc, #36]	; (8010d24 <vPortExitCritical+0x50>)
 8010d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010d02:	4b08      	ldr	r3, [pc, #32]	; (8010d24 <vPortExitCritical+0x50>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d105      	bne.n	8010d16 <vPortExitCritical+0x42>
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	f383 8811 	msr	BASEPRI, r3
}
 8010d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010d16:	bf00      	nop
 8010d18:	370c      	adds	r7, #12
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	20000098 	.word	0x20000098
	...

08010d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010d30:	f3ef 8009 	mrs	r0, PSP
 8010d34:	f3bf 8f6f 	isb	sy
 8010d38:	4b15      	ldr	r3, [pc, #84]	; (8010d90 <pxCurrentTCBConst>)
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	f01e 0f10 	tst.w	lr, #16
 8010d40:	bf08      	it	eq
 8010d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d4a:	6010      	str	r0, [r2, #0]
 8010d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010d54:	f380 8811 	msr	BASEPRI, r0
 8010d58:	f3bf 8f4f 	dsb	sy
 8010d5c:	f3bf 8f6f 	isb	sy
 8010d60:	f7fe ff98 	bl	800fc94 <vTaskSwitchContext>
 8010d64:	f04f 0000 	mov.w	r0, #0
 8010d68:	f380 8811 	msr	BASEPRI, r0
 8010d6c:	bc09      	pop	{r0, r3}
 8010d6e:	6819      	ldr	r1, [r3, #0]
 8010d70:	6808      	ldr	r0, [r1, #0]
 8010d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d76:	f01e 0f10 	tst.w	lr, #16
 8010d7a:	bf08      	it	eq
 8010d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010d80:	f380 8809 	msr	PSP, r0
 8010d84:	f3bf 8f6f 	isb	sy
 8010d88:	4770      	bx	lr
 8010d8a:	bf00      	nop
 8010d8c:	f3af 8000 	nop.w

08010d90 <pxCurrentTCBConst>:
 8010d90:	20000d70 	.word	0x20000d70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010d94:	bf00      	nop
 8010d96:	bf00      	nop

08010d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b082      	sub	sp, #8
 8010d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8010d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	607b      	str	r3, [r7, #4]
}
 8010db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010db2:	f7fe feb5 	bl	800fb20 <xTaskIncrementTick>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d003      	beq.n	8010dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010dbc:	4b06      	ldr	r3, [pc, #24]	; (8010dd8 <xPortSysTickHandler+0x40>)
 8010dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dc2:	601a      	str	r2, [r3, #0]
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	f383 8811 	msr	BASEPRI, r3
}
 8010dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010dd0:	bf00      	nop
 8010dd2:	3708      	adds	r7, #8
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	e000ed04 	.word	0xe000ed04

08010ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010ddc:	b480      	push	{r7}
 8010dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010de0:	4b0b      	ldr	r3, [pc, #44]	; (8010e10 <vPortSetupTimerInterrupt+0x34>)
 8010de2:	2200      	movs	r2, #0
 8010de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010de6:	4b0b      	ldr	r3, [pc, #44]	; (8010e14 <vPortSetupTimerInterrupt+0x38>)
 8010de8:	2200      	movs	r2, #0
 8010dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010dec:	4b0a      	ldr	r3, [pc, #40]	; (8010e18 <vPortSetupTimerInterrupt+0x3c>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	4a0a      	ldr	r2, [pc, #40]	; (8010e1c <vPortSetupTimerInterrupt+0x40>)
 8010df2:	fba2 2303 	umull	r2, r3, r2, r3
 8010df6:	099b      	lsrs	r3, r3, #6
 8010df8:	4a09      	ldr	r2, [pc, #36]	; (8010e20 <vPortSetupTimerInterrupt+0x44>)
 8010dfa:	3b01      	subs	r3, #1
 8010dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010dfe:	4b04      	ldr	r3, [pc, #16]	; (8010e10 <vPortSetupTimerInterrupt+0x34>)
 8010e00:	2207      	movs	r2, #7
 8010e02:	601a      	str	r2, [r3, #0]
}
 8010e04:	bf00      	nop
 8010e06:	46bd      	mov	sp, r7
 8010e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0c:	4770      	bx	lr
 8010e0e:	bf00      	nop
 8010e10:	e000e010 	.word	0xe000e010
 8010e14:	e000e018 	.word	0xe000e018
 8010e18:	20000000 	.word	0x20000000
 8010e1c:	10624dd3 	.word	0x10624dd3
 8010e20:	e000e014 	.word	0xe000e014

08010e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010e34 <vPortEnableVFP+0x10>
 8010e28:	6801      	ldr	r1, [r0, #0]
 8010e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010e2e:	6001      	str	r1, [r0, #0]
 8010e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010e32:	bf00      	nop
 8010e34:	e000ed88 	.word	0xe000ed88

08010e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010e38:	b480      	push	{r7}
 8010e3a:	b085      	sub	sp, #20
 8010e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010e3e:	f3ef 8305 	mrs	r3, IPSR
 8010e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2b0f      	cmp	r3, #15
 8010e48:	d914      	bls.n	8010e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010e4a:	4a17      	ldr	r2, [pc, #92]	; (8010ea8 <vPortValidateInterruptPriority+0x70>)
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	4413      	add	r3, r2
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010e54:	4b15      	ldr	r3, [pc, #84]	; (8010eac <vPortValidateInterruptPriority+0x74>)
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	7afa      	ldrb	r2, [r7, #11]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d20a      	bcs.n	8010e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	607b      	str	r3, [r7, #4]
}
 8010e70:	bf00      	nop
 8010e72:	e7fe      	b.n	8010e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010e74:	4b0e      	ldr	r3, [pc, #56]	; (8010eb0 <vPortValidateInterruptPriority+0x78>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010e7c:	4b0d      	ldr	r3, [pc, #52]	; (8010eb4 <vPortValidateInterruptPriority+0x7c>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d90a      	bls.n	8010e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e88:	f383 8811 	msr	BASEPRI, r3
 8010e8c:	f3bf 8f6f 	isb	sy
 8010e90:	f3bf 8f4f 	dsb	sy
 8010e94:	603b      	str	r3, [r7, #0]
}
 8010e96:	bf00      	nop
 8010e98:	e7fe      	b.n	8010e98 <vPortValidateInterruptPriority+0x60>
	}
 8010e9a:	bf00      	nop
 8010e9c:	3714      	adds	r7, #20
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr
 8010ea6:	bf00      	nop
 8010ea8:	e000e3f0 	.word	0xe000e3f0
 8010eac:	2000139c 	.word	0x2000139c
 8010eb0:	e000ed0c 	.word	0xe000ed0c
 8010eb4:	200013a0 	.word	0x200013a0

08010eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b08a      	sub	sp, #40	; 0x28
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010ec4:	f7fe fd70 	bl	800f9a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010ec8:	4b5d      	ldr	r3, [pc, #372]	; (8011040 <pvPortMalloc+0x188>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d101      	bne.n	8010ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010ed0:	f000 f924 	bl	801111c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010ed4:	4b5b      	ldr	r3, [pc, #364]	; (8011044 <pvPortMalloc+0x18c>)
 8010ed6:	681a      	ldr	r2, [r3, #0]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	4013      	ands	r3, r2
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	f040 8093 	bne.w	8011008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d01d      	beq.n	8010f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010ee8:	2208      	movs	r2, #8
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	4413      	add	r3, r2
 8010eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f003 0307 	and.w	r3, r3, #7
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d014      	beq.n	8010f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f023 0307 	bic.w	r3, r3, #7
 8010f00:	3308      	adds	r3, #8
 8010f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f003 0307 	and.w	r3, r3, #7
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d00a      	beq.n	8010f24 <pvPortMalloc+0x6c>
	__asm volatile
 8010f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f12:	f383 8811 	msr	BASEPRI, r3
 8010f16:	f3bf 8f6f 	isb	sy
 8010f1a:	f3bf 8f4f 	dsb	sy
 8010f1e:	617b      	str	r3, [r7, #20]
}
 8010f20:	bf00      	nop
 8010f22:	e7fe      	b.n	8010f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d06e      	beq.n	8011008 <pvPortMalloc+0x150>
 8010f2a:	4b47      	ldr	r3, [pc, #284]	; (8011048 <pvPortMalloc+0x190>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d869      	bhi.n	8011008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010f34:	4b45      	ldr	r3, [pc, #276]	; (801104c <pvPortMalloc+0x194>)
 8010f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010f38:	4b44      	ldr	r3, [pc, #272]	; (801104c <pvPortMalloc+0x194>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010f3e:	e004      	b.n	8010f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d903      	bls.n	8010f5c <pvPortMalloc+0xa4>
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d1f1      	bne.n	8010f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010f5c:	4b38      	ldr	r3, [pc, #224]	; (8011040 <pvPortMalloc+0x188>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d050      	beq.n	8011008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010f66:	6a3b      	ldr	r3, [r7, #32]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	2208      	movs	r2, #8
 8010f6c:	4413      	add	r3, r2
 8010f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f72:	681a      	ldr	r2, [r3, #0]
 8010f74:	6a3b      	ldr	r3, [r7, #32]
 8010f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7a:	685a      	ldr	r2, [r3, #4]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	1ad2      	subs	r2, r2, r3
 8010f80:	2308      	movs	r3, #8
 8010f82:	005b      	lsls	r3, r3, #1
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d91f      	bls.n	8010fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f90:	69bb      	ldr	r3, [r7, #24]
 8010f92:	f003 0307 	and.w	r3, r3, #7
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d00a      	beq.n	8010fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8010f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f9e:	f383 8811 	msr	BASEPRI, r3
 8010fa2:	f3bf 8f6f 	isb	sy
 8010fa6:	f3bf 8f4f 	dsb	sy
 8010faa:	613b      	str	r3, [r7, #16]
}
 8010fac:	bf00      	nop
 8010fae:	e7fe      	b.n	8010fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb2:	685a      	ldr	r2, [r3, #4]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	1ad2      	subs	r2, r2, r3
 8010fb8:	69bb      	ldr	r3, [r7, #24]
 8010fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbe:	687a      	ldr	r2, [r7, #4]
 8010fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010fc2:	69b8      	ldr	r0, [r7, #24]
 8010fc4:	f000 f90c 	bl	80111e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010fc8:	4b1f      	ldr	r3, [pc, #124]	; (8011048 <pvPortMalloc+0x190>)
 8010fca:	681a      	ldr	r2, [r3, #0]
 8010fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fce:	685b      	ldr	r3, [r3, #4]
 8010fd0:	1ad3      	subs	r3, r2, r3
 8010fd2:	4a1d      	ldr	r2, [pc, #116]	; (8011048 <pvPortMalloc+0x190>)
 8010fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010fd6:	4b1c      	ldr	r3, [pc, #112]	; (8011048 <pvPortMalloc+0x190>)
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	4b1d      	ldr	r3, [pc, #116]	; (8011050 <pvPortMalloc+0x198>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d203      	bcs.n	8010fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010fe2:	4b19      	ldr	r3, [pc, #100]	; (8011048 <pvPortMalloc+0x190>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	4a1a      	ldr	r2, [pc, #104]	; (8011050 <pvPortMalloc+0x198>)
 8010fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fec:	685a      	ldr	r2, [r3, #4]
 8010fee:	4b15      	ldr	r3, [pc, #84]	; (8011044 <pvPortMalloc+0x18c>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	431a      	orrs	r2, r3
 8010ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010ffe:	4b15      	ldr	r3, [pc, #84]	; (8011054 <pvPortMalloc+0x19c>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	3301      	adds	r3, #1
 8011004:	4a13      	ldr	r2, [pc, #76]	; (8011054 <pvPortMalloc+0x19c>)
 8011006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011008:	f7fe fcdc 	bl	800f9c4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d101      	bne.n	8011016 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011012:	f7ef fa7d 	bl	8000510 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011016:	69fb      	ldr	r3, [r7, #28]
 8011018:	f003 0307 	and.w	r3, r3, #7
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00a      	beq.n	8011036 <pvPortMalloc+0x17e>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	60fb      	str	r3, [r7, #12]
}
 8011032:	bf00      	nop
 8011034:	e7fe      	b.n	8011034 <pvPortMalloc+0x17c>
	return pvReturn;
 8011036:	69fb      	ldr	r3, [r7, #28]
}
 8011038:	4618      	mov	r0, r3
 801103a:	3728      	adds	r7, #40	; 0x28
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	200093ac 	.word	0x200093ac
 8011044:	200093c0 	.word	0x200093c0
 8011048:	200093b0 	.word	0x200093b0
 801104c:	200093a4 	.word	0x200093a4
 8011050:	200093b4 	.word	0x200093b4
 8011054:	200093b8 	.word	0x200093b8

08011058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b086      	sub	sp, #24
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d04d      	beq.n	8011106 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801106a:	2308      	movs	r3, #8
 801106c:	425b      	negs	r3, r3
 801106e:	697a      	ldr	r2, [r7, #20]
 8011070:	4413      	add	r3, r2
 8011072:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	685a      	ldr	r2, [r3, #4]
 801107c:	4b24      	ldr	r3, [pc, #144]	; (8011110 <vPortFree+0xb8>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	4013      	ands	r3, r2
 8011082:	2b00      	cmp	r3, #0
 8011084:	d10a      	bne.n	801109c <vPortFree+0x44>
	__asm volatile
 8011086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108a:	f383 8811 	msr	BASEPRI, r3
 801108e:	f3bf 8f6f 	isb	sy
 8011092:	f3bf 8f4f 	dsb	sy
 8011096:	60fb      	str	r3, [r7, #12]
}
 8011098:	bf00      	nop
 801109a:	e7fe      	b.n	801109a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d00a      	beq.n	80110ba <vPortFree+0x62>
	__asm volatile
 80110a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	60bb      	str	r3, [r7, #8]
}
 80110b6:	bf00      	nop
 80110b8:	e7fe      	b.n	80110b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	685a      	ldr	r2, [r3, #4]
 80110be:	4b14      	ldr	r3, [pc, #80]	; (8011110 <vPortFree+0xb8>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	4013      	ands	r3, r2
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d01e      	beq.n	8011106 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d11a      	bne.n	8011106 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	685a      	ldr	r2, [r3, #4]
 80110d4:	4b0e      	ldr	r3, [pc, #56]	; (8011110 <vPortFree+0xb8>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	43db      	mvns	r3, r3
 80110da:	401a      	ands	r2, r3
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80110e0:	f7fe fc62 	bl	800f9a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	685a      	ldr	r2, [r3, #4]
 80110e8:	4b0a      	ldr	r3, [pc, #40]	; (8011114 <vPortFree+0xbc>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4413      	add	r3, r2
 80110ee:	4a09      	ldr	r2, [pc, #36]	; (8011114 <vPortFree+0xbc>)
 80110f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80110f2:	6938      	ldr	r0, [r7, #16]
 80110f4:	f000 f874 	bl	80111e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80110f8:	4b07      	ldr	r3, [pc, #28]	; (8011118 <vPortFree+0xc0>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	3301      	adds	r3, #1
 80110fe:	4a06      	ldr	r2, [pc, #24]	; (8011118 <vPortFree+0xc0>)
 8011100:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011102:	f7fe fc5f 	bl	800f9c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011106:	bf00      	nop
 8011108:	3718      	adds	r7, #24
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	200093c0 	.word	0x200093c0
 8011114:	200093b0 	.word	0x200093b0
 8011118:	200093bc 	.word	0x200093bc

0801111c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801111c:	b480      	push	{r7}
 801111e:	b085      	sub	sp, #20
 8011120:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011126:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011128:	4b27      	ldr	r3, [pc, #156]	; (80111c8 <prvHeapInit+0xac>)
 801112a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	f003 0307 	and.w	r3, r3, #7
 8011132:	2b00      	cmp	r3, #0
 8011134:	d00c      	beq.n	8011150 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	3307      	adds	r3, #7
 801113a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	f023 0307 	bic.w	r3, r3, #7
 8011142:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011144:	68ba      	ldr	r2, [r7, #8]
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	1ad3      	subs	r3, r2, r3
 801114a:	4a1f      	ldr	r2, [pc, #124]	; (80111c8 <prvHeapInit+0xac>)
 801114c:	4413      	add	r3, r2
 801114e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011154:	4a1d      	ldr	r2, [pc, #116]	; (80111cc <prvHeapInit+0xb0>)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801115a:	4b1c      	ldr	r3, [pc, #112]	; (80111cc <prvHeapInit+0xb0>)
 801115c:	2200      	movs	r2, #0
 801115e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	68ba      	ldr	r2, [r7, #8]
 8011164:	4413      	add	r3, r2
 8011166:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011168:	2208      	movs	r2, #8
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	1a9b      	subs	r3, r3, r2
 801116e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	f023 0307 	bic.w	r3, r3, #7
 8011176:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	4a15      	ldr	r2, [pc, #84]	; (80111d0 <prvHeapInit+0xb4>)
 801117c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801117e:	4b14      	ldr	r3, [pc, #80]	; (80111d0 <prvHeapInit+0xb4>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2200      	movs	r2, #0
 8011184:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011186:	4b12      	ldr	r3, [pc, #72]	; (80111d0 <prvHeapInit+0xb4>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	2200      	movs	r2, #0
 801118c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	68fa      	ldr	r2, [r7, #12]
 8011196:	1ad2      	subs	r2, r2, r3
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801119c:	4b0c      	ldr	r3, [pc, #48]	; (80111d0 <prvHeapInit+0xb4>)
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	4a0a      	ldr	r2, [pc, #40]	; (80111d4 <prvHeapInit+0xb8>)
 80111aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	685b      	ldr	r3, [r3, #4]
 80111b0:	4a09      	ldr	r2, [pc, #36]	; (80111d8 <prvHeapInit+0xbc>)
 80111b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80111b4:	4b09      	ldr	r3, [pc, #36]	; (80111dc <prvHeapInit+0xc0>)
 80111b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80111ba:	601a      	str	r2, [r3, #0]
}
 80111bc:	bf00      	nop
 80111be:	3714      	adds	r7, #20
 80111c0:	46bd      	mov	sp, r7
 80111c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c6:	4770      	bx	lr
 80111c8:	200013a4 	.word	0x200013a4
 80111cc:	200093a4 	.word	0x200093a4
 80111d0:	200093ac 	.word	0x200093ac
 80111d4:	200093b4 	.word	0x200093b4
 80111d8:	200093b0 	.word	0x200093b0
 80111dc:	200093c0 	.word	0x200093c0

080111e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80111e0:	b480      	push	{r7}
 80111e2:	b085      	sub	sp, #20
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80111e8:	4b28      	ldr	r3, [pc, #160]	; (801128c <prvInsertBlockIntoFreeList+0xac>)
 80111ea:	60fb      	str	r3, [r7, #12]
 80111ec:	e002      	b.n	80111f4 <prvInsertBlockIntoFreeList+0x14>
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	60fb      	str	r3, [r7, #12]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	687a      	ldr	r2, [r7, #4]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d8f7      	bhi.n	80111ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	685b      	ldr	r3, [r3, #4]
 8011206:	68ba      	ldr	r2, [r7, #8]
 8011208:	4413      	add	r3, r2
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	429a      	cmp	r2, r3
 801120e:	d108      	bne.n	8011222 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	685a      	ldr	r2, [r3, #4]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	441a      	add	r2, r3
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	68ba      	ldr	r2, [r7, #8]
 801122c:	441a      	add	r2, r3
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	429a      	cmp	r2, r3
 8011234:	d118      	bne.n	8011268 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	681a      	ldr	r2, [r3, #0]
 801123a:	4b15      	ldr	r3, [pc, #84]	; (8011290 <prvInsertBlockIntoFreeList+0xb0>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	429a      	cmp	r2, r3
 8011240:	d00d      	beq.n	801125e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	685a      	ldr	r2, [r3, #4]
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	441a      	add	r2, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	601a      	str	r2, [r3, #0]
 801125c:	e008      	b.n	8011270 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801125e:	4b0c      	ldr	r3, [pc, #48]	; (8011290 <prvInsertBlockIntoFreeList+0xb0>)
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	601a      	str	r2, [r3, #0]
 8011266:	e003      	b.n	8011270 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011270:	68fa      	ldr	r2, [r7, #12]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	429a      	cmp	r2, r3
 8011276:	d002      	beq.n	801127e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801127e:	bf00      	nop
 8011280:	3714      	adds	r7, #20
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	200093a4 	.word	0x200093a4
 8011290:	200093ac 	.word	0x200093ac

08011294 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8011298:	2200      	movs	r2, #0
 801129a:	490e      	ldr	r1, [pc, #56]	; (80112d4 <MX_USB_HOST_Init+0x40>)
 801129c:	480e      	ldr	r0, [pc, #56]	; (80112d8 <MX_USB_HOST_Init+0x44>)
 801129e:	f7f9 fa47 	bl	800a730 <USBH_Init>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d001      	beq.n	80112ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80112a8:	f7ef fd40 	bl	8000d2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 80112ac:	490b      	ldr	r1, [pc, #44]	; (80112dc <MX_USB_HOST_Init+0x48>)
 80112ae:	480a      	ldr	r0, [pc, #40]	; (80112d8 <MX_USB_HOST_Init+0x44>)
 80112b0:	f7f9 fb0d 	bl	800a8ce <USBH_RegisterClass>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d001      	beq.n	80112be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80112ba:	f7ef fd37 	bl	8000d2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80112be:	4806      	ldr	r0, [pc, #24]	; (80112d8 <MX_USB_HOST_Init+0x44>)
 80112c0:	f7f9 fb91 	bl	800a9e6 <USBH_Start>
 80112c4:	4603      	mov	r3, r0
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d001      	beq.n	80112ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80112ca:	f7ef fd2f 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80112ce:	bf00      	nop
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	bf00      	nop
 80112d4:	080112e1 	.word	0x080112e1
 80112d8:	200093c4 	.word	0x200093c4
 80112dc:	2000000c 	.word	0x2000000c

080112e0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80112e0:	b480      	push	{r7}
 80112e2:	b083      	sub	sp, #12
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	460b      	mov	r3, r1
 80112ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80112ec:	78fb      	ldrb	r3, [r7, #3]
 80112ee:	3b01      	subs	r3, #1
 80112f0:	2b04      	cmp	r3, #4
 80112f2:	d819      	bhi.n	8011328 <USBH_UserProcess+0x48>
 80112f4:	a201      	add	r2, pc, #4	; (adr r2, 80112fc <USBH_UserProcess+0x1c>)
 80112f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112fa:	bf00      	nop
 80112fc:	08011329 	.word	0x08011329
 8011300:	08011319 	.word	0x08011319
 8011304:	08011329 	.word	0x08011329
 8011308:	08011321 	.word	0x08011321
 801130c:	08011311 	.word	0x08011311
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011310:	4b09      	ldr	r3, [pc, #36]	; (8011338 <USBH_UserProcess+0x58>)
 8011312:	2203      	movs	r2, #3
 8011314:	701a      	strb	r2, [r3, #0]
  break;
 8011316:	e008      	b.n	801132a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011318:	4b07      	ldr	r3, [pc, #28]	; (8011338 <USBH_UserProcess+0x58>)
 801131a:	2202      	movs	r2, #2
 801131c:	701a      	strb	r2, [r3, #0]
  break;
 801131e:	e004      	b.n	801132a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011320:	4b05      	ldr	r3, [pc, #20]	; (8011338 <USBH_UserProcess+0x58>)
 8011322:	2201      	movs	r2, #1
 8011324:	701a      	strb	r2, [r3, #0]
  break;
 8011326:	e000      	b.n	801132a <USBH_UserProcess+0x4a>

  default:
  break;
 8011328:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801132a:	bf00      	nop
 801132c:	370c      	adds	r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr
 8011336:	bf00      	nop
 8011338:	200097a8 	.word	0x200097a8

0801133c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b08a      	sub	sp, #40	; 0x28
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011344:	f107 0314 	add.w	r3, r7, #20
 8011348:	2200      	movs	r2, #0
 801134a:	601a      	str	r2, [r3, #0]
 801134c:	605a      	str	r2, [r3, #4]
 801134e:	609a      	str	r2, [r3, #8]
 8011350:	60da      	str	r2, [r3, #12]
 8011352:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	4a24      	ldr	r2, [pc, #144]	; (80113ec <HAL_HCD_MspInit+0xb0>)
 801135a:	4293      	cmp	r3, r2
 801135c:	d141      	bne.n	80113e2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801135e:	2300      	movs	r3, #0
 8011360:	613b      	str	r3, [r7, #16]
 8011362:	4b23      	ldr	r3, [pc, #140]	; (80113f0 <HAL_HCD_MspInit+0xb4>)
 8011364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011366:	4a22      	ldr	r2, [pc, #136]	; (80113f0 <HAL_HCD_MspInit+0xb4>)
 8011368:	f043 0302 	orr.w	r3, r3, #2
 801136c:	6313      	str	r3, [r2, #48]	; 0x30
 801136e:	4b20      	ldr	r3, [pc, #128]	; (80113f0 <HAL_HCD_MspInit+0xb4>)
 8011370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011372:	f003 0302 	and.w	r3, r3, #2
 8011376:	613b      	str	r3, [r7, #16]
 8011378:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 801137a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 801137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011380:	2302      	movs	r3, #2
 8011382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011384:	2300      	movs	r3, #0
 8011386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011388:	2300      	movs	r3, #0
 801138a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801138c:	230c      	movs	r3, #12
 801138e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011390:	f107 0314 	add.w	r3, r7, #20
 8011394:	4619      	mov	r1, r3
 8011396:	4817      	ldr	r0, [pc, #92]	; (80113f4 <HAL_HCD_MspInit+0xb8>)
 8011398:	f7f0 feaa 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 801139c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80113a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80113a2:	2300      	movs	r3, #0
 80113a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113a6:	2300      	movs	r3, #0
 80113a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80113aa:	f107 0314 	add.w	r3, r7, #20
 80113ae:	4619      	mov	r1, r3
 80113b0:	4810      	ldr	r0, [pc, #64]	; (80113f4 <HAL_HCD_MspInit+0xb8>)
 80113b2:	f7f0 fe9d 	bl	80020f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80113b6:	2300      	movs	r3, #0
 80113b8:	60fb      	str	r3, [r7, #12]
 80113ba:	4b0d      	ldr	r3, [pc, #52]	; (80113f0 <HAL_HCD_MspInit+0xb4>)
 80113bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113be:	4a0c      	ldr	r2, [pc, #48]	; (80113f0 <HAL_HCD_MspInit+0xb4>)
 80113c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80113c4:	6313      	str	r3, [r2, #48]	; 0x30
 80113c6:	4b0a      	ldr	r3, [pc, #40]	; (80113f0 <HAL_HCD_MspInit+0xb4>)
 80113c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80113ce:	60fb      	str	r3, [r7, #12]
 80113d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80113d2:	2200      	movs	r2, #0
 80113d4:	2105      	movs	r1, #5
 80113d6:	204d      	movs	r0, #77	; 0x4d
 80113d8:	f7f0 fa9a 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80113dc:	204d      	movs	r0, #77	; 0x4d
 80113de:	f7f0 fab3 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80113e2:	bf00      	nop
 80113e4:	3728      	adds	r7, #40	; 0x28
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	40040000 	.word	0x40040000
 80113f0:	40023800 	.word	0x40023800
 80113f4:	40020400 	.word	0x40020400

080113f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8011406:	4618      	mov	r0, r3
 8011408:	f7f9 ffa5 	bl	800b356 <USBH_LL_IncTimer>
}
 801140c:	bf00      	nop
 801140e:	3708      	adds	r7, #8
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8011422:	4618      	mov	r0, r3
 8011424:	f7f9 ffe9 	bl	800b3fa <USBH_LL_Connect>
}
 8011428:	bf00      	nop
 801142a:	3708      	adds	r7, #8
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801143e:	4618      	mov	r0, r3
 8011440:	f7f9 fffe 	bl	800b440 <USBH_LL_Disconnect>
}
 8011444:	bf00      	nop
 8011446:	3708      	adds	r7, #8
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b082      	sub	sp, #8
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	460b      	mov	r3, r1
 8011456:	70fb      	strb	r3, [r7, #3]
 8011458:	4613      	mov	r3, r2
 801145a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8011462:	4618      	mov	r0, r3
 8011464:	f7fa f835 	bl	800b4d2 <USBH_LL_NotifyURBChange>
#endif
}
 8011468:	bf00      	nop
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801147e:	4618      	mov	r0, r3
 8011480:	f7f9 ff93 	bl	800b3aa <USBH_LL_PortEnabled>
}
 8011484:	bf00      	nop
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801149a:	4618      	mov	r0, r3
 801149c:	f7f9 ff9f 	bl	800b3de <USBH_LL_PortDisabled>
}
 80114a0:	bf00      	nop
 80114a2:	3708      	adds	r7, #8
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d132      	bne.n	8011520 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80114ba:	4a1c      	ldr	r2, [pc, #112]	; (801152c <USBH_LL_Init+0x84>)
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	4a19      	ldr	r2, [pc, #100]	; (801152c <USBH_LL_Init+0x84>)
 80114c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80114ca:	4b18      	ldr	r3, [pc, #96]	; (801152c <USBH_LL_Init+0x84>)
 80114cc:	4a18      	ldr	r2, [pc, #96]	; (8011530 <USBH_LL_Init+0x88>)
 80114ce:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80114d0:	4b16      	ldr	r3, [pc, #88]	; (801152c <USBH_LL_Init+0x84>)
 80114d2:	220c      	movs	r2, #12
 80114d4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80114d6:	4b15      	ldr	r3, [pc, #84]	; (801152c <USBH_LL_Init+0x84>)
 80114d8:	2201      	movs	r2, #1
 80114da:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80114dc:	4b13      	ldr	r3, [pc, #76]	; (801152c <USBH_LL_Init+0x84>)
 80114de:	2200      	movs	r2, #0
 80114e0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80114e2:	4b12      	ldr	r3, [pc, #72]	; (801152c <USBH_LL_Init+0x84>)
 80114e4:	2202      	movs	r2, #2
 80114e6:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80114e8:	4b10      	ldr	r3, [pc, #64]	; (801152c <USBH_LL_Init+0x84>)
 80114ea:	2200      	movs	r2, #0
 80114ec:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80114ee:	4b0f      	ldr	r3, [pc, #60]	; (801152c <USBH_LL_Init+0x84>)
 80114f0:	2200      	movs	r2, #0
 80114f2:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80114f4:	4b0d      	ldr	r3, [pc, #52]	; (801152c <USBH_LL_Init+0x84>)
 80114f6:	2200      	movs	r2, #0
 80114f8:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80114fa:	4b0c      	ldr	r3, [pc, #48]	; (801152c <USBH_LL_Init+0x84>)
 80114fc:	2200      	movs	r2, #0
 80114fe:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8011500:	480a      	ldr	r0, [pc, #40]	; (801152c <USBH_LL_Init+0x84>)
 8011502:	f7f1 f8c6 	bl	8002692 <HAL_HCD_Init>
 8011506:	4603      	mov	r3, r0
 8011508:	2b00      	cmp	r3, #0
 801150a:	d001      	beq.n	8011510 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 801150c:	f7ef fc0e 	bl	8000d2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8011510:	4806      	ldr	r0, [pc, #24]	; (801152c <USBH_LL_Init+0x84>)
 8011512:	f7f1 fd27 	bl	8002f64 <HAL_HCD_GetCurrentFrame>
 8011516:	4603      	mov	r3, r0
 8011518:	4619      	mov	r1, r3
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f7f9 ff0c 	bl	800b338 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	3708      	adds	r7, #8
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	200097ac 	.word	0x200097ac
 8011530:	40040000 	.word	0x40040000

08011534 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801153c:	2300      	movs	r3, #0
 801153e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011540:	2300      	movs	r3, #0
 8011542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801154a:	4618      	mov	r0, r3
 801154c:	f7f1 fc92 	bl	8002e74 <HAL_HCD_Start>
 8011550:	4603      	mov	r3, r0
 8011552:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011554:	7bfb      	ldrb	r3, [r7, #15]
 8011556:	4618      	mov	r0, r3
 8011558:	f000 f95e 	bl	8011818 <USBH_Get_USB_Status>
 801155c:	4603      	mov	r3, r0
 801155e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011560:	7bbb      	ldrb	r3, [r7, #14]
}
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b084      	sub	sp, #16
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011572:	2300      	movs	r3, #0
 8011574:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011576:	2300      	movs	r3, #0
 8011578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011580:	4618      	mov	r0, r3
 8011582:	f7f1 fc9a 	bl	8002eba <HAL_HCD_Stop>
 8011586:	4603      	mov	r3, r0
 8011588:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801158a:	7bfb      	ldrb	r3, [r7, #15]
 801158c:	4618      	mov	r0, r3
 801158e:	f000 f943 	bl	8011818 <USBH_Get_USB_Status>
 8011592:	4603      	mov	r3, r0
 8011594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011596:	7bbb      	ldrb	r3, [r7, #14]
}
 8011598:	4618      	mov	r0, r3
 801159a:	3710      	adds	r7, #16
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}

080115a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b084      	sub	sp, #16
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80115a8:	2301      	movs	r3, #1
 80115aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7f1 fce4 	bl	8002f80 <HAL_HCD_GetCurrentSpeed>
 80115b8:	4603      	mov	r3, r0
 80115ba:	2b02      	cmp	r3, #2
 80115bc:	d00c      	beq.n	80115d8 <USBH_LL_GetSpeed+0x38>
 80115be:	2b02      	cmp	r3, #2
 80115c0:	d80d      	bhi.n	80115de <USBH_LL_GetSpeed+0x3e>
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d002      	beq.n	80115cc <USBH_LL_GetSpeed+0x2c>
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d003      	beq.n	80115d2 <USBH_LL_GetSpeed+0x32>
 80115ca:	e008      	b.n	80115de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80115cc:	2300      	movs	r3, #0
 80115ce:	73fb      	strb	r3, [r7, #15]
    break;
 80115d0:	e008      	b.n	80115e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80115d2:	2301      	movs	r3, #1
 80115d4:	73fb      	strb	r3, [r7, #15]
    break;
 80115d6:	e005      	b.n	80115e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80115d8:	2302      	movs	r3, #2
 80115da:	73fb      	strb	r3, [r7, #15]
    break;
 80115dc:	e002      	b.n	80115e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80115de:	2301      	movs	r3, #1
 80115e0:	73fb      	strb	r3, [r7, #15]
    break;
 80115e2:	bf00      	nop
  }
  return  speed;
 80115e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3710      	adds	r7, #16
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b084      	sub	sp, #16
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115f6:	2300      	movs	r3, #0
 80115f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115fa:	2300      	movs	r3, #0
 80115fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011604:	4618      	mov	r0, r3
 8011606:	f7f1 fc75 	bl	8002ef4 <HAL_HCD_ResetPort>
 801160a:	4603      	mov	r3, r0
 801160c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801160e:	7bfb      	ldrb	r3, [r7, #15]
 8011610:	4618      	mov	r0, r3
 8011612:	f000 f901 	bl	8011818 <USBH_Get_USB_Status>
 8011616:	4603      	mov	r3, r0
 8011618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801161a:	7bbb      	ldrb	r3, [r7, #14]
}
 801161c:	4618      	mov	r0, r3
 801161e:	3710      	adds	r7, #16
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	460b      	mov	r3, r1
 801162e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011636:	78fa      	ldrb	r2, [r7, #3]
 8011638:	4611      	mov	r1, r2
 801163a:	4618      	mov	r0, r3
 801163c:	f7f1 fc7d 	bl	8002f3a <HAL_HCD_HC_GetXferCount>
 8011640:	4603      	mov	r3, r0
}
 8011642:	4618      	mov	r0, r3
 8011644:	3708      	adds	r7, #8
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801164a:	b590      	push	{r4, r7, lr}
 801164c:	b089      	sub	sp, #36	; 0x24
 801164e:	af04      	add	r7, sp, #16
 8011650:	6078      	str	r0, [r7, #4]
 8011652:	4608      	mov	r0, r1
 8011654:	4611      	mov	r1, r2
 8011656:	461a      	mov	r2, r3
 8011658:	4603      	mov	r3, r0
 801165a:	70fb      	strb	r3, [r7, #3]
 801165c:	460b      	mov	r3, r1
 801165e:	70bb      	strb	r3, [r7, #2]
 8011660:	4613      	mov	r3, r2
 8011662:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011664:	2300      	movs	r3, #0
 8011666:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011668:	2300      	movs	r3, #0
 801166a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011672:	787c      	ldrb	r4, [r7, #1]
 8011674:	78ba      	ldrb	r2, [r7, #2]
 8011676:	78f9      	ldrb	r1, [r7, #3]
 8011678:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801167a:	9302      	str	r3, [sp, #8]
 801167c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011680:	9301      	str	r3, [sp, #4]
 8011682:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011686:	9300      	str	r3, [sp, #0]
 8011688:	4623      	mov	r3, r4
 801168a:	f7f1 f869 	bl	8002760 <HAL_HCD_HC_Init>
 801168e:	4603      	mov	r3, r0
 8011690:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011692:	7bfb      	ldrb	r3, [r7, #15]
 8011694:	4618      	mov	r0, r3
 8011696:	f000 f8bf 	bl	8011818 <USBH_Get_USB_Status>
 801169a:	4603      	mov	r3, r0
 801169c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801169e:	7bbb      	ldrb	r3, [r7, #14]
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3714      	adds	r7, #20
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd90      	pop	{r4, r7, pc}

080116a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b084      	sub	sp, #16
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	460b      	mov	r3, r1
 80116b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116b4:	2300      	movs	r3, #0
 80116b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116b8:	2300      	movs	r3, #0
 80116ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80116c2:	78fa      	ldrb	r2, [r7, #3]
 80116c4:	4611      	mov	r1, r2
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7f1 f902 	bl	80028d0 <HAL_HCD_HC_Halt>
 80116cc:	4603      	mov	r3, r0
 80116ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80116d0:	7bfb      	ldrb	r3, [r7, #15]
 80116d2:	4618      	mov	r0, r3
 80116d4:	f000 f8a0 	bl	8011818 <USBH_Get_USB_Status>
 80116d8:	4603      	mov	r3, r0
 80116da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80116e6:	b590      	push	{r4, r7, lr}
 80116e8:	b089      	sub	sp, #36	; 0x24
 80116ea:	af04      	add	r7, sp, #16
 80116ec:	6078      	str	r0, [r7, #4]
 80116ee:	4608      	mov	r0, r1
 80116f0:	4611      	mov	r1, r2
 80116f2:	461a      	mov	r2, r3
 80116f4:	4603      	mov	r3, r0
 80116f6:	70fb      	strb	r3, [r7, #3]
 80116f8:	460b      	mov	r3, r1
 80116fa:	70bb      	strb	r3, [r7, #2]
 80116fc:	4613      	mov	r3, r2
 80116fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011700:	2300      	movs	r3, #0
 8011702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011704:	2300      	movs	r3, #0
 8011706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801170e:	787c      	ldrb	r4, [r7, #1]
 8011710:	78ba      	ldrb	r2, [r7, #2]
 8011712:	78f9      	ldrb	r1, [r7, #3]
 8011714:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011718:	9303      	str	r3, [sp, #12]
 801171a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801171c:	9302      	str	r3, [sp, #8]
 801171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011720:	9301      	str	r3, [sp, #4]
 8011722:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	4623      	mov	r3, r4
 801172a:	f7f1 f8f5 	bl	8002918 <HAL_HCD_HC_SubmitRequest>
 801172e:	4603      	mov	r3, r0
 8011730:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011732:	7bfb      	ldrb	r3, [r7, #15]
 8011734:	4618      	mov	r0, r3
 8011736:	f000 f86f 	bl	8011818 <USBH_Get_USB_Status>
 801173a:	4603      	mov	r3, r0
 801173c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801173e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011740:	4618      	mov	r0, r3
 8011742:	3714      	adds	r7, #20
 8011744:	46bd      	mov	sp, r7
 8011746:	bd90      	pop	{r4, r7, pc}

08011748 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	460b      	mov	r3, r1
 8011752:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801175a:	78fa      	ldrb	r2, [r7, #3]
 801175c:	4611      	mov	r1, r2
 801175e:	4618      	mov	r0, r3
 8011760:	f7f1 fbd6 	bl	8002f10 <HAL_HCD_HC_GetURBState>
 8011764:	4603      	mov	r3, r0
}
 8011766:	4618      	mov	r0, r3
 8011768:	3708      	adds	r7, #8
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}

0801176e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801176e:	b580      	push	{r7, lr}
 8011770:	b082      	sub	sp, #8
 8011772:	af00      	add	r7, sp, #0
 8011774:	6078      	str	r0, [r7, #4]
 8011776:	460b      	mov	r3, r1
 8011778:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011780:	2b00      	cmp	r3, #0
 8011782:	d103      	bne.n	801178c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8011784:	78fb      	ldrb	r3, [r7, #3]
 8011786:	4618      	mov	r0, r3
 8011788:	f000 f872 	bl	8011870 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801178c:	20c8      	movs	r0, #200	; 0xc8
 801178e:	f7ef ffe3 	bl	8001758 <HAL_Delay>
  return USBH_OK;
 8011792:	2300      	movs	r3, #0
}
 8011794:	4618      	mov	r0, r3
 8011796:	3708      	adds	r7, #8
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}

0801179c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801179c:	b480      	push	{r7}
 801179e:	b085      	sub	sp, #20
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	460b      	mov	r3, r1
 80117a6:	70fb      	strb	r3, [r7, #3]
 80117a8:	4613      	mov	r3, r2
 80117aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80117b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80117b4:	78fa      	ldrb	r2, [r7, #3]
 80117b6:	68f9      	ldr	r1, [r7, #12]
 80117b8:	4613      	mov	r3, r2
 80117ba:	011b      	lsls	r3, r3, #4
 80117bc:	1a9b      	subs	r3, r3, r2
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	440b      	add	r3, r1
 80117c2:	3317      	adds	r3, #23
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00a      	beq.n	80117e0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80117ca:	78fa      	ldrb	r2, [r7, #3]
 80117cc:	68f9      	ldr	r1, [r7, #12]
 80117ce:	4613      	mov	r3, r2
 80117d0:	011b      	lsls	r3, r3, #4
 80117d2:	1a9b      	subs	r3, r3, r2
 80117d4:	009b      	lsls	r3, r3, #2
 80117d6:	440b      	add	r3, r1
 80117d8:	333c      	adds	r3, #60	; 0x3c
 80117da:	78ba      	ldrb	r2, [r7, #2]
 80117dc:	701a      	strb	r2, [r3, #0]
 80117de:	e009      	b.n	80117f4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80117e0:	78fa      	ldrb	r2, [r7, #3]
 80117e2:	68f9      	ldr	r1, [r7, #12]
 80117e4:	4613      	mov	r3, r2
 80117e6:	011b      	lsls	r3, r3, #4
 80117e8:	1a9b      	subs	r3, r3, r2
 80117ea:	009b      	lsls	r3, r3, #2
 80117ec:	440b      	add	r3, r1
 80117ee:	333d      	adds	r3, #61	; 0x3d
 80117f0:	78ba      	ldrb	r2, [r7, #2]
 80117f2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80117f4:	2300      	movs	r3, #0
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3714      	adds	r7, #20
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr

08011802 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011802:	b580      	push	{r7, lr}
 8011804:	b082      	sub	sp, #8
 8011806:	af00      	add	r7, sp, #0
 8011808:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f7ef ffa4 	bl	8001758 <HAL_Delay>
}
 8011810:	bf00      	nop
 8011812:	3708      	adds	r7, #8
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011818:	b480      	push	{r7}
 801181a:	b085      	sub	sp, #20
 801181c:	af00      	add	r7, sp, #0
 801181e:	4603      	mov	r3, r0
 8011820:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011822:	2300      	movs	r3, #0
 8011824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011826:	79fb      	ldrb	r3, [r7, #7]
 8011828:	2b03      	cmp	r3, #3
 801182a:	d817      	bhi.n	801185c <USBH_Get_USB_Status+0x44>
 801182c:	a201      	add	r2, pc, #4	; (adr r2, 8011834 <USBH_Get_USB_Status+0x1c>)
 801182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011832:	bf00      	nop
 8011834:	08011845 	.word	0x08011845
 8011838:	0801184b 	.word	0x0801184b
 801183c:	08011851 	.word	0x08011851
 8011840:	08011857 	.word	0x08011857
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011844:	2300      	movs	r3, #0
 8011846:	73fb      	strb	r3, [r7, #15]
    break;
 8011848:	e00b      	b.n	8011862 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801184a:	2302      	movs	r3, #2
 801184c:	73fb      	strb	r3, [r7, #15]
    break;
 801184e:	e008      	b.n	8011862 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011850:	2301      	movs	r3, #1
 8011852:	73fb      	strb	r3, [r7, #15]
    break;
 8011854:	e005      	b.n	8011862 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011856:	2302      	movs	r3, #2
 8011858:	73fb      	strb	r3, [r7, #15]
    break;
 801185a:	e002      	b.n	8011862 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801185c:	2302      	movs	r3, #2
 801185e:	73fb      	strb	r3, [r7, #15]
    break;
 8011860:	bf00      	nop
  }
  return usb_status;
 8011862:	7bfb      	ldrb	r3, [r7, #15]
}
 8011864:	4618      	mov	r0, r3
 8011866:	3714      	adds	r7, #20
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr

08011870 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b084      	sub	sp, #16
 8011874:	af00      	add	r7, sp, #0
 8011876:	4603      	mov	r3, r0
 8011878:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801187a:	79fb      	ldrb	r3, [r7, #7]
 801187c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 801187e:	79fb      	ldrb	r3, [r7, #7]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d102      	bne.n	801188a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011884:	2301      	movs	r3, #1
 8011886:	73fb      	strb	r3, [r7, #15]
 8011888:	e001      	b.n	801188e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801188a:	2300      	movs	r3, #0
 801188c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 801188e:	7bfb      	ldrb	r3, [r7, #15]
 8011890:	461a      	mov	r2, r3
 8011892:	2110      	movs	r1, #16
 8011894:	4803      	ldr	r0, [pc, #12]	; (80118a4 <MX_DriverVbusHS+0x34>)
 8011896:	f7f0 fee3 	bl	8002660 <HAL_GPIO_WritePin>
}
 801189a:	bf00      	nop
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	40020800 	.word	0x40020800

080118a8 <malloc>:
 80118a8:	4b02      	ldr	r3, [pc, #8]	; (80118b4 <malloc+0xc>)
 80118aa:	4601      	mov	r1, r0
 80118ac:	6818      	ldr	r0, [r3, #0]
 80118ae:	f000 b82b 	b.w	8011908 <_malloc_r>
 80118b2:	bf00      	nop
 80118b4:	200000e8 	.word	0x200000e8

080118b8 <free>:
 80118b8:	4b02      	ldr	r3, [pc, #8]	; (80118c4 <free+0xc>)
 80118ba:	4601      	mov	r1, r0
 80118bc:	6818      	ldr	r0, [r3, #0]
 80118be:	f000 b901 	b.w	8011ac4 <_free_r>
 80118c2:	bf00      	nop
 80118c4:	200000e8 	.word	0x200000e8

080118c8 <sbrk_aligned>:
 80118c8:	b570      	push	{r4, r5, r6, lr}
 80118ca:	4e0e      	ldr	r6, [pc, #56]	; (8011904 <sbrk_aligned+0x3c>)
 80118cc:	460c      	mov	r4, r1
 80118ce:	6831      	ldr	r1, [r6, #0]
 80118d0:	4605      	mov	r5, r0
 80118d2:	b911      	cbnz	r1, 80118da <sbrk_aligned+0x12>
 80118d4:	f000 f8ac 	bl	8011a30 <_sbrk_r>
 80118d8:	6030      	str	r0, [r6, #0]
 80118da:	4621      	mov	r1, r4
 80118dc:	4628      	mov	r0, r5
 80118de:	f000 f8a7 	bl	8011a30 <_sbrk_r>
 80118e2:	1c43      	adds	r3, r0, #1
 80118e4:	d00a      	beq.n	80118fc <sbrk_aligned+0x34>
 80118e6:	1cc4      	adds	r4, r0, #3
 80118e8:	f024 0403 	bic.w	r4, r4, #3
 80118ec:	42a0      	cmp	r0, r4
 80118ee:	d007      	beq.n	8011900 <sbrk_aligned+0x38>
 80118f0:	1a21      	subs	r1, r4, r0
 80118f2:	4628      	mov	r0, r5
 80118f4:	f000 f89c 	bl	8011a30 <_sbrk_r>
 80118f8:	3001      	adds	r0, #1
 80118fa:	d101      	bne.n	8011900 <sbrk_aligned+0x38>
 80118fc:	f04f 34ff 	mov.w	r4, #4294967295
 8011900:	4620      	mov	r0, r4
 8011902:	bd70      	pop	{r4, r5, r6, pc}
 8011904:	20009b90 	.word	0x20009b90

08011908 <_malloc_r>:
 8011908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801190c:	1ccd      	adds	r5, r1, #3
 801190e:	f025 0503 	bic.w	r5, r5, #3
 8011912:	3508      	adds	r5, #8
 8011914:	2d0c      	cmp	r5, #12
 8011916:	bf38      	it	cc
 8011918:	250c      	movcc	r5, #12
 801191a:	2d00      	cmp	r5, #0
 801191c:	4607      	mov	r7, r0
 801191e:	db01      	blt.n	8011924 <_malloc_r+0x1c>
 8011920:	42a9      	cmp	r1, r5
 8011922:	d905      	bls.n	8011930 <_malloc_r+0x28>
 8011924:	230c      	movs	r3, #12
 8011926:	603b      	str	r3, [r7, #0]
 8011928:	2600      	movs	r6, #0
 801192a:	4630      	mov	r0, r6
 801192c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011930:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011a04 <_malloc_r+0xfc>
 8011934:	f000 f868 	bl	8011a08 <__malloc_lock>
 8011938:	f8d8 3000 	ldr.w	r3, [r8]
 801193c:	461c      	mov	r4, r3
 801193e:	bb5c      	cbnz	r4, 8011998 <_malloc_r+0x90>
 8011940:	4629      	mov	r1, r5
 8011942:	4638      	mov	r0, r7
 8011944:	f7ff ffc0 	bl	80118c8 <sbrk_aligned>
 8011948:	1c43      	adds	r3, r0, #1
 801194a:	4604      	mov	r4, r0
 801194c:	d155      	bne.n	80119fa <_malloc_r+0xf2>
 801194e:	f8d8 4000 	ldr.w	r4, [r8]
 8011952:	4626      	mov	r6, r4
 8011954:	2e00      	cmp	r6, #0
 8011956:	d145      	bne.n	80119e4 <_malloc_r+0xdc>
 8011958:	2c00      	cmp	r4, #0
 801195a:	d048      	beq.n	80119ee <_malloc_r+0xe6>
 801195c:	6823      	ldr	r3, [r4, #0]
 801195e:	4631      	mov	r1, r6
 8011960:	4638      	mov	r0, r7
 8011962:	eb04 0903 	add.w	r9, r4, r3
 8011966:	f000 f863 	bl	8011a30 <_sbrk_r>
 801196a:	4581      	cmp	r9, r0
 801196c:	d13f      	bne.n	80119ee <_malloc_r+0xe6>
 801196e:	6821      	ldr	r1, [r4, #0]
 8011970:	1a6d      	subs	r5, r5, r1
 8011972:	4629      	mov	r1, r5
 8011974:	4638      	mov	r0, r7
 8011976:	f7ff ffa7 	bl	80118c8 <sbrk_aligned>
 801197a:	3001      	adds	r0, #1
 801197c:	d037      	beq.n	80119ee <_malloc_r+0xe6>
 801197e:	6823      	ldr	r3, [r4, #0]
 8011980:	442b      	add	r3, r5
 8011982:	6023      	str	r3, [r4, #0]
 8011984:	f8d8 3000 	ldr.w	r3, [r8]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d038      	beq.n	80119fe <_malloc_r+0xf6>
 801198c:	685a      	ldr	r2, [r3, #4]
 801198e:	42a2      	cmp	r2, r4
 8011990:	d12b      	bne.n	80119ea <_malloc_r+0xe2>
 8011992:	2200      	movs	r2, #0
 8011994:	605a      	str	r2, [r3, #4]
 8011996:	e00f      	b.n	80119b8 <_malloc_r+0xb0>
 8011998:	6822      	ldr	r2, [r4, #0]
 801199a:	1b52      	subs	r2, r2, r5
 801199c:	d41f      	bmi.n	80119de <_malloc_r+0xd6>
 801199e:	2a0b      	cmp	r2, #11
 80119a0:	d917      	bls.n	80119d2 <_malloc_r+0xca>
 80119a2:	1961      	adds	r1, r4, r5
 80119a4:	42a3      	cmp	r3, r4
 80119a6:	6025      	str	r5, [r4, #0]
 80119a8:	bf18      	it	ne
 80119aa:	6059      	strne	r1, [r3, #4]
 80119ac:	6863      	ldr	r3, [r4, #4]
 80119ae:	bf08      	it	eq
 80119b0:	f8c8 1000 	streq.w	r1, [r8]
 80119b4:	5162      	str	r2, [r4, r5]
 80119b6:	604b      	str	r3, [r1, #4]
 80119b8:	4638      	mov	r0, r7
 80119ba:	f104 060b 	add.w	r6, r4, #11
 80119be:	f000 f829 	bl	8011a14 <__malloc_unlock>
 80119c2:	f026 0607 	bic.w	r6, r6, #7
 80119c6:	1d23      	adds	r3, r4, #4
 80119c8:	1af2      	subs	r2, r6, r3
 80119ca:	d0ae      	beq.n	801192a <_malloc_r+0x22>
 80119cc:	1b9b      	subs	r3, r3, r6
 80119ce:	50a3      	str	r3, [r4, r2]
 80119d0:	e7ab      	b.n	801192a <_malloc_r+0x22>
 80119d2:	42a3      	cmp	r3, r4
 80119d4:	6862      	ldr	r2, [r4, #4]
 80119d6:	d1dd      	bne.n	8011994 <_malloc_r+0x8c>
 80119d8:	f8c8 2000 	str.w	r2, [r8]
 80119dc:	e7ec      	b.n	80119b8 <_malloc_r+0xb0>
 80119de:	4623      	mov	r3, r4
 80119e0:	6864      	ldr	r4, [r4, #4]
 80119e2:	e7ac      	b.n	801193e <_malloc_r+0x36>
 80119e4:	4634      	mov	r4, r6
 80119e6:	6876      	ldr	r6, [r6, #4]
 80119e8:	e7b4      	b.n	8011954 <_malloc_r+0x4c>
 80119ea:	4613      	mov	r3, r2
 80119ec:	e7cc      	b.n	8011988 <_malloc_r+0x80>
 80119ee:	230c      	movs	r3, #12
 80119f0:	603b      	str	r3, [r7, #0]
 80119f2:	4638      	mov	r0, r7
 80119f4:	f000 f80e 	bl	8011a14 <__malloc_unlock>
 80119f8:	e797      	b.n	801192a <_malloc_r+0x22>
 80119fa:	6025      	str	r5, [r4, #0]
 80119fc:	e7dc      	b.n	80119b8 <_malloc_r+0xb0>
 80119fe:	605b      	str	r3, [r3, #4]
 8011a00:	deff      	udf	#255	; 0xff
 8011a02:	bf00      	nop
 8011a04:	20009b8c 	.word	0x20009b8c

08011a08 <__malloc_lock>:
 8011a08:	4801      	ldr	r0, [pc, #4]	; (8011a10 <__malloc_lock+0x8>)
 8011a0a:	f000 b84b 	b.w	8011aa4 <__retarget_lock_acquire_recursive>
 8011a0e:	bf00      	nop
 8011a10:	20009cd0 	.word	0x20009cd0

08011a14 <__malloc_unlock>:
 8011a14:	4801      	ldr	r0, [pc, #4]	; (8011a1c <__malloc_unlock+0x8>)
 8011a16:	f000 b846 	b.w	8011aa6 <__retarget_lock_release_recursive>
 8011a1a:	bf00      	nop
 8011a1c:	20009cd0 	.word	0x20009cd0

08011a20 <memset>:
 8011a20:	4402      	add	r2, r0
 8011a22:	4603      	mov	r3, r0
 8011a24:	4293      	cmp	r3, r2
 8011a26:	d100      	bne.n	8011a2a <memset+0xa>
 8011a28:	4770      	bx	lr
 8011a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8011a2e:	e7f9      	b.n	8011a24 <memset+0x4>

08011a30 <_sbrk_r>:
 8011a30:	b538      	push	{r3, r4, r5, lr}
 8011a32:	4d06      	ldr	r5, [pc, #24]	; (8011a4c <_sbrk_r+0x1c>)
 8011a34:	2300      	movs	r3, #0
 8011a36:	4604      	mov	r4, r0
 8011a38:	4608      	mov	r0, r1
 8011a3a:	602b      	str	r3, [r5, #0]
 8011a3c:	f7ef fdd8 	bl	80015f0 <_sbrk>
 8011a40:	1c43      	adds	r3, r0, #1
 8011a42:	d102      	bne.n	8011a4a <_sbrk_r+0x1a>
 8011a44:	682b      	ldr	r3, [r5, #0]
 8011a46:	b103      	cbz	r3, 8011a4a <_sbrk_r+0x1a>
 8011a48:	6023      	str	r3, [r4, #0]
 8011a4a:	bd38      	pop	{r3, r4, r5, pc}
 8011a4c:	20009ccc 	.word	0x20009ccc

08011a50 <__errno>:
 8011a50:	4b01      	ldr	r3, [pc, #4]	; (8011a58 <__errno+0x8>)
 8011a52:	6818      	ldr	r0, [r3, #0]
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop
 8011a58:	200000e8 	.word	0x200000e8

08011a5c <__libc_init_array>:
 8011a5c:	b570      	push	{r4, r5, r6, lr}
 8011a5e:	4d0d      	ldr	r5, [pc, #52]	; (8011a94 <__libc_init_array+0x38>)
 8011a60:	4c0d      	ldr	r4, [pc, #52]	; (8011a98 <__libc_init_array+0x3c>)
 8011a62:	1b64      	subs	r4, r4, r5
 8011a64:	10a4      	asrs	r4, r4, #2
 8011a66:	2600      	movs	r6, #0
 8011a68:	42a6      	cmp	r6, r4
 8011a6a:	d109      	bne.n	8011a80 <__libc_init_array+0x24>
 8011a6c:	4d0b      	ldr	r5, [pc, #44]	; (8011a9c <__libc_init_array+0x40>)
 8011a6e:	4c0c      	ldr	r4, [pc, #48]	; (8011aa0 <__libc_init_array+0x44>)
 8011a70:	f000 f874 	bl	8011b5c <_init>
 8011a74:	1b64      	subs	r4, r4, r5
 8011a76:	10a4      	asrs	r4, r4, #2
 8011a78:	2600      	movs	r6, #0
 8011a7a:	42a6      	cmp	r6, r4
 8011a7c:	d105      	bne.n	8011a8a <__libc_init_array+0x2e>
 8011a7e:	bd70      	pop	{r4, r5, r6, pc}
 8011a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a84:	4798      	blx	r3
 8011a86:	3601      	adds	r6, #1
 8011a88:	e7ee      	b.n	8011a68 <__libc_init_array+0xc>
 8011a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a8e:	4798      	blx	r3
 8011a90:	3601      	adds	r6, #1
 8011a92:	e7f2      	b.n	8011a7a <__libc_init_array+0x1e>
 8011a94:	08011c28 	.word	0x08011c28
 8011a98:	08011c28 	.word	0x08011c28
 8011a9c:	08011c28 	.word	0x08011c28
 8011aa0:	08011c2c 	.word	0x08011c2c

08011aa4 <__retarget_lock_acquire_recursive>:
 8011aa4:	4770      	bx	lr

08011aa6 <__retarget_lock_release_recursive>:
 8011aa6:	4770      	bx	lr

08011aa8 <memcpy>:
 8011aa8:	440a      	add	r2, r1
 8011aaa:	4291      	cmp	r1, r2
 8011aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ab0:	d100      	bne.n	8011ab4 <memcpy+0xc>
 8011ab2:	4770      	bx	lr
 8011ab4:	b510      	push	{r4, lr}
 8011ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011abe:	4291      	cmp	r1, r2
 8011ac0:	d1f9      	bne.n	8011ab6 <memcpy+0xe>
 8011ac2:	bd10      	pop	{r4, pc}

08011ac4 <_free_r>:
 8011ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ac6:	2900      	cmp	r1, #0
 8011ac8:	d044      	beq.n	8011b54 <_free_r+0x90>
 8011aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ace:	9001      	str	r0, [sp, #4]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8011ad6:	bfb8      	it	lt
 8011ad8:	18e4      	addlt	r4, r4, r3
 8011ada:	f7ff ff95 	bl	8011a08 <__malloc_lock>
 8011ade:	4a1e      	ldr	r2, [pc, #120]	; (8011b58 <_free_r+0x94>)
 8011ae0:	9801      	ldr	r0, [sp, #4]
 8011ae2:	6813      	ldr	r3, [r2, #0]
 8011ae4:	b933      	cbnz	r3, 8011af4 <_free_r+0x30>
 8011ae6:	6063      	str	r3, [r4, #4]
 8011ae8:	6014      	str	r4, [r2, #0]
 8011aea:	b003      	add	sp, #12
 8011aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011af0:	f7ff bf90 	b.w	8011a14 <__malloc_unlock>
 8011af4:	42a3      	cmp	r3, r4
 8011af6:	d908      	bls.n	8011b0a <_free_r+0x46>
 8011af8:	6825      	ldr	r5, [r4, #0]
 8011afa:	1961      	adds	r1, r4, r5
 8011afc:	428b      	cmp	r3, r1
 8011afe:	bf01      	itttt	eq
 8011b00:	6819      	ldreq	r1, [r3, #0]
 8011b02:	685b      	ldreq	r3, [r3, #4]
 8011b04:	1949      	addeq	r1, r1, r5
 8011b06:	6021      	streq	r1, [r4, #0]
 8011b08:	e7ed      	b.n	8011ae6 <_free_r+0x22>
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	b10b      	cbz	r3, 8011b14 <_free_r+0x50>
 8011b10:	42a3      	cmp	r3, r4
 8011b12:	d9fa      	bls.n	8011b0a <_free_r+0x46>
 8011b14:	6811      	ldr	r1, [r2, #0]
 8011b16:	1855      	adds	r5, r2, r1
 8011b18:	42a5      	cmp	r5, r4
 8011b1a:	d10b      	bne.n	8011b34 <_free_r+0x70>
 8011b1c:	6824      	ldr	r4, [r4, #0]
 8011b1e:	4421      	add	r1, r4
 8011b20:	1854      	adds	r4, r2, r1
 8011b22:	42a3      	cmp	r3, r4
 8011b24:	6011      	str	r1, [r2, #0]
 8011b26:	d1e0      	bne.n	8011aea <_free_r+0x26>
 8011b28:	681c      	ldr	r4, [r3, #0]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	6053      	str	r3, [r2, #4]
 8011b2e:	440c      	add	r4, r1
 8011b30:	6014      	str	r4, [r2, #0]
 8011b32:	e7da      	b.n	8011aea <_free_r+0x26>
 8011b34:	d902      	bls.n	8011b3c <_free_r+0x78>
 8011b36:	230c      	movs	r3, #12
 8011b38:	6003      	str	r3, [r0, #0]
 8011b3a:	e7d6      	b.n	8011aea <_free_r+0x26>
 8011b3c:	6825      	ldr	r5, [r4, #0]
 8011b3e:	1961      	adds	r1, r4, r5
 8011b40:	428b      	cmp	r3, r1
 8011b42:	bf04      	itt	eq
 8011b44:	6819      	ldreq	r1, [r3, #0]
 8011b46:	685b      	ldreq	r3, [r3, #4]
 8011b48:	6063      	str	r3, [r4, #4]
 8011b4a:	bf04      	itt	eq
 8011b4c:	1949      	addeq	r1, r1, r5
 8011b4e:	6021      	streq	r1, [r4, #0]
 8011b50:	6054      	str	r4, [r2, #4]
 8011b52:	e7ca      	b.n	8011aea <_free_r+0x26>
 8011b54:	b003      	add	sp, #12
 8011b56:	bd30      	pop	{r4, r5, pc}
 8011b58:	20009b8c 	.word	0x20009b8c

08011b5c <_init>:
 8011b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b5e:	bf00      	nop
 8011b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b62:	bc08      	pop	{r3}
 8011b64:	469e      	mov	lr, r3
 8011b66:	4770      	bx	lr

08011b68 <_fini>:
 8011b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b6a:	bf00      	nop
 8011b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b6e:	bc08      	pop	{r3}
 8011b70:	469e      	mov	lr, r3
 8011b72:	4770      	bx	lr

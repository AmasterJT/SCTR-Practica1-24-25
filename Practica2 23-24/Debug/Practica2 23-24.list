
Practica2 23-24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800ebcc  0800ebcc  0001ebcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec70  0800ec70  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec70  0800ec70  0001ec70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec78  0800ec78  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec78  0800ec78  0001ec78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec7c  0800ec7c  0001ec7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ec80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000067c4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006844  20006844  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002e51c  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006514  00000000  00000000  0004e60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002648  00000000  00000000  00054b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001db1  00000000  00000000  00057170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00008ae6  00000000  00000000  00058f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00033dff  00000000  00000000  00061a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103a19  00000000  00000000  00095806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a6f8  00000000  00000000  00199220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c9  00000000  00000000  001a3918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ebb4 	.word	0x0800ebb4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800ebb4 	.word	0x0800ebb4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f001 f928 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f836 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 faf6 	bl	8000ae8 <MX_GPIO_Init>
  MX_CRC_Init();
 80004fc:	f000 f8ee 	bl	80006dc <MX_CRC_Init>
  MX_DMA2D_Init();
 8000500:	f000 f900 	bl	8000704 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000504:	f000 faa0 	bl	8000a48 <MX_FMC_Init>
  MX_I2C3_Init();
 8000508:	f000 f92e 	bl	8000768 <MX_I2C3_Init>
  MX_LTDC_Init();
 800050c:	f000 f96c 	bl	80007e8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000510:	f000 f9ea 	bl	80008e8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000514:	f000 fa1e 	bl	8000954 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000518:	f000 fa6c 	bl	80009f4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800051c:	f000 f88c 	bl	8000638 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f008 fcbe 	bl	8008ea0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <main+0x60>)
 8000526:	2100      	movs	r1, #0
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <main+0x64>)
 800052a:	f008 fd03 	bl	8008f34 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <main+0x68>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of tareaPantalla */
  tareaPantallaHandle = osThreadNew(ftareaPantalla, NULL, &tareaPantalla_attributes);
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <main+0x6c>)
 8000536:	2100      	movs	r1, #0
 8000538:	4808      	ldr	r0, [pc, #32]	; (800055c <main+0x70>)
 800053a:	f008 fcfb 	bl	8008f34 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <main+0x74>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f008 fcd0 	bl	8008ee8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x5c>
 800054a:	bf00      	nop
 800054c:	0800ec10 	.word	0x0800ec10
 8000550:	08000d31 	.word	0x08000d31
 8000554:	20000344 	.word	0x20000344
 8000558:	0800ec34 	.word	0x0800ec34
 800055c:	08000d45 	.word	0x08000d45
 8000560:	20000348 	.word	0x20000348

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f00e fa80 	bl	800ea78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b0:	4a20      	ldr	r2, [pc, #128]	; (8000634 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005dc:	2348      	movs	r3, #72	; 0x48
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005e4:	2303      	movs	r3, #3
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 ff05 	bl	80053fc <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f8:	f000 fbbe 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2102      	movs	r1, #2
 8000618:	4618      	mov	r0, r3
 800061a:	f005 f967 	bl	80058ec <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000624:	f000 fba8 	bl	8000d78 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_ADC1_Init+0x98>)
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_ADC1_Init+0xa0>)
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000684:	2201      	movs	r2, #1
 8000686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000698:	f001 f8ba 	bl	8001810 <HAL_ADC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 fb69 	bl	8000d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006a6:	2305      	movs	r3, #5
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <MX_ADC1_Init+0x98>)
 80006b8:	f001 f8ee 	bl	8001898 <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006c2:	f000 fb59 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000009c 	.word	0x2000009c
 80006d4:	40012000 	.word	0x40012000
 80006d8:	0f000001 	.word	0x0f000001

080006dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_CRC_Init+0x20>)
 80006e2:	4a07      	ldr	r2, [pc, #28]	; (8000700 <MX_CRC_Init+0x24>)
 80006e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_CRC_Init+0x20>)
 80006e8:	f001 fbe6 	bl	8001eb8 <HAL_CRC_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006f2:	f000 fb41 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000e4 	.word	0x200000e4
 8000700:	40023000 	.word	0x40023000

08000704 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_DMA2D_Init+0x5c>)
 800070a:	4a16      	ldr	r2, [pc, #88]	; (8000764 <MX_DMA2D_Init+0x60>)
 800070c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_DMA2D_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_DMA2D_Init+0x5c>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_DMA2D_Init+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_DMA2D_Init+0x5c>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_DMA2D_Init+0x5c>)
 8000728:	2200      	movs	r2, #0
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_DMA2D_Init+0x5c>)
 800072e:	2200      	movs	r2, #0
 8000730:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_DMA2D_Init+0x5c>)
 8000734:	2200      	movs	r2, #0
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <MX_DMA2D_Init+0x5c>)
 800073a:	f001 fc6b 	bl	8002014 <HAL_DMA2D_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000744:	f000 fb18 	bl	8000d78 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000748:	2101      	movs	r1, #1
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_DMA2D_Init+0x5c>)
 800074c:	f001 fdbc 	bl	80022c8 <HAL_DMA2D_ConfigLayer>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000756:	f000 fb0f 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000ec 	.word	0x200000ec
 8000764:	4002b000 	.word	0x4002b000

08000768 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_I2C3_Init+0x74>)
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <MX_I2C3_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_I2C3_Init+0x74>)
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <MX_I2C3_Init+0x7c>)
 8000776:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_I2C3_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_I2C3_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_I2C3_Init+0x74>)
 8000786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_I2C3_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_I2C3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_I2C3_Init+0x74>)
 80007a6:	f004 f901 	bl	80049ac <HAL_I2C_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 fae2 	bl	8000d78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b4:	2100      	movs	r1, #0
 80007b6:	4809      	ldr	r0, [pc, #36]	; (80007dc <MX_I2C3_Init+0x74>)
 80007b8:	f004 fa3c 	bl	8004c34 <HAL_I2CEx_ConfigAnalogFilter>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007c2:	f000 fad9 	bl	8000d78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C3_Init+0x74>)
 80007ca:	f004 fa6f 	bl	8004cac <HAL_I2CEx_ConfigDigitalFilter>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007d4:	f000 fad0 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000012c 	.word	0x2000012c
 80007e0:	40005c00 	.word	0x40005c00
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08e      	sub	sp, #56	; 0x38
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2234      	movs	r2, #52	; 0x34
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f00e f93f 	bl	800ea78 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007fa:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <MX_LTDC_Init+0xf8>)
 80007fc:	4a39      	ldr	r2, [pc, #228]	; (80008e4 <MX_LTDC_Init+0xfc>)
 80007fe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000800:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <MX_LTDC_Init+0xf8>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000806:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <MX_LTDC_Init+0xf8>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800080c:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <MX_LTDC_Init+0xf8>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000812:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <MX_LTDC_Init+0xf8>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000818:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <MX_LTDC_Init+0xf8>)
 800081a:	2209      	movs	r2, #9
 800081c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800081e:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <MX_LTDC_Init+0xf8>)
 8000820:	2201      	movs	r2, #1
 8000822:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000824:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <MX_LTDC_Init+0xf8>)
 8000826:	221d      	movs	r2, #29
 8000828:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <MX_LTDC_Init+0xf8>)
 800082c:	2203      	movs	r2, #3
 800082e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000830:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_LTDC_Init+0xf8>)
 8000832:	f240 120d 	movw	r2, #269	; 0x10d
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000838:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_LTDC_Init+0xf8>)
 800083a:	f240 1243 	movw	r2, #323	; 0x143
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000840:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_LTDC_Init+0xf8>)
 8000842:	f240 1217 	movw	r2, #279	; 0x117
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <MX_LTDC_Init+0xf8>)
 800084a:	f240 1247 	movw	r2, #327	; 0x147
 800084e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_LTDC_Init+0xf8>)
 8000852:	2200      	movs	r2, #0
 8000854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_LTDC_Init+0xf8>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_LTDC_Init+0xf8>)
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000868:	481d      	ldr	r0, [pc, #116]	; (80008e0 <MX_LTDC_Init+0xf8>)
 800086a:	f004 fa5f 	bl	8004d2c <HAL_LTDC_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000874:	f000 fa80 	bl	8000d78 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800087c:	23f0      	movs	r3, #240	; 0xf0
 800087e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000884:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000888:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800088a:	2302      	movs	r3, #2
 800088c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800088e:	23ff      	movs	r3, #255	; 0xff
 8000890:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000896:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800089a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800089c:	2307      	movs	r3, #7
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008a0:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80008a6:	23f0      	movs	r3, #240	; 0xf0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80008aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_LTDC_Init+0xf8>)
 80008ca:	f004 fbc1 	bl	8005050 <HAL_LTDC_ConfigLayer>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008d4:	f000 fa50 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3738      	adds	r7, #56	; 0x38
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000180 	.word	0x20000180
 80008e4:	40016800 	.word	0x40016800

080008e8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_SPI5_Init+0x64>)
 80008ee:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MX_SPI5_Init+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_SPI5_Init+0x64>)
 80008f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_SPI5_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_SPI5_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_SPI5_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_SPI5_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_SPI5_Init+0x64>)
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_SPI5_Init+0x64>)
 800091c:	2218      	movs	r2, #24
 800091e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_SPI5_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_SPI5_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_SPI5_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_SPI5_Init+0x64>)
 8000934:	220a      	movs	r2, #10
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_SPI5_Init+0x64>)
 800093a:	f005 fc1d 	bl	8006178 <HAL_SPI_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000944:	f000 fa18 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000228 	.word	0x20000228
 8000950:	40015000 	.word	0x40015000

08000954 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_TIM1_Init+0x98>)
 8000972:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <MX_TIM1_Init+0x9c>)
 8000974:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_TIM1_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_TIM1_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_TIM1_Init+0x98>)
 8000984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000988:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_TIM1_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_TIM1_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_TIM1_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_TIM1_Init+0x98>)
 800099e:	f005 fc74 	bl	800628a <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009a8:	f000 f9e6 	bl	8000d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_TIM1_Init+0x98>)
 80009ba:	f005 fe15 	bl	80065e8 <HAL_TIM_ConfigClockSource>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009c4:	f000 f9d8 	bl	8000d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_TIM1_Init+0x98>)
 80009d6:	f006 f83d 	bl	8006a54 <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009e0:	f000 f9ca 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000280 	.word	0x20000280
 80009f0:	40010000 	.word	0x40010000

080009f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART1_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	f006 f8a2 	bl	8006b74 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f99f 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200002c8 	.word	0x200002c8
 8000a44:	40011000 	.word	0x40011000

08000a48 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000a62:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <MX_FMC_Init+0x9c>)
 8000a64:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000a74:	2204      	movs	r2, #4
 8000a76:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000a7a:	2210      	movs	r2, #16
 8000a7c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000a80:	2240      	movs	r2, #64	; 0x40
 8000a82:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000a86:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a8a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a98:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000aac:	2307      	movs	r3, #7
 8000aae:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_FMC_Init+0x98>)
 8000aca:	f005 fb21 	bl	8006110 <HAL_SDRAM_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000ad4:	f000 f950 	bl	8000d78 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000310 	.word	0x20000310
 8000ae4:	a0000140 	.word	0xa0000140

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
 8000b02:	4b84      	ldr	r3, [pc, #528]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a83      	ldr	r2, [pc, #524]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b81      	ldr	r3, [pc, #516]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	623b      	str	r3, [r7, #32]
 8000b18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
 8000b1e:	4b7d      	ldr	r3, [pc, #500]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a7c      	ldr	r2, [pc, #496]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b7a      	ldr	r3, [pc, #488]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	4b76      	ldr	r3, [pc, #472]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a75      	ldr	r2, [pc, #468]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b73      	ldr	r3, [pc, #460]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0320 	and.w	r3, r3, #32
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	4b6f      	ldr	r3, [pc, #444]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a6e      	ldr	r2, [pc, #440]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b6c      	ldr	r3, [pc, #432]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b68      	ldr	r3, [pc, #416]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a67      	ldr	r2, [pc, #412]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b65      	ldr	r3, [pc, #404]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b61      	ldr	r3, [pc, #388]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a60      	ldr	r2, [pc, #384]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b5a      	ldr	r3, [pc, #360]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a59      	ldr	r2, [pc, #356]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b57      	ldr	r3, [pc, #348]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b53      	ldr	r3, [pc, #332]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a52      	ldr	r2, [pc, #328]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b50      	ldr	r3, [pc, #320]	; (8000d14 <MX_GPIO_Init+0x22c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	211c      	movs	r1, #28
 8000be2:	484d      	ldr	r0, [pc, #308]	; (8000d18 <MX_GPIO_Init+0x230>)
 8000be4:	f001 fdae 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2116      	movs	r1, #22
 8000bec:	484b      	ldr	r0, [pc, #300]	; (8000d1c <MX_GPIO_Init+0x234>)
 8000bee:	f001 fda9 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	484a      	ldr	r0, [pc, #296]	; (8000d20 <MX_GPIO_Init+0x238>)
 8000bf8:	f001 fda4 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c02:	4848      	ldr	r0, [pc, #288]	; (8000d24 <MX_GPIO_Init+0x23c>)
 8000c04:	f001 fd9e 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c0e:	4846      	ldr	r0, [pc, #280]	; (8000d28 <MX_GPIO_Init+0x240>)
 8000c10:	f001 fd98 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000c14:	231c      	movs	r3, #28
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	483b      	ldr	r0, [pc, #236]	; (8000d18 <MX_GPIO_Init+0x230>)
 8000c2c:	f001 fbde 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c30:	2316      	movs	r3, #22
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	4835      	ldr	r0, [pc, #212]	; (8000d1c <MX_GPIO_Init+0x234>)
 8000c48:	f001 fbd0 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c4c:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c52:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	482f      	ldr	r0, [pc, #188]	; (8000d20 <MX_GPIO_Init+0x238>)
 8000c64:	f001 fbc2 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4828      	ldr	r0, [pc, #160]	; (8000d20 <MX_GPIO_Init+0x238>)
 8000c80:	f001 fbb4 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c84:	2320      	movs	r3, #32
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c88:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4820      	ldr	r0, [pc, #128]	; (8000d1c <MX_GPIO_Init+0x234>)
 8000c9a:	f001 fba7 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	481e      	ldr	r0, [pc, #120]	; (8000d2c <MX_GPIO_Init+0x244>)
 8000cb2:	f001 fb9b 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000cb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4816      	ldr	r0, [pc, #88]	; (8000d24 <MX_GPIO_Init+0x23c>)
 8000ccc:	f001 fb8e 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000cd0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480e      	ldr	r0, [pc, #56]	; (8000d24 <MX_GPIO_Init+0x23c>)
 8000cea:	f001 fb7f 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <MX_GPIO_Init+0x240>)
 8000d08:	f001 fb70 	bl	80023ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3738      	adds	r7, #56	; 0x38
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020c00 	.word	0x40020c00
 8000d28:	40021800 	.word	0x40021800
 8000d2c:	40020400 	.word	0x40020400

08000d30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d38:	f00d fad8 	bl	800e2ec <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f008 f98b 	bl	8009058 <osDelay>
 8000d42:	e7fb      	b.n	8000d3c <StartDefaultTask+0xc>

08000d44 <ftareaPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ftareaPantalla */
void ftareaPantalla(void *argument)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ftareaPantalla */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f008 f983 	bl	8009058 <osDelay>
 8000d52:	e7fb      	b.n	8000d4c <ftareaPantalla+0x8>

08000d54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d66:	f000 fd0f 	bl	8001788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40001000 	.word	0x40001000

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_MspInit+0x54>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <HAL_MspInit+0x54>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_MspInit+0x54>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_MspInit+0x54>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_MspInit+0x54>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_MspInit+0x54>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	f06f 0001 	mvn.w	r0, #1
 8000dca:	f001 f84b 	bl	8001e64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_ADC_MspInit+0x7c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d127      	bne.n	8000e4e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_ADC_MspInit+0x80>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <HAL_ADC_MspInit+0x80>)
 8000e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_ADC_MspInit+0x80>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_ADC_MspInit+0x80>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_ADC_MspInit+0x80>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_ADC_MspInit+0x80>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e36:	2320      	movs	r3, #32
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_ADC_MspInit+0x84>)
 8000e4a:	f001 facf 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	; 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_CRC_MspInit+0x3c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10d      	bne.n	8000e92 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023000 	.word	0x40023000
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_DMA2D_MspInit+0x48>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d115      	bne.n	8000ee6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_DMA2D_MspInit+0x4c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <HAL_DMA2D_MspInit+0x4c>)
 8000ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_DMA2D_MspInit+0x4c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2105      	movs	r1, #5
 8000eda:	205a      	movs	r0, #90	; 0x5a
 8000edc:	f000 ffc2 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ee0:	205a      	movs	r0, #90	; 0x5a
 8000ee2:	f000 ffdb 	bl	8001e9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	4002b000 	.word	0x4002b000
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <HAL_I2C_MspInit+0xc4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d14b      	bne.n	8000fb2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a27      	ldr	r2, [pc, #156]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f64:	2304      	movs	r3, #4
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <HAL_I2C_MspInit+0xcc>)
 8000f70:	f001 fa3c 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7a:	2312      	movs	r3, #18
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f86:	2304      	movs	r3, #4
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <HAL_I2C_MspInit+0xd0>)
 8000f92:	f001 fa2b 	bl	80023ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40005c00 	.word	0x40005c00
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09a      	sub	sp, #104	; 0x68
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	2230      	movs	r2, #48	; 0x30
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00d fd43 	bl	800ea78 <memset>
  if(hltdc->Instance==LTDC)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a85      	ldr	r2, [pc, #532]	; (800120c <HAL_LTDC_MspInit+0x240>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	f040 8102 	bne.w	8001202 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ffe:	2308      	movs	r3, #8
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001002:	2332      	movs	r3, #50	; 0x32
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001006:	2302      	movs	r3, #2
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800100a:	2300      	movs	r3, #0
 800100c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4618      	mov	r0, r3
 8001014:	f004 febc 	bl	8005d90 <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800101e:	f7ff feab 	bl	8000d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
 8001026:	4b7a      	ldr	r3, [pc, #488]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a79      	ldr	r2, [pc, #484]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800102c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b77      	ldr	r3, [pc, #476]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800103a:	623b      	str	r3, [r7, #32]
 800103c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	4b73      	ldr	r3, [pc, #460]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a72      	ldr	r2, [pc, #456]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001048:	f043 0320 	orr.w	r3, r3, #32
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b70      	ldr	r3, [pc, #448]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	4b6c      	ldr	r3, [pc, #432]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a6b      	ldr	r2, [pc, #428]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b69      	ldr	r3, [pc, #420]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	4b65      	ldr	r3, [pc, #404]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a64      	ldr	r2, [pc, #400]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b62      	ldr	r3, [pc, #392]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b5e      	ldr	r3, [pc, #376]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a5d      	ldr	r2, [pc, #372]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800109c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b5b      	ldr	r3, [pc, #364]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b57      	ldr	r3, [pc, #348]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a56      	ldr	r2, [pc, #344]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b54      	ldr	r3, [pc, #336]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	4b50      	ldr	r3, [pc, #320]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a4f      	ldr	r2, [pc, #316]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f8:	230e      	movs	r3, #14
 80010fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	4619      	mov	r1, r3
 8001102:	4844      	ldr	r0, [pc, #272]	; (8001214 <HAL_LTDC_MspInit+0x248>)
 8001104:	f001 f972 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001108:	f641 0358 	movw	r3, #6232	; 0x1858
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800111a:	230e      	movs	r3, #14
 800111c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001122:	4619      	mov	r1, r3
 8001124:	483c      	ldr	r0, [pc, #240]	; (8001218 <HAL_LTDC_MspInit+0x24c>)
 8001126:	f001 f961 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800112a:	2303      	movs	r3, #3
 800112c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800113a:	2309      	movs	r3, #9
 800113c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001142:	4619      	mov	r1, r3
 8001144:	4835      	ldr	r0, [pc, #212]	; (800121c <HAL_LTDC_MspInit+0x250>)
 8001146:	f001 f951 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800114a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800114e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800115c:	230e      	movs	r3, #14
 800115e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001164:	4619      	mov	r1, r3
 8001166:	482d      	ldr	r0, [pc, #180]	; (800121c <HAL_LTDC_MspInit+0x250>)
 8001168:	f001 f940 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800116c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001170:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800117e:	230e      	movs	r3, #14
 8001180:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001182:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001186:	4619      	mov	r1, r3
 8001188:	4825      	ldr	r0, [pc, #148]	; (8001220 <HAL_LTDC_MspInit+0x254>)
 800118a:	f001 f92f 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800118e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a0:	230e      	movs	r3, #14
 80011a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a8:	4619      	mov	r1, r3
 80011aa:	481e      	ldr	r0, [pc, #120]	; (8001224 <HAL_LTDC_MspInit+0x258>)
 80011ac:	f001 f91e 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80011b0:	2348      	movs	r3, #72	; 0x48
 80011b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c0:	230e      	movs	r3, #14
 80011c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c8:	4619      	mov	r1, r3
 80011ca:	4817      	ldr	r0, [pc, #92]	; (8001228 <HAL_LTDC_MspInit+0x25c>)
 80011cc:	f001 f90e 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011e2:	2309      	movs	r3, #9
 80011e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ea:	4619      	mov	r1, r3
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <HAL_LTDC_MspInit+0x254>)
 80011ee:	f001 f8fd 	bl	80023ec <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2105      	movs	r1, #5
 80011f6:	2058      	movs	r0, #88	; 0x58
 80011f8:	f000 fe34 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011fc:	2058      	movs	r0, #88	; 0x58
 80011fe:	f000 fe4d 	bl	8001e9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3768      	adds	r7, #104	; 0x68
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40016800 	.word	0x40016800
 8001210:	40023800 	.word	0x40023800
 8001214:	40021400 	.word	0x40021400
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40021800 	.word	0x40021800
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00

0800122c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_SPI_MspInit+0x84>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12c      	bne.n	80012a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001274:	f043 0320 	orr.w	r3, r3, #32
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001286:	f44f 7360 	mov.w	r3, #896	; 0x380
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001298:	2305      	movs	r3, #5
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_SPI_MspInit+0x8c>)
 80012a4:	f001 f8a2 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40015000 	.word	0x40015000
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40021400 	.word	0x40021400

080012bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <HAL_TIM_Base_MspInit+0x3c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10d      	bne.n	80012ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_TIM_Base_MspInit+0x40>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_TIM_Base_MspInit+0x40>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_TIM_Base_MspInit+0x40>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40010000 	.word	0x40010000
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_UART_MspInit+0x94>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d134      	bne.n	800138c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_UART_MspInit+0x98>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800135a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800136c:	2307      	movs	r3, #7
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4809      	ldr	r0, [pc, #36]	; (800139c <HAL_UART_MspInit+0x9c>)
 8001378:	f001 f838 	bl	80023ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2105      	movs	r1, #5
 8001380:	2025      	movs	r0, #37	; 0x25
 8001382:	f000 fd6f 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001386:	2025      	movs	r0, #37	; 0x25
 8001388:	f000 fd88 	bl	8001e9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40011000 	.word	0x40011000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000

080013a0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_FMC_MspInit+0x104>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d16f      	bne.n	800149c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80013bc:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <HAL_FMC_MspInit+0x104>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <HAL_FMC_MspInit+0x108>)
 80013c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ca:	4a37      	ldr	r2, [pc, #220]	; (80014a8 <HAL_FMC_MspInit+0x108>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6393      	str	r3, [r2, #56]	; 0x38
 80013d2:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <HAL_FMC_MspInit+0x108>)
 80013d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80013de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80013e2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f0:	230c      	movs	r3, #12
 80013f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	482c      	ldr	r0, [pc, #176]	; (80014ac <HAL_FMC_MspInit+0x10c>)
 80013fa:	f000 fff7 	bl	80023ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80013fe:	2301      	movs	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800140e:	230c      	movs	r3, #12
 8001410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4826      	ldr	r0, [pc, #152]	; (80014b0 <HAL_FMC_MspInit+0x110>)
 8001418:	f000 ffe8 	bl	80023ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800141c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001420:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142e:	230c      	movs	r3, #12
 8001430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	481f      	ldr	r0, [pc, #124]	; (80014b4 <HAL_FMC_MspInit+0x114>)
 8001438:	f000 ffd8 	bl	80023ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800143c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001440:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800144e:	230c      	movs	r3, #12
 8001450:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4818      	ldr	r0, [pc, #96]	; (80014b8 <HAL_FMC_MspInit+0x118>)
 8001458:	f000 ffc8 	bl	80023ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800145c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001460:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146e:	230c      	movs	r3, #12
 8001470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <HAL_FMC_MspInit+0x11c>)
 8001478:	f000 ffb8 	bl	80023ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800147c:	2360      	movs	r3, #96	; 0x60
 800147e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800148c:	230c      	movs	r3, #12
 800148e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <HAL_FMC_MspInit+0x120>)
 8001496:	f000 ffa9 	bl	80023ec <HAL_GPIO_Init>
 800149a:	e000      	b.n	800149e <HAL_FMC_MspInit+0xfe>
    return;
 800149c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000034c 	.word	0x2000034c
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40021400 	.word	0x40021400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40020400 	.word	0x40020400

080014c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014cc:	f7ff ff68 	bl	80013a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	; 0x38
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b33      	ldr	r3, [pc, #204]	; (80015bc <HAL_InitTick+0xe4>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a32      	ldr	r2, [pc, #200]	; (80015bc <HAL_InitTick+0xe4>)
 80014f2:	f043 0310 	orr.w	r3, r3, #16
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_InitTick+0xe4>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001504:	f107 0210 	add.w	r2, r7, #16
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f004 fc0c 	bl	8005d2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800151e:	f004 fbdd 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 8001522:	6378      	str	r0, [r7, #52]	; 0x34
 8001524:	e004      	b.n	8001530 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001526:	f004 fbd9 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 800152a:	4603      	mov	r3, r0
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001532:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <HAL_InitTick+0xe8>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9b      	lsrs	r3, r3, #18
 800153a:	3b01      	subs	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_InitTick+0xec>)
 8001540:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <HAL_InitTick+0xf0>)
 8001542:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_InitTick+0xec>)
 8001546:	f240 32e7 	movw	r2, #999	; 0x3e7
 800154a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800154c:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_InitTick+0xec>)
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_InitTick+0xec>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <HAL_InitTick+0xec>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_InitTick+0xec>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001564:	4817      	ldr	r0, [pc, #92]	; (80015c4 <HAL_InitTick+0xec>)
 8001566:	f004 fe90 	bl	800628a <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001570:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001574:	2b00      	cmp	r3, #0
 8001576:	d11b      	bne.n	80015b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <HAL_InitTick+0xec>)
 800157a:	f004 fed5 	bl	8006328 <HAL_TIM_Base_Start_IT>
 800157e:	4603      	mov	r3, r0
 8001580:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001584:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001588:	2b00      	cmp	r3, #0
 800158a:	d111      	bne.n	80015b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800158c:	2036      	movs	r0, #54	; 0x36
 800158e:	f000 fc85 	bl	8001e9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d808      	bhi.n	80015aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	2036      	movs	r0, #54	; 0x36
 800159e:	f000 fc61 	bl	8001e64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_InitTick+0xf4>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e002      	b.n	80015b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3738      	adds	r7, #56	; 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	20000350 	.word	0x20000350
 80015c8:	40001000 	.word	0x40001000
 80015cc:	20000004 	.word	0x20000004

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <USART1_IRQHandler+0x10>)
 8001602:	f005 fb07 	bl	8006c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002c8 	.word	0x200002c8

08001610 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <TIM6_DAC_IRQHandler+0x10>)
 8001616:	f004 fef7 	bl	8006408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000350 	.word	0x20000350

08001624 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <OTG_HS_IRQHandler+0x10>)
 800162a:	f001 fb85 	bl	8002d38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000631c 	.word	0x2000631c

08001638 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <LTDC_IRQHandler+0x10>)
 800163e:	f003 fc45 	bl	8004ecc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000180 	.word	0x20000180

0800164c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA2D_IRQHandler+0x10>)
 8001652:	f000 fd28 	bl	80020a6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000ec 	.word	0x200000ec

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f00d fa0a 	bl	800eaa8 <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <_sbrk+0x64>)
 80016b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20030000 	.word	0x20030000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	20000398 	.word	0x20000398
 80016c8:	20006848 	.word	0x20006848

080016cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <SystemInit+0x20>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <SystemInit+0x20>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f4:	f7ff ffea 	bl	80016cc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	; (8001730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	; (800173c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800171e:	f00d f9c9 	bl	800eab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7fe fee3 	bl	80004ec <main>
  bx  lr    
 8001726:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001728:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001734:	0800ec80 	.word	0x0800ec80
  ldr r2, =_sbss
 8001738:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800173c:	20006844 	.word	0x20006844

08001740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>
	...

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_Init+0x40>)
 800174e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_Init+0x40>)
 800175a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_Init+0x40>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 fb6e 	bl	8001e4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff feb0 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001778:	f7ff fb04 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023c00 	.word	0x40023c00

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008
 80017ac:	2000039c 	.word	0x2000039c

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	2000039c 	.word	0x2000039c

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008

08001810 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e033      	b.n	800188e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fad4 	bl	8000ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001856:	f023 0302 	bic.w	r3, r3, #2
 800185a:	f043 0202 	orr.w	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f94a 	bl	8001afc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f023 0303 	bic.w	r3, r3, #3
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
 800187e:	e001      	b.n	8001884 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x1c>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e113      	b.n	8001adc <HAL_ADC_ConfigChannel+0x244>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	d925      	bls.n	8001910 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	3b1e      	subs	r3, #30
 80018da:	2207      	movs	r2, #7
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43da      	mvns	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	400a      	ands	r2, r1
 80018e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68d9      	ldr	r1, [r3, #12]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	4603      	mov	r3, r0
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4403      	add	r3, r0
 8001902:	3b1e      	subs	r3, #30
 8001904:	409a      	lsls	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	e022      	b.n	8001956 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6919      	ldr	r1, [r3, #16]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	461a      	mov	r2, r3
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	2207      	movs	r2, #7
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	400a      	ands	r2, r1
 8001932:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6919      	ldr	r1, [r3, #16]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	4603      	mov	r3, r0
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4403      	add	r3, r0
 800194c:	409a      	lsls	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b06      	cmp	r3, #6
 800195c:	d824      	bhi.n	80019a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	3b05      	subs	r3, #5
 8001970:	221f      	movs	r2, #31
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	400a      	ands	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b05      	subs	r3, #5
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34
 80019a6:	e04c      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b0c      	cmp	r3, #12
 80019ae:	d824      	bhi.n	80019fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	3b23      	subs	r3, #35	; 0x23
 80019c2:	221f      	movs	r2, #31
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43da      	mvns	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	400a      	ands	r2, r1
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	3b23      	subs	r3, #35	; 0x23
 80019ec:	fa00 f203 	lsl.w	r2, r0, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
 80019f8:	e023      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b41      	subs	r3, #65	; 0x41
 8001a0c:	221f      	movs	r2, #31
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	400a      	ands	r2, r1
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	3b41      	subs	r3, #65	; 0x41
 8001a36:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <HAL_ADC_ConfigChannel+0x250>)
 8001a44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a28      	ldr	r2, [pc, #160]	; (8001aec <HAL_ADC_ConfigChannel+0x254>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d10f      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1d8>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b12      	cmp	r3, #18
 8001a56:	d10b      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <HAL_ADC_ConfigChannel+0x254>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12b      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x23a>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <HAL_ADC_ConfigChannel+0x258>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d003      	beq.n	8001a8c <HAL_ADC_ConfigChannel+0x1f4>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b11      	cmp	r3, #17
 8001a8a:	d122      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <HAL_ADC_ConfigChannel+0x258>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d111      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_ADC_ConfigChannel+0x25c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <HAL_ADC_ConfigChannel+0x260>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	0c9a      	lsrs	r2, r3, #18
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40012300 	.word	0x40012300
 8001aec:	40012000 	.word	0x40012000
 8001af0:	10000012 	.word	0x10000012
 8001af4:	20000000 	.word	0x20000000
 8001af8:	431bde83 	.word	0x431bde83

08001afc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b04:	4b79      	ldr	r3, [pc, #484]	; (8001cec <ADC_Init+0x1f0>)
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	021a      	lsls	r2, r3, #8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6859      	ldr	r1, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6899      	ldr	r1, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <ADC_Init+0x1f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d022      	beq.n	8001bda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ba2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6899      	ldr	r1, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	e00f      	b.n	8001bfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0202 	bic.w	r2, r2, #2
 8001c08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6899      	ldr	r1, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7e1b      	ldrb	r3, [r3, #24]
 8001c14:	005a      	lsls	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01b      	beq.n	8001c60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c36:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	3b01      	subs	r3, #1
 8001c54:	035a      	lsls	r2, r3, #13
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	e007      	b.n	8001c70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c6e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	051a      	lsls	r2, r3, #20
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6899      	ldr	r1, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	029a      	lsls	r2, r3, #10
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40012300 	.word	0x40012300
 8001cf0:	0f000001 	.word	0x0f000001

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	; (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	; (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	; (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff4c 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e76:	f7ff ff61 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001e7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	6978      	ldr	r0, [r7, #20]
 8001e82:	f7ff ffb1 	bl	8001de8 <NVIC_EncodePriority>
 8001e86:	4602      	mov	r2, r0
 8001e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff80 	bl	8001d94 <__NVIC_SetPriority>
}
 8001e94:	bf00      	nop
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff54 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	795b      	ldrb	r3, [r3, #5]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe ffc2 	bl	8000e64 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001efe:	f7ff fc57 	bl	80017b0 <HAL_GetTick>
 8001f02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d008      	beq.n	8001f22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e052      	b.n	8001fc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0216 	bic.w	r2, r2, #22
 8001f30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <HAL_DMA_Abort+0x62>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0208 	bic.w	r2, r2, #8
 8001f60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f72:	e013      	b.n	8001f9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f74:	f7ff fc1c 	bl	80017b0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d90c      	bls.n	8001f9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e015      	b.n	8001fc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1e4      	bne.n	8001f74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	223f      	movs	r2, #63	; 0x3f
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00c      	b.n	8002008 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e03b      	b.n	800209e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe ff34 	bl	8000ea8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002064:	f023 0107 	bic.w	r1, r3, #7
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800207e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68d1      	ldr	r1, [r2, #12]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	430b      	orrs	r3, r1
 800208c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d026      	beq.n	8002116 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d021      	beq.n	8002116 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020e0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2201      	movs	r2, #1
 80020f4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2204      	movs	r2, #4
 80020fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d026      	beq.n	800216e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d021      	beq.n	800216e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002138:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2220      	movs	r2, #32
 8002140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002146:	f043 0202 	orr.w	r2, r3, #2
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2204      	movs	r2, #4
 8002152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d026      	beq.n	80021c6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800217e:	2b00      	cmp	r3, #0
 8002180:	d021      	beq.n	80021c6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002190:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2208      	movs	r2, #8
 8002198:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	f043 0204 	orr.w	r2, r3, #4
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2204      	movs	r2, #4
 80021aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00e      	beq.n	80021f8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2204      	movs	r2, #4
 80021f0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f853 	bl	800229e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d024      	beq.n	800224c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01f      	beq.n	800224c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800221a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2202      	movs	r2, #2
 8002222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01f      	beq.n	8002296 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01a      	beq.n	8002296 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800226e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2210      	movs	r2, #16
 8002276:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f80e 	bl	80022b2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_DMA2D_ConfigLayer+0x20>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e079      	b.n	80023dc <HAL_DMA2D_ConfigLayer+0x114>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	3318      	adds	r3, #24
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002312:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <HAL_DMA2D_ConfigLayer+0x120>)
 8002314:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d003      	beq.n	8002326 <HAL_DMA2D_ConfigLayer+0x5e>
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b09      	cmp	r3, #9
 8002324:	d107      	bne.n	8002336 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e005      	b.n	8002342 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	061b      	lsls	r3, r3, #24
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d120      	bne.n	800238a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43db      	mvns	r3, r3
 8002352:	ea02 0103 	and.w	r1, r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	430a      	orrs	r2, r1
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b0a      	cmp	r3, #10
 8002370:	d003      	beq.n	800237a <HAL_DMA2D_ConfigLayer+0xb2>
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b09      	cmp	r3, #9
 8002378:	d127      	bne.n	80023ca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
 8002388:	e01f      	b.n	80023ca <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43db      	mvns	r3, r3
 8002394:	ea02 0103 	and.w	r1, r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	430a      	orrs	r2, r1
 80023a0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b0a      	cmp	r3, #10
 80023b2:	d003      	beq.n	80023bc <HAL_DMA2D_ConfigLayer+0xf4>
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b09      	cmp	r3, #9
 80023ba:	d106      	bne.n	80023ca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80023c8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	ff03000f 	.word	0xff03000f

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e177      	b.n	80026f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 8166 	bne.w	80026f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d005      	beq.n	800243e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243a:	2b02      	cmp	r3, #2
 800243c:	d130      	bne.n	80024a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 0201 	and.w	r2, r3, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d017      	beq.n	80024dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d123      	bne.n	8002530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	08da      	lsrs	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3208      	adds	r2, #8
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80c0 	beq.w	80026f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b66      	ldr	r3, [pc, #408]	; (8002710 <HAL_GPIO_Init+0x324>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a65      	ldr	r2, [pc, #404]	; (8002710 <HAL_GPIO_Init+0x324>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_GPIO_Init+0x324>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258e:	4a61      	ldr	r2, [pc, #388]	; (8002714 <HAL_GPIO_Init+0x328>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_GPIO_Init+0x32c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d037      	beq.n	800262a <HAL_GPIO_Init+0x23e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a57      	ldr	r2, [pc, #348]	; (800271c <HAL_GPIO_Init+0x330>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d031      	beq.n	8002626 <HAL_GPIO_Init+0x23a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a56      	ldr	r2, [pc, #344]	; (8002720 <HAL_GPIO_Init+0x334>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d02b      	beq.n	8002622 <HAL_GPIO_Init+0x236>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a55      	ldr	r2, [pc, #340]	; (8002724 <HAL_GPIO_Init+0x338>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x232>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a54      	ldr	r2, [pc, #336]	; (8002728 <HAL_GPIO_Init+0x33c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x22e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a53      	ldr	r2, [pc, #332]	; (800272c <HAL_GPIO_Init+0x340>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x22a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_GPIO_Init+0x344>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x226>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a51      	ldr	r2, [pc, #324]	; (8002734 <HAL_GPIO_Init+0x348>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x222>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a50      	ldr	r2, [pc, #320]	; (8002738 <HAL_GPIO_Init+0x34c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x21e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4f      	ldr	r2, [pc, #316]	; (800273c <HAL_GPIO_Init+0x350>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x21a>
 8002602:	2309      	movs	r3, #9
 8002604:	e012      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002606:	230a      	movs	r3, #10
 8002608:	e010      	b.n	800262c <HAL_GPIO_Init+0x240>
 800260a:	2308      	movs	r3, #8
 800260c:	e00e      	b.n	800262c <HAL_GPIO_Init+0x240>
 800260e:	2307      	movs	r3, #7
 8002610:	e00c      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002612:	2306      	movs	r3, #6
 8002614:	e00a      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002616:	2305      	movs	r3, #5
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x240>
 800261a:	2304      	movs	r3, #4
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x240>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x240>
 800262a:	2300      	movs	r3, #0
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800263c:	4935      	ldr	r1, [pc, #212]	; (8002714 <HAL_GPIO_Init+0x328>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_GPIO_Init+0x354>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266e:	4a34      	ldr	r2, [pc, #208]	; (8002740 <HAL_GPIO_Init+0x354>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002674:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_GPIO_Init+0x354>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002698:	4a29      	ldr	r2, [pc, #164]	; (8002740 <HAL_GPIO_Init+0x354>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	f67f ae84 	bls.w	8002408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	40013800 	.word	0x40013800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800
 8002734:	40021c00 	.word	0x40021c00
 8002738:	40022000 	.word	0x40022000
 800273c:	40022400 	.word	0x40022400
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
 8002750:	4613      	mov	r3, r2
 8002752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002760:	e003      	b.n	800276a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	619a      	str	r2, [r3, #24]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b086      	sub	sp, #24
 800277a:	af02      	add	r7, sp, #8
 800277c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e059      	b.n	800283c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f00b fdf6 	bl	800e394 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2203      	movs	r2, #3
 80027ac:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b6:	d102      	bne.n	80027be <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f005 fa2f 	bl	8007c26 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7c1a      	ldrb	r2, [r3, #16]
 80027d0:	f88d 2000 	strb.w	r2, [sp]
 80027d4:	3304      	adds	r3, #4
 80027d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d8:	f005 f9b0 	bl	8007b3c <USB_CoreInit>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e026      	b.n	800283c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2101      	movs	r1, #1
 80027f4:	4618      	mov	r0, r3
 80027f6:	f005 fa27 	bl	8007c48 <USB_SetCurrentMode>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e017      	b.n	800283c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7c1a      	ldrb	r2, [r3, #16]
 8002814:	f88d 2000 	strb.w	r2, [sp]
 8002818:	3304      	adds	r3, #4
 800281a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800281c:	f005 fbca 	bl	8007fb4 <USB_HostInit>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e004      	b.n	800283c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b08b      	sub	sp, #44	; 0x2c
 8002848:	af04      	add	r7, sp, #16
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	4608      	mov	r0, r1
 800284e:	4611      	mov	r1, r2
 8002850:	461a      	mov	r2, r3
 8002852:	4603      	mov	r3, r0
 8002854:	70fb      	strb	r3, [r7, #3]
 8002856:	460b      	mov	r3, r1
 8002858:	70bb      	strb	r3, [r7, #2]
 800285a:	4613      	mov	r3, r2
 800285c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800285e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002860:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_HCD_HC_Init+0x2c>
 800286c:	2302      	movs	r3, #2
 800286e:	e09d      	b.n	80029ac <HAL_HCD_HC_Init+0x168>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	3319      	adds	r3, #25
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	3314      	adds	r3, #20
 800289c:	787a      	ldrb	r2, [r7, #1]
 800289e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	3315      	adds	r3, #21
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3326      	adds	r3, #38	; 0x26
 80028c4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80028c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	78bb      	ldrb	r3, [r7, #2]
 80028ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028d2:	b2d8      	uxtb	r0, r3
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	3316      	adds	r3, #22
 80028e2:	4602      	mov	r2, r0
 80028e4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fbc8 	bl	8003080 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80028f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	da0a      	bge.n	800290e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3317      	adds	r3, #23
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e009      	b.n	8002922 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3317      	adds	r3, #23
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f005 fca8 	bl	800827c <USB_GetHostSpeed>
 800292c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800292e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002932:	2b01      	cmp	r3, #1
 8002934:	d10b      	bne.n	800294e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002936:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800293a:	2b01      	cmp	r3, #1
 800293c:	d107      	bne.n	800294e <HAL_HCD_HC_Init+0x10a>
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d104      	bne.n	800294e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2bbc      	cmp	r3, #188	; 0xbc
 8002948:	d901      	bls.n	800294e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800294a:	23bc      	movs	r3, #188	; 0xbc
 800294c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	3318      	adds	r3, #24
 800295e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	b298      	uxth	r0, r3
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3328      	adds	r3, #40	; 0x28
 8002978:	4602      	mov	r2, r0
 800297a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	b29b      	uxth	r3, r3
 8002984:	787c      	ldrb	r4, [r7, #1]
 8002986:	78ba      	ldrb	r2, [r7, #2]
 8002988:	78f9      	ldrb	r1, [r7, #3]
 800298a:	9302      	str	r3, [sp, #8]
 800298c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	4623      	mov	r3, r4
 800299a:	f005 fc97 	bl	80082cc <USB_HC_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd90      	pop	{r4, r7, pc}

080029b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_HCD_HC_Halt+0x1e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e00f      	b.n	80029f2 <HAL_HCD_HC_Halt+0x3e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f006 f829 	bl	8008a3a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	70fb      	strb	r3, [r7, #3]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	70bb      	strb	r3, [r7, #2]
 8002a12:	4613      	mov	r3, r2
 8002a14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3317      	adds	r3, #23
 8002a26:	78ba      	ldrb	r2, [r7, #2]
 8002a28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3326      	adds	r3, #38	; 0x26
 8002a3a:	787a      	ldrb	r2, [r7, #1]
 8002a3c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a3e:	7c3b      	ldrb	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d114      	bne.n	8002a6e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	332a      	adds	r3, #42	; 0x2a
 8002a54:	2203      	movs	r2, #3
 8002a56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	3319      	adds	r3, #25
 8002a68:	7f3a      	ldrb	r2, [r7, #28]
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e009      	b.n	8002a82 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	332a      	adds	r3, #42	; 0x2a
 8002a7e:	2202      	movs	r2, #2
 8002a80:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a82:	787b      	ldrb	r3, [r7, #1]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	f200 8102 	bhi.w	8002c8e <HAL_HCD_HC_SubmitRequest+0x292>
 8002a8a:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002c79 	.word	0x08002c79
 8002a98:	08002b65 	.word	0x08002b65
 8002a9c:	08002bef 	.word	0x08002bef
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002aa0:	7c3b      	ldrb	r3, [r7, #16]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	f040 80f5 	bne.w	8002c92 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002aa8:	78bb      	ldrb	r3, [r7, #2]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d12d      	bne.n	8002b0a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002aae:	8b3b      	ldrh	r3, [r7, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	333d      	adds	r3, #61	; 0x3d
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	333d      	adds	r3, #61	; 0x3d
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	332a      	adds	r3, #42	; 0x2a
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002af2:	e0ce      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	332a      	adds	r3, #42	; 0x2a
 8002b04:	2202      	movs	r2, #2
 8002b06:	701a      	strb	r2, [r3, #0]
      break;
 8002b08:	e0c3      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	331a      	adds	r3, #26
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	f040 80b8 	bne.w	8002c92 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	333c      	adds	r3, #60	; 0x3c
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	332a      	adds	r3, #42	; 0x2a
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
      break;
 8002b4c:	e0a1      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	332a      	adds	r3, #42	; 0x2a
 8002b5e:	2202      	movs	r2, #2
 8002b60:	701a      	strb	r2, [r3, #0]
      break;
 8002b62:	e096      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b64:	78bb      	ldrb	r3, [r7, #2]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d120      	bne.n	8002bac <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	333d      	adds	r3, #61	; 0x3d
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	332a      	adds	r3, #42	; 0x2a
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002b94:	e07e      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	332a      	adds	r3, #42	; 0x2a
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	701a      	strb	r2, [r3, #0]
      break;
 8002baa:	e073      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	333c      	adds	r3, #60	; 0x3c
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	332a      	adds	r3, #42	; 0x2a
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
      break;
 8002bd6:	e05d      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	332a      	adds	r3, #42	; 0x2a
 8002be8:	2202      	movs	r2, #2
 8002bea:	701a      	strb	r2, [r3, #0]
      break;
 8002bec:	e052      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002bee:	78bb      	ldrb	r3, [r7, #2]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d120      	bne.n	8002c36 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	333d      	adds	r3, #61	; 0x3d
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	332a      	adds	r3, #42	; 0x2a
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c1e:	e039      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	332a      	adds	r3, #42	; 0x2a
 8002c30:	2202      	movs	r2, #2
 8002c32:	701a      	strb	r2, [r3, #0]
      break;
 8002c34:	e02e      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	333c      	adds	r3, #60	; 0x3c
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	332a      	adds	r3, #42	; 0x2a
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
      break;
 8002c60:	e018      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	332a      	adds	r3, #42	; 0x2a
 8002c72:	2202      	movs	r2, #2
 8002c74:	701a      	strb	r2, [r3, #0]
      break;
 8002c76:	e00d      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	332a      	adds	r3, #42	; 0x2a
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
      break;
 8002c8c:	e002      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002c8e:	bf00      	nop
 8002c90:	e000      	b.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002c92:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	332c      	adds	r3, #44	; 0x2c
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	8b39      	ldrh	r1, [r7, #24]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4403      	add	r3, r0
 8002cb8:	3334      	adds	r3, #52	; 0x34
 8002cba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	334c      	adds	r3, #76	; 0x4c
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3338      	adds	r3, #56	; 0x38
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3315      	adds	r3, #21
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	334d      	adds	r3, #77	; 0x4d
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	3310      	adds	r3, #16
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	1d19      	adds	r1, r3, #4
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	799b      	ldrb	r3, [r3, #6]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f005 fbfc 	bl	8008524 <USB_HC_StartXfer>
 8002d2c:	4603      	mov	r3, r0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop

08002d38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f005 f8f0 	bl	8007f34 <USB_GetMode>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	f040 80fb 	bne.w	8002f52 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f005 f8b3 	bl	8007ecc <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80f1 	beq.w	8002f50 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f005 f8aa 	bl	8007ecc <USB_ReadInterrupts>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d82:	d104      	bne.n	8002d8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f005 f89a 	bl	8007ecc <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da2:	d104      	bne.n	8002dae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f005 f88a 	bl	8007ecc <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc2:	d104      	bne.n	8002dce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002dcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f005 f87a 	bl	8007ecc <USB_ReadInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d103      	bne.n	8002dea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2202      	movs	r2, #2
 8002de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f005 f86c 	bl	8007ecc <USB_ReadInterrupts>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dfe:	d120      	bne.n	8002e42 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d113      	bne.n	8002e42 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002e1a:	2110      	movs	r1, #16
 8002e1c:	6938      	ldr	r0, [r7, #16]
 8002e1e:	f004 ff5f 	bl	8007ce0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002e22:	6938      	ldr	r0, [r7, #16]
 8002e24:	f004 ff8e 	bl	8007d44 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7a5b      	ldrb	r3, [r3, #9]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d105      	bne.n	8002e3c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2101      	movs	r1, #1
 8002e36:	4618      	mov	r0, r3
 8002e38:	f005 f980 	bl	800813c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f00b fb23 	bl	800e488 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f005 f840 	bl	8007ecc <USB_ReadInterrupts>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e56:	d102      	bne.n	8002e5e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f001 fd33 	bl	80048c4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f005 f832 	bl	8007ecc <USB_ReadInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d106      	bne.n	8002e80 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f00b faec 	bl	800e450 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f005 f821 	bl	8007ecc <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e94:	d139      	bne.n	8002f0a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f005 fdbc 	bl	8008a18 <USB_HC_ReadInterrupt>
 8002ea0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	e025      	b.n	8002ef4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d018      	beq.n	8002eee <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed2:	d106      	bne.n	8002ee2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f905 	bl	80030ea <HCD_HC_IN_IRQHandler>
 8002ee0:	e005      	b.n	8002eee <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 ff67 	bl	8003dbc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	795b      	ldrb	r3, [r3, #5]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d3d3      	bcc.n	8002ea8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 ffdc 	bl	8007ecc <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d101      	bne.n	8002f22 <HAL_HCD_IRQHandler+0x1ea>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_HCD_IRQHandler+0x1ec>
 8002f22:	2300      	movs	r3, #0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d014      	beq.n	8002f52 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0210 	bic.w	r2, r2, #16
 8002f36:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f001 fbe4 	bl	8004706 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0210 	orr.w	r2, r2, #16
 8002f4c:	619a      	str	r2, [r3, #24]
 8002f4e:	e000      	b.n	8002f52 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002f50:	bf00      	nop
    }
  }
}
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_HCD_Start+0x16>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e013      	b.n	8002f96 <HAL_HCD_Start+0x3e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f005 f944 	bl	800820a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 fe3c 	bl	8007c04 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_HCD_Stop+0x16>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e00d      	b.n	8002fd0 <HAL_HCD_Stop+0x32>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f005 fe97 	bl	8008cf4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f005 f8e6 	bl	80081b6 <USB_ResetPort>
 8002fea:	4603      	mov	r3, r0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	334c      	adds	r3, #76	; 0x4c
 8003010:	781b      	ldrb	r3, [r3, #0]
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	460b      	mov	r3, r1
 8003028:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3338      	adds	r3, #56	; 0x38
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f005 f928 	bl	80082aa <USB_GetCurrentFrame>
 800305a:	4603      	mov	r3, r0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f005 f903 	bl	800827c <USB_GetHostSpeed>
 8003076:	4603      	mov	r3, r0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	331a      	adds	r3, #26
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	331b      	adds	r3, #27
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	3325      	adds	r3, #37	; 0x25
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	3324      	adds	r3, #36	; 0x24
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	460b      	mov	r3, r1
 80030f4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f004 fef2 	bl	8007ef2 <USB_ReadChInterrupts>
 800310e:	4603      	mov	r3, r0
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b04      	cmp	r3, #4
 8003116:	d11a      	bne.n	800314e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	461a      	mov	r2, r3
 8003126:	2304      	movs	r3, #4
 8003128:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334d      	adds	r3, #77	; 0x4d
 800313a:	2207      	movs	r2, #7
 800313c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f005 fc77 	bl	8008a3a <USB_HC_Halt>
 800314c:	e09e      	b.n	800328c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f004 fecb 	bl	8007ef2 <USB_ReadChInterrupts>
 800315c:	4603      	mov	r3, r0
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003166:	d11b      	bne.n	80031a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4413      	add	r3, r2
 8003170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003174:	461a      	mov	r2, r3
 8003176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800317a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	334d      	adds	r3, #77	; 0x4d
 800318c:	2208      	movs	r2, #8
 800318e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f005 fc4e 	bl	8008a3a <USB_HC_Halt>
 800319e:	e075      	b.n	800328c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f004 fea2 	bl	8007ef2 <USB_ReadChInterrupts>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d11a      	bne.n	80031ee <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c4:	461a      	mov	r2, r3
 80031c6:	2308      	movs	r3, #8
 80031c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	334d      	adds	r3, #77	; 0x4d
 80031da:	2206      	movs	r2, #6
 80031dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	4611      	mov	r1, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f005 fc27 	bl	8008a3a <USB_HC_Halt>
 80031ec:	e04e      	b.n	800328c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f004 fe7b 	bl	8007ef2 <USB_ReadChInterrupts>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003206:	d11b      	bne.n	8003240 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003214:	461a      	mov	r2, r3
 8003216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800321a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	334d      	adds	r3, #77	; 0x4d
 800322c:	2209      	movs	r2, #9
 800322e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f005 fbfe 	bl	8008a3a <USB_HC_Halt>
 800323e:	e025      	b.n	800328c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f004 fe52 	bl	8007ef2 <USB_ReadChInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b80      	cmp	r3, #128	; 0x80
 8003256:	d119      	bne.n	800328c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	461a      	mov	r2, r3
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	334d      	adds	r3, #77	; 0x4d
 800327a:	2207      	movs	r2, #7
 800327c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f005 fbd7 	bl	8008a3a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f004 fe2c 	bl	8007ef2 <USB_ReadChInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a4:	d112      	bne.n	80032cc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f005 fbc3 	bl	8008a3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c0:	461a      	mov	r2, r3
 80032c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c6:	6093      	str	r3, [r2, #8]
 80032c8:	f000 bd75 	b.w	8003db6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f004 fe0c 	bl	8007ef2 <USB_ReadChInterrupts>
 80032da:	4603      	mov	r3, r0
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 8128 	bne.w	8003536 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	2320      	movs	r3, #32
 80032f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	331b      	adds	r3, #27
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d119      	bne.n	8003342 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	331b      	adds	r3, #27
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4413      	add	r3, r2
 800332a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	0151      	lsls	r1, r2, #5
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	440a      	add	r2, r1
 8003338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800333c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003340:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	799b      	ldrb	r3, [r3, #6]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01b      	beq.n	8003382 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	3330      	adds	r3, #48	; 0x30
 800335a:	6819      	ldr	r1, [r3, #0]
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	1ac9      	subs	r1, r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4403      	add	r3, r0
 800337e:	3338      	adds	r3, #56	; 0x38
 8003380:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	334d      	adds	r3, #77	; 0x4d
 8003392:	2201      	movs	r2, #1
 8003394:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	3344      	adds	r3, #68	; 0x44
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	461a      	mov	r2, r3
 80033b8:	2301      	movs	r3, #1
 80033ba:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	3326      	adds	r3, #38	; 0x26
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	3326      	adds	r3, #38	; 0x26
 80033e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d110      	bne.n	800340a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f005 fb22 	bl	8008a3a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	461a      	mov	r2, r3
 8003404:	2310      	movs	r3, #16
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	e03d      	b.n	8003486 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3326      	adds	r3, #38	; 0x26
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d00a      	beq.n	8003436 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	3326      	adds	r3, #38	; 0x26
 8003430:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003432:	2b01      	cmp	r3, #1
 8003434:	d127      	bne.n	8003486 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	0151      	lsls	r1, r2, #5
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	440a      	add	r2, r1
 800344c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003450:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003454:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	334c      	adds	r3, #76	; 0x4c
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	334c      	adds	r3, #76	; 0x4c
 800347a:	781a      	ldrb	r2, [r3, #0]
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f00b f80f 	bl	800e4a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	799b      	ldrb	r3, [r3, #6]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d13b      	bne.n	8003506 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	3338      	adds	r3, #56	; 0x38
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4403      	add	r3, r0
 80034ae:	3328      	adds	r3, #40	; 0x28
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	440b      	add	r3, r1
 80034b4:	1e59      	subs	r1, r3, #1
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4403      	add	r3, r0
 80034c4:	3328      	adds	r3, #40	; 0x28
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8470 	beq.w	8003db6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	333c      	adds	r3, #60	; 0x3c
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	f083 0301 	eor.w	r3, r3, #1
 80034ee:	b2d8      	uxtb	r0, r3
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	333c      	adds	r3, #60	; 0x3c
 80034fe:	4602      	mov	r2, r0
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	f000 bc58 	b.w	8003db6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	333c      	adds	r3, #60	; 0x3c
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	f083 0301 	eor.w	r3, r3, #1
 800351e:	b2d8      	uxtb	r0, r3
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	333c      	adds	r3, #60	; 0x3c
 800352e:	4602      	mov	r2, r0
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	f000 bc40 	b.w	8003db6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	4611      	mov	r1, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f004 fcd7 	bl	8007ef2 <USB_ReadChInterrupts>
 8003544:	4603      	mov	r3, r0
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b20      	cmp	r3, #32
 800354c:	d131      	bne.n	80035b2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355a:	461a      	mov	r2, r3
 800355c:	2320      	movs	r3, #32
 800355e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	331a      	adds	r3, #26
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b01      	cmp	r3, #1
 8003574:	f040 841f 	bne.w	8003db6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	331b      	adds	r3, #27
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	334d      	adds	r3, #77	; 0x4d
 800359c:	2203      	movs	r2, #3
 800359e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f005 fa46 	bl	8008a3a <USB_HC_Halt>
 80035ae:	f000 bc02 	b.w	8003db6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f004 fc99 	bl	8007ef2 <USB_ReadChInterrupts>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	f040 8305 	bne.w	8003bd6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	461a      	mov	r2, r3
 80035da:	2302      	movs	r3, #2
 80035dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	334d      	adds	r3, #77	; 0x4d
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d114      	bne.n	800361e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	334d      	adds	r3, #77	; 0x4d
 8003604:	2202      	movs	r2, #2
 8003606:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	334c      	adds	r3, #76	; 0x4c
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e2cc      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	334d      	adds	r3, #77	; 0x4d
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b06      	cmp	r3, #6
 8003632:	d114      	bne.n	800365e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334d      	adds	r3, #77	; 0x4d
 8003644:	2202      	movs	r2, #2
 8003646:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	334c      	adds	r3, #76	; 0x4c
 8003658:	2205      	movs	r2, #5
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e2ac      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	334d      	adds	r3, #77	; 0x4d
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b07      	cmp	r3, #7
 8003672:	d00b      	beq.n	800368c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	334d      	adds	r3, #77	; 0x4d
 8003684:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003686:	2b09      	cmp	r3, #9
 8003688:	f040 80a6 	bne.w	80037d8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334d      	adds	r3, #77	; 0x4d
 800369c:	2202      	movs	r2, #2
 800369e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3344      	adds	r3, #68	; 0x44
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4403      	add	r3, r0
 80036c0:	3344      	adds	r3, #68	; 0x44
 80036c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3344      	adds	r3, #68	; 0x44
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d943      	bls.n	8003762 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3344      	adds	r3, #68	; 0x44
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	331a      	adds	r3, #26
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d123      	bne.n	800374c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	331b      	adds	r3, #27
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	331c      	adds	r3, #28
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	0151      	lsls	r1, r2, #5
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	440a      	add	r2, r1
 8003742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334c      	adds	r3, #76	; 0x4c
 800375c:	2204      	movs	r2, #4
 800375e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003760:	e229      	b.n	8003bb6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	334c      	adds	r3, #76	; 0x4c
 8003772:	2202      	movs	r2, #2
 8003774:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	3326      	adds	r3, #38	; 0x26
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3326      	adds	r3, #38	; 0x26
 800379c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800379e:	2b02      	cmp	r3, #2
 80037a0:	f040 8209 	bne.w	8003bb6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037ba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037c2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	461a      	mov	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037d6:	e1ee      	b.n	8003bb6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	334d      	adds	r3, #77	; 0x4d
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	f040 80c8 	bne.w	8003980 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	334d      	adds	r3, #77	; 0x4d
 8003800:	2202      	movs	r2, #2
 8003802:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	331b      	adds	r3, #27
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	f040 81ce 	bne.w	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3326      	adds	r3, #38	; 0x26
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d16b      	bne.n	800390a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	3348      	adds	r3, #72	; 0x48
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	1c59      	adds	r1, r3, #1
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4403      	add	r3, r0
 8003852:	3348      	adds	r3, #72	; 0x48
 8003854:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3348      	adds	r3, #72	; 0x48
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d943      	bls.n	80038f4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	3348      	adds	r3, #72	; 0x48
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	331b      	adds	r3, #27
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	3344      	adds	r3, #68	; 0x44
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d809      	bhi.n	80038be <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	331c      	adds	r3, #28
 80038ba:	2201      	movs	r2, #1
 80038bc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	0151      	lsls	r1, r2, #5
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	440a      	add	r2, r1
 80038d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038dc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	334c      	adds	r3, #76	; 0x4c
 80038ee:	2204      	movs	r2, #4
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e014      	b.n	800391e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	334c      	adds	r3, #76	; 0x4c
 8003904:	2202      	movs	r2, #2
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	e009      	b.n	800391e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	334c      	adds	r3, #76	; 0x4c
 800391a:	2202      	movs	r2, #2
 800391c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	3326      	adds	r3, #38	; 0x26
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	3326      	adds	r3, #38	; 0x26
 8003944:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003946:	2b02      	cmp	r3, #2
 8003948:	f040 8136 	bne.w	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003962:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800396a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003978:	461a      	mov	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e11b      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	334d      	adds	r3, #77	; 0x4d
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b03      	cmp	r3, #3
 8003994:	f040 8081 	bne.w	8003a9a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	334d      	adds	r3, #77	; 0x4d
 80039a8:	2202      	movs	r2, #2
 80039aa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	331b      	adds	r3, #27
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	f040 80fa 	bne.w	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	334c      	adds	r3, #76	; 0x4c
 80039d4:	2202      	movs	r2, #2
 80039d6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	0151      	lsls	r1, r2, #5
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a16:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	0151      	lsls	r1, r2, #5
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a32:	f023 0320 	bic.w	r3, r3, #32
 8003a36:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	3326      	adds	r3, #38	; 0x26
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3326      	adds	r3, #38	; 0x26
 8003a5e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	f040 80a9 	bne.w	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a7c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a84:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e08e      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	334d      	adds	r3, #77	; 0x4d
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d143      	bne.n	8003b38 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	334d      	adds	r3, #77	; 0x4d
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	334c      	adds	r3, #76	; 0x4c
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	3326      	adds	r3, #38	; 0x26
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3326      	adds	r3, #38	; 0x26
 8003afe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d159      	bne.n	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b1a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b22:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b30:	461a      	mov	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e03f      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	334d      	adds	r3, #77	; 0x4d
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d126      	bne.n	8003b9c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	334d      	adds	r3, #77	; 0x4d
 8003b5e:	2202      	movs	r2, #2
 8003b60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	3344      	adds	r3, #68	; 0x44
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	1c59      	adds	r1, r3, #1
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4403      	add	r3, r0
 8003b82:	3344      	adds	r3, #68	; 0x44
 8003b84:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	334c      	adds	r3, #76	; 0x4c
 8003b96:	2204      	movs	r2, #4
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	e00d      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	334d      	adds	r3, #77	; 0x4d
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	f000 8100 	beq.w	8003db4 <HCD_HC_IN_IRQHandler+0xcca>
 8003bb4:	e000      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bb6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	334c      	adds	r3, #76	; 0x4c
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f00a fc68 	bl	800e4a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bd4:	e0ef      	b.n	8003db6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f004 f987 	bl	8007ef2 <USB_ReadChInterrupts>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	d12f      	bne.n	8003c4e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2340      	movs	r3, #64	; 0x40
 8003bfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	334d      	adds	r3, #77	; 0x4d
 8003c10:	2205      	movs	r2, #5
 8003c12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	331a      	adds	r3, #26
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3344      	adds	r3, #68	; 0x44
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f004 fef7 	bl	8008a3a <USB_HC_Halt>
 8003c4c:	e0b3      	b.n	8003db6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	4611      	mov	r1, r2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f004 f94b 	bl	8007ef2 <USB_ReadChInterrupts>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	f040 80a7 	bne.w	8003db6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	3326      	adds	r3, #38	; 0x26
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d11b      	bne.n	8003cb6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3344      	adds	r3, #68	; 0x44
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	334d      	adds	r3, #77	; 0x4d
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	4611      	mov	r1, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f004 fec3 	bl	8008a3a <USB_HC_Halt>
 8003cb4:	e03f      	b.n	8003d36 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	3326      	adds	r3, #38	; 0x26
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3326      	adds	r3, #38	; 0x26
 8003cdc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d129      	bne.n	8003d36 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	3344      	adds	r3, #68	; 0x44
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	799b      	ldrb	r3, [r3, #6]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HCD_HC_IN_IRQHandler+0xc2a>
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	331b      	adds	r3, #27
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d110      	bne.n	8003d36 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	334d      	adds	r3, #77	; 0x4d
 8003d24:	2204      	movs	r2, #4
 8003d26:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f004 fe82 	bl	8008a3a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	331b      	adds	r3, #27
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d129      	bne.n	8003da0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	331b      	adds	r3, #27
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d9a:	f043 0320 	orr.w	r3, r3, #32
 8003d9e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dac:	461a      	mov	r2, r3
 8003dae:	2310      	movs	r3, #16
 8003db0:	6093      	str	r3, [r2, #8]
 8003db2:	e000      	b.n	8003db6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003db4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f004 f889 	bl	8007ef2 <USB_ReadChInterrupts>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d11b      	bne.n	8003e22 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df6:	461a      	mov	r2, r3
 8003df8:	2304      	movs	r3, #4
 8003dfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	334d      	adds	r3, #77	; 0x4d
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	4611      	mov	r1, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f004 fe0e 	bl	8008a3a <USB_HC_Halt>
 8003e1e:	f000 bc6f 	b.w	8004700 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f004 f861 	bl	8007ef2 <USB_ReadChInterrupts>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	f040 8082 	bne.w	8003f40 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3319      	adds	r3, #25
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d124      	bne.n	8003eae <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	3319      	adds	r3, #25
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	334c      	adds	r3, #76	; 0x4c
 8003e88:	2202      	movs	r2, #2
 8003e8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e8c:	78fa      	ldrb	r2, [r7, #3]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	334d      	adds	r3, #77	; 0x4d
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f004 fdc6 	bl	8008a3a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	331a      	adds	r3, #26
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f040 841d 	bne.w	8004700 <HCD_HC_OUT_IRQHandler+0x944>
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	331b      	adds	r3, #27
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f040 8411 	bne.w	8004700 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003ede:	78fa      	ldrb	r2, [r7, #3]
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	3326      	adds	r3, #38	; 0x26
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d009      	beq.n	8003f08 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	331b      	adds	r3, #27
 8003f04:	2201      	movs	r2, #1
 8003f06:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	334d      	adds	r3, #77	; 0x4d
 8003f18:	2203      	movs	r2, #3
 8003f1a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f004 fd88 	bl	8008a3a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	3344      	adds	r3, #68	; 0x44
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e3df      	b.n	8004700 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f003 ffd2 	bl	8007ef2 <USB_ReadChInterrupts>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f58:	d111      	bne.n	8003f7e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f66:	461a      	mov	r2, r3
 8003f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f6c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	4611      	mov	r1, r2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f004 fd5f 	bl	8008a3a <USB_HC_Halt>
 8003f7c:	e3c0      	b.n	8004700 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f003 ffb3 	bl	8007ef2 <USB_ReadChInterrupts>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d168      	bne.n	8004068 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3344      	adds	r3, #68	; 0x44
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f003 ff9d 	bl	8007ef2 <USB_ReadChInterrupts>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbe:	2b40      	cmp	r3, #64	; 0x40
 8003fc0:	d112      	bne.n	8003fe8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	3319      	adds	r3, #25
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2340      	movs	r3, #64	; 0x40
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	331b      	adds	r3, #27
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d019      	beq.n	8004032 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	331b      	adds	r3, #27
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4413      	add	r3, r2
 800401a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	440a      	add	r2, r1
 8004028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800402c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004030:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4413      	add	r3, r2
 800403a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403e:	461a      	mov	r2, r3
 8004040:	2301      	movs	r3, #1
 8004042:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	334d      	adds	r3, #77	; 0x4d
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f004 fcea 	bl	8008a3a <USB_HC_Halt>
 8004066:	e34b      	b.n	8004700 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f003 ff3e 	bl	8007ef2 <USB_ReadChInterrupts>
 8004076:	4603      	mov	r3, r0
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d139      	bne.n	80040f4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	334d      	adds	r3, #77	; 0x4d
 8004090:	2205      	movs	r2, #5
 8004092:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	331a      	adds	r3, #26
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3319      	adds	r3, #25
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	3344      	adds	r3, #68	; 0x44
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f004 fcad 	bl	8008a3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	461a      	mov	r2, r3
 80040ee:	2340      	movs	r3, #64	; 0x40
 80040f0:	6093      	str	r3, [r2, #8]
 80040f2:	e305      	b.n	8004700 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f003 fef8 	bl	8007ef2 <USB_ReadChInterrupts>
 8004102:	4603      	mov	r3, r0
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b08      	cmp	r3, #8
 800410a:	d11a      	bne.n	8004142 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004118:	461a      	mov	r2, r3
 800411a:	2308      	movs	r3, #8
 800411c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	334d      	adds	r3, #77	; 0x4d
 800412e:	2206      	movs	r2, #6
 8004130:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f004 fc7d 	bl	8008a3a <USB_HC_Halt>
 8004140:	e2de      	b.n	8004700 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f003 fed1 	bl	8007ef2 <USB_ReadChInterrupts>
 8004150:	4603      	mov	r3, r0
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b10      	cmp	r3, #16
 8004158:	d144      	bne.n	80041e4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	3344      	adds	r3, #68	; 0x44
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	334d      	adds	r3, #77	; 0x4d
 800417e:	2204      	movs	r2, #4
 8004180:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	3319      	adds	r3, #25
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d114      	bne.n	80041c2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	3318      	adds	r3, #24
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	3319      	adds	r3, #25
 80041be:	2201      	movs	r2, #1
 80041c0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f004 fc35 	bl	8008a3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	461a      	mov	r2, r3
 80041de:	2310      	movs	r3, #16
 80041e0:	6093      	str	r3, [r2, #8]
 80041e2:	e28d      	b.n	8004700 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f003 fe80 	bl	8007ef2 <USB_ReadChInterrupts>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b80      	cmp	r3, #128	; 0x80
 80041fa:	d169      	bne.n	80042d0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	799b      	ldrb	r3, [r3, #6]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d111      	bne.n	8004228 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	334d      	adds	r3, #77	; 0x4d
 8004214:	2207      	movs	r2, #7
 8004216:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f004 fc0a 	bl	8008a3a <USB_HC_Halt>
 8004226:	e049      	b.n	80042bc <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	3344      	adds	r3, #68	; 0x44
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	1c59      	adds	r1, r3, #1
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4403      	add	r3, r0
 8004248:	3344      	adds	r3, #68	; 0x44
 800424a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	3344      	adds	r3, #68	; 0x44
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d922      	bls.n	80042a8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	3344      	adds	r3, #68	; 0x44
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	334c      	adds	r3, #76	; 0x4c
 8004286:	2204      	movs	r2, #4
 8004288:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	334c      	adds	r3, #76	; 0x4c
 800429a:	781a      	ldrb	r2, [r3, #0]
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f00a f8ff 	bl	800e4a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042a6:	e009      	b.n	80042bc <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	334c      	adds	r3, #76	; 0x4c
 80042b8:	2202      	movs	r2, #2
 80042ba:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c8:	461a      	mov	r2, r3
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	6093      	str	r3, [r2, #8]
 80042ce:	e217      	b.n	8004700 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f003 fe0a 	bl	8007ef2 <USB_ReadChInterrupts>
 80042de:	4603      	mov	r3, r0
 80042e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e8:	d11b      	bne.n	8004322 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	334d      	adds	r3, #77	; 0x4d
 80042fa:	2209      	movs	r2, #9
 80042fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f004 fb97 	bl	8008a3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004318:	461a      	mov	r2, r3
 800431a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800431e:	6093      	str	r3, [r2, #8]
 8004320:	e1ee      	b.n	8004700 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f003 fde1 	bl	8007ef2 <USB_ReadChInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	f040 81df 	bne.w	80046fa <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004348:	461a      	mov	r2, r3
 800434a:	2302      	movs	r3, #2
 800434c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	334d      	adds	r3, #77	; 0x4d
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	f040 8093 	bne.w	800448c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004366:	78fa      	ldrb	r2, [r7, #3]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	334d      	adds	r3, #77	; 0x4d
 8004376:	2202      	movs	r2, #2
 8004378:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	334c      	adds	r3, #76	; 0x4c
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	3326      	adds	r3, #38	; 0x26
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d00b      	beq.n	80043bc <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	3326      	adds	r3, #38	; 0x26
 80043b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	f040 8190 	bne.w	80046dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	799b      	ldrb	r3, [r3, #6]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d115      	bne.n	80043f0 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	333d      	adds	r3, #61	; 0x3d
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	f083 0301 	eor.w	r3, r3, #1
 80043dc:	b2d8      	uxtb	r0, r3
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	333d      	adds	r3, #61	; 0x3d
 80043ec:	4602      	mov	r2, r0
 80043ee:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	799b      	ldrb	r3, [r3, #6]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	f040 8171 	bne.w	80046dc <HCD_HC_OUT_IRQHandler+0x920>
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	3334      	adds	r3, #52	; 0x34
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8165 	beq.w	80046dc <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	3334      	adds	r3, #52	; 0x34
 8004422:	6819      	ldr	r1, [r3, #0]
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4403      	add	r3, r0
 8004432:	3328      	adds	r3, #40	; 0x28
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	440b      	add	r3, r1
 8004438:	1e59      	subs	r1, r3, #1
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4403      	add	r3, r0
 8004448:	3328      	adds	r3, #40	; 0x28
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004450:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 813f 	beq.w	80046dc <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	333d      	adds	r3, #61	; 0x3d
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	78fa      	ldrb	r2, [r7, #3]
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2d8      	uxtb	r0, r3
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	1a9b      	subs	r3, r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	333d      	adds	r3, #61	; 0x3d
 8004486:	4602      	mov	r2, r0
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e127      	b.n	80046dc <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	334d      	adds	r3, #77	; 0x4d
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d120      	bne.n	80044e4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	334d      	adds	r3, #77	; 0x4d
 80044b2:	2202      	movs	r2, #2
 80044b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	331b      	adds	r3, #27
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	f040 8107 	bne.w	80046dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	334c      	adds	r3, #76	; 0x4c
 80044de:	2202      	movs	r2, #2
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	e0fb      	b.n	80046dc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	334d      	adds	r3, #77	; 0x4d
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d13a      	bne.n	8004570 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	334d      	adds	r3, #77	; 0x4d
 800450a:	2202      	movs	r2, #2
 800450c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	334c      	adds	r3, #76	; 0x4c
 800451e:	2202      	movs	r2, #2
 8004520:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	331b      	adds	r3, #27
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	f040 80d1 	bne.w	80046dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	331b      	adds	r3, #27
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	440a      	add	r2, r1
 8004564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456c:	6053      	str	r3, [r2, #4]
 800456e:	e0b5      	b.n	80046dc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	334d      	adds	r3, #77	; 0x4d
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b05      	cmp	r3, #5
 8004584:	d114      	bne.n	80045b0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004586:	78fa      	ldrb	r2, [r7, #3]
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	334d      	adds	r3, #77	; 0x4d
 8004596:	2202      	movs	r2, #2
 8004598:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800459a:	78fa      	ldrb	r2, [r7, #3]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	334c      	adds	r3, #76	; 0x4c
 80045aa:	2202      	movs	r2, #2
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e095      	b.n	80046dc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	334d      	adds	r3, #77	; 0x4d
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	d114      	bne.n	80045f0 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	334d      	adds	r3, #77	; 0x4d
 80045d6:	2202      	movs	r2, #2
 80045d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	334c      	adds	r3, #76	; 0x4c
 80045ea:	2205      	movs	r2, #5
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e075      	b.n	80046dc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	334d      	adds	r3, #77	; 0x4d
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b07      	cmp	r3, #7
 8004604:	d00a      	beq.n	800461c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	334d      	adds	r3, #77	; 0x4d
 8004616:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004618:	2b09      	cmp	r3, #9
 800461a:	d170      	bne.n	80046fe <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	334d      	adds	r3, #77	; 0x4d
 800462c:	2202      	movs	r2, #2
 800462e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	3344      	adds	r3, #68	; 0x44
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	1c59      	adds	r1, r3, #1
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4403      	add	r3, r0
 8004650:	3344      	adds	r3, #68	; 0x44
 8004652:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004654:	78fa      	ldrb	r2, [r7, #3]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	3344      	adds	r3, #68	; 0x44
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d914      	bls.n	8004694 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	3344      	adds	r3, #68	; 0x44
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	334c      	adds	r3, #76	; 0x4c
 800468e:	2204      	movs	r2, #4
 8004690:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004692:	e022      	b.n	80046da <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	334c      	adds	r3, #76	; 0x4c
 80046a4:	2202      	movs	r2, #2
 80046a6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046be:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046c6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d4:	461a      	mov	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	334c      	adds	r3, #76	; 0x4c
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f009 fed6 	bl	800e4a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80046f8:	e002      	b.n	8004700 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80046fa:	bf00      	nop
 80046fc:	e000      	b.n	8004700 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80046fe:	bf00      	nop
  }
}
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b08a      	sub	sp, #40	; 0x28
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	0c5b      	lsrs	r3, r3, #17
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800473a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d004      	beq.n	800474c <HCD_RXQLVL_IRQHandler+0x46>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b05      	cmp	r3, #5
 8004746:	f000 80b6 	beq.w	80048b6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800474a:	e0b7      	b.n	80048bc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80b3 	beq.w	80048ba <HCD_RXQLVL_IRQHandler+0x1b4>
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4613      	mov	r3, r2
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	332c      	adds	r3, #44	; 0x2c
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80a7 	beq.w	80048ba <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	3338      	adds	r3, #56	; 0x38
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	18d1      	adds	r1, r2, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4613      	mov	r3, r2
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4403      	add	r3, r0
 8004790:	3334      	adds	r3, #52	; 0x34
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4299      	cmp	r1, r3
 8004796:	f200 8083 	bhi.w	80048a0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4613      	mov	r3, r2
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	332c      	adds	r3, #44	; 0x2c
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	b292      	uxth	r2, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	f003 fb31 	bl	8007e1c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4613      	mov	r3, r2
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	332c      	adds	r3, #44	; 0x2c
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	18d1      	adds	r1, r2, r3
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4403      	add	r3, r0
 80047de:	332c      	adds	r3, #44	; 0x2c
 80047e0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	3338      	adds	r3, #56	; 0x38
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	18d1      	adds	r1, r2, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4403      	add	r3, r0
 8004806:	3338      	adds	r3, #56	; 0x38
 8004808:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	0cdb      	lsrs	r3, r3, #19
 800481a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800481e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	3328      	adds	r3, #40	; 0x28
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4293      	cmp	r3, r2
 8004838:	d13f      	bne.n	80048ba <HCD_RXQLVL_IRQHandler+0x1b4>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d03c      	beq.n	80048ba <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004856:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800485e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	4413      	add	r3, r2
 8004868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486c:	461a      	mov	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	333c      	adds	r3, #60	; 0x3c
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	f083 0301 	eor.w	r3, r3, #1
 8004888:	b2d8      	uxtb	r0, r3
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4613      	mov	r3, r2
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	333c      	adds	r3, #60	; 0x3c
 800489a:	4602      	mov	r2, r0
 800489c:	701a      	strb	r2, [r3, #0]
      break;
 800489e:	e00c      	b.n	80048ba <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	334c      	adds	r3, #76	; 0x4c
 80048b0:	2204      	movs	r2, #4
 80048b2:	701a      	strb	r2, [r3, #0]
      break;
 80048b4:	e001      	b.n	80048ba <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80048b6:	bf00      	nop
 80048b8:	e000      	b.n	80048bc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80048ba:	bf00      	nop
  }
}
 80048bc:	bf00      	nop
 80048be:	3728      	adds	r7, #40	; 0x28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048f0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d10b      	bne.n	8004914 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b01      	cmp	r3, #1
 8004904:	d102      	bne.n	800490c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f009 fdb0 	bl	800e46c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f043 0302 	orr.w	r3, r3, #2
 8004912:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b08      	cmp	r3, #8
 800491c:	d132      	bne.n	8004984 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f043 0308 	orr.w	r3, r3, #8
 8004924:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b04      	cmp	r3, #4
 800492e:	d126      	bne.n	800497e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	7a5b      	ldrb	r3, [r3, #9]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d113      	bne.n	8004960 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800493e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004942:	d106      	bne.n	8004952 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2102      	movs	r1, #2
 800494a:	4618      	mov	r0, r3
 800494c:	f003 fbf6 	bl	800813c <USB_InitFSLSPClkSel>
 8004950:	e011      	b.n	8004976 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2101      	movs	r1, #1
 8004958:	4618      	mov	r0, r3
 800495a:	f003 fbef 	bl	800813c <USB_InitFSLSPClkSel>
 800495e:	e00a      	b.n	8004976 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	79db      	ldrb	r3, [r3, #7]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d106      	bne.n	8004976 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800496e:	461a      	mov	r2, r3
 8004970:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004974:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f009 fda6 	bl	800e4c8 <HAL_HCD_PortEnabled_Callback>
 800497c:	e002      	b.n	8004984 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f009 fdb0 	bl	800e4e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b20      	cmp	r3, #32
 800498c:	d103      	bne.n	8004996 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f043 0320 	orr.w	r3, r3, #32
 8004994:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800499c:	461a      	mov	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6013      	str	r3, [r2, #0]
}
 80049a2:	bf00      	nop
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e12b      	b.n	8004c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fc fa90 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2224      	movs	r2, #36	; 0x24
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a10:	f001 f964 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 8004a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	4a81      	ldr	r2, [pc, #516]	; (8004c20 <HAL_I2C_Init+0x274>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d807      	bhi.n	8004a30 <HAL_I2C_Init+0x84>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a80      	ldr	r2, [pc, #512]	; (8004c24 <HAL_I2C_Init+0x278>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	bf94      	ite	ls
 8004a28:	2301      	movls	r3, #1
 8004a2a:	2300      	movhi	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	e006      	b.n	8004a3e <HAL_I2C_Init+0x92>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a7d      	ldr	r2, [pc, #500]	; (8004c28 <HAL_I2C_Init+0x27c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	bf94      	ite	ls
 8004a38:	2301      	movls	r3, #1
 8004a3a:	2300      	movhi	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e0e7      	b.n	8004c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4a78      	ldr	r2, [pc, #480]	; (8004c2c <HAL_I2C_Init+0x280>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	0c9b      	lsrs	r3, r3, #18
 8004a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4a6a      	ldr	r2, [pc, #424]	; (8004c20 <HAL_I2C_Init+0x274>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d802      	bhi.n	8004a80 <HAL_I2C_Init+0xd4>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	e009      	b.n	8004a94 <HAL_I2C_Init+0xe8>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	4a69      	ldr	r2, [pc, #420]	; (8004c30 <HAL_I2C_Init+0x284>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	099b      	lsrs	r3, r3, #6
 8004a92:	3301      	adds	r3, #1
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	495c      	ldr	r1, [pc, #368]	; (8004c20 <HAL_I2C_Init+0x274>)
 8004ab0:	428b      	cmp	r3, r1
 8004ab2:	d819      	bhi.n	8004ae8 <HAL_I2C_Init+0x13c>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1e59      	subs	r1, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ac2:	1c59      	adds	r1, r3, #1
 8004ac4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ac8:	400b      	ands	r3, r1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_I2C_Init+0x138>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1e59      	subs	r1, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae2:	e051      	b.n	8004b88 <HAL_I2C_Init+0x1dc>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	e04f      	b.n	8004b88 <HAL_I2C_Init+0x1dc>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d111      	bne.n	8004b14 <HAL_I2C_Init+0x168>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1e58      	subs	r0, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	440b      	add	r3, r1
 8004afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b02:	3301      	adds	r3, #1
 8004b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e012      	b.n	8004b3a <HAL_I2C_Init+0x18e>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1e58      	subs	r0, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6859      	ldr	r1, [r3, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	0099      	lsls	r1, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_I2C_Init+0x196>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e022      	b.n	8004b88 <HAL_I2C_Init+0x1dc>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10e      	bne.n	8004b68 <HAL_I2C_Init+0x1bc>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1e58      	subs	r0, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6859      	ldr	r1, [r3, #4]
 8004b52:	460b      	mov	r3, r1
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	440b      	add	r3, r1
 8004b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b66:	e00f      	b.n	8004b88 <HAL_I2C_Init+0x1dc>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1e58      	subs	r0, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6859      	ldr	r1, [r3, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	0099      	lsls	r1, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	6809      	ldr	r1, [r1, #0]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6911      	ldr	r1, [r2, #16]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68d2      	ldr	r2, [r2, #12]
 8004bc2:	4311      	orrs	r1, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	000186a0 	.word	0x000186a0
 8004c24:	001e847f 	.word	0x001e847f
 8004c28:	003d08ff 	.word	0x003d08ff
 8004c2c:	431bde83 	.word	0x431bde83
 8004c30:	10624dd3 	.word	0x10624dd3

08004c34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d129      	bne.n	8004c9e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2224      	movs	r2, #36	; 0x24
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0201 	bic.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0210 	bic.w	r2, r2, #16
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e000      	b.n	8004ca0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
  }
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d12a      	bne.n	8004d1c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2224      	movs	r2, #36	; 0x24
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0201 	bic.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004ce6:	89fb      	ldrh	r3, [r7, #14]
 8004ce8:	f023 030f 	bic.w	r3, r3, #15
 8004cec:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	89fa      	ldrh	r2, [r7, #14]
 8004cfe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
  }
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0bf      	b.n	8004ebe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fc f93a 	bl	8000fcc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004d6e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6999      	ldr	r1, [r3, #24]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d84:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6899      	ldr	r1, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b4a      	ldr	r3, [pc, #296]	; (8004ec8 <HAL_LTDC_Init+0x19c>)
 8004da0:	400b      	ands	r3, r1
 8004da2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6899      	ldr	r1, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68d9      	ldr	r1, [r3, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b3e      	ldr	r3, [pc, #248]	; (8004ec8 <HAL_LTDC_Init+0x19c>)
 8004dce:	400b      	ands	r3, r1
 8004dd0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68d9      	ldr	r1, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1a      	ldr	r2, [r3, #32]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6919      	ldr	r1, [r3, #16]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b33      	ldr	r3, [pc, #204]	; (8004ec8 <HAL_LTDC_Init+0x19c>)
 8004dfc:	400b      	ands	r3, r1
 8004dfe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6919      	ldr	r1, [r3, #16]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6959      	ldr	r1, [r3, #20]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b27      	ldr	r3, [pc, #156]	; (8004ec8 <HAL_LTDC_Init+0x19c>)
 8004e2a:	400b      	ands	r3, r1
 8004e2c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6959      	ldr	r1, [r3, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004e5c:	041b      	lsls	r3, r3, #16
 8004e5e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0206 	orr.w	r2, r2, #6
 8004e9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	f000f800 	.word	0xf000f800

08004ecc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d023      	beq.n	8004f36 <HAL_LTDC_IRQHandler+0x6a>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01e      	beq.n	8004f36 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0204 	bic.w	r2, r2, #4
 8004f06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f16:	f043 0201 	orr.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2204      	movs	r2, #4
 8004f24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f86f 	bl	8005014 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d023      	beq.n	8004f88 <HAL_LTDC_IRQHandler+0xbc>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01e      	beq.n	8004f88 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0202 	bic.w	r2, r2, #2
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f68:	f043 0202 	orr.w	r2, r3, #2
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2204      	movs	r2, #4
 8004f76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f846 	bl	8005014 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01b      	beq.n	8004fca <HAL_LTDC_IRQHandler+0xfe>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d016      	beq.n	8004fca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f82f 	bl	8005028 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01b      	beq.n	800500c <HAL_LTDC_IRQHandler+0x140>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d016      	beq.n	800500c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0208 	bic.w	r2, r2, #8
 8004fec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f818 	bl	800503c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005050:	b5b0      	push	{r4, r5, r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_LTDC_ConfigLayer+0x1a>
 8005066:	2302      	movs	r3, #2
 8005068:	e02c      	b.n	80050c4 <HAL_LTDC_ConfigLayer+0x74>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2134      	movs	r1, #52	; 0x34
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	4413      	add	r3, r2
 8005086:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4614      	mov	r4, r2
 800508e:	461d      	mov	r5, r3
 8005090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800509a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f811 	bl	80050cc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2201      	movs	r2, #1
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bdb0      	pop	{r4, r5, r7, pc}

080050cc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b089      	sub	sp, #36	; 0x24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e8:	4413      	add	r3, r2
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	01db      	lsls	r3, r3, #7
 80050f8:	4413      	add	r3, r2
 80050fa:	3384      	adds	r3, #132	; 0x84
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	4611      	mov	r1, r2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	01d2      	lsls	r2, r2, #7
 8005108:	440a      	add	r2, r1
 800510a:	3284      	adds	r2, #132	; 0x84
 800510c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005110:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005122:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005124:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4619      	mov	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	01db      	lsls	r3, r3, #7
 8005130:	440b      	add	r3, r1
 8005132:	3384      	adds	r3, #132	; 0x84
 8005134:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800513a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800514a:	4413      	add	r3, r2
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	01db      	lsls	r3, r3, #7
 800515a:	4413      	add	r3, r2
 800515c:	3384      	adds	r3, #132	; 0x84
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	4611      	mov	r1, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	01d2      	lsls	r2, r2, #7
 800516a:	440a      	add	r2, r1
 800516c:	3284      	adds	r2, #132	; 0x84
 800516e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005172:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005182:	4413      	add	r3, r2
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4619      	mov	r1, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	01db      	lsls	r3, r3, #7
 8005190:	440b      	add	r3, r1
 8005192:	3384      	adds	r3, #132	; 0x84
 8005194:	4619      	mov	r1, r3
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4313      	orrs	r3, r2
 800519a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	01db      	lsls	r3, r3, #7
 80051a6:	4413      	add	r3, r2
 80051a8:	3384      	adds	r3, #132	; 0x84
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	4611      	mov	r1, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	01d2      	lsls	r2, r2, #7
 80051b6:	440a      	add	r2, r1
 80051b8:	3284      	adds	r2, #132	; 0x84
 80051ba:	f023 0307 	bic.w	r3, r3, #7
 80051be:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	01db      	lsls	r3, r3, #7
 80051ca:	4413      	add	r3, r2
 80051cc:	3384      	adds	r3, #132	; 0x84
 80051ce:	461a      	mov	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80051e6:	041b      	lsls	r3, r3, #16
 80051e8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	061b      	lsls	r3, r3, #24
 80051f0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	01db      	lsls	r3, r3, #7
 80051fc:	4413      	add	r3, r2
 80051fe:	3384      	adds	r3, #132	; 0x84
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	01db      	lsls	r3, r3, #7
 800520c:	4413      	add	r3, r2
 800520e:	3384      	adds	r3, #132	; 0x84
 8005210:	461a      	mov	r2, r3
 8005212:	2300      	movs	r3, #0
 8005214:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800521c:	461a      	mov	r2, r3
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	431a      	orrs	r2, r3
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	431a      	orrs	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	01db      	lsls	r3, r3, #7
 8005230:	440b      	add	r3, r1
 8005232:	3384      	adds	r3, #132	; 0x84
 8005234:	4619      	mov	r1, r3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	01db      	lsls	r3, r3, #7
 8005246:	4413      	add	r3, r2
 8005248:	3384      	adds	r3, #132	; 0x84
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	4611      	mov	r1, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	01d2      	lsls	r2, r2, #7
 8005256:	440a      	add	r2, r1
 8005258:	3284      	adds	r2, #132	; 0x84
 800525a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800525e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	01db      	lsls	r3, r3, #7
 800526a:	4413      	add	r3, r2
 800526c:	3384      	adds	r3, #132	; 0x84
 800526e:	461a      	mov	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	01db      	lsls	r3, r3, #7
 8005280:	4413      	add	r3, r2
 8005282:	3384      	adds	r3, #132	; 0x84
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	4611      	mov	r1, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	01d2      	lsls	r2, r2, #7
 8005290:	440a      	add	r2, r1
 8005292:	3284      	adds	r2, #132	; 0x84
 8005294:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005298:	f023 0307 	bic.w	r3, r3, #7
 800529c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	69da      	ldr	r2, [r3, #28]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	68f9      	ldr	r1, [r7, #12]
 80052a8:	6809      	ldr	r1, [r1, #0]
 80052aa:	4608      	mov	r0, r1
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	01c9      	lsls	r1, r1, #7
 80052b0:	4401      	add	r1, r0
 80052b2:	3184      	adds	r1, #132	; 0x84
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	01db      	lsls	r3, r3, #7
 80052c2:	4413      	add	r3, r2
 80052c4:	3384      	adds	r3, #132	; 0x84
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	01db      	lsls	r3, r3, #7
 80052d2:	4413      	add	r3, r2
 80052d4:	3384      	adds	r3, #132	; 0x84
 80052d6:	461a      	mov	r2, r3
 80052d8:	2300      	movs	r3, #0
 80052da:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	01db      	lsls	r3, r3, #7
 80052e6:	4413      	add	r3, r2
 80052e8:	3384      	adds	r3, #132	; 0x84
 80052ea:	461a      	mov	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80052fa:	2304      	movs	r3, #4
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	e01b      	b.n	8005338 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d102      	bne.n	800530e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005308:	2303      	movs	r3, #3
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	e014      	b.n	8005338 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b04      	cmp	r3, #4
 8005314:	d00b      	beq.n	800532e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800531a:	2b02      	cmp	r3, #2
 800531c:	d007      	beq.n	800532e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005322:	2b03      	cmp	r3, #3
 8005324:	d003      	beq.n	800532e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800532a:	2b07      	cmp	r3, #7
 800532c:	d102      	bne.n	8005334 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800532e:	2302      	movs	r3, #2
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	e001      	b.n	8005338 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005334:	2301      	movs	r3, #1
 8005336:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	01db      	lsls	r3, r3, #7
 8005342:	4413      	add	r3, r2
 8005344:	3384      	adds	r3, #132	; 0x84
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	4611      	mov	r1, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	01d2      	lsls	r2, r2, #7
 8005352:	440a      	add	r2, r1
 8005354:	3284      	adds	r2, #132	; 0x84
 8005356:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800535a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	6859      	ldr	r1, [r3, #4]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	1acb      	subs	r3, r1, r3
 8005372:	69f9      	ldr	r1, [r7, #28]
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800537a:	68f9      	ldr	r1, [r7, #12]
 800537c:	6809      	ldr	r1, [r1, #0]
 800537e:	4608      	mov	r0, r1
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	01c9      	lsls	r1, r1, #7
 8005384:	4401      	add	r1, r0
 8005386:	3184      	adds	r1, #132	; 0x84
 8005388:	4313      	orrs	r3, r2
 800538a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	01db      	lsls	r3, r3, #7
 8005396:	4413      	add	r3, r2
 8005398:	3384      	adds	r3, #132	; 0x84
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	4611      	mov	r1, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	01d2      	lsls	r2, r2, #7
 80053a6:	440a      	add	r2, r1
 80053a8:	3284      	adds	r2, #132	; 0x84
 80053aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053ae:	f023 0307 	bic.w	r3, r3, #7
 80053b2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	01db      	lsls	r3, r3, #7
 80053be:	4413      	add	r3, r2
 80053c0:	3384      	adds	r3, #132	; 0x84
 80053c2:	461a      	mov	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	01db      	lsls	r3, r3, #7
 80053d4:	4413      	add	r3, r2
 80053d6:	3384      	adds	r3, #132	; 0x84
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	4611      	mov	r1, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	01d2      	lsls	r2, r2, #7
 80053e4:	440a      	add	r2, r1
 80053e6:	3284      	adds	r2, #132	; 0x84
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	6013      	str	r3, [r2, #0]
}
 80053ee:	bf00      	nop
 80053f0:	3724      	adds	r7, #36	; 0x24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e267      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d075      	beq.n	8005506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800541a:	4b88      	ldr	r3, [pc, #544]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b04      	cmp	r3, #4
 8005424:	d00c      	beq.n	8005440 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005426:	4b85      	ldr	r3, [pc, #532]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800542e:	2b08      	cmp	r3, #8
 8005430:	d112      	bne.n	8005458 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005432:	4b82      	ldr	r3, [pc, #520]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800543e:	d10b      	bne.n	8005458 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005440:	4b7e      	ldr	r3, [pc, #504]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d05b      	beq.n	8005504 <HAL_RCC_OscConfig+0x108>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d157      	bne.n	8005504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e242      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005460:	d106      	bne.n	8005470 <HAL_RCC_OscConfig+0x74>
 8005462:	4b76      	ldr	r3, [pc, #472]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a75      	ldr	r2, [pc, #468]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	e01d      	b.n	80054ac <HAL_RCC_OscConfig+0xb0>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005478:	d10c      	bne.n	8005494 <HAL_RCC_OscConfig+0x98>
 800547a:	4b70      	ldr	r3, [pc, #448]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6f      	ldr	r2, [pc, #444]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	4b6d      	ldr	r3, [pc, #436]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a6c      	ldr	r2, [pc, #432]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800548c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	e00b      	b.n	80054ac <HAL_RCC_OscConfig+0xb0>
 8005494:	4b69      	ldr	r3, [pc, #420]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a68      	ldr	r2, [pc, #416]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800549a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	4b66      	ldr	r3, [pc, #408]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a65      	ldr	r2, [pc, #404]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80054a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d013      	beq.n	80054dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b4:	f7fc f97c 	bl	80017b0 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054bc:	f7fc f978 	bl	80017b0 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b64      	cmp	r3, #100	; 0x64
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e207      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ce:	4b5b      	ldr	r3, [pc, #364]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0xc0>
 80054da:	e014      	b.n	8005506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054dc:	f7fc f968 	bl	80017b0 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054e4:	f7fc f964 	bl	80017b0 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e1f3      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054f6:	4b51      	ldr	r3, [pc, #324]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0xe8>
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d063      	beq.n	80055da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005512:	4b4a      	ldr	r3, [pc, #296]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800551e:	4b47      	ldr	r3, [pc, #284]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005526:	2b08      	cmp	r3, #8
 8005528:	d11c      	bne.n	8005564 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800552a:	4b44      	ldr	r3, [pc, #272]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d116      	bne.n	8005564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005536:	4b41      	ldr	r3, [pc, #260]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <HAL_RCC_OscConfig+0x152>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d001      	beq.n	800554e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e1c7      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800554e:	4b3b      	ldr	r3, [pc, #236]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4937      	ldr	r1, [pc, #220]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005562:	e03a      	b.n	80055da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d020      	beq.n	80055ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800556c:	4b34      	ldr	r3, [pc, #208]	; (8005640 <HAL_RCC_OscConfig+0x244>)
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005572:	f7fc f91d 	bl	80017b0 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800557a:	f7fc f919 	bl	80017b0 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e1a8      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558c:	4b2b      	ldr	r3, [pc, #172]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f0      	beq.n	800557a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005598:	4b28      	ldr	r3, [pc, #160]	; (800563c <HAL_RCC_OscConfig+0x240>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	4925      	ldr	r1, [pc, #148]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	600b      	str	r3, [r1, #0]
 80055ac:	e015      	b.n	80055da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ae:	4b24      	ldr	r3, [pc, #144]	; (8005640 <HAL_RCC_OscConfig+0x244>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fc f8fc 	bl	80017b0 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055bc:	f7fc f8f8 	bl	80017b0 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e187      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ce:	4b1b      	ldr	r3, [pc, #108]	; (800563c <HAL_RCC_OscConfig+0x240>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f0      	bne.n	80055bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d036      	beq.n	8005654 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d016      	beq.n	800561c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ee:	4b15      	ldr	r3, [pc, #84]	; (8005644 <HAL_RCC_OscConfig+0x248>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7fc f8dc 	bl	80017b0 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055fc:	f7fc f8d8 	bl	80017b0 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e167      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_RCC_OscConfig+0x240>)
 8005610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x200>
 800561a:	e01b      	b.n	8005654 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <HAL_RCC_OscConfig+0x248>)
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005622:	f7fc f8c5 	bl	80017b0 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005628:	e00e      	b.n	8005648 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800562a:	f7fc f8c1 	bl	80017b0 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d907      	bls.n	8005648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e150      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
 800563c:	40023800 	.word	0x40023800
 8005640:	42470000 	.word	0x42470000
 8005644:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005648:	4b88      	ldr	r3, [pc, #544]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800564a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1ea      	bne.n	800562a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8097 	beq.w	8005790 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005662:	2300      	movs	r3, #0
 8005664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005666:	4b81      	ldr	r3, [pc, #516]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10f      	bne.n	8005692 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	4b7d      	ldr	r3, [pc, #500]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	4a7c      	ldr	r2, [pc, #496]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800567c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005680:	6413      	str	r3, [r2, #64]	; 0x40
 8005682:	4b7a      	ldr	r3, [pc, #488]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568a:	60bb      	str	r3, [r7, #8]
 800568c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005692:	4b77      	ldr	r3, [pc, #476]	; (8005870 <HAL_RCC_OscConfig+0x474>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d118      	bne.n	80056d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800569e:	4b74      	ldr	r3, [pc, #464]	; (8005870 <HAL_RCC_OscConfig+0x474>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a73      	ldr	r2, [pc, #460]	; (8005870 <HAL_RCC_OscConfig+0x474>)
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056aa:	f7fc f881 	bl	80017b0 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b2:	f7fc f87d 	bl	80017b0 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e10c      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c4:	4b6a      	ldr	r3, [pc, #424]	; (8005870 <HAL_RCC_OscConfig+0x474>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d106      	bne.n	80056e6 <HAL_RCC_OscConfig+0x2ea>
 80056d8:	4b64      	ldr	r3, [pc, #400]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	4a63      	ldr	r2, [pc, #396]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	6713      	str	r3, [r2, #112]	; 0x70
 80056e4:	e01c      	b.n	8005720 <HAL_RCC_OscConfig+0x324>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b05      	cmp	r3, #5
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0x30c>
 80056ee:	4b5f      	ldr	r3, [pc, #380]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	4a5e      	ldr	r2, [pc, #376]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80056f4:	f043 0304 	orr.w	r3, r3, #4
 80056f8:	6713      	str	r3, [r2, #112]	; 0x70
 80056fa:	4b5c      	ldr	r3, [pc, #368]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4a5b      	ldr	r2, [pc, #364]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	6713      	str	r3, [r2, #112]	; 0x70
 8005706:	e00b      	b.n	8005720 <HAL_RCC_OscConfig+0x324>
 8005708:	4b58      	ldr	r3, [pc, #352]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	4a57      	ldr	r2, [pc, #348]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	6713      	str	r3, [r2, #112]	; 0x70
 8005714:	4b55      	ldr	r3, [pc, #340]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005718:	4a54      	ldr	r2, [pc, #336]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800571a:	f023 0304 	bic.w	r3, r3, #4
 800571e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d015      	beq.n	8005754 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005728:	f7fc f842 	bl	80017b0 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572e:	e00a      	b.n	8005746 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005730:	f7fc f83e 	bl	80017b0 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	f241 3288 	movw	r2, #5000	; 0x1388
 800573e:	4293      	cmp	r3, r2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e0cb      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005746:	4b49      	ldr	r3, [pc, #292]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0ee      	beq.n	8005730 <HAL_RCC_OscConfig+0x334>
 8005752:	e014      	b.n	800577e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005754:	f7fc f82c 	bl	80017b0 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800575a:	e00a      	b.n	8005772 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800575c:	f7fc f828 	bl	80017b0 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f241 3288 	movw	r2, #5000	; 0x1388
 800576a:	4293      	cmp	r3, r2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e0b5      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005772:	4b3e      	ldr	r3, [pc, #248]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1ee      	bne.n	800575c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d105      	bne.n	8005790 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005784:	4b39      	ldr	r3, [pc, #228]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	4a38      	ldr	r2, [pc, #224]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800578a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800578e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80a1 	beq.w	80058dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800579a:	4b34      	ldr	r3, [pc, #208]	; (800586c <HAL_RCC_OscConfig+0x470>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d05c      	beq.n	8005860 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d141      	bne.n	8005832 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ae:	4b31      	ldr	r3, [pc, #196]	; (8005874 <HAL_RCC_OscConfig+0x478>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b4:	f7fb fffc 	bl	80017b0 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057bc:	f7fb fff8 	bl	80017b0 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e087      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ce:	4b27      	ldr	r3, [pc, #156]	; (800586c <HAL_RCC_OscConfig+0x470>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	019b      	lsls	r3, r3, #6
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	085b      	lsrs	r3, r3, #1
 80057f2:	3b01      	subs	r3, #1
 80057f4:	041b      	lsls	r3, r3, #16
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	061b      	lsls	r3, r3, #24
 80057fe:	491b      	ldr	r1, [pc, #108]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005800:	4313      	orrs	r3, r2
 8005802:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005804:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <HAL_RCC_OscConfig+0x478>)
 8005806:	2201      	movs	r2, #1
 8005808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580a:	f7fb ffd1 	bl	80017b0 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005812:	f7fb ffcd 	bl	80017b0 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e05c      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x416>
 8005830:	e054      	b.n	80058dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005832:	4b10      	ldr	r3, [pc, #64]	; (8005874 <HAL_RCC_OscConfig+0x478>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fb ffba 	bl	80017b0 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005840:	f7fb ffb6 	bl	80017b0 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e045      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_RCC_OscConfig+0x470>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0x444>
 800585e:	e03d      	b.n	80058dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d107      	bne.n	8005878 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e038      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
 800586c:	40023800 	.word	0x40023800
 8005870:	40007000 	.word	0x40007000
 8005874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005878:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <HAL_RCC_OscConfig+0x4ec>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d028      	beq.n	80058d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005890:	429a      	cmp	r2, r3
 8005892:	d121      	bne.n	80058d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d11a      	bne.n	80058d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058a8:	4013      	ands	r3, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d111      	bne.n	80058d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	3b01      	subs	r3, #1
 80058c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d107      	bne.n	80058d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d001      	beq.n	80058dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40023800 	.word	0x40023800

080058ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0cc      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005900:	4b68      	ldr	r3, [pc, #416]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d90c      	bls.n	8005928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590e:	4b65      	ldr	r3, [pc, #404]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005916:	4b63      	ldr	r3, [pc, #396]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d001      	beq.n	8005928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0b8      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d020      	beq.n	8005976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005940:	4b59      	ldr	r3, [pc, #356]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4a58      	ldr	r2, [pc, #352]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800594a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005958:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4a52      	ldr	r2, [pc, #328]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005964:	4b50      	ldr	r3, [pc, #320]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	494d      	ldr	r1, [pc, #308]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d044      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d107      	bne.n	800599a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598a:	4b47      	ldr	r3, [pc, #284]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d119      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e07f      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d003      	beq.n	80059aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d107      	bne.n	80059ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059aa:	4b3f      	ldr	r3, [pc, #252]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e06f      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ba:	4b3b      	ldr	r3, [pc, #236]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e067      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ca:	4b37      	ldr	r3, [pc, #220]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f023 0203 	bic.w	r2, r3, #3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	4934      	ldr	r1, [pc, #208]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059dc:	f7fb fee8 	bl	80017b0 <HAL_GetTick>
 80059e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e4:	f7fb fee4 	bl	80017b0 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e04f      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 020c 	and.w	r2, r3, #12
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d1eb      	bne.n	80059e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a0c:	4b25      	ldr	r3, [pc, #148]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d20c      	bcs.n	8005a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1a:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a22:	4b20      	ldr	r3, [pc, #128]	; (8005aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d001      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e032      	b.n	8005a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a40:	4b19      	ldr	r3, [pc, #100]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4916      	ldr	r1, [pc, #88]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a5e:	4b12      	ldr	r3, [pc, #72]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	490e      	ldr	r1, [pc, #56]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a72:	f000 f821 	bl	8005ab8 <HAL_RCC_GetSysClockFreq>
 8005a76:	4602      	mov	r2, r0
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	490a      	ldr	r1, [pc, #40]	; (8005aac <HAL_RCC_ClockConfig+0x1c0>)
 8005a84:	5ccb      	ldrb	r3, [r1, r3]
 8005a86:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8a:	4a09      	ldr	r2, [pc, #36]	; (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fb fd20 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40023c00 	.word	0x40023c00
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	0800ec58 	.word	0x0800ec58
 8005ab0:	20000000 	.word	0x20000000
 8005ab4:	20000004 	.word	0x20000004

08005ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005abc:	b094      	sub	sp, #80	; 0x50
 8005abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ac8:	2300      	movs	r3, #0
 8005aca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ad0:	4b79      	ldr	r3, [pc, #484]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 030c 	and.w	r3, r3, #12
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d00d      	beq.n	8005af8 <HAL_RCC_GetSysClockFreq+0x40>
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	f200 80e1 	bhi.w	8005ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x34>
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d003      	beq.n	8005af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aea:	e0db      	b.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005aec:	4b73      	ldr	r3, [pc, #460]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8005aee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005af0:	e0db      	b.n	8005caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005af2:	4b73      	ldr	r3, [pc, #460]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005af6:	e0d8      	b.n	8005caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005af8:	4b6f      	ldr	r3, [pc, #444]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b02:	4b6d      	ldr	r3, [pc, #436]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d063      	beq.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b0e:	4b6a      	ldr	r3, [pc, #424]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	099b      	lsrs	r3, r3, #6
 8005b14:	2200      	movs	r2, #0
 8005b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b20:	633b      	str	r3, [r7, #48]	; 0x30
 8005b22:	2300      	movs	r3, #0
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
 8005b26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	f04f 0000 	mov.w	r0, #0
 8005b32:	f04f 0100 	mov.w	r1, #0
 8005b36:	0159      	lsls	r1, r3, #5
 8005b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b3c:	0150      	lsls	r0, r2, #5
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4621      	mov	r1, r4
 8005b44:	1a51      	subs	r1, r2, r1
 8005b46:	6139      	str	r1, [r7, #16]
 8005b48:	4629      	mov	r1, r5
 8005b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	018b      	lsls	r3, r1, #6
 8005b60:	4651      	mov	r1, sl
 8005b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b66:	4651      	mov	r1, sl
 8005b68:	018a      	lsls	r2, r1, #6
 8005b6a:	4651      	mov	r1, sl
 8005b6c:	ebb2 0801 	subs.w	r8, r2, r1
 8005b70:	4659      	mov	r1, fp
 8005b72:	eb63 0901 	sbc.w	r9, r3, r1
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b8a:	4690      	mov	r8, r2
 8005b8c:	4699      	mov	r9, r3
 8005b8e:	4623      	mov	r3, r4
 8005b90:	eb18 0303 	adds.w	r3, r8, r3
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	462b      	mov	r3, r5
 8005b98:	eb49 0303 	adc.w	r3, r9, r3
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005baa:	4629      	mov	r1, r5
 8005bac:	024b      	lsls	r3, r1, #9
 8005bae:	4621      	mov	r1, r4
 8005bb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	024a      	lsls	r2, r1, #9
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bc8:	f7fa fb12 	bl	80001f0 <__aeabi_uldivmod>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd4:	e058      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bd6:	4b38      	ldr	r3, [pc, #224]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	099b      	lsrs	r3, r3, #6
 8005bdc:	2200      	movs	r2, #0
 8005bde:	4618      	mov	r0, r3
 8005be0:	4611      	mov	r1, r2
 8005be2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005be6:	623b      	str	r3, [r7, #32]
 8005be8:	2300      	movs	r3, #0
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
 8005bec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	f04f 0000 	mov.w	r0, #0
 8005bf8:	f04f 0100 	mov.w	r1, #0
 8005bfc:	0159      	lsls	r1, r3, #5
 8005bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c02:	0150      	lsls	r0, r2, #5
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4641      	mov	r1, r8
 8005c0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c0e:	4649      	mov	r1, r9
 8005c10:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c28:	ebb2 040a 	subs.w	r4, r2, sl
 8005c2c:	eb63 050b 	sbc.w	r5, r3, fp
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	00eb      	lsls	r3, r5, #3
 8005c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c3e:	00e2      	lsls	r2, r4, #3
 8005c40:	4614      	mov	r4, r2
 8005c42:	461d      	mov	r5, r3
 8005c44:	4643      	mov	r3, r8
 8005c46:	18e3      	adds	r3, r4, r3
 8005c48:	603b      	str	r3, [r7, #0]
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	eb45 0303 	adc.w	r3, r5, r3
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c5e:	4629      	mov	r1, r5
 8005c60:	028b      	lsls	r3, r1, #10
 8005c62:	4621      	mov	r1, r4
 8005c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c68:	4621      	mov	r1, r4
 8005c6a:	028a      	lsls	r2, r1, #10
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c72:	2200      	movs	r2, #0
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	61fa      	str	r2, [r7, #28]
 8005c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c7c:	f7fa fab8 	bl	80001f0 <__aeabi_uldivmod>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4613      	mov	r3, r2
 8005c86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	0c1b      	lsrs	r3, r3, #16
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	3301      	adds	r3, #1
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ca2:	e002      	b.n	8005caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ca4:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8005ca6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3750      	adds	r7, #80	; 0x50
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	00f42400 	.word	0x00f42400
 8005cc0:	007a1200 	.word	0x007a1200

08005cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc8:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cca:	681b      	ldr	r3, [r3, #0]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000000 	.word	0x20000000

08005cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ce0:	f7ff fff0 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	0a9b      	lsrs	r3, r3, #10
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	4903      	ldr	r1, [pc, #12]	; (8005d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cf2:	5ccb      	ldrb	r3, [r1, r3]
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	0800ec68 	.word	0x0800ec68

08005d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d08:	f7ff ffdc 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	0b5b      	lsrs	r3, r3, #13
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	4903      	ldr	r1, [pc, #12]	; (8005d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d1a:	5ccb      	ldrb	r3, [r1, r3]
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40023800 	.word	0x40023800
 8005d28:	0800ec68 	.word	0x0800ec68

08005d2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	220f      	movs	r2, #15
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d3c:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <HAL_RCC_GetClockConfig+0x5c>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f003 0203 	and.w	r2, r3, #3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d48:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <HAL_RCC_GetClockConfig+0x5c>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <HAL_RCC_GetClockConfig+0x5c>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d60:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <HAL_RCC_GetClockConfig+0x5c>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	08db      	lsrs	r3, r3, #3
 8005d66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d6e:	4b07      	ldr	r3, [pc, #28]	; (8005d8c <HAL_RCC_GetClockConfig+0x60>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 020f 	and.w	r2, r3, #15
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	601a      	str	r2, [r3, #0]
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40023c00 	.word	0x40023c00

08005d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d075      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005dc4:	4b91      	ldr	r3, [pc, #580]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dca:	f7fb fcf1 	bl	80017b0 <HAL_GetTick>
 8005dce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dd2:	f7fb fced 	bl	80017b0 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e189      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005de4:	4b8a      	ldr	r3, [pc, #552]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f0      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d009      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	019a      	lsls	r2, r3, #6
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	071b      	lsls	r3, r3, #28
 8005e08:	4981      	ldr	r1, [pc, #516]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01f      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e1c:	4b7c      	ldr	r3, [pc, #496]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e22:	0f1b      	lsrs	r3, r3, #28
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	019a      	lsls	r2, r3, #6
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	061b      	lsls	r3, r3, #24
 8005e36:	431a      	orrs	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	071b      	lsls	r3, r3, #28
 8005e3c:	4974      	ldr	r1, [pc, #464]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e44:	4b72      	ldr	r3, [pc, #456]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e4a:	f023 021f 	bic.w	r2, r3, #31
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	496e      	ldr	r1, [pc, #440]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00d      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	019a      	lsls	r2, r3, #6
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	061b      	lsls	r3, r3, #24
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	071b      	lsls	r3, r3, #28
 8005e7c:	4964      	ldr	r1, [pc, #400]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e84:	4b61      	ldr	r3, [pc, #388]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e8a:	f7fb fc91 	bl	80017b0 <HAL_GetTick>
 8005e8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e92:	f7fb fc8d 	bl	80017b0 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e129      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ea4:	4b5a      	ldr	r3, [pc, #360]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d079      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ec8:	4b52      	ldr	r3, [pc, #328]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ece:	f7fb fc6f 	bl	80017b0 <HAL_GetTick>
 8005ed2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005ed6:	f7fb fc6b 	bl	80017b0 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e107      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ee8:	4b49      	ldr	r3, [pc, #292]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ef4:	d0ef      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f02:	4b43      	ldr	r3, [pc, #268]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	0f1b      	lsrs	r3, r3, #28
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	019a      	lsls	r2, r3, #6
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	061b      	lsls	r3, r3, #24
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	071b      	lsls	r3, r3, #28
 8005f22:	493b      	ldr	r1, [pc, #236]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f2a:	4b39      	ldr	r3, [pc, #228]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	4934      	ldr	r1, [pc, #208]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01e      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f50:	4b2f      	ldr	r3, [pc, #188]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f56:	0e1b      	lsrs	r3, r3, #24
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	019a      	lsls	r2, r3, #6
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	061b      	lsls	r3, r3, #24
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	071b      	lsls	r3, r3, #28
 8005f70:	4927      	ldr	r1, [pc, #156]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f78:	4b25      	ldr	r3, [pc, #148]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	4922      	ldr	r1, [pc, #136]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f8e:	4b21      	ldr	r3, [pc, #132]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f94:	f7fb fc0c 	bl	80017b0 <HAL_GetTick>
 8005f98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f9c:	f7fb fc08 	bl	80017b0 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e0a4      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fae:	4b18      	ldr	r3, [pc, #96]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fba:	d1ef      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0320 	and.w	r3, r3, #32
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 808b 	beq.w	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	4b10      	ldr	r3, [pc, #64]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005fe6:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a0b      	ldr	r2, [pc, #44]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ff2:	f7fb fbdd 	bl	80017b0 <HAL_GetTick>
 8005ff6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ff8:	e010      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ffa:	f7fb fbd9 	bl	80017b0 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d909      	bls.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e075      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800600c:	42470068 	.word	0x42470068
 8006010:	40023800 	.word	0x40023800
 8006014:	42470070 	.word	0x42470070
 8006018:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800601c:	4b38      	ldr	r3, [pc, #224]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0e8      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006028:	4b36      	ldr	r3, [pc, #216]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800602a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006030:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d02f      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	429a      	cmp	r2, r3
 8006044:	d028      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006046:	4b2f      	ldr	r3, [pc, #188]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006050:	4b2d      	ldr	r3, [pc, #180]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006052:	2201      	movs	r2, #1
 8006054:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006056:	4b2c      	ldr	r3, [pc, #176]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800605c:	4a29      	ldr	r2, [pc, #164]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006062:	4b28      	ldr	r3, [pc, #160]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b01      	cmp	r3, #1
 800606c:	d114      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800606e:	f7fb fb9f 	bl	80017b0 <HAL_GetTick>
 8006072:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006074:	e00a      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006076:	f7fb fb9b 	bl	80017b0 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	f241 3288 	movw	r2, #5000	; 0x1388
 8006084:	4293      	cmp	r3, r2
 8006086:	d901      	bls.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e035      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608c:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0ee      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a4:	d10d      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80060a6:	4b17      	ldr	r3, [pc, #92]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ba:	4912      	ldr	r1, [pc, #72]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	608b      	str	r3, [r1, #8]
 80060c0:	e005      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	4a0f      	ldr	r2, [pc, #60]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060cc:	6093      	str	r3, [r2, #8]
 80060ce:	4b0d      	ldr	r3, [pc, #52]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060da:	490a      	ldr	r1, [pc, #40]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80060f2:	4b06      	ldr	r3, [pc, #24]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80060f4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40007000 	.word	0x40007000
 8006104:	40023800 	.word	0x40023800
 8006108:	42470e40 	.word	0x42470e40
 800610c:	424711e0 	.word	0x424711e0

08006110 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e025      	b.n	8006170 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7fb f9c3 	bl	80014c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3304      	adds	r3, #4
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f001 fc2d 	bl	80079b0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	461a      	mov	r2, r3
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	f001 fc82 	bl	8007a6a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e07b      	b.n	8006282 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2b00      	cmp	r3, #0
 8006190:	d108      	bne.n	80061a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800619a:	d009      	beq.n	80061b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	61da      	str	r2, [r3, #28]
 80061a2:	e005      	b.n	80061b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fb f82e 	bl	800122c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006234:	ea42 0103 	orr.w	r1, r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	f003 0104 	and.w	r1, r3, #4
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	f003 0210 	and.w	r2, r3, #16
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006270:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e041      	b.n	8006320 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d106      	bne.n	80062b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7fb f803 	bl	80012bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2202      	movs	r2, #2
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3304      	adds	r3, #4
 80062c6:	4619      	mov	r1, r3
 80062c8:	4610      	mov	r0, r2
 80062ca:	f000 fa7d 	bl	80067c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d001      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e04e      	b.n	80063de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a23      	ldr	r2, [pc, #140]	; (80063ec <HAL_TIM_Base_Start_IT+0xc4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d022      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d01d      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1f      	ldr	r2, [pc, #124]	; (80063f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d018      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1e      	ldr	r2, [pc, #120]	; (80063f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1c      	ldr	r2, [pc, #112]	; (80063f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00e      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1b      	ldr	r2, [pc, #108]	; (80063fc <HAL_TIM_Base_Start_IT+0xd4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d009      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a19      	ldr	r2, [pc, #100]	; (8006400 <HAL_TIM_Base_Start_IT+0xd8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d004      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a18      	ldr	r2, [pc, #96]	; (8006404 <HAL_TIM_Base_Start_IT+0xdc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d111      	bne.n	80063cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b06      	cmp	r3, #6
 80063b8:	d010      	beq.n	80063dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ca:	e007      	b.n	80063dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40010400 	.word	0x40010400
 8006400:	40014000 	.word	0x40014000
 8006404:	40001800 	.word	0x40001800

08006408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d020      	beq.n	800646c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01b      	beq.n	800646c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0202 	mvn.w	r2, #2
 800643c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f999 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 8006458:	e005      	b.n	8006466 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f98b 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f99c 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d020      	beq.n	80064b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01b      	beq.n	80064b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0204 	mvn.w	r2, #4
 8006488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2202      	movs	r2, #2
 800648e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f973 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 80064a4:	e005      	b.n	80064b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f965 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f976 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d020      	beq.n	8006504 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01b      	beq.n	8006504 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0208 	mvn.w	r2, #8
 80064d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2204      	movs	r2, #4
 80064da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f94d 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 80064f0:	e005      	b.n	80064fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f93f 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f950 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 0310 	and.w	r3, r3, #16
 800650a:	2b00      	cmp	r3, #0
 800650c:	d020      	beq.n	8006550 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f003 0310 	and.w	r3, r3, #16
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01b      	beq.n	8006550 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0210 	mvn.w	r2, #16
 8006520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2208      	movs	r2, #8
 8006526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f927 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 800653c:	e005      	b.n	800654a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f919 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f92a 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00c      	beq.n	8006574 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d007      	beq.n	8006574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0201 	mvn.w	r2, #1
 800656c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fa fbf0 	bl	8000d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00c      	beq.n	8006598 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006584:	2b00      	cmp	r3, #0
 8006586:	d007      	beq.n	8006598 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fae4 	bl	8006b60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00c      	beq.n	80065bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d007      	beq.n	80065bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f8fb 	bl	80067b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00c      	beq.n	80065e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d007      	beq.n	80065e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0220 	mvn.w	r2, #32
 80065d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fab6 	bl	8006b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_TIM_ConfigClockSource+0x1c>
 8006600:	2302      	movs	r3, #2
 8006602:	e0b4      	b.n	800676e <HAL_TIM_ConfigClockSource+0x186>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800662a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800663c:	d03e      	beq.n	80066bc <HAL_TIM_ConfigClockSource+0xd4>
 800663e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006642:	f200 8087 	bhi.w	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 8006646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664a:	f000 8086 	beq.w	800675a <HAL_TIM_ConfigClockSource+0x172>
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006652:	d87f      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 8006654:	2b70      	cmp	r3, #112	; 0x70
 8006656:	d01a      	beq.n	800668e <HAL_TIM_ConfigClockSource+0xa6>
 8006658:	2b70      	cmp	r3, #112	; 0x70
 800665a:	d87b      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 800665c:	2b60      	cmp	r3, #96	; 0x60
 800665e:	d050      	beq.n	8006702 <HAL_TIM_ConfigClockSource+0x11a>
 8006660:	2b60      	cmp	r3, #96	; 0x60
 8006662:	d877      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 8006664:	2b50      	cmp	r3, #80	; 0x50
 8006666:	d03c      	beq.n	80066e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006668:	2b50      	cmp	r3, #80	; 0x50
 800666a:	d873      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d058      	beq.n	8006722 <HAL_TIM_ConfigClockSource+0x13a>
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d86f      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 8006674:	2b30      	cmp	r3, #48	; 0x30
 8006676:	d064      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x15a>
 8006678:	2b30      	cmp	r3, #48	; 0x30
 800667a:	d86b      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 800667c:	2b20      	cmp	r3, #32
 800667e:	d060      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x15a>
 8006680:	2b20      	cmp	r3, #32
 8006682:	d867      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d05c      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x15a>
 8006688:	2b10      	cmp	r3, #16
 800668a:	d05a      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x15a>
 800668c:	e062      	b.n	8006754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800669e:	f000 f9b9 	bl	8006a14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	609a      	str	r2, [r3, #8]
      break;
 80066ba:	e04f      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066cc:	f000 f9a2 	bl	8006a14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066de:	609a      	str	r2, [r3, #8]
      break;
 80066e0:	e03c      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ee:	461a      	mov	r2, r3
 80066f0:	f000 f916 	bl	8006920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2150      	movs	r1, #80	; 0x50
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 f96f 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006700:	e02c      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800670e:	461a      	mov	r2, r3
 8006710:	f000 f935 	bl	800697e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2160      	movs	r1, #96	; 0x60
 800671a:	4618      	mov	r0, r3
 800671c:	f000 f95f 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006720:	e01c      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800672e:	461a      	mov	r2, r3
 8006730:	f000 f8f6 	bl	8006920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2140      	movs	r1, #64	; 0x40
 800673a:	4618      	mov	r0, r3
 800673c:	f000 f94f 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006740:	e00c      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f000 f946 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006752:	e003      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	73fb      	strb	r3, [r7, #15]
      break;
 8006758:	e000      	b.n	800675c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800675a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a46      	ldr	r2, [pc, #280]	; (80068f4 <TIM_Base_SetConfig+0x12c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e6:	d00f      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a43      	ldr	r2, [pc, #268]	; (80068f8 <TIM_Base_SetConfig+0x130>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00b      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a42      	ldr	r2, [pc, #264]	; (80068fc <TIM_Base_SetConfig+0x134>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d007      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a41      	ldr	r2, [pc, #260]	; (8006900 <TIM_Base_SetConfig+0x138>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a40      	ldr	r2, [pc, #256]	; (8006904 <TIM_Base_SetConfig+0x13c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d108      	bne.n	800681a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a35      	ldr	r2, [pc, #212]	; (80068f4 <TIM_Base_SetConfig+0x12c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d02b      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006828:	d027      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a32      	ldr	r2, [pc, #200]	; (80068f8 <TIM_Base_SetConfig+0x130>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d023      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a31      	ldr	r2, [pc, #196]	; (80068fc <TIM_Base_SetConfig+0x134>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d01f      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a30      	ldr	r2, [pc, #192]	; (8006900 <TIM_Base_SetConfig+0x138>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01b      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a2f      	ldr	r2, [pc, #188]	; (8006904 <TIM_Base_SetConfig+0x13c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d017      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a2e      	ldr	r2, [pc, #184]	; (8006908 <TIM_Base_SetConfig+0x140>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a2d      	ldr	r2, [pc, #180]	; (800690c <TIM_Base_SetConfig+0x144>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d00f      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a2c      	ldr	r2, [pc, #176]	; (8006910 <TIM_Base_SetConfig+0x148>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00b      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a2b      	ldr	r2, [pc, #172]	; (8006914 <TIM_Base_SetConfig+0x14c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d007      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a2a      	ldr	r2, [pc, #168]	; (8006918 <TIM_Base_SetConfig+0x150>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d003      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a29      	ldr	r2, [pc, #164]	; (800691c <TIM_Base_SetConfig+0x154>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d108      	bne.n	800688c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a10      	ldr	r2, [pc, #64]	; (80068f4 <TIM_Base_SetConfig+0x12c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_Base_SetConfig+0xf8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a12      	ldr	r2, [pc, #72]	; (8006904 <TIM_Base_SetConfig+0x13c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d103      	bne.n	80068c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d105      	bne.n	80068e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f023 0201 	bic.w	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	611a      	str	r2, [r3, #16]
  }
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00
 8006904:	40010400 	.word	0x40010400
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400
 8006910:	40014800 	.word	0x40014800
 8006914:	40001800 	.word	0x40001800
 8006918:	40001c00 	.word	0x40001c00
 800691c:	40002000 	.word	0x40002000

08006920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f023 0201 	bic.w	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800694a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f023 030a 	bic.w	r3, r3, #10
 800695c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4313      	orrs	r3, r2
 8006964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	621a      	str	r2, [r3, #32]
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800697e:	b480      	push	{r7}
 8006980:	b087      	sub	sp, #28
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f023 0210 	bic.w	r2, r3, #16
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	031b      	lsls	r3, r3, #12
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f043 0307 	orr.w	r3, r3, #7
 8006a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	609a      	str	r2, [r3, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	021a      	lsls	r2, r3, #8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	431a      	orrs	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	609a      	str	r2, [r3, #8]
}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e05a      	b.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a21      	ldr	r2, [pc, #132]	; (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d022      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab8:	d01d      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d018      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1b      	ldr	r2, [pc, #108]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1a      	ldr	r2, [pc, #104]	; (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00e      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a18      	ldr	r2, [pc, #96]	; (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d009      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d004      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d10c      	bne.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40010000 	.word	0x40010000
 8006b34:	40000400 	.word	0x40000400
 8006b38:	40000800 	.word	0x40000800
 8006b3c:	40000c00 	.word	0x40000c00
 8006b40:	40010400 	.word	0x40010400
 8006b44:	40014000 	.word	0x40014000
 8006b48:	40001800 	.word	0x40001800

08006b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e042      	b.n	8006c0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fa fbb0 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2224      	movs	r2, #36	; 0x24
 8006ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fc85 	bl	80074c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	691a      	ldr	r2, [r3, #16]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695a      	ldr	r2, [r3, #20]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b0ba      	sub	sp, #232	; 0xe8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10f      	bne.n	8006c7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d009      	beq.n	8006c7a <HAL_UART_IRQHandler+0x66>
 8006c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fb69 	bl	800734a <UART_Receive_IT>
      return;
 8006c78:	e25b      	b.n	8007132 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 80de 	beq.w	8006e40 <HAL_UART_IRQHandler+0x22c>
 8006c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d106      	bne.n	8006c9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80d1 	beq.w	8006e40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00b      	beq.n	8006cc2 <HAL_UART_IRQHandler+0xae>
 8006caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	f043 0201 	orr.w	r2, r3, #1
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00b      	beq.n	8006ce6 <HAL_UART_IRQHandler+0xd2>
 8006cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	f043 0202 	orr.w	r2, r3, #2
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00b      	beq.n	8006d0a <HAL_UART_IRQHandler+0xf6>
 8006cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d02:	f043 0204 	orr.w	r2, r3, #4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d011      	beq.n	8006d3a <HAL_UART_IRQHandler+0x126>
 8006d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d105      	bne.n	8006d2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d32:	f043 0208 	orr.w	r2, r3, #8
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 81f2 	beq.w	8007128 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d008      	beq.n	8006d62 <HAL_UART_IRQHandler+0x14e>
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 faf4 	bl	800734a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6c:	2b40      	cmp	r3, #64	; 0x40
 8006d6e:	bf0c      	ite	eq
 8006d70:	2301      	moveq	r3, #1
 8006d72:	2300      	movne	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7e:	f003 0308 	and.w	r3, r3, #8
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d103      	bne.n	8006d8e <HAL_UART_IRQHandler+0x17a>
 8006d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d04f      	beq.n	8006e2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f9fc 	bl	800718c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9e:	2b40      	cmp	r3, #64	; 0x40
 8006da0:	d141      	bne.n	8006e26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3314      	adds	r3, #20
 8006da8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3314      	adds	r3, #20
 8006dca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1d9      	bne.n	8006da2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d013      	beq.n	8006e1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfa:	4a7e      	ldr	r2, [pc, #504]	; (8006ff4 <HAL_UART_IRQHandler+0x3e0>)
 8006dfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fb f8e4 	bl	8001fd0 <HAL_DMA_Abort_IT>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d016      	beq.n	8006e3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	e00e      	b.n	8006e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f99e 	bl	8007160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e24:	e00a      	b.n	8006e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f99a 	bl	8007160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2c:	e006      	b.n	8006e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f996 	bl	8007160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006e3a:	e175      	b.n	8007128 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e3c:	bf00      	nop
    return;
 8006e3e:	e173      	b.n	8007128 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	f040 814f 	bne.w	80070e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 8148 	beq.w	80070e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 8141 	beq.w	80070e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e66:	2300      	movs	r3, #0
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60bb      	str	r3, [r7, #8]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	60bb      	str	r3, [r7, #8]
 8006e7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e86:	2b40      	cmp	r3, #64	; 0x40
 8006e88:	f040 80b6 	bne.w	8006ff8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8145 	beq.w	800712c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	f080 813e 	bcs.w	800712c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec2:	f000 8088 	beq.w	8006fd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	330c      	adds	r3, #12
 8006ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ef2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006efe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1d9      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3314      	adds	r3, #20
 8006f18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f24:	f023 0301 	bic.w	r3, r3, #1
 8006f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3314      	adds	r3, #20
 8006f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e1      	bne.n	8006f12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3314      	adds	r3, #20
 8006f54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3314      	adds	r3, #20
 8006f6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e3      	bne.n	8006f4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa6:	f023 0310 	bic.w	r3, r3, #16
 8006faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006fb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e3      	bne.n	8006f94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fa ff8d 	bl	8001ef0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f8c1 	bl	8007174 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ff2:	e09b      	b.n	800712c <HAL_UART_IRQHandler+0x518>
 8006ff4:	08007253 	.word	0x08007253
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007000:	b29b      	uxth	r3, r3
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 808e 	beq.w	8007130 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 8089 	beq.w	8007130 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	330c      	adds	r3, #12
 8007024:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800702e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007030:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007034:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	330c      	adds	r3, #12
 800703e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007042:	647a      	str	r2, [r7, #68]	; 0x44
 8007044:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e3      	bne.n	800701e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3314      	adds	r3, #20
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	623b      	str	r3, [r7, #32]
   return(result);
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3314      	adds	r3, #20
 8007076:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800707a:	633a      	str	r2, [r7, #48]	; 0x30
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e3      	bne.n	8007056 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0310 	bic.w	r3, r3, #16
 80070b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80070c0:	61fa      	str	r2, [r7, #28]
 80070c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	69b9      	ldr	r1, [r7, #24]
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	617b      	str	r3, [r7, #20]
   return(result);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e3      	bne.n	800709c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f847 	bl	8007174 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070e6:	e023      	b.n	8007130 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <HAL_UART_IRQHandler+0x4f4>
 80070f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f8ba 	bl	800727a <UART_Transmit_IT>
    return;
 8007106:	e014      	b.n	8007132 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00e      	beq.n	8007132 <HAL_UART_IRQHandler+0x51e>
 8007114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711c:	2b00      	cmp	r3, #0
 800711e:	d008      	beq.n	8007132 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f8fa 	bl	800731a <UART_EndTransmit_IT>
    return;
 8007126:	e004      	b.n	8007132 <HAL_UART_IRQHandler+0x51e>
    return;
 8007128:	bf00      	nop
 800712a:	e002      	b.n	8007132 <HAL_UART_IRQHandler+0x51e>
      return;
 800712c:	bf00      	nop
 800712e:	e000      	b.n	8007132 <HAL_UART_IRQHandler+0x51e>
      return;
 8007130:	bf00      	nop
  }
}
 8007132:	37e8      	adds	r7, #232	; 0xe8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800718c:	b480      	push	{r7}
 800718e:	b095      	sub	sp, #84	; 0x54
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071b4:	643a      	str	r2, [r7, #64]	; 0x40
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e5      	bne.n	8007194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3314      	adds	r3, #20
 80071ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	f023 0301 	bic.w	r3, r3, #1
 80071de:	64bb      	str	r3, [r7, #72]	; 0x48
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3314      	adds	r3, #20
 80071e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e5      	bne.n	80071c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	2b01      	cmp	r3, #1
 8007202:	d119      	bne.n	8007238 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	330c      	adds	r3, #12
 800720a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	60bb      	str	r3, [r7, #8]
   return(result);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f023 0310 	bic.w	r3, r3, #16
 800721a:	647b      	str	r3, [r7, #68]	; 0x44
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	330c      	adds	r3, #12
 8007222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007224:	61ba      	str	r2, [r7, #24]
 8007226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6979      	ldr	r1, [r7, #20]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	613b      	str	r3, [r7, #16]
   return(result);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e5      	bne.n	8007204 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007246:	bf00      	nop
 8007248:	3754      	adds	r7, #84	; 0x54
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7ff ff77 	bl	8007160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800727a:	b480      	push	{r7}
 800727c:	b085      	sub	sp, #20
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b21      	cmp	r3, #33	; 0x21
 800728c:	d13e      	bne.n	800730c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007296:	d114      	bne.n	80072c2 <UART_Transmit_IT+0x48>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d110      	bne.n	80072c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	1c9a      	adds	r2, r3, #2
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	621a      	str	r2, [r3, #32]
 80072c0:	e008      	b.n	80072d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	1c59      	adds	r1, r3, #1
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6211      	str	r1, [r2, #32]
 80072cc:	781a      	ldrb	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29b      	uxth	r3, r3
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	4619      	mov	r1, r3
 80072e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10f      	bne.n	8007308 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007306:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	e000      	b.n	800730e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800730c:	2302      	movs	r3, #2
  }
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007330:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff fefc 	bl	8007138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b08c      	sub	sp, #48	; 0x30
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b22      	cmp	r3, #34	; 0x22
 800735c:	f040 80ae 	bne.w	80074bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007368:	d117      	bne.n	800739a <UART_Receive_IT+0x50>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d113      	bne.n	800739a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	b29b      	uxth	r3, r3
 8007384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007388:	b29a      	uxth	r2, r3
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007392:	1c9a      	adds	r2, r3, #2
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	629a      	str	r2, [r3, #40]	; 0x28
 8007398:	e026      	b.n	80073e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ac:	d007      	beq.n	80073be <UART_Receive_IT+0x74>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <UART_Receive_IT+0x82>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d106      	bne.n	80073cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	e008      	b.n	80073de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	3b01      	subs	r3, #1
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	4619      	mov	r1, r3
 80073f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d15d      	bne.n	80074b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0220 	bic.w	r2, r2, #32
 800740a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800741a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695a      	ldr	r2, [r3, #20]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0201 	bic.w	r2, r2, #1
 800742a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	2b01      	cmp	r3, #1
 8007440:	d135      	bne.n	80074ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	613b      	str	r3, [r7, #16]
   return(result);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f023 0310 	bic.w	r3, r3, #16
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	330c      	adds	r3, #12
 8007466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007468:	623a      	str	r2, [r7, #32]
 800746a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	69f9      	ldr	r1, [r7, #28]
 800746e:	6a3a      	ldr	r2, [r7, #32]
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	61bb      	str	r3, [r7, #24]
   return(result);
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e5      	bne.n	8007448 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0310 	and.w	r3, r3, #16
 8007486:	2b10      	cmp	r3, #16
 8007488:	d10a      	bne.n	80074a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff fe64 	bl	8007174 <HAL_UARTEx_RxEventCallback>
 80074ac:	e002      	b.n	80074b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff fe4c 	bl	800714c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e002      	b.n	80074be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e000      	b.n	80074be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80074bc:	2302      	movs	r3, #2
  }
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3730      	adds	r7, #48	; 0x30
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074cc:	b0c0      	sub	sp, #256	; 0x100
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e4:	68d9      	ldr	r1, [r3, #12]
 80074e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	ea40 0301 	orr.w	r3, r0, r1
 80074f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	431a      	orrs	r2, r3
 8007500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	431a      	orrs	r2, r3
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	4313      	orrs	r3, r2
 8007510:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007520:	f021 010c 	bic.w	r1, r1, #12
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800752e:	430b      	orrs	r3, r1
 8007530:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800753e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007542:	6999      	ldr	r1, [r3, #24]
 8007544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	ea40 0301 	orr.w	r3, r0, r1
 800754e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4b8f      	ldr	r3, [pc, #572]	; (8007794 <UART_SetConfig+0x2cc>)
 8007558:	429a      	cmp	r2, r3
 800755a:	d005      	beq.n	8007568 <UART_SetConfig+0xa0>
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4b8d      	ldr	r3, [pc, #564]	; (8007798 <UART_SetConfig+0x2d0>)
 8007564:	429a      	cmp	r2, r3
 8007566:	d104      	bne.n	8007572 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007568:	f7fe fbcc 	bl	8005d04 <HAL_RCC_GetPCLK2Freq>
 800756c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007570:	e003      	b.n	800757a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007572:	f7fe fbb3 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 8007576:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800757a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007584:	f040 810c 	bne.w	80077a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800758c:	2200      	movs	r2, #0
 800758e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007592:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007596:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800759a:	4622      	mov	r2, r4
 800759c:	462b      	mov	r3, r5
 800759e:	1891      	adds	r1, r2, r2
 80075a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80075a2:	415b      	adcs	r3, r3
 80075a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075aa:	4621      	mov	r1, r4
 80075ac:	eb12 0801 	adds.w	r8, r2, r1
 80075b0:	4629      	mov	r1, r5
 80075b2:	eb43 0901 	adc.w	r9, r3, r1
 80075b6:	f04f 0200 	mov.w	r2, #0
 80075ba:	f04f 0300 	mov.w	r3, #0
 80075be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075ca:	4690      	mov	r8, r2
 80075cc:	4699      	mov	r9, r3
 80075ce:	4623      	mov	r3, r4
 80075d0:	eb18 0303 	adds.w	r3, r8, r3
 80075d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075d8:	462b      	mov	r3, r5
 80075da:	eb49 0303 	adc.w	r3, r9, r3
 80075de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075f6:	460b      	mov	r3, r1
 80075f8:	18db      	adds	r3, r3, r3
 80075fa:	653b      	str	r3, [r7, #80]	; 0x50
 80075fc:	4613      	mov	r3, r2
 80075fe:	eb42 0303 	adc.w	r3, r2, r3
 8007602:	657b      	str	r3, [r7, #84]	; 0x54
 8007604:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007608:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800760c:	f7f8 fdf0 	bl	80001f0 <__aeabi_uldivmod>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4b61      	ldr	r3, [pc, #388]	; (800779c <UART_SetConfig+0x2d4>)
 8007616:	fba3 2302 	umull	r2, r3, r3, r2
 800761a:	095b      	lsrs	r3, r3, #5
 800761c:	011c      	lsls	r4, r3, #4
 800761e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007622:	2200      	movs	r2, #0
 8007624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007628:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800762c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	1891      	adds	r1, r2, r2
 8007636:	64b9      	str	r1, [r7, #72]	; 0x48
 8007638:	415b      	adcs	r3, r3
 800763a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800763c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007640:	4641      	mov	r1, r8
 8007642:	eb12 0a01 	adds.w	sl, r2, r1
 8007646:	4649      	mov	r1, r9
 8007648:	eb43 0b01 	adc.w	fp, r3, r1
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007658:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800765c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007660:	4692      	mov	sl, r2
 8007662:	469b      	mov	fp, r3
 8007664:	4643      	mov	r3, r8
 8007666:	eb1a 0303 	adds.w	r3, sl, r3
 800766a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800766e:	464b      	mov	r3, r9
 8007670:	eb4b 0303 	adc.w	r3, fp, r3
 8007674:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007684:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007688:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800768c:	460b      	mov	r3, r1
 800768e:	18db      	adds	r3, r3, r3
 8007690:	643b      	str	r3, [r7, #64]	; 0x40
 8007692:	4613      	mov	r3, r2
 8007694:	eb42 0303 	adc.w	r3, r2, r3
 8007698:	647b      	str	r3, [r7, #68]	; 0x44
 800769a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800769e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076a2:	f7f8 fda5 	bl	80001f0 <__aeabi_uldivmod>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4611      	mov	r1, r2
 80076ac:	4b3b      	ldr	r3, [pc, #236]	; (800779c <UART_SetConfig+0x2d4>)
 80076ae:	fba3 2301 	umull	r2, r3, r3, r1
 80076b2:	095b      	lsrs	r3, r3, #5
 80076b4:	2264      	movs	r2, #100	; 0x64
 80076b6:	fb02 f303 	mul.w	r3, r2, r3
 80076ba:	1acb      	subs	r3, r1, r3
 80076bc:	00db      	lsls	r3, r3, #3
 80076be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076c2:	4b36      	ldr	r3, [pc, #216]	; (800779c <UART_SetConfig+0x2d4>)
 80076c4:	fba3 2302 	umull	r2, r3, r3, r2
 80076c8:	095b      	lsrs	r3, r3, #5
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076d0:	441c      	add	r4, r3
 80076d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076e4:	4642      	mov	r2, r8
 80076e6:	464b      	mov	r3, r9
 80076e8:	1891      	adds	r1, r2, r2
 80076ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80076ec:	415b      	adcs	r3, r3
 80076ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076f4:	4641      	mov	r1, r8
 80076f6:	1851      	adds	r1, r2, r1
 80076f8:	6339      	str	r1, [r7, #48]	; 0x30
 80076fa:	4649      	mov	r1, r9
 80076fc:	414b      	adcs	r3, r1
 80076fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800770c:	4659      	mov	r1, fp
 800770e:	00cb      	lsls	r3, r1, #3
 8007710:	4651      	mov	r1, sl
 8007712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007716:	4651      	mov	r1, sl
 8007718:	00ca      	lsls	r2, r1, #3
 800771a:	4610      	mov	r0, r2
 800771c:	4619      	mov	r1, r3
 800771e:	4603      	mov	r3, r0
 8007720:	4642      	mov	r2, r8
 8007722:	189b      	adds	r3, r3, r2
 8007724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007728:	464b      	mov	r3, r9
 800772a:	460a      	mov	r2, r1
 800772c:	eb42 0303 	adc.w	r3, r2, r3
 8007730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007740:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007744:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007748:	460b      	mov	r3, r1
 800774a:	18db      	adds	r3, r3, r3
 800774c:	62bb      	str	r3, [r7, #40]	; 0x28
 800774e:	4613      	mov	r3, r2
 8007750:	eb42 0303 	adc.w	r3, r2, r3
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007756:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800775a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800775e:	f7f8 fd47 	bl	80001f0 <__aeabi_uldivmod>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4b0d      	ldr	r3, [pc, #52]	; (800779c <UART_SetConfig+0x2d4>)
 8007768:	fba3 1302 	umull	r1, r3, r3, r2
 800776c:	095b      	lsrs	r3, r3, #5
 800776e:	2164      	movs	r1, #100	; 0x64
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	3332      	adds	r3, #50	; 0x32
 800777a:	4a08      	ldr	r2, [pc, #32]	; (800779c <UART_SetConfig+0x2d4>)
 800777c:	fba2 2303 	umull	r2, r3, r2, r3
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	f003 0207 	and.w	r2, r3, #7
 8007786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4422      	add	r2, r4
 800778e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007790:	e106      	b.n	80079a0 <UART_SetConfig+0x4d8>
 8007792:	bf00      	nop
 8007794:	40011000 	.word	0x40011000
 8007798:	40011400 	.word	0x40011400
 800779c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077a4:	2200      	movs	r2, #0
 80077a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077b2:	4642      	mov	r2, r8
 80077b4:	464b      	mov	r3, r9
 80077b6:	1891      	adds	r1, r2, r2
 80077b8:	6239      	str	r1, [r7, #32]
 80077ba:	415b      	adcs	r3, r3
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
 80077be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077c2:	4641      	mov	r1, r8
 80077c4:	1854      	adds	r4, r2, r1
 80077c6:	4649      	mov	r1, r9
 80077c8:	eb43 0501 	adc.w	r5, r3, r1
 80077cc:	f04f 0200 	mov.w	r2, #0
 80077d0:	f04f 0300 	mov.w	r3, #0
 80077d4:	00eb      	lsls	r3, r5, #3
 80077d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077da:	00e2      	lsls	r2, r4, #3
 80077dc:	4614      	mov	r4, r2
 80077de:	461d      	mov	r5, r3
 80077e0:	4643      	mov	r3, r8
 80077e2:	18e3      	adds	r3, r4, r3
 80077e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077e8:	464b      	mov	r3, r9
 80077ea:	eb45 0303 	adc.w	r3, r5, r3
 80077ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007802:	f04f 0200 	mov.w	r2, #0
 8007806:	f04f 0300 	mov.w	r3, #0
 800780a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800780e:	4629      	mov	r1, r5
 8007810:	008b      	lsls	r3, r1, #2
 8007812:	4621      	mov	r1, r4
 8007814:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007818:	4621      	mov	r1, r4
 800781a:	008a      	lsls	r2, r1, #2
 800781c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007820:	f7f8 fce6 	bl	80001f0 <__aeabi_uldivmod>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4b60      	ldr	r3, [pc, #384]	; (80079ac <UART_SetConfig+0x4e4>)
 800782a:	fba3 2302 	umull	r2, r3, r3, r2
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	011c      	lsls	r4, r3, #4
 8007832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007836:	2200      	movs	r2, #0
 8007838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800783c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007840:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007844:	4642      	mov	r2, r8
 8007846:	464b      	mov	r3, r9
 8007848:	1891      	adds	r1, r2, r2
 800784a:	61b9      	str	r1, [r7, #24]
 800784c:	415b      	adcs	r3, r3
 800784e:	61fb      	str	r3, [r7, #28]
 8007850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007854:	4641      	mov	r1, r8
 8007856:	1851      	adds	r1, r2, r1
 8007858:	6139      	str	r1, [r7, #16]
 800785a:	4649      	mov	r1, r9
 800785c:	414b      	adcs	r3, r1
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800786c:	4659      	mov	r1, fp
 800786e:	00cb      	lsls	r3, r1, #3
 8007870:	4651      	mov	r1, sl
 8007872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007876:	4651      	mov	r1, sl
 8007878:	00ca      	lsls	r2, r1, #3
 800787a:	4610      	mov	r0, r2
 800787c:	4619      	mov	r1, r3
 800787e:	4603      	mov	r3, r0
 8007880:	4642      	mov	r2, r8
 8007882:	189b      	adds	r3, r3, r2
 8007884:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007888:	464b      	mov	r3, r9
 800788a:	460a      	mov	r2, r1
 800788c:	eb42 0303 	adc.w	r3, r2, r3
 8007890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	67bb      	str	r3, [r7, #120]	; 0x78
 800789e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078ac:	4649      	mov	r1, r9
 80078ae:	008b      	lsls	r3, r1, #2
 80078b0:	4641      	mov	r1, r8
 80078b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078b6:	4641      	mov	r1, r8
 80078b8:	008a      	lsls	r2, r1, #2
 80078ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078be:	f7f8 fc97 	bl	80001f0 <__aeabi_uldivmod>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4611      	mov	r1, r2
 80078c8:	4b38      	ldr	r3, [pc, #224]	; (80079ac <UART_SetConfig+0x4e4>)
 80078ca:	fba3 2301 	umull	r2, r3, r3, r1
 80078ce:	095b      	lsrs	r3, r3, #5
 80078d0:	2264      	movs	r2, #100	; 0x64
 80078d2:	fb02 f303 	mul.w	r3, r2, r3
 80078d6:	1acb      	subs	r3, r1, r3
 80078d8:	011b      	lsls	r3, r3, #4
 80078da:	3332      	adds	r3, #50	; 0x32
 80078dc:	4a33      	ldr	r2, [pc, #204]	; (80079ac <UART_SetConfig+0x4e4>)
 80078de:	fba2 2303 	umull	r2, r3, r2, r3
 80078e2:	095b      	lsrs	r3, r3, #5
 80078e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078e8:	441c      	add	r4, r3
 80078ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078ee:	2200      	movs	r2, #0
 80078f0:	673b      	str	r3, [r7, #112]	; 0x70
 80078f2:	677a      	str	r2, [r7, #116]	; 0x74
 80078f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80078f8:	4642      	mov	r2, r8
 80078fa:	464b      	mov	r3, r9
 80078fc:	1891      	adds	r1, r2, r2
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	415b      	adcs	r3, r3
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007908:	4641      	mov	r1, r8
 800790a:	1851      	adds	r1, r2, r1
 800790c:	6039      	str	r1, [r7, #0]
 800790e:	4649      	mov	r1, r9
 8007910:	414b      	adcs	r3, r1
 8007912:	607b      	str	r3, [r7, #4]
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007920:	4659      	mov	r1, fp
 8007922:	00cb      	lsls	r3, r1, #3
 8007924:	4651      	mov	r1, sl
 8007926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800792a:	4651      	mov	r1, sl
 800792c:	00ca      	lsls	r2, r1, #3
 800792e:	4610      	mov	r0, r2
 8007930:	4619      	mov	r1, r3
 8007932:	4603      	mov	r3, r0
 8007934:	4642      	mov	r2, r8
 8007936:	189b      	adds	r3, r3, r2
 8007938:	66bb      	str	r3, [r7, #104]	; 0x68
 800793a:	464b      	mov	r3, r9
 800793c:	460a      	mov	r2, r1
 800793e:	eb42 0303 	adc.w	r3, r2, r3
 8007942:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	663b      	str	r3, [r7, #96]	; 0x60
 800794e:	667a      	str	r2, [r7, #100]	; 0x64
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800795c:	4649      	mov	r1, r9
 800795e:	008b      	lsls	r3, r1, #2
 8007960:	4641      	mov	r1, r8
 8007962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007966:	4641      	mov	r1, r8
 8007968:	008a      	lsls	r2, r1, #2
 800796a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800796e:	f7f8 fc3f 	bl	80001f0 <__aeabi_uldivmod>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <UART_SetConfig+0x4e4>)
 8007978:	fba3 1302 	umull	r1, r3, r3, r2
 800797c:	095b      	lsrs	r3, r3, #5
 800797e:	2164      	movs	r1, #100	; 0x64
 8007980:	fb01 f303 	mul.w	r3, r1, r3
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	3332      	adds	r3, #50	; 0x32
 800798a:	4a08      	ldr	r2, [pc, #32]	; (80079ac <UART_SetConfig+0x4e4>)
 800798c:	fba2 2303 	umull	r2, r3, r2, r3
 8007990:	095b      	lsrs	r3, r3, #5
 8007992:	f003 020f 	and.w	r2, r3, #15
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4422      	add	r2, r4
 800799e:	609a      	str	r2, [r3, #8]
}
 80079a0:	bf00      	nop
 80079a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079a6:	46bd      	mov	sp, r7
 80079a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079ac:	51eb851f 	.word	0x51eb851f

080079b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d123      	bne.n	8007a0a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80079ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	6851      	ldr	r1, [r2, #4]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	6892      	ldr	r2, [r2, #8]
 80079d6:	4311      	orrs	r1, r2
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	68d2      	ldr	r2, [r2, #12]
 80079dc:	4311      	orrs	r1, r2
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	6912      	ldr	r2, [r2, #16]
 80079e2:	4311      	orrs	r1, r2
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	6952      	ldr	r2, [r2, #20]
 80079e8:	4311      	orrs	r1, r2
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	6992      	ldr	r2, [r2, #24]
 80079ee:	4311      	orrs	r1, r2
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	69d2      	ldr	r2, [r2, #28]
 80079f4:	4311      	orrs	r1, r2
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	6a12      	ldr	r2, [r2, #32]
 80079fa:	4311      	orrs	r1, r2
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a00:	430a      	orrs	r2, r1
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	e028      	b.n	8007a5c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	69d9      	ldr	r1, [r3, #28]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	4319      	orrs	r1, r3
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	430b      	orrs	r3, r1
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	6851      	ldr	r1, [r2, #4]
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	6892      	ldr	r2, [r2, #8]
 8007a3c:	4311      	orrs	r1, r2
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	68d2      	ldr	r2, [r2, #12]
 8007a42:	4311      	orrs	r1, r2
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	6912      	ldr	r2, [r2, #16]
 8007a48:	4311      	orrs	r1, r2
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	6952      	ldr	r2, [r2, #20]
 8007a4e:	4311      	orrs	r1, r2
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	6992      	ldr	r2, [r2, #24]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d128      	bne.n	8007ace <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	1e59      	subs	r1, r3, #1
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	4319      	orrs	r1, r3
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	4319      	orrs	r1, r3
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	031b      	lsls	r3, r3, #12
 8007aa6:	4319      	orrs	r1, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	041b      	lsls	r3, r3, #16
 8007ab0:	4319      	orrs	r1, r3
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	051b      	lsls	r3, r3, #20
 8007aba:	4319      	orrs	r1, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	061b      	lsls	r3, r3, #24
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	609a      	str	r2, [r3, #8]
 8007acc:	e02f      	b.n	8007b2e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	68d2      	ldr	r2, [r2, #12]
 8007ade:	3a01      	subs	r2, #1
 8007ae0:	0311      	lsls	r1, r2, #12
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	6952      	ldr	r2, [r2, #20]
 8007ae6:	3a01      	subs	r2, #1
 8007ae8:	0512      	lsls	r2, r2, #20
 8007aea:	430a      	orrs	r2, r1
 8007aec:	431a      	orrs	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	1e59      	subs	r1, r3, #1
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	4319      	orrs	r1, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	4319      	orrs	r1, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	041b      	lsls	r3, r3, #16
 8007b1c:	4319      	orrs	r1, r3
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	061b      	lsls	r3, r3, #24
 8007b26:	430b      	orrs	r3, r1
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	f107 001c 	add.w	r0, r7, #28
 8007b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b4e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d123      	bne.n	8007b9e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d105      	bne.n	8007b92 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f9dc 	bl	8007f50 <USB_CoreReset>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73fb      	strb	r3, [r7, #15]
 8007b9c:	e01b      	b.n	8007bd6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f9d0 	bl	8007f50 <USB_CoreReset>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007bb4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8007bc8:	e005      	b.n	8007bd6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007bd6:	7fbb      	ldrb	r3, [r7, #30]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d10b      	bne.n	8007bf4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f043 0206 	orr.w	r2, r3, #6
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f043 0220 	orr.w	r2, r3, #32
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c00:	b004      	add	sp, #16
 8007c02:	4770      	bx	lr

08007c04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f043 0201 	orr.w	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f023 0201 	bic.w	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d115      	bne.n	8007c96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007c76:	200a      	movs	r0, #10
 8007c78:	f7f9 fda6 	bl	80017c8 <HAL_Delay>
      ms += 10U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	330a      	adds	r3, #10
 8007c80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f956 	bl	8007f34 <USB_GetMode>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d01e      	beq.n	8007ccc <USB_SetCurrentMode+0x84>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2bc7      	cmp	r3, #199	; 0xc7
 8007c92:	d9f0      	bls.n	8007c76 <USB_SetCurrentMode+0x2e>
 8007c94:	e01a      	b.n	8007ccc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d115      	bne.n	8007cc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ca8:	200a      	movs	r0, #10
 8007caa:	f7f9 fd8d 	bl	80017c8 <HAL_Delay>
      ms += 10U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	330a      	adds	r3, #10
 8007cb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f93d 	bl	8007f34 <USB_GetMode>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <USB_SetCurrentMode+0x84>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2bc7      	cmp	r3, #199	; 0xc7
 8007cc4:	d9f0      	bls.n	8007ca8 <USB_SetCurrentMode+0x60>
 8007cc6:	e001      	b.n	8007ccc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e005      	b.n	8007cd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2bc8      	cmp	r3, #200	; 0xc8
 8007cd0:	d101      	bne.n	8007cd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007cfa:	d901      	bls.n	8007d00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e01b      	b.n	8007d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	daf2      	bge.n	8007cee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	019b      	lsls	r3, r3, #6
 8007d10:	f043 0220 	orr.w	r2, r3, #32
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007d24:	d901      	bls.n	8007d2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e006      	b.n	8007d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d0f0      	beq.n	8007d18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3301      	adds	r3, #1
 8007d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007d5c:	d901      	bls.n	8007d62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e018      	b.n	8007d94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	daf2      	bge.n	8007d50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2210      	movs	r2, #16
 8007d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3301      	adds	r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007d80:	d901      	bls.n	8007d86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e006      	b.n	8007d94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0310 	and.w	r3, r3, #16
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d0f0      	beq.n	8007d74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b089      	sub	sp, #36	; 0x24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	4611      	mov	r1, r2
 8007dac:	461a      	mov	r2, r3
 8007dae:	460b      	mov	r3, r1
 8007db0:	71fb      	strb	r3, [r7, #7]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d123      	bne.n	8007e0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007dc6:	88bb      	ldrh	r3, [r7, #4]
 8007dc8:	3303      	adds	r3, #3
 8007dca:	089b      	lsrs	r3, r3, #2
 8007dcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	e018      	b.n	8007e06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	031a      	lsls	r2, r3, #12
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de0:	461a      	mov	r2, r3
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	3301      	adds	r3, #1
 8007dec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	3301      	adds	r3, #1
 8007df2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	3301      	adds	r3, #1
 8007df8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	3301      	adds	r3, #1
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d3e2      	bcc.n	8007dd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3724      	adds	r7, #36	; 0x24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b08b      	sub	sp, #44	; 0x2c
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	4613      	mov	r3, r2
 8007e28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	089b      	lsrs	r3, r3, #2
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e42:	2300      	movs	r3, #0
 8007e44:	623b      	str	r3, [r7, #32]
 8007e46:	e014      	b.n	8007e72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	3301      	adds	r3, #1
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	3301      	adds	r3, #1
 8007e64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	3301      	adds	r3, #1
 8007e6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	623b      	str	r3, [r7, #32]
 8007e72:	6a3a      	ldr	r2, [r7, #32]
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d3e6      	bcc.n	8007e48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007e7a:	8bfb      	ldrh	r3, [r7, #30]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01e      	beq.n	8007ebe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f107 0310 	add.w	r3, r7, #16
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	00db      	lsls	r3, r3, #3
 8007e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	701a      	strb	r2, [r3, #0]
      i++;
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	623b      	str	r3, [r7, #32]
      pDest++;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	3301      	adds	r3, #1
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007eb2:	8bfb      	ldrh	r3, [r7, #30]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007eb8:	8bfb      	ldrh	r3, [r7, #30]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1ea      	bne.n	8007e94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	372c      	adds	r7, #44	; 0x2c
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	4013      	ands	r3, r2
 8007f24:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f26:	68bb      	ldr	r3, [r7, #8]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	f003 0301 	and.w	r3, r3, #1
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f68:	d901      	bls.n	8007f6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e01b      	b.n	8007fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	daf2      	bge.n	8007f5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	f043 0201 	orr.w	r2, r3, #1
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f92:	d901      	bls.n	8007f98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e006      	b.n	8007fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d0f0      	beq.n	8007f86 <USB_CoreReset+0x36>

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
	...

08007fb4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b086      	sub	sp, #24
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d119      	bne.n	800803e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800800a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800800e:	2b01      	cmp	r3, #1
 8008010:	d10a      	bne.n	8008028 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008020:	f043 0304 	orr.w	r3, r3, #4
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	e014      	b.n	8008052 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008036:	f023 0304 	bic.w	r3, r3, #4
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	e009      	b.n	8008052 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800804c:	f023 0304 	bic.w	r3, r3, #4
 8008050:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008052:	2110      	movs	r1, #16
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff fe43 	bl	8007ce0 <USB_FlushTxFifo>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff fe6d 	bl	8007d44 <USB_FlushRxFifo>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008074:	2300      	movs	r3, #0
 8008076:	613b      	str	r3, [r7, #16]
 8008078:	e015      	b.n	80080a6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008086:	461a      	mov	r2, r3
 8008088:	f04f 33ff 	mov.w	r3, #4294967295
 800808c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4413      	add	r3, r2
 8008096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800809a:	461a      	mov	r2, r3
 800809c:	2300      	movs	r3, #0
 800809e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	3301      	adds	r3, #1
 80080a4:	613b      	str	r3, [r7, #16]
 80080a6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80080aa:	461a      	mov	r2, r3
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d3e3      	bcc.n	800807a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f04f 32ff 	mov.w	r2, #4294967295
 80080be:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a18      	ldr	r2, [pc, #96]	; (8008124 <USB_HostInit+0x170>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d10b      	bne.n	80080e0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a15      	ldr	r2, [pc, #84]	; (8008128 <USB_HostInit+0x174>)
 80080d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a14      	ldr	r2, [pc, #80]	; (800812c <USB_HostInit+0x178>)
 80080da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80080de:	e009      	b.n	80080f4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2280      	movs	r2, #128	; 0x80
 80080e4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a11      	ldr	r2, [pc, #68]	; (8008130 <USB_HostInit+0x17c>)
 80080ea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a11      	ldr	r2, [pc, #68]	; (8008134 <USB_HostInit+0x180>)
 80080f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d105      	bne.n	8008108 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f043 0210 	orr.w	r2, r3, #16
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	699a      	ldr	r2, [r3, #24]
 800810c:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <USB_HostInit+0x184>)
 800810e:	4313      	orrs	r3, r2
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008114:	7dfb      	ldrb	r3, [r7, #23]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008120:	b004      	add	sp, #16
 8008122:	4770      	bx	lr
 8008124:	40040000 	.word	0x40040000
 8008128:	01000200 	.word	0x01000200
 800812c:	00e00300 	.word	0x00e00300
 8008130:	00600080 	.word	0x00600080
 8008134:	004000e0 	.word	0x004000e0
 8008138:	a3200008 	.word	0xa3200008

0800813c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800815a:	f023 0303 	bic.w	r3, r3, #3
 800815e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008174:	4313      	orrs	r3, r2
 8008176:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d107      	bne.n	800818e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008184:	461a      	mov	r2, r3
 8008186:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800818a:	6053      	str	r3, [r2, #4]
 800818c:	e00c      	b.n	80081a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d107      	bne.n	80081a4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800819a:	461a      	mov	r2, r3
 800819c:	f241 7370 	movw	r3, #6000	; 0x1770
 80081a0:	6053      	str	r3, [r2, #4]
 80081a2:	e001      	b.n	80081a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e000      	b.n	80081aa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80081d6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80081e6:	2064      	movs	r0, #100	; 0x64
 80081e8:	f7f9 faee 	bl	80017c8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081f8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80081fa:	200a      	movs	r0, #10
 80081fc:	f7f9 fae4 	bl	80017c8 <HAL_Delay>

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	460b      	mov	r3, r1
 8008214:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800822e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <USB_DriveVbus+0x44>
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d106      	bne.n	800824e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800824c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008258:	d109      	bne.n	800826e <USB_DriveVbus+0x64>
 800825a:	78fb      	ldrb	r3, [r7, #3]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d106      	bne.n	800826e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800826c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	0c5b      	lsrs	r3, r3, #17
 800829a:	f003 0303 	and.w	r3, r3, #3
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b085      	sub	sp, #20
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	b29b      	uxth	r3, r3
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	4608      	mov	r0, r1
 80082d6:	4611      	mov	r1, r2
 80082d8:	461a      	mov	r2, r3
 80082da:	4603      	mov	r3, r0
 80082dc:	70fb      	strb	r3, [r7, #3]
 80082de:	460b      	mov	r3, r1
 80082e0:	70bb      	strb	r3, [r7, #2]
 80082e2:	4613      	mov	r3, r2
 80082e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	015a      	lsls	r2, r3, #5
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082fa:	461a      	mov	r2, r3
 80082fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008300:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008302:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008306:	2b03      	cmp	r3, #3
 8008308:	d87c      	bhi.n	8008404 <USB_HC_Init+0x138>
 800830a:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <USB_HC_Init+0x44>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	08008321 	.word	0x08008321
 8008314:	080083c7 	.word	0x080083c7
 8008318:	08008321 	.word	0x08008321
 800831c:	08008389 	.word	0x08008389
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	4413      	add	r3, r2
 8008328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832c:	461a      	mov	r2, r3
 800832e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008332:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008334:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008338:	2b00      	cmp	r3, #0
 800833a:	da10      	bge.n	800835e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	4413      	add	r3, r2
 8008344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	78fa      	ldrb	r2, [r7, #3]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	440a      	add	r2, r1
 8008352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800835a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800835c:	e055      	b.n	800840a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a6f      	ldr	r2, [pc, #444]	; (8008520 <USB_HC_Init+0x254>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d151      	bne.n	800840a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008366:	78fb      	ldrb	r3, [r7, #3]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	4413      	add	r3, r2
 800836e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	78fa      	ldrb	r2, [r7, #3]
 8008376:	0151      	lsls	r1, r2, #5
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	440a      	add	r2, r1
 800837c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008380:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008384:	60d3      	str	r3, [r2, #12]
      break;
 8008386:	e040      	b.n	800840a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	4413      	add	r3, r2
 8008390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008394:	461a      	mov	r2, r3
 8008396:	f240 639d 	movw	r3, #1693	; 0x69d
 800839a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800839c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	da34      	bge.n	800840e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	78fa      	ldrb	r2, [r7, #3]
 80083b4:	0151      	lsls	r1, r2, #5
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	440a      	add	r2, r1
 80083ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80083c4:	e023      	b.n	800840e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d2:	461a      	mov	r2, r3
 80083d4:	f240 2325 	movw	r3, #549	; 0x225
 80083d8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80083da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	da17      	bge.n	8008412 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	78fa      	ldrb	r2, [r7, #3]
 80083f2:	0151      	lsls	r1, r2, #5
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	440a      	add	r2, r1
 80083f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083fc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008400:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008402:	e006      	b.n	8008412 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	77fb      	strb	r3, [r7, #31]
      break;
 8008408:	e004      	b.n	8008414 <USB_HC_Init+0x148>
      break;
 800840a:	bf00      	nop
 800840c:	e002      	b.n	8008414 <USB_HC_Init+0x148>
      break;
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <USB_HC_Init+0x148>
      break;
 8008412:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	4413      	add	r3, r2
 800841c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008420:	461a      	mov	r2, r3
 8008422:	2300      	movs	r3, #0
 8008424:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	4413      	add	r3, r2
 800842e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	78fa      	ldrb	r2, [r7, #3]
 8008436:	0151      	lsls	r1, r2, #5
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	440a      	add	r2, r1
 800843c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008440:	f043 0302 	orr.w	r3, r3, #2
 8008444:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	78fb      	ldrb	r3, [r7, #3]
 8008450:	f003 030f 	and.w	r3, r3, #15
 8008454:	2101      	movs	r1, #1
 8008456:	fa01 f303 	lsl.w	r3, r1, r3
 800845a:	6939      	ldr	r1, [r7, #16]
 800845c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008460:	4313      	orrs	r3, r2
 8008462:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008470:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008474:	2b00      	cmp	r3, #0
 8008476:	da03      	bge.n	8008480 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	e001      	b.n	8008484 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff fef9 	bl	800827c <USB_GetHostSpeed>
 800848a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800848c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008490:	2b02      	cmp	r3, #2
 8008492:	d106      	bne.n	80084a2 <USB_HC_Init+0x1d6>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b02      	cmp	r3, #2
 8008498:	d003      	beq.n	80084a2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800849a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	e001      	b.n	80084a6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084a6:	787b      	ldrb	r3, [r7, #1]
 80084a8:	059b      	lsls	r3, r3, #22
 80084aa:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084ae:	78bb      	ldrb	r3, [r7, #2]
 80084b0:	02db      	lsls	r3, r3, #11
 80084b2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084b6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80084b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084bc:	049b      	lsls	r3, r3, #18
 80084be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084c2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80084c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80084c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80084ca:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	431a      	orrs	r2, r3
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084d4:	78fa      	ldrb	r2, [r7, #3]
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80084e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084e4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80084e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d003      	beq.n	80084f6 <USB_HC_Init+0x22a>
 80084ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d10f      	bne.n	8008516 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	78fa      	ldrb	r2, [r7, #3]
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	440a      	add	r2, r1
 800850c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008510:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008514:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008516:	7ffb      	ldrb	r3, [r7, #31]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3720      	adds	r7, #32
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	40040000 	.word	0x40040000

08008524 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08c      	sub	sp, #48	; 0x30
 8008528:	af02      	add	r7, sp, #8
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	4613      	mov	r3, r2
 8008530:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	785b      	ldrb	r3, [r3, #1]
 800853a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800853c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008540:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4a5d      	ldr	r2, [pc, #372]	; (80086bc <USB_HC_StartXfer+0x198>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d12f      	bne.n	80085aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800854a:	79fb      	ldrb	r3, [r7, #7]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d11c      	bne.n	800858a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	7c9b      	ldrb	r3, [r3, #18]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <USB_HC_StartXfer+0x3c>
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	7c9b      	ldrb	r3, [r3, #18]
 800855c:	2b02      	cmp	r3, #2
 800855e:	d124      	bne.n	80085aa <USB_HC_StartXfer+0x86>
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	799b      	ldrb	r3, [r3, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d120      	bne.n	80085aa <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	4413      	add	r3, r2
 8008570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	6a3a      	ldr	r2, [r7, #32]
 800857c:	440a      	add	r2, r1
 800857e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008586:	60d3      	str	r3, [r2, #12]
 8008588:	e00f      	b.n	80085aa <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	791b      	ldrb	r3, [r3, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10b      	bne.n	80085aa <USB_HC_StartXfer+0x86>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	795b      	ldrb	r3, [r3, #5]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d107      	bne.n	80085aa <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	785b      	ldrb	r3, [r3, #1]
 800859e:	4619      	mov	r1, r3
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 fb6b 	bl	8008c7c <USB_DoPing>
        return HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	e232      	b.n	8008a10 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	799b      	ldrb	r3, [r3, #6]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d158      	bne.n	8008664 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80085b2:	2301      	movs	r3, #1
 80085b4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	78db      	ldrb	r3, [r3, #3]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80085be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	8a92      	ldrh	r2, [r2, #20]
 80085c4:	fb03 f202 	mul.w	r2, r3, r2
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	61da      	str	r2, [r3, #28]
 80085cc:	e07c      	b.n	80086c8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	7c9b      	ldrb	r3, [r3, #18]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d130      	bne.n	8008638 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	2bbc      	cmp	r3, #188	; 0xbc
 80085dc:	d918      	bls.n	8008610 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	8a9b      	ldrh	r3, [r3, #20]
 80085e2:	461a      	mov	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	69da      	ldr	r2, [r3, #28]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d003      	beq.n	8008600 <USB_HC_StartXfer+0xdc>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d103      	bne.n	8008608 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2202      	movs	r2, #2
 8008604:	60da      	str	r2, [r3, #12]
 8008606:	e05f      	b.n	80086c8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2201      	movs	r2, #1
 800860c:	60da      	str	r2, [r3, #12]
 800860e:	e05b      	b.n	80086c8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	6a1a      	ldr	r2, [r3, #32]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d007      	beq.n	8008630 <USB_HC_StartXfer+0x10c>
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	2b02      	cmp	r3, #2
 8008626:	d003      	beq.n	8008630 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2204      	movs	r2, #4
 800862c:	60da      	str	r2, [r3, #12]
 800862e:	e04b      	b.n	80086c8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2203      	movs	r2, #3
 8008634:	60da      	str	r2, [r3, #12]
 8008636:	e047      	b.n	80086c8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d10d      	bne.n	800865a <USB_HC_StartXfer+0x136>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	8a92      	ldrh	r2, [r2, #20]
 8008646:	4293      	cmp	r3, r2
 8008648:	d907      	bls.n	800865a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800864a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	8a92      	ldrh	r2, [r2, #20]
 8008650:	fb03 f202 	mul.w	r2, r3, r2
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	61da      	str	r2, [r3, #28]
 8008658:	e036      	b.n	80086c8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6a1a      	ldr	r2, [r3, #32]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	61da      	str	r2, [r3, #28]
 8008662:	e031      	b.n	80086c8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d018      	beq.n	800869e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	8a92      	ldrh	r2, [r2, #20]
 8008674:	4413      	add	r3, r2
 8008676:	3b01      	subs	r3, #1
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	8a92      	ldrh	r2, [r2, #20]
 800867c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008680:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8008682:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008684:	8b7b      	ldrh	r3, [r7, #26]
 8008686:	429a      	cmp	r2, r3
 8008688:	d90b      	bls.n	80086a2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800868a:	8b7b      	ldrh	r3, [r7, #26]
 800868c:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800868e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	8a92      	ldrh	r2, [r2, #20]
 8008694:	fb03 f202 	mul.w	r2, r3, r2
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	61da      	str	r2, [r3, #28]
 800869c:	e001      	b.n	80086a2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800869e:	2301      	movs	r3, #1
 80086a0:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	78db      	ldrb	r3, [r3, #3]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	8a92      	ldrh	r2, [r2, #20]
 80086b0:	fb03 f202 	mul.w	r2, r3, r2
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	61da      	str	r2, [r3, #28]
 80086b8:	e006      	b.n	80086c8 <USB_HC_StartXfer+0x1a4>
 80086ba:	bf00      	nop
 80086bc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	6a1a      	ldr	r2, [r3, #32]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80086d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086d2:	04d9      	lsls	r1, r3, #19
 80086d4:	4ba3      	ldr	r3, [pc, #652]	; (8008964 <USB_HC_StartXfer+0x440>)
 80086d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	7d9b      	ldrb	r3, [r3, #22]
 80086de:	075b      	lsls	r3, r3, #29
 80086e0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086e4:	69f9      	ldr	r1, [r7, #28]
 80086e6:	0148      	lsls	r0, r1, #5
 80086e8:	6a39      	ldr	r1, [r7, #32]
 80086ea:	4401      	add	r1, r0
 80086ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80086f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d009      	beq.n	800870e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	6999      	ldr	r1, [r3, #24]
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870a:	460a      	mov	r2, r1
 800870c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	bf0c      	ite	eq
 800871e:	2301      	moveq	r3, #1
 8008720:	2300      	movne	r3, #0
 8008722:	b2db      	uxtb	r3, r3
 8008724:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	4413      	add	r3, r2
 800872e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	0151      	lsls	r1, r2, #5
 8008738:	6a3a      	ldr	r2, [r7, #32]
 800873a:	440a      	add	r2, r1
 800873c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008740:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008744:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	4413      	add	r3, r2
 800874e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	7e7b      	ldrb	r3, [r7, #25]
 8008756:	075b      	lsls	r3, r3, #29
 8008758:	69f9      	ldr	r1, [r7, #28]
 800875a:	0148      	lsls	r0, r1, #5
 800875c:	6a39      	ldr	r1, [r7, #32]
 800875e:	4401      	add	r1, r0
 8008760:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008764:	4313      	orrs	r3, r2
 8008766:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	799b      	ldrb	r3, [r3, #6]
 800876c:	2b01      	cmp	r3, #1
 800876e:	f040 80c3 	bne.w	80088f8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	7c5b      	ldrb	r3, [r3, #17]
 8008776:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800877c:	4313      	orrs	r3, r2
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	0151      	lsls	r1, r2, #5
 8008782:	6a3a      	ldr	r2, [r7, #32]
 8008784:	440a      	add	r2, r1
 8008786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800878a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800878e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	4413      	add	r3, r2
 8008798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	6a3a      	ldr	r2, [r7, #32]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80087ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	79db      	ldrb	r3, [r3, #7]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d123      	bne.n	8008800 <USB_HC_StartXfer+0x2dc>
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	78db      	ldrb	r3, [r3, #3]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d11f      	bne.n	8008800 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	0151      	lsls	r1, r2, #5
 80087d2:	6a3a      	ldr	r2, [r7, #32]
 80087d4:	440a      	add	r2, r1
 80087d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087de:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	6a3a      	ldr	r2, [r7, #32]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087fe:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	7c9b      	ldrb	r3, [r3, #18]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d003      	beq.n	8008810 <USB_HC_StartXfer+0x2ec>
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	7c9b      	ldrb	r3, [r3, #18]
 800880c:	2b03      	cmp	r3, #3
 800880e:	d117      	bne.n	8008840 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008814:	2b01      	cmp	r3, #1
 8008816:	d113      	bne.n	8008840 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	78db      	ldrb	r3, [r3, #3]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d10f      	bne.n	8008840 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	4413      	add	r3, r2
 8008828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	69fa      	ldr	r2, [r7, #28]
 8008830:	0151      	lsls	r1, r2, #5
 8008832:	6a3a      	ldr	r2, [r7, #32]
 8008834:	440a      	add	r2, r1
 8008836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800883a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800883e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	7c9b      	ldrb	r3, [r3, #18]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d162      	bne.n	800890e <USB_HC_StartXfer+0x3ea>
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	78db      	ldrb	r3, [r3, #3]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d15e      	bne.n	800890e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	3b01      	subs	r3, #1
 8008856:	2b03      	cmp	r3, #3
 8008858:	d858      	bhi.n	800890c <USB_HC_StartXfer+0x3e8>
 800885a:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <USB_HC_StartXfer+0x33c>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	08008871 	.word	0x08008871
 8008864:	08008893 	.word	0x08008893
 8008868:	080088b5 	.word	0x080088b5
 800886c:	080088d7 	.word	0x080088d7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	4413      	add	r3, r2
 8008878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	6a3a      	ldr	r2, [r7, #32]
 8008884:	440a      	add	r2, r1
 8008886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800888a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800888e:	6053      	str	r3, [r2, #4]
          break;
 8008890:	e03d      	b.n	800890e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	4413      	add	r3, r2
 800889a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	69fa      	ldr	r2, [r7, #28]
 80088a2:	0151      	lsls	r1, r2, #5
 80088a4:	6a3a      	ldr	r2, [r7, #32]
 80088a6:	440a      	add	r2, r1
 80088a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ac:	f043 030e 	orr.w	r3, r3, #14
 80088b0:	6053      	str	r3, [r2, #4]
          break;
 80088b2:	e02c      	b.n	800890e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	69fa      	ldr	r2, [r7, #28]
 80088c4:	0151      	lsls	r1, r2, #5
 80088c6:	6a3a      	ldr	r2, [r7, #32]
 80088c8:	440a      	add	r2, r1
 80088ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088d2:	6053      	str	r3, [r2, #4]
          break;
 80088d4:	e01b      	b.n	800890e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	69fa      	ldr	r2, [r7, #28]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	6a3a      	ldr	r2, [r7, #32]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088f4:	6053      	str	r3, [r2, #4]
          break;
 80088f6:	e00a      	b.n	800890e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008904:	461a      	mov	r2, r3
 8008906:	2300      	movs	r3, #0
 8008908:	6053      	str	r3, [r2, #4]
 800890a:	e000      	b.n	800890e <USB_HC_StartXfer+0x3ea>
          break;
 800890c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	4413      	add	r3, r2
 8008916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008924:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	78db      	ldrb	r3, [r3, #3]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d004      	beq.n	8008938 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	e003      	b.n	8008940 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800893e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008946:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	4413      	add	r3, r2
 8008950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008954:	461a      	mov	r2, r3
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d003      	beq.n	8008968 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	e055      	b.n	8008a10 <USB_HC_StartXfer+0x4ec>
 8008964:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	78db      	ldrb	r3, [r3, #3]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d14e      	bne.n	8008a0e <USB_HC_StartXfer+0x4ea>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	6a1b      	ldr	r3, [r3, #32]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d04a      	beq.n	8008a0e <USB_HC_StartXfer+0x4ea>
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	79db      	ldrb	r3, [r3, #7]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d146      	bne.n	8008a0e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	7c9b      	ldrb	r3, [r3, #18]
 8008984:	2b03      	cmp	r3, #3
 8008986:	d831      	bhi.n	80089ec <USB_HC_StartXfer+0x4c8>
 8008988:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <USB_HC_StartXfer+0x46c>)
 800898a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898e:	bf00      	nop
 8008990:	080089a1 	.word	0x080089a1
 8008994:	080089c5 	.word	0x080089c5
 8008998:	080089a1 	.word	0x080089a1
 800899c:	080089c5 	.word	0x080089c5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	3303      	adds	r3, #3
 80089a6:	089b      	lsrs	r3, r3, #2
 80089a8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80089aa:	8afa      	ldrh	r2, [r7, #22]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d91c      	bls.n	80089f0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	f043 0220 	orr.w	r2, r3, #32
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80089c2:	e015      	b.n	80089f0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	3303      	adds	r3, #3
 80089ca:	089b      	lsrs	r3, r3, #2
 80089cc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80089ce:	8afa      	ldrh	r2, [r7, #22]
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	429a      	cmp	r2, r3
 80089dc:	d90a      	bls.n	80089f4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80089ea:	e003      	b.n	80089f4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80089ec:	bf00      	nop
 80089ee:	e002      	b.n	80089f6 <USB_HC_StartXfer+0x4d2>
        break;
 80089f0:	bf00      	nop
 80089f2:	e000      	b.n	80089f6 <USB_HC_StartXfer+0x4d2>
        break;
 80089f4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6999      	ldr	r1, [r3, #24]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	785a      	ldrb	r2, [r3, #1]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	2000      	movs	r0, #0
 8008a06:	9000      	str	r0, [sp, #0]
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff f9c9 	bl	8007da0 <USB_WritePacket>
  }

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3728      	adds	r7, #40	; 0x28
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	b29b      	uxth	r3, r3
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b089      	sub	sp, #36	; 0x24
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	0c9b      	lsrs	r3, r3, #18
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	0fdb      	lsrs	r3, r3, #31
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	0fdb      	lsrs	r3, r3, #31
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f003 0320 	and.w	r3, r3, #32
 8008a9c:	2b20      	cmp	r3, #32
 8008a9e:	d10d      	bne.n	8008abc <USB_HC_Halt+0x82>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10a      	bne.n	8008abc <USB_HC_Halt+0x82>
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d005      	beq.n	8008ab8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d002      	beq.n	8008ab8 <USB_HC_Halt+0x7e>
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d101      	bne.n	8008abc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	e0d8      	b.n	8008c6e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <USB_HC_Halt+0x8e>
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d173      	bne.n	8008bb0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	0151      	lsls	r1, r2, #5
 8008ada:	69fa      	ldr	r2, [r7, #28]
 8008adc:	440a      	add	r2, r1
 8008ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ae2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ae6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d14a      	bne.n	8008b8a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d133      	bne.n	8008b68 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	0151      	lsls	r1, r2, #5
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	440a      	add	r2, r1
 8008b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b1e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	0151      	lsls	r1, r2, #5
 8008b32:	69fa      	ldr	r2, [r7, #28]
 8008b34:	440a      	add	r2, r1
 8008b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b3e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	3301      	adds	r3, #1
 8008b44:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b4c:	d82e      	bhi.n	8008bac <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b64:	d0ec      	beq.n	8008b40 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b66:	e081      	b.n	8008c6c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	0151      	lsls	r1, r2, #5
 8008b7a:	69fa      	ldr	r2, [r7, #28]
 8008b7c:	440a      	add	r2, r1
 8008b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b86:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b88:	e070      	b.n	8008c6c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	69fa      	ldr	r2, [r7, #28]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ba8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008baa:	e05f      	b.n	8008c6c <USB_HC_Halt+0x232>
            break;
 8008bac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bae:	e05d      	b.n	8008c6c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	0151      	lsls	r1, r2, #5
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d133      	bne.n	8008c48 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bfe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c1e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	3301      	adds	r3, #1
 8008c24:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c2c:	d81d      	bhi.n	8008c6a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c44:	d0ec      	beq.n	8008c20 <USB_HC_Halt+0x1e6>
 8008c46:	e011      	b.n	8008c6c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	0151      	lsls	r1, r2, #5
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	e000      	b.n	8008c6c <USB_HC_Halt+0x232>
          break;
 8008c6a:	bf00      	nop
    }
  }

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3724      	adds	r7, #36	; 0x24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
	...

08008c7c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008c8c:	78fb      	ldrb	r3, [r7, #3]
 8008c8e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008c90:	2301      	movs	r3, #1
 8008c92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	04da      	lsls	r2, r3, #19
 8008c98:	4b15      	ldr	r3, [pc, #84]	; (8008cf0 <USB_DoPing+0x74>)
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	0151      	lsls	r1, r2, #5
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ca8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008cc4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ccc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cda:	461a      	mov	r2, r3
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	1ff80000 	.word	0x1ff80000

08008cf4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008d04:	2300      	movs	r3, #0
 8008d06:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7fe ff8c 	bl	8007c26 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d0e:	2110      	movs	r1, #16
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7fe ffe5 	bl	8007ce0 <USB_FlushTxFifo>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff f80f 	bl	8007d44 <USB_FlushRxFifo>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008d30:	2300      	movs	r3, #0
 8008d32:	61bb      	str	r3, [r7, #24]
 8008d34:	e01f      	b.n	8008d76 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	3301      	adds	r3, #1
 8008d74:	61bb      	str	r3, [r7, #24]
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b0f      	cmp	r3, #15
 8008d7a:	d9dc      	bls.n	8008d36 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61bb      	str	r3, [r7, #24]
 8008d80:	e034      	b.n	8008dec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008da0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008da8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db6:	461a      	mov	r2, r3
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dc8:	d80c      	bhi.n	8008de4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008de0:	d0ec      	beq.n	8008dbc <USB_StopHost+0xc8>
 8008de2:	e000      	b.n	8008de6 <USB_StopHost+0xf2>
        break;
 8008de4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	3301      	adds	r3, #1
 8008dea:	61bb      	str	r3, [r7, #24]
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	2b0f      	cmp	r3, #15
 8008df0:	d9c7      	bls.n	8008d82 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008df8:	461a      	mov	r2, r3
 8008dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f04f 32ff 	mov.w	r2, #4294967295
 8008e06:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7fe fefb 	bl	8007c04 <USB_EnableGlobalInt>

  return ret;
 8008e0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3720      	adds	r7, #32
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <__NVIC_SetPriority>:
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	6039      	str	r1, [r7, #0]
 8008e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	db0a      	blt.n	8008e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	490c      	ldr	r1, [pc, #48]	; (8008e64 <__NVIC_SetPriority+0x4c>)
 8008e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e36:	0112      	lsls	r2, r2, #4
 8008e38:	b2d2      	uxtb	r2, r2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e40:	e00a      	b.n	8008e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	4908      	ldr	r1, [pc, #32]	; (8008e68 <__NVIC_SetPriority+0x50>)
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	f003 030f 	and.w	r3, r3, #15
 8008e4e:	3b04      	subs	r3, #4
 8008e50:	0112      	lsls	r2, r2, #4
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	440b      	add	r3, r1
 8008e56:	761a      	strb	r2, [r3, #24]
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	e000e100 	.word	0xe000e100
 8008e68:	e000ed00 	.word	0xe000ed00

08008e6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008e70:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <SysTick_Handler+0x1c>)
 8008e72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008e74:	f002 fb24 	bl	800b4c0 <xTaskGetSchedulerState>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d001      	beq.n	8008e82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008e7e:	f000 fecb 	bl	8009c18 <xPortSysTickHandler>
  }
}
 8008e82:	bf00      	nop
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	e000e010 	.word	0xe000e010

08008e8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008e90:	2100      	movs	r1, #0
 8008e92:	f06f 0004 	mvn.w	r0, #4
 8008e96:	f7ff ffbf 	bl	8008e18 <__NVIC_SetPriority>
#endif
}
 8008e9a:	bf00      	nop
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ea6:	f3ef 8305 	mrs	r3, IPSR
 8008eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8008eac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008eb2:	f06f 0305 	mvn.w	r3, #5
 8008eb6:	607b      	str	r3, [r7, #4]
 8008eb8:	e00c      	b.n	8008ed4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008eba:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <osKernelInitialize+0x44>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d105      	bne.n	8008ece <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ec2:	4b08      	ldr	r3, [pc, #32]	; (8008ee4 <osKernelInitialize+0x44>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	607b      	str	r3, [r7, #4]
 8008ecc:	e002      	b.n	8008ed4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008ece:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ed4:	687b      	ldr	r3, [r7, #4]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	200003a0 	.word	0x200003a0

08008ee8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eee:	f3ef 8305 	mrs	r3, IPSR
 8008ef2:	603b      	str	r3, [r7, #0]
  return(result);
 8008ef4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008efa:	f06f 0305 	mvn.w	r3, #5
 8008efe:	607b      	str	r3, [r7, #4]
 8008f00:	e010      	b.n	8008f24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f02:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <osKernelStart+0x48>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d109      	bne.n	8008f1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f0a:	f7ff ffbf 	bl	8008e8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f0e:	4b08      	ldr	r3, [pc, #32]	; (8008f30 <osKernelStart+0x48>)
 8008f10:	2202      	movs	r2, #2
 8008f12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f14:	f001 fe8c 	bl	800ac30 <vTaskStartScheduler>
      stat = osOK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	607b      	str	r3, [r7, #4]
 8008f1c:	e002      	b.n	8008f24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f24:	687b      	ldr	r3, [r7, #4]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	200003a0 	.word	0x200003a0

08008f34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08e      	sub	sp, #56	; 0x38
 8008f38:	af04      	add	r7, sp, #16
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f44:	f3ef 8305 	mrs	r3, IPSR
 8008f48:	617b      	str	r3, [r7, #20]
  return(result);
 8008f4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d17e      	bne.n	800904e <osThreadNew+0x11a>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d07b      	beq.n	800904e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f56:	2380      	movs	r3, #128	; 0x80
 8008f58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f5a:	2318      	movs	r3, #24
 8008f5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295
 8008f66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d045      	beq.n	8008ffa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <osThreadNew+0x48>
        name = attr->name;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d008      	beq.n	8008fa2 <osThreadNew+0x6e>
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	2b38      	cmp	r3, #56	; 0x38
 8008f94:	d805      	bhi.n	8008fa2 <osThreadNew+0x6e>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <osThreadNew+0x72>
        return (NULL);
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e054      	b.n	8009050 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	089b      	lsrs	r3, r3, #2
 8008fb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00e      	beq.n	8008fdc <osThreadNew+0xa8>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	2b5b      	cmp	r3, #91	; 0x5b
 8008fc4:	d90a      	bls.n	8008fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d006      	beq.n	8008fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <osThreadNew+0xa8>
        mem = 1;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	61bb      	str	r3, [r7, #24]
 8008fda:	e010      	b.n	8008ffe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10c      	bne.n	8008ffe <osThreadNew+0xca>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d108      	bne.n	8008ffe <osThreadNew+0xca>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d104      	bne.n	8008ffe <osThreadNew+0xca>
          mem = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61bb      	str	r3, [r7, #24]
 8008ff8:	e001      	b.n	8008ffe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d110      	bne.n	8009026 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800900c:	9202      	str	r2, [sp, #8]
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	6a3a      	ldr	r2, [r7, #32]
 8009018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f001 fc32 	bl	800a884 <xTaskCreateStatic>
 8009020:	4603      	mov	r3, r0
 8009022:	613b      	str	r3, [r7, #16]
 8009024:	e013      	b.n	800904e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d110      	bne.n	800904e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	b29a      	uxth	r2, r3
 8009030:	f107 0310 	add.w	r3, r7, #16
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f001 fc7d 	bl	800a93e <xTaskCreate>
 8009044:	4603      	mov	r3, r0
 8009046:	2b01      	cmp	r3, #1
 8009048:	d001      	beq.n	800904e <osThreadNew+0x11a>
            hTask = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800904e:	693b      	ldr	r3, [r7, #16]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3728      	adds	r7, #40	; 0x28
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009060:	f3ef 8305 	mrs	r3, IPSR
 8009064:	60bb      	str	r3, [r7, #8]
  return(result);
 8009066:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <osDelay+0x1c>
    stat = osErrorISR;
 800906c:	f06f 0305 	mvn.w	r3, #5
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	e007      	b.n	8009084 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009074:	2300      	movs	r3, #0
 8009076:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <osDelay+0x2c>
      vTaskDelay(ticks);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 fda2 	bl	800abc8 <vTaskDelay>
    }
  }

  return (stat);
 8009084:	68fb      	ldr	r3, [r7, #12]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800908e:	b580      	push	{r7, lr}
 8009090:	b08a      	sub	sp, #40	; 0x28
 8009092:	af02      	add	r7, sp, #8
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800909a:	2300      	movs	r3, #0
 800909c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800909e:	f3ef 8305 	mrs	r3, IPSR
 80090a2:	613b      	str	r3, [r7, #16]
  return(result);
 80090a4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d15f      	bne.n	800916a <osMessageQueueNew+0xdc>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d05c      	beq.n	800916a <osMessageQueueNew+0xdc>
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d059      	beq.n	800916a <osMessageQueueNew+0xdc>
    mem = -1;
 80090b6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d029      	beq.n	8009116 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d012      	beq.n	80090f0 <osMessageQueueNew+0x62>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	2b4f      	cmp	r3, #79	; 0x4f
 80090d0:	d90e      	bls.n	80090f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	695a      	ldr	r2, [r3, #20]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	68b9      	ldr	r1, [r7, #8]
 80090e2:	fb01 f303 	mul.w	r3, r1, r3
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d302      	bcc.n	80090f0 <osMessageQueueNew+0x62>
        mem = 1;
 80090ea:	2301      	movs	r3, #1
 80090ec:	61bb      	str	r3, [r7, #24]
 80090ee:	e014      	b.n	800911a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d110      	bne.n	800911a <osMessageQueueNew+0x8c>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10c      	bne.n	800911a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009104:	2b00      	cmp	r3, #0
 8009106:	d108      	bne.n	800911a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d104      	bne.n	800911a <osMessageQueueNew+0x8c>
          mem = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	61bb      	str	r3, [r7, #24]
 8009114:	e001      	b.n	800911a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d10b      	bne.n	8009138 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691a      	ldr	r2, [r3, #16]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	2100      	movs	r1, #0
 800912a:	9100      	str	r1, [sp, #0]
 800912c:	68b9      	ldr	r1, [r7, #8]
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 fe6a 	bl	8009e08 <xQueueGenericCreateStatic>
 8009134:	61f8      	str	r0, [r7, #28]
 8009136:	e008      	b.n	800914a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d105      	bne.n	800914a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800913e:	2200      	movs	r2, #0
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 fed8 	bl	8009ef8 <xQueueGenericCreate>
 8009148:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00c      	beq.n	800916a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <osMessageQueueNew+0xd0>
        name = attr->name;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e001      	b.n	8009162 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800915e:	2300      	movs	r3, #0
 8009160:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009162:	6979      	ldr	r1, [r7, #20]
 8009164:	69f8      	ldr	r0, [r7, #28]
 8009166:	f001 fb2f 	bl	800a7c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800916a:	69fb      	ldr	r3, [r7, #28]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3720      	adds	r7, #32
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	603b      	str	r3, [r7, #0]
 8009180:	4613      	mov	r3, r2
 8009182:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009188:	2300      	movs	r3, #0
 800918a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800918c:	f3ef 8305 	mrs	r3, IPSR
 8009190:	617b      	str	r3, [r7, #20]
  return(result);
 8009192:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009194:	2b00      	cmp	r3, #0
 8009196:	d028      	beq.n	80091ea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d005      	beq.n	80091aa <osMessageQueuePut+0x36>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <osMessageQueuePut+0x36>
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80091aa:	f06f 0303 	mvn.w	r3, #3
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	e038      	b.n	8009224 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80091b2:	2300      	movs	r3, #0
 80091b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80091b6:	f107 0210 	add.w	r2, r7, #16
 80091ba:	2300      	movs	r3, #0
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	69b8      	ldr	r0, [r7, #24]
 80091c0:	f000 fff6 	bl	800a1b0 <xQueueGenericSendFromISR>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d003      	beq.n	80091d2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80091ca:	f06f 0302 	mvn.w	r3, #2
 80091ce:	61fb      	str	r3, [r7, #28]
 80091d0:	e028      	b.n	8009224 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d025      	beq.n	8009224 <osMessageQueuePut+0xb0>
 80091d8:	4b15      	ldr	r3, [pc, #84]	; (8009230 <osMessageQueuePut+0xbc>)
 80091da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	e01c      	b.n	8009224 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <osMessageQueuePut+0x82>
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d103      	bne.n	80091fe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80091f6:	f06f 0303 	mvn.w	r3, #3
 80091fa:	61fb      	str	r3, [r7, #28]
 80091fc:	e012      	b.n	8009224 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80091fe:	2300      	movs	r3, #0
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	68b9      	ldr	r1, [r7, #8]
 8009204:	69b8      	ldr	r0, [r7, #24]
 8009206:	f000 fed5 	bl	8009fb4 <xQueueGenericSend>
 800920a:	4603      	mov	r3, r0
 800920c:	2b01      	cmp	r3, #1
 800920e:	d009      	beq.n	8009224 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009216:	f06f 0301 	mvn.w	r3, #1
 800921a:	61fb      	str	r3, [r7, #28]
 800921c:	e002      	b.n	8009224 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800921e:	f06f 0302 	mvn.w	r3, #2
 8009222:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009224:	69fb      	ldr	r3, [r7, #28]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3720      	adds	r7, #32
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	e000ed04 	.word	0xe000ed04

08009234 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009246:	2300      	movs	r3, #0
 8009248:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800924a:	f3ef 8305 	mrs	r3, IPSR
 800924e:	617b      	str	r3, [r7, #20]
  return(result);
 8009250:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009252:	2b00      	cmp	r3, #0
 8009254:	d028      	beq.n	80092a8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d005      	beq.n	8009268 <osMessageQueueGet+0x34>
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d002      	beq.n	8009268 <osMessageQueueGet+0x34>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009268:	f06f 0303 	mvn.w	r3, #3
 800926c:	61fb      	str	r3, [r7, #28]
 800926e:	e037      	b.n	80092e0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009270:	2300      	movs	r3, #0
 8009272:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009274:	f107 0310 	add.w	r3, r7, #16
 8009278:	461a      	mov	r2, r3
 800927a:	68b9      	ldr	r1, [r7, #8]
 800927c:	69b8      	ldr	r0, [r7, #24]
 800927e:	f001 f913 	bl	800a4a8 <xQueueReceiveFromISR>
 8009282:	4603      	mov	r3, r0
 8009284:	2b01      	cmp	r3, #1
 8009286:	d003      	beq.n	8009290 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009288:	f06f 0302 	mvn.w	r3, #2
 800928c:	61fb      	str	r3, [r7, #28]
 800928e:	e027      	b.n	80092e0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d024      	beq.n	80092e0 <osMessageQueueGet+0xac>
 8009296:	4b15      	ldr	r3, [pc, #84]	; (80092ec <osMessageQueueGet+0xb8>)
 8009298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	e01b      	b.n	80092e0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <osMessageQueueGet+0x80>
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d103      	bne.n	80092bc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80092b4:	f06f 0303 	mvn.w	r3, #3
 80092b8:	61fb      	str	r3, [r7, #28]
 80092ba:	e011      	b.n	80092e0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	68b9      	ldr	r1, [r7, #8]
 80092c0:	69b8      	ldr	r0, [r7, #24]
 80092c2:	f001 f811 	bl	800a2e8 <xQueueReceive>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d009      	beq.n	80092e0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80092d2:	f06f 0301 	mvn.w	r3, #1
 80092d6:	61fb      	str	r3, [r7, #28]
 80092d8:	e002      	b.n	80092e0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80092da:	f06f 0302 	mvn.w	r3, #2
 80092de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80092e0:	69fb      	ldr	r3, [r7, #28]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3720      	adds	r7, #32
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	e000ed04 	.word	0xe000ed04

080092f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4a07      	ldr	r2, [pc, #28]	; (800931c <vApplicationGetIdleTaskMemory+0x2c>)
 8009300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	4a06      	ldr	r2, [pc, #24]	; (8009320 <vApplicationGetIdleTaskMemory+0x30>)
 8009306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2280      	movs	r2, #128	; 0x80
 800930c:	601a      	str	r2, [r3, #0]
}
 800930e:	bf00      	nop
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	200003a4 	.word	0x200003a4
 8009320:	20000400 	.word	0x20000400

08009324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4a07      	ldr	r2, [pc, #28]	; (8009350 <vApplicationGetTimerTaskMemory+0x2c>)
 8009334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	4a06      	ldr	r2, [pc, #24]	; (8009354 <vApplicationGetTimerTaskMemory+0x30>)
 800933a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009342:	601a      	str	r2, [r3, #0]
}
 8009344:	bf00      	nop
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	20000600 	.word	0x20000600
 8009354:	2000065c 	.word	0x2000065c

08009358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08a      	sub	sp, #40	; 0x28
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009360:	2300      	movs	r3, #0
 8009362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009364:	f001 fcca 	bl	800acfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009368:	4b5b      	ldr	r3, [pc, #364]	; (80094d8 <pvPortMalloc+0x180>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009370:	f000 f920 	bl	80095b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009374:	4b59      	ldr	r3, [pc, #356]	; (80094dc <pvPortMalloc+0x184>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4013      	ands	r3, r2
 800937c:	2b00      	cmp	r3, #0
 800937e:	f040 8093 	bne.w	80094a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01d      	beq.n	80093c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009388:	2208      	movs	r2, #8
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4413      	add	r3, r2
 800938e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	2b00      	cmp	r3, #0
 8009398:	d014      	beq.n	80093c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f023 0307 	bic.w	r3, r3, #7
 80093a0:	3308      	adds	r3, #8
 80093a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80093c0:	bf00      	nop
 80093c2:	e7fe      	b.n	80093c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d06e      	beq.n	80094a8 <pvPortMalloc+0x150>
 80093ca:	4b45      	ldr	r3, [pc, #276]	; (80094e0 <pvPortMalloc+0x188>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d869      	bhi.n	80094a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093d4:	4b43      	ldr	r3, [pc, #268]	; (80094e4 <pvPortMalloc+0x18c>)
 80093d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093d8:	4b42      	ldr	r3, [pc, #264]	; (80094e4 <pvPortMalloc+0x18c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093de:	e004      	b.n	80093ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d903      	bls.n	80093fc <pvPortMalloc+0xa4>
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1f1      	bne.n	80093e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093fc:	4b36      	ldr	r3, [pc, #216]	; (80094d8 <pvPortMalloc+0x180>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009402:	429a      	cmp	r2, r3
 8009404:	d050      	beq.n	80094a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2208      	movs	r2, #8
 800940c:	4413      	add	r3, r2
 800940e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	6a3b      	ldr	r3, [r7, #32]
 8009416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	2308      	movs	r3, #8
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	429a      	cmp	r2, r3
 8009426:	d91f      	bls.n	8009468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4413      	add	r3, r2
 800942e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <pvPortMalloc+0xf8>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	613b      	str	r3, [r7, #16]
}
 800944c:	bf00      	nop
 800944e:	e7fe      	b.n	800944e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	1ad2      	subs	r2, r2, r3
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009462:	69b8      	ldr	r0, [r7, #24]
 8009464:	f000 f908 	bl	8009678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009468:	4b1d      	ldr	r3, [pc, #116]	; (80094e0 <pvPortMalloc+0x188>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	4a1b      	ldr	r2, [pc, #108]	; (80094e0 <pvPortMalloc+0x188>)
 8009474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009476:	4b1a      	ldr	r3, [pc, #104]	; (80094e0 <pvPortMalloc+0x188>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	4b1b      	ldr	r3, [pc, #108]	; (80094e8 <pvPortMalloc+0x190>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d203      	bcs.n	800948a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009482:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <pvPortMalloc+0x188>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a18      	ldr	r2, [pc, #96]	; (80094e8 <pvPortMalloc+0x190>)
 8009488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <pvPortMalloc+0x184>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	431a      	orrs	r2, r3
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800949e:	4b13      	ldr	r3, [pc, #76]	; (80094ec <pvPortMalloc+0x194>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3301      	adds	r3, #1
 80094a4:	4a11      	ldr	r2, [pc, #68]	; (80094ec <pvPortMalloc+0x194>)
 80094a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094a8:	f001 fc36 	bl	800ad18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f003 0307 	and.w	r3, r3, #7
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <pvPortMalloc+0x174>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	60fb      	str	r3, [r7, #12]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <pvPortMalloc+0x172>
	return pvReturn;
 80094cc:	69fb      	ldr	r3, [r7, #28]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3728      	adds	r7, #40	; 0x28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20005884 	.word	0x20005884
 80094dc:	20005898 	.word	0x20005898
 80094e0:	20005888 	.word	0x20005888
 80094e4:	2000587c 	.word	0x2000587c
 80094e8:	2000588c 	.word	0x2000588c
 80094ec:	20005890 	.word	0x20005890

080094f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d04d      	beq.n	800959e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009502:	2308      	movs	r3, #8
 8009504:	425b      	negs	r3, r3
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	4413      	add	r3, r2
 800950a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <vPortFree+0xb8>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4013      	ands	r3, r2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <vPortFree+0x44>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	60fb      	str	r3, [r7, #12]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <vPortFree+0x62>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	60bb      	str	r3, [r7, #8]
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <vPortFree+0xb8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4013      	ands	r3, r2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01e      	beq.n	800959e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d11a      	bne.n	800959e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	4b0e      	ldr	r3, [pc, #56]	; (80095a8 <vPortFree+0xb8>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	43db      	mvns	r3, r3
 8009572:	401a      	ands	r2, r3
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009578:	f001 fbc0 	bl	800acfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <vPortFree+0xbc>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4413      	add	r3, r2
 8009586:	4a09      	ldr	r2, [pc, #36]	; (80095ac <vPortFree+0xbc>)
 8009588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800958a:	6938      	ldr	r0, [r7, #16]
 800958c:	f000 f874 	bl	8009678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <vPortFree+0xc0>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3301      	adds	r3, #1
 8009596:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <vPortFree+0xc0>)
 8009598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800959a:	f001 fbbd 	bl	800ad18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800959e:	bf00      	nop
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20005898 	.word	0x20005898
 80095ac:	20005888 	.word	0x20005888
 80095b0:	20005894 	.word	0x20005894

080095b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095ba:	f644 6320 	movw	r3, #20000	; 0x4e20
 80095be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095c0:	4b27      	ldr	r3, [pc, #156]	; (8009660 <prvHeapInit+0xac>)
 80095c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00c      	beq.n	80095e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3307      	adds	r3, #7
 80095d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0307 	bic.w	r3, r3, #7
 80095da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	4a1f      	ldr	r2, [pc, #124]	; (8009660 <prvHeapInit+0xac>)
 80095e4:	4413      	add	r3, r2
 80095e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095ec:	4a1d      	ldr	r2, [pc, #116]	; (8009664 <prvHeapInit+0xb0>)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095f2:	4b1c      	ldr	r3, [pc, #112]	; (8009664 <prvHeapInit+0xb0>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	4413      	add	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009600:	2208      	movs	r2, #8
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0307 	bic.w	r3, r3, #7
 800960e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4a15      	ldr	r2, [pc, #84]	; (8009668 <prvHeapInit+0xb4>)
 8009614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009616:	4b14      	ldr	r3, [pc, #80]	; (8009668 <prvHeapInit+0xb4>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2200      	movs	r2, #0
 800961c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800961e:	4b12      	ldr	r3, [pc, #72]	; (8009668 <prvHeapInit+0xb4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	1ad2      	subs	r2, r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <prvHeapInit+0xb4>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	4a0a      	ldr	r2, [pc, #40]	; (800966c <prvHeapInit+0xb8>)
 8009642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	4a09      	ldr	r2, [pc, #36]	; (8009670 <prvHeapInit+0xbc>)
 800964a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <prvHeapInit+0xc0>)
 800964e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009652:	601a      	str	r2, [r3, #0]
}
 8009654:	bf00      	nop
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	20000a5c 	.word	0x20000a5c
 8009664:	2000587c 	.word	0x2000587c
 8009668:	20005884 	.word	0x20005884
 800966c:	2000588c 	.word	0x2000588c
 8009670:	20005888 	.word	0x20005888
 8009674:	20005898 	.word	0x20005898

08009678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009680:	4b28      	ldr	r3, [pc, #160]	; (8009724 <prvInsertBlockIntoFreeList+0xac>)
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	e002      	b.n	800968c <prvInsertBlockIntoFreeList+0x14>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	60fb      	str	r3, [r7, #12]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	429a      	cmp	r2, r3
 8009694:	d8f7      	bhi.n	8009686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	4413      	add	r3, r2
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d108      	bne.n	80096ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	441a      	add	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	441a      	add	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d118      	bne.n	8009700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	4b15      	ldr	r3, [pc, #84]	; (8009728 <prvInsertBlockIntoFreeList+0xb0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d00d      	beq.n	80096f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	441a      	add	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	e008      	b.n	8009708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096f6:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <prvInsertBlockIntoFreeList+0xb0>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	e003      	b.n	8009708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	429a      	cmp	r2, r3
 800970e:	d002      	beq.n	8009716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009716:	bf00      	nop
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	2000587c 	.word	0x2000587c
 8009728:	20005884 	.word	0x20005884

0800972c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f103 0208 	add.w	r2, r3, #8
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f04f 32ff 	mov.w	r2, #4294967295
 8009744:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f103 0208 	add.w	r2, r3, #8
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f103 0208 	add.w	r2, r3, #8
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	601a      	str	r2, [r3, #0]
}
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097ce:	b480      	push	{r7}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e4:	d103      	bne.n	80097ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	e00c      	b.n	8009808 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3308      	adds	r3, #8
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e002      	b.n	80097fc <vListInsert+0x2e>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	429a      	cmp	r2, r3
 8009806:	d2f6      	bcs.n	80097f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	601a      	str	r2, [r3, #0]
}
 8009834:	bf00      	nop
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6892      	ldr	r2, [r2, #8]
 8009856:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6852      	ldr	r2, [r2, #4]
 8009860:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	429a      	cmp	r2, r3
 800986a:	d103      	bne.n	8009874 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	1e5a      	subs	r2, r3, #1
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3b04      	subs	r3, #4
 80098a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3b04      	subs	r3, #4
 80098b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f023 0201 	bic.w	r2, r3, #1
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3b04      	subs	r3, #4
 80098c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098c4:	4a0c      	ldr	r2, [pc, #48]	; (80098f8 <pxPortInitialiseStack+0x64>)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3b14      	subs	r3, #20
 80098ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3b04      	subs	r3, #4
 80098da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f06f 0202 	mvn.w	r2, #2
 80098e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3b20      	subs	r3, #32
 80098e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098ea:	68fb      	ldr	r3, [r7, #12]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	080098fd 	.word	0x080098fd

080098fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009906:	4b12      	ldr	r3, [pc, #72]	; (8009950 <prvTaskExitError+0x54>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990e:	d00a      	beq.n	8009926 <prvTaskExitError+0x2a>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	60fb      	str	r3, [r7, #12]
}
 8009922:	bf00      	nop
 8009924:	e7fe      	b.n	8009924 <prvTaskExitError+0x28>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	60bb      	str	r3, [r7, #8]
}
 8009938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800993a:	bf00      	nop
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0fc      	beq.n	800993c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009942:	bf00      	nop
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	2000000c 	.word	0x2000000c
	...

08009960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <pxCurrentTCBConst2>)
 8009962:	6819      	ldr	r1, [r3, #0]
 8009964:	6808      	ldr	r0, [r1, #0]
 8009966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996a:	f380 8809 	msr	PSP, r0
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8811 	msr	BASEPRI, r0
 800997a:	4770      	bx	lr
 800997c:	f3af 8000 	nop.w

08009980 <pxCurrentTCBConst2>:
 8009980:	200058e4 	.word	0x200058e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009988:	4808      	ldr	r0, [pc, #32]	; (80099ac <prvPortStartFirstTask+0x24>)
 800998a:	6800      	ldr	r0, [r0, #0]
 800998c:	6800      	ldr	r0, [r0, #0]
 800998e:	f380 8808 	msr	MSP, r0
 8009992:	f04f 0000 	mov.w	r0, #0
 8009996:	f380 8814 	msr	CONTROL, r0
 800999a:	b662      	cpsie	i
 800999c:	b661      	cpsie	f
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	df00      	svc	0
 80099a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099aa:	bf00      	nop
 80099ac:	e000ed08 	.word	0xe000ed08

080099b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099b6:	4b46      	ldr	r3, [pc, #280]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a46      	ldr	r2, [pc, #280]	; (8009ad4 <xPortStartScheduler+0x124>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d10a      	bne.n	80099d6 <xPortStartScheduler+0x26>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	613b      	str	r3, [r7, #16]
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099d6:	4b3e      	ldr	r3, [pc, #248]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a3f      	ldr	r2, [pc, #252]	; (8009ad8 <xPortStartScheduler+0x128>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10a      	bne.n	80099f6 <xPortStartScheduler+0x46>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099f6:	4b39      	ldr	r3, [pc, #228]	; (8009adc <xPortStartScheduler+0x12c>)
 80099f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	22ff      	movs	r2, #255	; 0xff
 8009a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	4b31      	ldr	r3, [pc, #196]	; (8009ae0 <xPortStartScheduler+0x130>)
 8009a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a1e:	4b31      	ldr	r3, [pc, #196]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a20:	2207      	movs	r2, #7
 8009a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a24:	e009      	b.n	8009a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a26:	4b2f      	ldr	r3, [pc, #188]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d0ef      	beq.n	8009a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a46:	4b27      	ldr	r3, [pc, #156]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f1c3 0307 	rsb	r3, r3, #7
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d00a      	beq.n	8009a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	60bb      	str	r3, [r7, #8]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a68:	4b1e      	ldr	r3, [pc, #120]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	021b      	lsls	r3, r3, #8
 8009a6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a72:	4b1c      	ldr	r3, [pc, #112]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a86:	4b18      	ldr	r3, [pc, #96]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a17      	ldr	r2, [pc, #92]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a14      	ldr	r2, [pc, #80]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a9e:	f000 f8dd 	bl	8009c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <xPortStartScheduler+0x13c>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009aa8:	f000 f8fc 	bl	8009ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009aac:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <xPortStartScheduler+0x140>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0f      	ldr	r2, [pc, #60]	; (8009af0 <xPortStartScheduler+0x140>)
 8009ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ab8:	f7ff ff66 	bl	8009988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009abc:	f001 fa94 	bl	800afe8 <vTaskSwitchContext>
	prvTaskExitError();
 8009ac0:	f7ff ff1c 	bl	80098fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	e000ed00 	.word	0xe000ed00
 8009ad4:	410fc271 	.word	0x410fc271
 8009ad8:	410fc270 	.word	0x410fc270
 8009adc:	e000e400 	.word	0xe000e400
 8009ae0:	2000589c 	.word	0x2000589c
 8009ae4:	200058a0 	.word	0x200058a0
 8009ae8:	e000ed20 	.word	0xe000ed20
 8009aec:	2000000c 	.word	0x2000000c
 8009af0:	e000ef34 	.word	0xe000ef34

08009af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	607b      	str	r3, [r7, #4]
}
 8009b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3301      	adds	r3, #1
 8009b14:	4a0d      	ldr	r2, [pc, #52]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d10f      	bne.n	8009b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b20:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <vPortEnterCritical+0x5c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	603b      	str	r3, [r7, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <vPortEnterCritical+0x4a>
	}
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	2000000c 	.word	0x2000000c
 8009b50:	e000ed04 	.word	0xe000ed04

08009b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b5a:	4b12      	ldr	r3, [pc, #72]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <vPortExitCritical+0x24>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	607b      	str	r3, [r7, #4]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b78:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	4a09      	ldr	r2, [pc, #36]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b82:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d105      	bne.n	8009b96 <vPortExitCritical+0x42>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b96:	bf00      	nop
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	2000000c 	.word	0x2000000c
	...

08009bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bb0:	f3ef 8009 	mrs	r0, PSP
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <pxCurrentTCBConst>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	f01e 0f10 	tst.w	lr, #16
 8009bc0:	bf08      	it	eq
 8009bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bca:	6010      	str	r0, [r2, #0]
 8009bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bd4:	f380 8811 	msr	BASEPRI, r0
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f001 fa02 	bl	800afe8 <vTaskSwitchContext>
 8009be4:	f04f 0000 	mov.w	r0, #0
 8009be8:	f380 8811 	msr	BASEPRI, r0
 8009bec:	bc09      	pop	{r0, r3}
 8009bee:	6819      	ldr	r1, [r3, #0]
 8009bf0:	6808      	ldr	r0, [r1, #0]
 8009bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf6:	f01e 0f10 	tst.w	lr, #16
 8009bfa:	bf08      	it	eq
 8009bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c00:	f380 8809 	msr	PSP, r0
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	f3af 8000 	nop.w

08009c10 <pxCurrentTCBConst>:
 8009c10:	200058e4 	.word	0x200058e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop

08009c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	607b      	str	r3, [r7, #4]
}
 8009c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c32:	f001 f91f 	bl	800ae74 <xTaskIncrementTick>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c3c:	4b06      	ldr	r3, [pc, #24]	; (8009c58 <xPortSysTickHandler+0x40>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	2300      	movs	r3, #0
 8009c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f383 8811 	msr	BASEPRI, r3
}
 8009c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	e000ed04 	.word	0xe000ed04

08009c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c66:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <vPortSetupTimerInterrupt+0x38>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <vPortSetupTimerInterrupt+0x3c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a0a      	ldr	r2, [pc, #40]	; (8009c9c <vPortSetupTimerInterrupt+0x40>)
 8009c72:	fba2 2303 	umull	r2, r3, r2, r3
 8009c76:	099b      	lsrs	r3, r3, #6
 8009c78:	4a09      	ldr	r2, [pc, #36]	; (8009ca0 <vPortSetupTimerInterrupt+0x44>)
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c7e:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c80:	2207      	movs	r2, #7
 8009c82:	601a      	str	r2, [r3, #0]
}
 8009c84:	bf00      	nop
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	e000e010 	.word	0xe000e010
 8009c94:	e000e018 	.word	0xe000e018
 8009c98:	20000000 	.word	0x20000000
 8009c9c:	10624dd3 	.word	0x10624dd3
 8009ca0:	e000e014 	.word	0xe000e014

08009ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cb4 <vPortEnableVFP+0x10>
 8009ca8:	6801      	ldr	r1, [r0, #0]
 8009caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cae:	6001      	str	r1, [r0, #0]
 8009cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cb2:	bf00      	nop
 8009cb4:	e000ed88 	.word	0xe000ed88

08009cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cbe:	f3ef 8305 	mrs	r3, IPSR
 8009cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d914      	bls.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cca:	4a17      	ldr	r2, [pc, #92]	; (8009d28 <vPortValidateInterruptPriority+0x70>)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cd4:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <vPortValidateInterruptPriority+0x74>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	7afa      	ldrb	r2, [r7, #11]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d20a      	bcs.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <vPortValidateInterruptPriority+0x78>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <vPortValidateInterruptPriority+0x7c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d90a      	bls.n	8009d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	603b      	str	r3, [r7, #0]
}
 8009d16:	bf00      	nop
 8009d18:	e7fe      	b.n	8009d18 <vPortValidateInterruptPriority+0x60>
	}
 8009d1a:	bf00      	nop
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	e000e3f0 	.word	0xe000e3f0
 8009d2c:	2000589c 	.word	0x2000589c
 8009d30:	e000ed0c 	.word	0xe000ed0c
 8009d34:	200058a0 	.word	0x200058a0

08009d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10a      	bne.n	8009d62 <xQueueGenericReset+0x2a>
	__asm volatile
 8009d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	60bb      	str	r3, [r7, #8]
}
 8009d5e:	bf00      	nop
 8009d60:	e7fe      	b.n	8009d60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d62:	f7ff fec7 	bl	8009af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d72:	fb01 f303 	mul.w	r3, r1, r3
 8009d76:	441a      	add	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d92:	3b01      	subs	r3, #1
 8009d94:	68f9      	ldr	r1, [r7, #12]
 8009d96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d98:	fb01 f303 	mul.w	r3, r1, r3
 8009d9c:	441a      	add	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	22ff      	movs	r2, #255	; 0xff
 8009da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	22ff      	movs	r2, #255	; 0xff
 8009dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d114      	bne.n	8009de2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d01a      	beq.n	8009df6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3310      	adds	r3, #16
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f001 f9bd 	bl	800b144 <xTaskRemoveFromEventList>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d012      	beq.n	8009df6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009dd0:	4b0c      	ldr	r3, [pc, #48]	; (8009e04 <xQueueGenericReset+0xcc>)
 8009dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	e009      	b.n	8009df6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3310      	adds	r3, #16
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7ff fca0 	bl	800972c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3324      	adds	r3, #36	; 0x24
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fc9b 	bl	800972c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009df6:	f7ff fead 	bl	8009b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dfa:	2301      	movs	r3, #1
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	e000ed04 	.word	0xe000ed04

08009e08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08e      	sub	sp, #56	; 0x38
 8009e0c:	af02      	add	r7, sp, #8
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
 8009e14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10a      	bne.n	8009e32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10a      	bne.n	8009e4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e4a:	bf00      	nop
 8009e4c:	e7fe      	b.n	8009e4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <xQueueGenericCreateStatic+0x52>
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <xQueueGenericCreateStatic+0x56>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e000      	b.n	8009e60 <xQueueGenericCreateStatic+0x58>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	623b      	str	r3, [r7, #32]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d102      	bne.n	8009e86 <xQueueGenericCreateStatic+0x7e>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <xQueueGenericCreateStatic+0x82>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e000      	b.n	8009e8c <xQueueGenericCreateStatic+0x84>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	61fb      	str	r3, [r7, #28]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ea6:	2350      	movs	r3, #80	; 0x50
 8009ea8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2b50      	cmp	r3, #80	; 0x50
 8009eae:	d00a      	beq.n	8009ec6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	61bb      	str	r3, [r7, #24]
}
 8009ec2:	bf00      	nop
 8009ec4:	e7fe      	b.n	8009ec4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ec6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00d      	beq.n	8009eee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009eda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	68b9      	ldr	r1, [r7, #8]
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 f83f 	bl	8009f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3730      	adds	r7, #48	; 0x30
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08a      	sub	sp, #40	; 0x28
 8009efc:	af02      	add	r7, sp, #8
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	4613      	mov	r3, r2
 8009f04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	613b      	str	r3, [r7, #16]
}
 8009f1e:	bf00      	nop
 8009f20:	e7fe      	b.n	8009f20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	fb02 f303 	mul.w	r3, r2, r3
 8009f2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	3350      	adds	r3, #80	; 0x50
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7ff fa11 	bl	8009358 <pvPortMalloc>
 8009f36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d011      	beq.n	8009f62 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	3350      	adds	r3, #80	; 0x50
 8009f46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f50:	79fa      	ldrb	r2, [r7, #7]
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	4613      	mov	r3, r2
 8009f58:	697a      	ldr	r2, [r7, #20]
 8009f5a:	68b9      	ldr	r1, [r7, #8]
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 f805 	bl	8009f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f62:	69bb      	ldr	r3, [r7, #24]
	}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3720      	adds	r7, #32
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
 8009f78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d103      	bne.n	8009f88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	e002      	b.n	8009f8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	69b8      	ldr	r0, [r7, #24]
 8009f9e:	f7ff fecb 	bl	8009d38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	78fa      	ldrb	r2, [r7, #3]
 8009fa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009faa:	bf00      	nop
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08e      	sub	sp, #56	; 0x38
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10a      	bne.n	8009fe6 <xQueueGenericSend+0x32>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d103      	bne.n	8009ff4 <xQueueGenericSend+0x40>
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d101      	bne.n	8009ff8 <xQueueGenericSend+0x44>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e000      	b.n	8009ffa <xQueueGenericSend+0x46>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10a      	bne.n	800a014 <xQueueGenericSend+0x60>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a010:	bf00      	nop
 800a012:	e7fe      	b.n	800a012 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	2b02      	cmp	r3, #2
 800a018:	d103      	bne.n	800a022 <xQueueGenericSend+0x6e>
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d101      	bne.n	800a026 <xQueueGenericSend+0x72>
 800a022:	2301      	movs	r3, #1
 800a024:	e000      	b.n	800a028 <xQueueGenericSend+0x74>
 800a026:	2300      	movs	r3, #0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <xQueueGenericSend+0x8e>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	623b      	str	r3, [r7, #32]
}
 800a03e:	bf00      	nop
 800a040:	e7fe      	b.n	800a040 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a042:	f001 fa3d 	bl	800b4c0 <xTaskGetSchedulerState>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d102      	bne.n	800a052 <xQueueGenericSend+0x9e>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <xQueueGenericSend+0xa2>
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <xQueueGenericSend+0xa4>
 800a056:	2300      	movs	r3, #0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <xQueueGenericSend+0xbe>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	61fb      	str	r3, [r7, #28]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a072:	f7ff fd3f 	bl	8009af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07e:	429a      	cmp	r2, r3
 800a080:	d302      	bcc.n	800a088 <xQueueGenericSend+0xd4>
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d129      	bne.n	800a0dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	68b9      	ldr	r1, [r7, #8]
 800a08c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a08e:	f000 fa8b 	bl	800a5a8 <prvCopyDataToQueue>
 800a092:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d010      	beq.n	800a0be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	3324      	adds	r3, #36	; 0x24
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 f84f 	bl	800b144 <xTaskRemoveFromEventList>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d013      	beq.n	800a0d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0ac:	4b3f      	ldr	r3, [pc, #252]	; (800a1ac <xQueueGenericSend+0x1f8>)
 800a0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	e00a      	b.n	800a0d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d007      	beq.n	800a0d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0c4:	4b39      	ldr	r3, [pc, #228]	; (800a1ac <xQueueGenericSend+0x1f8>)
 800a0c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0d4:	f7ff fd3e 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e063      	b.n	800a1a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d103      	bne.n	800a0ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0e2:	f7ff fd37 	bl	8009b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e05c      	b.n	800a1a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d106      	bne.n	800a0fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0f0:	f107 0314 	add.w	r3, r7, #20
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f001 f889 	bl	800b20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0fe:	f7ff fd29 	bl	8009b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a102:	f000 fdfb 	bl	800acfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a106:	f7ff fcf5 	bl	8009af4 <vPortEnterCritical>
 800a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a110:	b25b      	sxtb	r3, r3
 800a112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a116:	d103      	bne.n	800a120 <xQueueGenericSend+0x16c>
 800a118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a126:	b25b      	sxtb	r3, r3
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d103      	bne.n	800a136 <xQueueGenericSend+0x182>
 800a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a136:	f7ff fd0d 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a13a:	1d3a      	adds	r2, r7, #4
 800a13c:	f107 0314 	add.w	r3, r7, #20
 800a140:	4611      	mov	r1, r2
 800a142:	4618      	mov	r0, r3
 800a144:	f001 f878 	bl	800b238 <xTaskCheckForTimeOut>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d124      	bne.n	800a198 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a14e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a150:	f000 fb22 	bl	800a798 <prvIsQueueFull>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d018      	beq.n	800a18c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	3310      	adds	r3, #16
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	4611      	mov	r1, r2
 800a162:	4618      	mov	r0, r3
 800a164:	f000 ff9e 	bl	800b0a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a16a:	f000 faad 	bl	800a6c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a16e:	f000 fdd3 	bl	800ad18 <xTaskResumeAll>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	f47f af7c 	bne.w	800a072 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a17a:	4b0c      	ldr	r3, [pc, #48]	; (800a1ac <xQueueGenericSend+0x1f8>)
 800a17c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	e772      	b.n	800a072 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a18c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a18e:	f000 fa9b 	bl	800a6c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a192:	f000 fdc1 	bl	800ad18 <xTaskResumeAll>
 800a196:	e76c      	b.n	800a072 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a19a:	f000 fa95 	bl	800a6c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a19e:	f000 fdbb 	bl	800ad18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3738      	adds	r7, #56	; 0x38
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	e000ed04 	.word	0xe000ed04

0800a1b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b090      	sub	sp, #64	; 0x40
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10a      	bne.n	800a1de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1da:	bf00      	nop
 800a1dc:	e7fe      	b.n	800a1dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d103      	bne.n	800a1ec <xQueueGenericSendFromISR+0x3c>
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <xQueueGenericSendFromISR+0x40>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e000      	b.n	800a1f2 <xQueueGenericSendFromISR+0x42>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10a      	bne.n	800a20c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a208:	bf00      	nop
 800a20a:	e7fe      	b.n	800a20a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d103      	bne.n	800a21a <xQueueGenericSendFromISR+0x6a>
 800a212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a216:	2b01      	cmp	r3, #1
 800a218:	d101      	bne.n	800a21e <xQueueGenericSendFromISR+0x6e>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e000      	b.n	800a220 <xQueueGenericSendFromISR+0x70>
 800a21e:	2300      	movs	r3, #0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	623b      	str	r3, [r7, #32]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a23a:	f7ff fd3d 	bl	8009cb8 <vPortValidateInterruptPriority>
	__asm volatile
 800a23e:	f3ef 8211 	mrs	r2, BASEPRI
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	61fa      	str	r2, [r7, #28]
 800a254:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a256:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a258:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a262:	429a      	cmp	r2, r3
 800a264:	d302      	bcc.n	800a26c <xQueueGenericSendFromISR+0xbc>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d12f      	bne.n	800a2cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	68b9      	ldr	r1, [r7, #8]
 800a280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a282:	f000 f991 	bl	800a5a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a286:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28e:	d112      	bne.n	800a2b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	2b00      	cmp	r3, #0
 800a296:	d016      	beq.n	800a2c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	3324      	adds	r3, #36	; 0x24
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 ff51 	bl	800b144 <xTaskRemoveFromEventList>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00e      	beq.n	800a2c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00b      	beq.n	800a2c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	e007      	b.n	800a2c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	b25a      	sxtb	r2, r3
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a2ca:	e001      	b.n	800a2d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d2:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f383 8811 	msr	BASEPRI, r3
}
 800a2da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3740      	adds	r7, #64	; 0x40
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b08c      	sub	sp, #48	; 0x30
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10a      	bne.n	800a318 <xQueueReceive+0x30>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	623b      	str	r3, [r7, #32]
}
 800a314:	bf00      	nop
 800a316:	e7fe      	b.n	800a316 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d103      	bne.n	800a326 <xQueueReceive+0x3e>
 800a31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <xQueueReceive+0x42>
 800a326:	2301      	movs	r3, #1
 800a328:	e000      	b.n	800a32c <xQueueReceive+0x44>
 800a32a:	2300      	movs	r3, #0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10a      	bne.n	800a346 <xQueueReceive+0x5e>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	61fb      	str	r3, [r7, #28]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a346:	f001 f8bb 	bl	800b4c0 <xTaskGetSchedulerState>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d102      	bne.n	800a356 <xQueueReceive+0x6e>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <xQueueReceive+0x72>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <xQueueReceive+0x74>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <xQueueReceive+0x8e>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	61bb      	str	r3, [r7, #24]
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a376:	f7ff fbbd 	bl	8009af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	2b00      	cmp	r3, #0
 800a384:	d01f      	beq.n	800a3c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a386:	68b9      	ldr	r1, [r7, #8]
 800a388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a38a:	f000 f977 	bl	800a67c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	1e5a      	subs	r2, r3, #1
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00f      	beq.n	800a3be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	3310      	adds	r3, #16
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 fece 	bl	800b144 <xTaskRemoveFromEventList>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d007      	beq.n	800a3be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3ae:	4b3d      	ldr	r3, [pc, #244]	; (800a4a4 <xQueueReceive+0x1bc>)
 800a3b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3be:	f7ff fbc9 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e069      	b.n	800a49a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d103      	bne.n	800a3d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3cc:	f7ff fbc2 	bl	8009b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	e062      	b.n	800a49a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d106      	bne.n	800a3e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3da:	f107 0310 	add.w	r3, r7, #16
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 ff14 	bl	800b20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3e8:	f7ff fbb4 	bl	8009b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3ec:	f000 fc86 	bl	800acfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3f0:	f7ff fb80 	bl	8009af4 <vPortEnterCritical>
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3fa:	b25b      	sxtb	r3, r3
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d103      	bne.n	800a40a <xQueueReceive+0x122>
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a410:	b25b      	sxtb	r3, r3
 800a412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a416:	d103      	bne.n	800a420 <xQueueReceive+0x138>
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a420:	f7ff fb98 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a424:	1d3a      	adds	r2, r7, #4
 800a426:	f107 0310 	add.w	r3, r7, #16
 800a42a:	4611      	mov	r1, r2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 ff03 	bl	800b238 <xTaskCheckForTimeOut>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d123      	bne.n	800a480 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a43a:	f000 f997 	bl	800a76c <prvIsQueueEmpty>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d017      	beq.n	800a474 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	3324      	adds	r3, #36	; 0x24
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	4611      	mov	r1, r2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fe29 	bl	800b0a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a454:	f000 f938 	bl	800a6c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a458:	f000 fc5e 	bl	800ad18 <xTaskResumeAll>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d189      	bne.n	800a376 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a462:	4b10      	ldr	r3, [pc, #64]	; (800a4a4 <xQueueReceive+0x1bc>)
 800a464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	e780      	b.n	800a376 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a476:	f000 f927 	bl	800a6c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a47a:	f000 fc4d 	bl	800ad18 <xTaskResumeAll>
 800a47e:	e77a      	b.n	800a376 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a482:	f000 f921 	bl	800a6c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a486:	f000 fc47 	bl	800ad18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a48a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a48c:	f000 f96e 	bl	800a76c <prvIsQueueEmpty>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	f43f af6f 	beq.w	800a376 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a498:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3730      	adds	r7, #48	; 0x30
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	e000ed04 	.word	0xe000ed04

0800a4a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b08e      	sub	sp, #56	; 0x38
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10a      	bne.n	800a4d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	623b      	str	r3, [r7, #32]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d103      	bne.n	800a4e2 <xQueueReceiveFromISR+0x3a>
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <xQueueReceiveFromISR+0x3e>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e000      	b.n	800a4e8 <xQueueReceiveFromISR+0x40>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10a      	bne.n	800a502 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	61fb      	str	r3, [r7, #28]
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a502:	f7ff fbd9 	bl	8009cb8 <vPortValidateInterruptPriority>
	__asm volatile
 800a506:	f3ef 8211 	mrs	r2, BASEPRI
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	61ba      	str	r2, [r7, #24]
 800a51c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a51e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a520:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a526:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d02f      	beq.n	800a58e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a538:	68b9      	ldr	r1, [r7, #8]
 800a53a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a53c:	f000 f89e 	bl	800a67c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	1e5a      	subs	r2, r3, #1
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a548:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a550:	d112      	bne.n	800a578 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d016      	beq.n	800a588 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	3310      	adds	r3, #16
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fdf0 	bl	800b144 <xTaskRemoveFromEventList>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00e      	beq.n	800a588 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00b      	beq.n	800a588 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	e007      	b.n	800a588 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a57c:	3301      	adds	r3, #1
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	b25a      	sxtb	r2, r3
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a588:	2301      	movs	r3, #1
 800a58a:	637b      	str	r3, [r7, #52]	; 0x34
 800a58c:	e001      	b.n	800a592 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a58e:	2300      	movs	r3, #0
 800a590:	637b      	str	r3, [r7, #52]	; 0x34
 800a592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a594:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f383 8811 	msr	BASEPRI, r3
}
 800a59c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3738      	adds	r7, #56	; 0x38
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10d      	bne.n	800a5e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d14d      	bne.n	800a66a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 ff92 	bl	800b4fc <xTaskPriorityDisinherit>
 800a5d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	609a      	str	r2, [r3, #8]
 800a5e0:	e043      	b.n	800a66a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d119      	bne.n	800a61c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6858      	ldr	r0, [r3, #4]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	68b9      	ldr	r1, [r7, #8]
 800a5f4:	f004 fa84 	bl	800eb00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a600:	441a      	add	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d32b      	bcc.n	800a66a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	605a      	str	r2, [r3, #4]
 800a61a:	e026      	b.n	800a66a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	68d8      	ldr	r0, [r3, #12]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a624:	461a      	mov	r2, r3
 800a626:	68b9      	ldr	r1, [r7, #8]
 800a628:	f004 fa6a 	bl	800eb00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	68da      	ldr	r2, [r3, #12]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a634:	425b      	negs	r3, r3
 800a636:	441a      	add	r2, r3
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	68da      	ldr	r2, [r3, #12]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	429a      	cmp	r2, r3
 800a646:	d207      	bcs.n	800a658 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	689a      	ldr	r2, [r3, #8]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a650:	425b      	negs	r3, r3
 800a652:	441a      	add	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d105      	bne.n	800a66a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	3b01      	subs	r3, #1
 800a668:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	1c5a      	adds	r2, r3, #1
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a672:	697b      	ldr	r3, [r7, #20]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3718      	adds	r7, #24
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d018      	beq.n	800a6c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68da      	ldr	r2, [r3, #12]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a696:	441a      	add	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68da      	ldr	r2, [r3, #12]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d303      	bcc.n	800a6b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68d9      	ldr	r1, [r3, #12]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	6838      	ldr	r0, [r7, #0]
 800a6bc:	f004 fa20 	bl	800eb00 <memcpy>
	}
}
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a6d0:	f7ff fa10 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6dc:	e011      	b.n	800a702 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d012      	beq.n	800a70c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	3324      	adds	r3, #36	; 0x24
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 fd2a 	bl	800b144 <xTaskRemoveFromEventList>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6f6:	f000 fe01 	bl	800b2fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a706:	2b00      	cmp	r3, #0
 800a708:	dce9      	bgt.n	800a6de <prvUnlockQueue+0x16>
 800a70a:	e000      	b.n	800a70e <prvUnlockQueue+0x46>
					break;
 800a70c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	22ff      	movs	r2, #255	; 0xff
 800a712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a716:	f7ff fa1d 	bl	8009b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a71a:	f7ff f9eb 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a724:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a726:	e011      	b.n	800a74c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d012      	beq.n	800a756 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3310      	adds	r3, #16
 800a734:	4618      	mov	r0, r3
 800a736:	f000 fd05 	bl	800b144 <xTaskRemoveFromEventList>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a740:	f000 fddc 	bl	800b2fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a744:	7bbb      	ldrb	r3, [r7, #14]
 800a746:	3b01      	subs	r3, #1
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a74c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a750:	2b00      	cmp	r3, #0
 800a752:	dce9      	bgt.n	800a728 <prvUnlockQueue+0x60>
 800a754:	e000      	b.n	800a758 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a756:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	22ff      	movs	r2, #255	; 0xff
 800a75c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a760:	f7ff f9f8 	bl	8009b54 <vPortExitCritical>
}
 800a764:	bf00      	nop
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a774:	f7ff f9be 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d102      	bne.n	800a786 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a780:	2301      	movs	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	e001      	b.n	800a78a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a78a:	f7ff f9e3 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 800a78e:	68fb      	ldr	r3, [r7, #12]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7a0:	f7ff f9a8 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d102      	bne.n	800a7b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	e001      	b.n	800a7ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7ba:	f7ff f9cb 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 800a7be:	68fb      	ldr	r3, [r7, #12]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	e014      	b.n	800a802 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7d8:	4a0f      	ldr	r2, [pc, #60]	; (800a818 <vQueueAddToRegistry+0x50>)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10b      	bne.n	800a7fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a7e4:	490c      	ldr	r1, [pc, #48]	; (800a818 <vQueueAddToRegistry+0x50>)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7ee:	4a0a      	ldr	r2, [pc, #40]	; (800a818 <vQueueAddToRegistry+0x50>)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	4413      	add	r3, r2
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7fa:	e006      	b.n	800a80a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	3301      	adds	r3, #1
 800a800:	60fb      	str	r3, [r7, #12]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2b07      	cmp	r3, #7
 800a806:	d9e7      	bls.n	800a7d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a808:	bf00      	nop
 800a80a:	bf00      	nop
 800a80c:	3714      	adds	r7, #20
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	200058a4 	.word	0x200058a4

0800a81c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a82c:	f7ff f962 	bl	8009af4 <vPortEnterCritical>
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a836:	b25b      	sxtb	r3, r3
 800a838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83c:	d103      	bne.n	800a846 <vQueueWaitForMessageRestricted+0x2a>
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	2200      	movs	r2, #0
 800a842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a84c:	b25b      	sxtb	r3, r3
 800a84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a852:	d103      	bne.n	800a85c <vQueueWaitForMessageRestricted+0x40>
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a85c:	f7ff f97a 	bl	8009b54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a864:	2b00      	cmp	r3, #0
 800a866:	d106      	bne.n	800a876 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	3324      	adds	r3, #36	; 0x24
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	68b9      	ldr	r1, [r7, #8]
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fc3b 	bl	800b0ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a876:	6978      	ldr	r0, [r7, #20]
 800a878:	f7ff ff26 	bl	800a6c8 <prvUnlockQueue>
	}
 800a87c:	bf00      	nop
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08e      	sub	sp, #56	; 0x38
 800a888:	af04      	add	r7, sp, #16
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
 800a890:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	623b      	str	r3, [r7, #32]
}
 800a8aa:	bf00      	nop
 800a8ac:	e7fe      	b.n	800a8ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10a      	bne.n	800a8ca <xTaskCreateStatic+0x46>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	61fb      	str	r3, [r7, #28]
}
 800a8c6:	bf00      	nop
 800a8c8:	e7fe      	b.n	800a8c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8ca:	235c      	movs	r3, #92	; 0x5c
 800a8cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	2b5c      	cmp	r3, #92	; 0x5c
 800a8d2:	d00a      	beq.n	800a8ea <xTaskCreateStatic+0x66>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	61bb      	str	r3, [r7, #24]
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a8ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d01e      	beq.n	800a930 <xTaskCreateStatic+0xac>
 800a8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d01b      	beq.n	800a930 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a900:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	2202      	movs	r2, #2
 800a906:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a90a:	2300      	movs	r3, #0
 800a90c:	9303      	str	r3, [sp, #12]
 800a90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a910:	9302      	str	r3, [sp, #8]
 800a912:	f107 0314 	add.w	r3, r7, #20
 800a916:	9301      	str	r3, [sp, #4]
 800a918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	68b9      	ldr	r1, [r7, #8]
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f000 f850 	bl	800a9c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a92a:	f000 f8dd 	bl	800aae8 <prvAddNewTaskToReadyList>
 800a92e:	e001      	b.n	800a934 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a930:	2300      	movs	r3, #0
 800a932:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a934:	697b      	ldr	r3, [r7, #20]
	}
 800a936:	4618      	mov	r0, r3
 800a938:	3728      	adds	r7, #40	; 0x28
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b08c      	sub	sp, #48	; 0x30
 800a942:	af04      	add	r7, sp, #16
 800a944:	60f8      	str	r0, [r7, #12]
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	603b      	str	r3, [r7, #0]
 800a94a:	4613      	mov	r3, r2
 800a94c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4618      	mov	r0, r3
 800a954:	f7fe fd00 	bl	8009358 <pvPortMalloc>
 800a958:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00e      	beq.n	800a97e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a960:	205c      	movs	r0, #92	; 0x5c
 800a962:	f7fe fcf9 	bl	8009358 <pvPortMalloc>
 800a966:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	631a      	str	r2, [r3, #48]	; 0x30
 800a974:	e005      	b.n	800a982 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a976:	6978      	ldr	r0, [r7, #20]
 800a978:	f7fe fdba 	bl	80094f0 <vPortFree>
 800a97c:	e001      	b.n	800a982 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d017      	beq.n	800a9b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a990:	88fa      	ldrh	r2, [r7, #6]
 800a992:	2300      	movs	r3, #0
 800a994:	9303      	str	r3, [sp, #12]
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	9302      	str	r3, [sp, #8]
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	9301      	str	r3, [sp, #4]
 800a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68b9      	ldr	r1, [r7, #8]
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 f80e 	bl	800a9c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9ac:	69f8      	ldr	r0, [r7, #28]
 800a9ae:	f000 f89b 	bl	800aae8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	61bb      	str	r3, [r7, #24]
 800a9b6:	e002      	b.n	800a9be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9be:	69bb      	ldr	r3, [r7, #24]
	}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3720      	adds	r7, #32
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	461a      	mov	r2, r3
 800a9e0:	21a5      	movs	r1, #165	; 0xa5
 800a9e2:	f004 f849 	bl	800ea78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	f023 0307 	bic.w	r3, r3, #7
 800a9fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	f003 0307 	and.w	r3, r3, #7
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00a      	beq.n	800aa20 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	617b      	str	r3, [r7, #20]
}
 800aa1c:	bf00      	nop
 800aa1e:	e7fe      	b.n	800aa1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d01f      	beq.n	800aa66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa26:	2300      	movs	r3, #0
 800aa28:	61fb      	str	r3, [r7, #28]
 800aa2a:	e012      	b.n	800aa52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	4413      	add	r3, r2
 800aa32:	7819      	ldrb	r1, [r3, #0]
 800aa34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	4413      	add	r3, r2
 800aa3a:	3334      	adds	r3, #52	; 0x34
 800aa3c:	460a      	mov	r2, r1
 800aa3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	4413      	add	r3, r2
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d006      	beq.n	800aa5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	61fb      	str	r3, [r7, #28]
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	2b0f      	cmp	r3, #15
 800aa56:	d9e9      	bls.n	800aa2c <prvInitialiseNewTask+0x64>
 800aa58:	e000      	b.n	800aa5c <prvInitialiseNewTask+0x94>
			{
				break;
 800aa5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa64:	e003      	b.n	800aa6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa70:	2b37      	cmp	r3, #55	; 0x37
 800aa72:	d901      	bls.n	800aa78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa74:	2337      	movs	r3, #55	; 0x37
 800aa76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa86:	2200      	movs	r2, #0
 800aa88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe fe6c 	bl	800976c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	3318      	adds	r3, #24
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe fe67 	bl	800976c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aab2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	2200      	movs	r2, #0
 800aab8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	68f9      	ldr	r1, [r7, #12]
 800aac6:	69b8      	ldr	r0, [r7, #24]
 800aac8:	f7fe fee4 	bl	8009894 <pxPortInitialiseStack>
 800aacc:	4602      	mov	r2, r0
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aadc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aade:	bf00      	nop
 800aae0:	3720      	adds	r7, #32
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aaf0:	f7ff f800 	bl	8009af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aaf4:	4b2d      	ldr	r3, [pc, #180]	; (800abac <prvAddNewTaskToReadyList+0xc4>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	4a2c      	ldr	r2, [pc, #176]	; (800abac <prvAddNewTaskToReadyList+0xc4>)
 800aafc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aafe:	4b2c      	ldr	r3, [pc, #176]	; (800abb0 <prvAddNewTaskToReadyList+0xc8>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d109      	bne.n	800ab1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab06:	4a2a      	ldr	r2, [pc, #168]	; (800abb0 <prvAddNewTaskToReadyList+0xc8>)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab0c:	4b27      	ldr	r3, [pc, #156]	; (800abac <prvAddNewTaskToReadyList+0xc4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d110      	bne.n	800ab36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab14:	f000 fc16 	bl	800b344 <prvInitialiseTaskLists>
 800ab18:	e00d      	b.n	800ab36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab1a:	4b26      	ldr	r3, [pc, #152]	; (800abb4 <prvAddNewTaskToReadyList+0xcc>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d109      	bne.n	800ab36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab22:	4b23      	ldr	r3, [pc, #140]	; (800abb0 <prvAddNewTaskToReadyList+0xc8>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d802      	bhi.n	800ab36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab30:	4a1f      	ldr	r2, [pc, #124]	; (800abb0 <prvAddNewTaskToReadyList+0xc8>)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab36:	4b20      	ldr	r3, [pc, #128]	; (800abb8 <prvAddNewTaskToReadyList+0xd0>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	4a1e      	ldr	r2, [pc, #120]	; (800abb8 <prvAddNewTaskToReadyList+0xd0>)
 800ab3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab40:	4b1d      	ldr	r3, [pc, #116]	; (800abb8 <prvAddNewTaskToReadyList+0xd0>)
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4c:	4b1b      	ldr	r3, [pc, #108]	; (800abbc <prvAddNewTaskToReadyList+0xd4>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d903      	bls.n	800ab5c <prvAddNewTaskToReadyList+0x74>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab58:	4a18      	ldr	r2, [pc, #96]	; (800abbc <prvAddNewTaskToReadyList+0xd4>)
 800ab5a:	6013      	str	r3, [r2, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab60:	4613      	mov	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4a15      	ldr	r2, [pc, #84]	; (800abc0 <prvAddNewTaskToReadyList+0xd8>)
 800ab6a:	441a      	add	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	4619      	mov	r1, r3
 800ab72:	4610      	mov	r0, r2
 800ab74:	f7fe fe07 	bl	8009786 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab78:	f7fe ffec 	bl	8009b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab7c:	4b0d      	ldr	r3, [pc, #52]	; (800abb4 <prvAddNewTaskToReadyList+0xcc>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00e      	beq.n	800aba2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab84:	4b0a      	ldr	r3, [pc, #40]	; (800abb0 <prvAddNewTaskToReadyList+0xc8>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d207      	bcs.n	800aba2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab92:	4b0c      	ldr	r3, [pc, #48]	; (800abc4 <prvAddNewTaskToReadyList+0xdc>)
 800ab94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab98:	601a      	str	r2, [r3, #0]
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aba2:	bf00      	nop
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	20005db8 	.word	0x20005db8
 800abb0:	200058e4 	.word	0x200058e4
 800abb4:	20005dc4 	.word	0x20005dc4
 800abb8:	20005dd4 	.word	0x20005dd4
 800abbc:	20005dc0 	.word	0x20005dc0
 800abc0:	200058e8 	.word	0x200058e8
 800abc4:	e000ed04 	.word	0xe000ed04

0800abc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800abd0:	2300      	movs	r3, #0
 800abd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d017      	beq.n	800ac0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800abda:	4b13      	ldr	r3, [pc, #76]	; (800ac28 <vTaskDelay+0x60>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00a      	beq.n	800abf8 <vTaskDelay+0x30>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	60bb      	str	r3, [r7, #8]
}
 800abf4:	bf00      	nop
 800abf6:	e7fe      	b.n	800abf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800abf8:	f000 f880 	bl	800acfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800abfc:	2100      	movs	r1, #0
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fcea 	bl	800b5d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac04:	f000 f888 	bl	800ad18 <xTaskResumeAll>
 800ac08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d107      	bne.n	800ac20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac10:	4b06      	ldr	r3, [pc, #24]	; (800ac2c <vTaskDelay+0x64>)
 800ac12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac20:	bf00      	nop
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	20005de0 	.word	0x20005de0
 800ac2c:	e000ed04 	.word	0xe000ed04

0800ac30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08a      	sub	sp, #40	; 0x28
 800ac34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac36:	2300      	movs	r3, #0
 800ac38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac3e:	463a      	mov	r2, r7
 800ac40:	1d39      	adds	r1, r7, #4
 800ac42:	f107 0308 	add.w	r3, r7, #8
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fe fb52 	bl	80092f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	9202      	str	r2, [sp, #8]
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	2300      	movs	r3, #0
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	460a      	mov	r2, r1
 800ac5e:	4921      	ldr	r1, [pc, #132]	; (800ace4 <vTaskStartScheduler+0xb4>)
 800ac60:	4821      	ldr	r0, [pc, #132]	; (800ace8 <vTaskStartScheduler+0xb8>)
 800ac62:	f7ff fe0f 	bl	800a884 <xTaskCreateStatic>
 800ac66:	4603      	mov	r3, r0
 800ac68:	4a20      	ldr	r2, [pc, #128]	; (800acec <vTaskStartScheduler+0xbc>)
 800ac6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac6c:	4b1f      	ldr	r3, [pc, #124]	; (800acec <vTaskStartScheduler+0xbc>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac74:	2301      	movs	r3, #1
 800ac76:	617b      	str	r3, [r7, #20]
 800ac78:	e001      	b.n	800ac7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d102      	bne.n	800ac8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac84:	f000 fcfc 	bl	800b680 <xTimerCreateTimerTask>
 800ac88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d116      	bne.n	800acbe <vTaskStartScheduler+0x8e>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	613b      	str	r3, [r7, #16]
}
 800aca2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aca4:	4b12      	ldr	r3, [pc, #72]	; (800acf0 <vTaskStartScheduler+0xc0>)
 800aca6:	f04f 32ff 	mov.w	r2, #4294967295
 800acaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acac:	4b11      	ldr	r3, [pc, #68]	; (800acf4 <vTaskStartScheduler+0xc4>)
 800acae:	2201      	movs	r2, #1
 800acb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800acb2:	4b11      	ldr	r3, [pc, #68]	; (800acf8 <vTaskStartScheduler+0xc8>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800acb8:	f7fe fe7a 	bl	80099b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800acbc:	e00e      	b.n	800acdc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc4:	d10a      	bne.n	800acdc <vTaskStartScheduler+0xac>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	60fb      	str	r3, [r7, #12]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <vTaskStartScheduler+0xaa>
}
 800acdc:	bf00      	nop
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	0800ebe8 	.word	0x0800ebe8
 800ace8:	0800b315 	.word	0x0800b315
 800acec:	20005ddc 	.word	0x20005ddc
 800acf0:	20005dd8 	.word	0x20005dd8
 800acf4:	20005dc4 	.word	0x20005dc4
 800acf8:	20005dbc 	.word	0x20005dbc

0800acfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acfc:	b480      	push	{r7}
 800acfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad00:	4b04      	ldr	r3, [pc, #16]	; (800ad14 <vTaskSuspendAll+0x18>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3301      	adds	r3, #1
 800ad06:	4a03      	ldr	r2, [pc, #12]	; (800ad14 <vTaskSuspendAll+0x18>)
 800ad08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad0a:	bf00      	nop
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	20005de0 	.word	0x20005de0

0800ad18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad22:	2300      	movs	r3, #0
 800ad24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad26:	4b42      	ldr	r3, [pc, #264]	; (800ae30 <xTaskResumeAll+0x118>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10a      	bne.n	800ad44 <xTaskResumeAll+0x2c>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	603b      	str	r3, [r7, #0]
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad44:	f7fe fed6 	bl	8009af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad48:	4b39      	ldr	r3, [pc, #228]	; (800ae30 <xTaskResumeAll+0x118>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	4a38      	ldr	r2, [pc, #224]	; (800ae30 <xTaskResumeAll+0x118>)
 800ad50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad52:	4b37      	ldr	r3, [pc, #220]	; (800ae30 <xTaskResumeAll+0x118>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d162      	bne.n	800ae20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad5a:	4b36      	ldr	r3, [pc, #216]	; (800ae34 <xTaskResumeAll+0x11c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d05e      	beq.n	800ae20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad62:	e02f      	b.n	800adc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad64:	4b34      	ldr	r3, [pc, #208]	; (800ae38 <xTaskResumeAll+0x120>)
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3318      	adds	r3, #24
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fe fd65 	bl	8009840 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	3304      	adds	r3, #4
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe fd60 	bl	8009840 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad84:	4b2d      	ldr	r3, [pc, #180]	; (800ae3c <xTaskResumeAll+0x124>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d903      	bls.n	800ad94 <xTaskResumeAll+0x7c>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad90:	4a2a      	ldr	r2, [pc, #168]	; (800ae3c <xTaskResumeAll+0x124>)
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad98:	4613      	mov	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4a27      	ldr	r2, [pc, #156]	; (800ae40 <xTaskResumeAll+0x128>)
 800ada2:	441a      	add	r2, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	3304      	adds	r3, #4
 800ada8:	4619      	mov	r1, r3
 800adaa:	4610      	mov	r0, r2
 800adac:	f7fe fceb 	bl	8009786 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb4:	4b23      	ldr	r3, [pc, #140]	; (800ae44 <xTaskResumeAll+0x12c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adba:	429a      	cmp	r2, r3
 800adbc:	d302      	bcc.n	800adc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800adbe:	4b22      	ldr	r3, [pc, #136]	; (800ae48 <xTaskResumeAll+0x130>)
 800adc0:	2201      	movs	r2, #1
 800adc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adc4:	4b1c      	ldr	r3, [pc, #112]	; (800ae38 <xTaskResumeAll+0x120>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1cb      	bne.n	800ad64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800add2:	f000 fb55 	bl	800b480 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800add6:	4b1d      	ldr	r3, [pc, #116]	; (800ae4c <xTaskResumeAll+0x134>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d010      	beq.n	800ae04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ade2:	f000 f847 	bl	800ae74 <xTaskIncrementTick>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d002      	beq.n	800adf2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800adec:	4b16      	ldr	r3, [pc, #88]	; (800ae48 <xTaskResumeAll+0x130>)
 800adee:	2201      	movs	r2, #1
 800adf0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	3b01      	subs	r3, #1
 800adf6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1f1      	bne.n	800ade2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800adfe:	4b13      	ldr	r3, [pc, #76]	; (800ae4c <xTaskResumeAll+0x134>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae04:	4b10      	ldr	r3, [pc, #64]	; (800ae48 <xTaskResumeAll+0x130>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d009      	beq.n	800ae20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae10:	4b0f      	ldr	r3, [pc, #60]	; (800ae50 <xTaskResumeAll+0x138>)
 800ae12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae16:	601a      	str	r2, [r3, #0]
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae20:	f7fe fe98 	bl	8009b54 <vPortExitCritical>

	return xAlreadyYielded;
 800ae24:	68bb      	ldr	r3, [r7, #8]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	20005de0 	.word	0x20005de0
 800ae34:	20005db8 	.word	0x20005db8
 800ae38:	20005d78 	.word	0x20005d78
 800ae3c:	20005dc0 	.word	0x20005dc0
 800ae40:	200058e8 	.word	0x200058e8
 800ae44:	200058e4 	.word	0x200058e4
 800ae48:	20005dcc 	.word	0x20005dcc
 800ae4c:	20005dc8 	.word	0x20005dc8
 800ae50:	e000ed04 	.word	0xe000ed04

0800ae54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae5a:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <xTaskGetTickCount+0x1c>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae60:	687b      	ldr	r3, [r7, #4]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	20005dbc 	.word	0x20005dbc

0800ae74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae7e:	4b4f      	ldr	r3, [pc, #316]	; (800afbc <xTaskIncrementTick+0x148>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f040 808f 	bne.w	800afa6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae88:	4b4d      	ldr	r3, [pc, #308]	; (800afc0 <xTaskIncrementTick+0x14c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae90:	4a4b      	ldr	r2, [pc, #300]	; (800afc0 <xTaskIncrementTick+0x14c>)
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d120      	bne.n	800aede <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae9c:	4b49      	ldr	r3, [pc, #292]	; (800afc4 <xTaskIncrementTick+0x150>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <xTaskIncrementTick+0x48>
	__asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeaa:	f383 8811 	msr	BASEPRI, r3
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	603b      	str	r3, [r7, #0]
}
 800aeb8:	bf00      	nop
 800aeba:	e7fe      	b.n	800aeba <xTaskIncrementTick+0x46>
 800aebc:	4b41      	ldr	r3, [pc, #260]	; (800afc4 <xTaskIncrementTick+0x150>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	60fb      	str	r3, [r7, #12]
 800aec2:	4b41      	ldr	r3, [pc, #260]	; (800afc8 <xTaskIncrementTick+0x154>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a3f      	ldr	r2, [pc, #252]	; (800afc4 <xTaskIncrementTick+0x150>)
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	4a3f      	ldr	r2, [pc, #252]	; (800afc8 <xTaskIncrementTick+0x154>)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	4b3e      	ldr	r3, [pc, #248]	; (800afcc <xTaskIncrementTick+0x158>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3301      	adds	r3, #1
 800aed6:	4a3d      	ldr	r2, [pc, #244]	; (800afcc <xTaskIncrementTick+0x158>)
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	f000 fad1 	bl	800b480 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aede:	4b3c      	ldr	r3, [pc, #240]	; (800afd0 <xTaskIncrementTick+0x15c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	693a      	ldr	r2, [r7, #16]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d349      	bcc.n	800af7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aee8:	4b36      	ldr	r3, [pc, #216]	; (800afc4 <xTaskIncrementTick+0x150>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d104      	bne.n	800aefc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aef2:	4b37      	ldr	r3, [pc, #220]	; (800afd0 <xTaskIncrementTick+0x15c>)
 800aef4:	f04f 32ff 	mov.w	r2, #4294967295
 800aef8:	601a      	str	r2, [r3, #0]
					break;
 800aefa:	e03f      	b.n	800af7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aefc:	4b31      	ldr	r3, [pc, #196]	; (800afc4 <xTaskIncrementTick+0x150>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	429a      	cmp	r2, r3
 800af12:	d203      	bcs.n	800af1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af14:	4a2e      	ldr	r2, [pc, #184]	; (800afd0 <xTaskIncrementTick+0x15c>)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af1a:	e02f      	b.n	800af7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	3304      	adds	r3, #4
 800af20:	4618      	mov	r0, r3
 800af22:	f7fe fc8d 	bl	8009840 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d004      	beq.n	800af38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	3318      	adds	r3, #24
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe fc84 	bl	8009840 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3c:	4b25      	ldr	r3, [pc, #148]	; (800afd4 <xTaskIncrementTick+0x160>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	429a      	cmp	r2, r3
 800af42:	d903      	bls.n	800af4c <xTaskIncrementTick+0xd8>
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	4a22      	ldr	r2, [pc, #136]	; (800afd4 <xTaskIncrementTick+0x160>)
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af50:	4613      	mov	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4a1f      	ldr	r2, [pc, #124]	; (800afd8 <xTaskIncrementTick+0x164>)
 800af5a:	441a      	add	r2, r3
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	3304      	adds	r3, #4
 800af60:	4619      	mov	r1, r3
 800af62:	4610      	mov	r0, r2
 800af64:	f7fe fc0f 	bl	8009786 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6c:	4b1b      	ldr	r3, [pc, #108]	; (800afdc <xTaskIncrementTick+0x168>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af72:	429a      	cmp	r2, r3
 800af74:	d3b8      	bcc.n	800aee8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af76:	2301      	movs	r3, #1
 800af78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af7a:	e7b5      	b.n	800aee8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af7c:	4b17      	ldr	r3, [pc, #92]	; (800afdc <xTaskIncrementTick+0x168>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af82:	4915      	ldr	r1, [pc, #84]	; (800afd8 <xTaskIncrementTick+0x164>)
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	440b      	add	r3, r1
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d901      	bls.n	800af98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af94:	2301      	movs	r3, #1
 800af96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af98:	4b11      	ldr	r3, [pc, #68]	; (800afe0 <xTaskIncrementTick+0x16c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d007      	beq.n	800afb0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800afa0:	2301      	movs	r3, #1
 800afa2:	617b      	str	r3, [r7, #20]
 800afa4:	e004      	b.n	800afb0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800afa6:	4b0f      	ldr	r3, [pc, #60]	; (800afe4 <xTaskIncrementTick+0x170>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3301      	adds	r3, #1
 800afac:	4a0d      	ldr	r2, [pc, #52]	; (800afe4 <xTaskIncrementTick+0x170>)
 800afae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800afb0:	697b      	ldr	r3, [r7, #20]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3718      	adds	r7, #24
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	20005de0 	.word	0x20005de0
 800afc0:	20005dbc 	.word	0x20005dbc
 800afc4:	20005d70 	.word	0x20005d70
 800afc8:	20005d74 	.word	0x20005d74
 800afcc:	20005dd0 	.word	0x20005dd0
 800afd0:	20005dd8 	.word	0x20005dd8
 800afd4:	20005dc0 	.word	0x20005dc0
 800afd8:	200058e8 	.word	0x200058e8
 800afdc:	200058e4 	.word	0x200058e4
 800afe0:	20005dcc 	.word	0x20005dcc
 800afe4:	20005dc8 	.word	0x20005dc8

0800afe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afee:	4b28      	ldr	r3, [pc, #160]	; (800b090 <vTaskSwitchContext+0xa8>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aff6:	4b27      	ldr	r3, [pc, #156]	; (800b094 <vTaskSwitchContext+0xac>)
 800aff8:	2201      	movs	r2, #1
 800affa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800affc:	e041      	b.n	800b082 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800affe:	4b25      	ldr	r3, [pc, #148]	; (800b094 <vTaskSwitchContext+0xac>)
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b004:	4b24      	ldr	r3, [pc, #144]	; (800b098 <vTaskSwitchContext+0xb0>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	60fb      	str	r3, [r7, #12]
 800b00a:	e010      	b.n	800b02e <vTaskSwitchContext+0x46>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10a      	bne.n	800b028 <vTaskSwitchContext+0x40>
	__asm volatile
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	607b      	str	r3, [r7, #4]
}
 800b024:	bf00      	nop
 800b026:	e7fe      	b.n	800b026 <vTaskSwitchContext+0x3e>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	3b01      	subs	r3, #1
 800b02c:	60fb      	str	r3, [r7, #12]
 800b02e:	491b      	ldr	r1, [pc, #108]	; (800b09c <vTaskSwitchContext+0xb4>)
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	4613      	mov	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	440b      	add	r3, r1
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0e4      	beq.n	800b00c <vTaskSwitchContext+0x24>
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	4613      	mov	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4a13      	ldr	r2, [pc, #76]	; (800b09c <vTaskSwitchContext+0xb4>)
 800b04e:	4413      	add	r3, r2
 800b050:	60bb      	str	r3, [r7, #8]
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	605a      	str	r2, [r3, #4]
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	685a      	ldr	r2, [r3, #4]
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	3308      	adds	r3, #8
 800b064:	429a      	cmp	r2, r3
 800b066:	d104      	bne.n	800b072 <vTaskSwitchContext+0x8a>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	685a      	ldr	r2, [r3, #4]
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	605a      	str	r2, [r3, #4]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	4a09      	ldr	r2, [pc, #36]	; (800b0a0 <vTaskSwitchContext+0xb8>)
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	4a06      	ldr	r2, [pc, #24]	; (800b098 <vTaskSwitchContext+0xb0>)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6013      	str	r3, [r2, #0]
}
 800b082:	bf00      	nop
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	20005de0 	.word	0x20005de0
 800b094:	20005dcc 	.word	0x20005dcc
 800b098:	20005dc0 	.word	0x20005dc0
 800b09c:	200058e8 	.word	0x200058e8
 800b0a0:	200058e4 	.word	0x200058e4

0800b0a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10a      	bne.n	800b0ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	60fb      	str	r3, [r7, #12]
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0ca:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <vTaskPlaceOnEventList+0x44>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	3318      	adds	r3, #24
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7fe fb7b 	bl	80097ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0d8:	2101      	movs	r1, #1
 800b0da:	6838      	ldr	r0, [r7, #0]
 800b0dc:	f000 fa7c 	bl	800b5d8 <prvAddCurrentTaskToDelayedList>
}
 800b0e0:	bf00      	nop
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	200058e4 	.word	0x200058e4

0800b0ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10a      	bne.n	800b114 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	617b      	str	r3, [r7, #20]
}
 800b110:	bf00      	nop
 800b112:	e7fe      	b.n	800b112 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b114:	4b0a      	ldr	r3, [pc, #40]	; (800b140 <vTaskPlaceOnEventListRestricted+0x54>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3318      	adds	r3, #24
 800b11a:	4619      	mov	r1, r3
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7fe fb32 	bl	8009786 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b128:	f04f 33ff 	mov.w	r3, #4294967295
 800b12c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	68b8      	ldr	r0, [r7, #8]
 800b132:	f000 fa51 	bl	800b5d8 <prvAddCurrentTaskToDelayedList>
	}
 800b136:	bf00      	nop
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	200058e4 	.word	0x200058e4

0800b144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10a      	bne.n	800b170 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	60fb      	str	r3, [r7, #12]
}
 800b16c:	bf00      	nop
 800b16e:	e7fe      	b.n	800b16e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	3318      	adds	r3, #24
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe fb63 	bl	8009840 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b17a:	4b1e      	ldr	r3, [pc, #120]	; (800b1f4 <xTaskRemoveFromEventList+0xb0>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d11d      	bne.n	800b1be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	3304      	adds	r3, #4
 800b186:	4618      	mov	r0, r3
 800b188:	f7fe fb5a 	bl	8009840 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	4b19      	ldr	r3, [pc, #100]	; (800b1f8 <xTaskRemoveFromEventList+0xb4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	429a      	cmp	r2, r3
 800b196:	d903      	bls.n	800b1a0 <xTaskRemoveFromEventList+0x5c>
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19c:	4a16      	ldr	r2, [pc, #88]	; (800b1f8 <xTaskRemoveFromEventList+0xb4>)
 800b19e:	6013      	str	r3, [r2, #0]
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4a13      	ldr	r2, [pc, #76]	; (800b1fc <xTaskRemoveFromEventList+0xb8>)
 800b1ae:	441a      	add	r2, r3
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	4610      	mov	r0, r2
 800b1b8:	f7fe fae5 	bl	8009786 <vListInsertEnd>
 800b1bc:	e005      	b.n	800b1ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	3318      	adds	r3, #24
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	480e      	ldr	r0, [pc, #56]	; (800b200 <xTaskRemoveFromEventList+0xbc>)
 800b1c6:	f7fe fade 	bl	8009786 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ce:	4b0d      	ldr	r3, [pc, #52]	; (800b204 <xTaskRemoveFromEventList+0xc0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d905      	bls.n	800b1e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <xTaskRemoveFromEventList+0xc4>)
 800b1de:	2201      	movs	r2, #1
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	e001      	b.n	800b1e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b1e8:	697b      	ldr	r3, [r7, #20]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20005de0 	.word	0x20005de0
 800b1f8:	20005dc0 	.word	0x20005dc0
 800b1fc:	200058e8 	.word	0x200058e8
 800b200:	20005d78 	.word	0x20005d78
 800b204:	200058e4 	.word	0x200058e4
 800b208:	20005dcc 	.word	0x20005dcc

0800b20c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b214:	4b06      	ldr	r3, [pc, #24]	; (800b230 <vTaskInternalSetTimeOutState+0x24>)
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b21c:	4b05      	ldr	r3, [pc, #20]	; (800b234 <vTaskInternalSetTimeOutState+0x28>)
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	605a      	str	r2, [r3, #4]
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	20005dd0 	.word	0x20005dd0
 800b234:	20005dbc 	.word	0x20005dbc

0800b238 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b088      	sub	sp, #32
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10a      	bne.n	800b25e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	613b      	str	r3, [r7, #16]
}
 800b25a:	bf00      	nop
 800b25c:	e7fe      	b.n	800b25c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10a      	bne.n	800b27a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	60fb      	str	r3, [r7, #12]
}
 800b276:	bf00      	nop
 800b278:	e7fe      	b.n	800b278 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b27a:	f7fe fc3b 	bl	8009af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b27e:	4b1d      	ldr	r3, [pc, #116]	; (800b2f4 <xTaskCheckForTimeOut+0xbc>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b296:	d102      	bne.n	800b29e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b298:	2300      	movs	r3, #0
 800b29a:	61fb      	str	r3, [r7, #28]
 800b29c:	e023      	b.n	800b2e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <xTaskCheckForTimeOut+0xc0>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d007      	beq.n	800b2ba <xTaskCheckForTimeOut+0x82>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	69ba      	ldr	r2, [r7, #24]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d302      	bcc.n	800b2ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	61fb      	str	r3, [r7, #28]
 800b2b8:	e015      	b.n	800b2e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d20b      	bcs.n	800b2dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	1ad2      	subs	r2, r2, r3
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff ff9b 	bl	800b20c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	61fb      	str	r3, [r7, #28]
 800b2da:	e004      	b.n	800b2e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b2e6:	f7fe fc35 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 800b2ea:	69fb      	ldr	r3, [r7, #28]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3720      	adds	r7, #32
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	20005dbc 	.word	0x20005dbc
 800b2f8:	20005dd0 	.word	0x20005dd0

0800b2fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b300:	4b03      	ldr	r3, [pc, #12]	; (800b310 <vTaskMissedYield+0x14>)
 800b302:	2201      	movs	r2, #1
 800b304:	601a      	str	r2, [r3, #0]
}
 800b306:	bf00      	nop
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	20005dcc 	.word	0x20005dcc

0800b314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b31c:	f000 f852 	bl	800b3c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b320:	4b06      	ldr	r3, [pc, #24]	; (800b33c <prvIdleTask+0x28>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d9f9      	bls.n	800b31c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b328:	4b05      	ldr	r3, [pc, #20]	; (800b340 <prvIdleTask+0x2c>)
 800b32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b338:	e7f0      	b.n	800b31c <prvIdleTask+0x8>
 800b33a:	bf00      	nop
 800b33c:	200058e8 	.word	0x200058e8
 800b340:	e000ed04 	.word	0xe000ed04

0800b344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b34a:	2300      	movs	r3, #0
 800b34c:	607b      	str	r3, [r7, #4]
 800b34e:	e00c      	b.n	800b36a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4a12      	ldr	r2, [pc, #72]	; (800b3a4 <prvInitialiseTaskLists+0x60>)
 800b35c:	4413      	add	r3, r2
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe f9e4 	bl	800972c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3301      	adds	r3, #1
 800b368:	607b      	str	r3, [r7, #4]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b37      	cmp	r3, #55	; 0x37
 800b36e:	d9ef      	bls.n	800b350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b370:	480d      	ldr	r0, [pc, #52]	; (800b3a8 <prvInitialiseTaskLists+0x64>)
 800b372:	f7fe f9db 	bl	800972c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b376:	480d      	ldr	r0, [pc, #52]	; (800b3ac <prvInitialiseTaskLists+0x68>)
 800b378:	f7fe f9d8 	bl	800972c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b37c:	480c      	ldr	r0, [pc, #48]	; (800b3b0 <prvInitialiseTaskLists+0x6c>)
 800b37e:	f7fe f9d5 	bl	800972c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b382:	480c      	ldr	r0, [pc, #48]	; (800b3b4 <prvInitialiseTaskLists+0x70>)
 800b384:	f7fe f9d2 	bl	800972c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b388:	480b      	ldr	r0, [pc, #44]	; (800b3b8 <prvInitialiseTaskLists+0x74>)
 800b38a:	f7fe f9cf 	bl	800972c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b38e:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <prvInitialiseTaskLists+0x78>)
 800b390:	4a05      	ldr	r2, [pc, #20]	; (800b3a8 <prvInitialiseTaskLists+0x64>)
 800b392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b394:	4b0a      	ldr	r3, [pc, #40]	; (800b3c0 <prvInitialiseTaskLists+0x7c>)
 800b396:	4a05      	ldr	r2, [pc, #20]	; (800b3ac <prvInitialiseTaskLists+0x68>)
 800b398:	601a      	str	r2, [r3, #0]
}
 800b39a:	bf00      	nop
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	200058e8 	.word	0x200058e8
 800b3a8:	20005d48 	.word	0x20005d48
 800b3ac:	20005d5c 	.word	0x20005d5c
 800b3b0:	20005d78 	.word	0x20005d78
 800b3b4:	20005d8c 	.word	0x20005d8c
 800b3b8:	20005da4 	.word	0x20005da4
 800b3bc:	20005d70 	.word	0x20005d70
 800b3c0:	20005d74 	.word	0x20005d74

0800b3c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3ca:	e019      	b.n	800b400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b3cc:	f7fe fb92 	bl	8009af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3d0:	4b10      	ldr	r3, [pc, #64]	; (800b414 <prvCheckTasksWaitingTermination+0x50>)
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7fe fa2f 	bl	8009840 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b3e2:	4b0d      	ldr	r3, [pc, #52]	; (800b418 <prvCheckTasksWaitingTermination+0x54>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	4a0b      	ldr	r2, [pc, #44]	; (800b418 <prvCheckTasksWaitingTermination+0x54>)
 800b3ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b3ec:	4b0b      	ldr	r3, [pc, #44]	; (800b41c <prvCheckTasksWaitingTermination+0x58>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	4a0a      	ldr	r2, [pc, #40]	; (800b41c <prvCheckTasksWaitingTermination+0x58>)
 800b3f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b3f6:	f7fe fbad 	bl	8009b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f810 	bl	800b420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b400:	4b06      	ldr	r3, [pc, #24]	; (800b41c <prvCheckTasksWaitingTermination+0x58>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e1      	bne.n	800b3cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b408:	bf00      	nop
 800b40a:	bf00      	nop
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20005d8c 	.word	0x20005d8c
 800b418:	20005db8 	.word	0x20005db8
 800b41c:	20005da0 	.word	0x20005da0

0800b420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d108      	bne.n	800b444 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b436:	4618      	mov	r0, r3
 800b438:	f7fe f85a 	bl	80094f0 <vPortFree>
				vPortFree( pxTCB );
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7fe f857 	bl	80094f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b442:	e018      	b.n	800b476 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d103      	bne.n	800b456 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7fe f84e 	bl	80094f0 <vPortFree>
	}
 800b454:	e00f      	b.n	800b476 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d00a      	beq.n	800b476 <prvDeleteTCB+0x56>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	60fb      	str	r3, [r7, #12]
}
 800b472:	bf00      	nop
 800b474:	e7fe      	b.n	800b474 <prvDeleteTCB+0x54>
	}
 800b476:	bf00      	nop
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
	...

0800b480 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b486:	4b0c      	ldr	r3, [pc, #48]	; (800b4b8 <prvResetNextTaskUnblockTime+0x38>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d104      	bne.n	800b49a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b490:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <prvResetNextTaskUnblockTime+0x3c>)
 800b492:	f04f 32ff 	mov.w	r2, #4294967295
 800b496:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b498:	e008      	b.n	800b4ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <prvResetNextTaskUnblockTime+0x38>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	4a04      	ldr	r2, [pc, #16]	; (800b4bc <prvResetNextTaskUnblockTime+0x3c>)
 800b4aa:	6013      	str	r3, [r2, #0]
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	20005d70 	.word	0x20005d70
 800b4bc:	20005dd8 	.word	0x20005dd8

0800b4c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b4c6:	4b0b      	ldr	r3, [pc, #44]	; (800b4f4 <xTaskGetSchedulerState+0x34>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d102      	bne.n	800b4d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	607b      	str	r3, [r7, #4]
 800b4d2:	e008      	b.n	800b4e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4d4:	4b08      	ldr	r3, [pc, #32]	; (800b4f8 <xTaskGetSchedulerState+0x38>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d102      	bne.n	800b4e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b4dc:	2302      	movs	r3, #2
 800b4de:	607b      	str	r3, [r7, #4]
 800b4e0:	e001      	b.n	800b4e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b4e6:	687b      	ldr	r3, [r7, #4]
	}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	20005dc4 	.word	0x20005dc4
 800b4f8:	20005de0 	.word	0x20005de0

0800b4fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b508:	2300      	movs	r3, #0
 800b50a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d056      	beq.n	800b5c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b512:	4b2e      	ldr	r3, [pc, #184]	; (800b5cc <xTaskPriorityDisinherit+0xd0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d00a      	beq.n	800b532 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	60fb      	str	r3, [r7, #12]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10a      	bne.n	800b550 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	60bb      	str	r3, [r7, #8]
}
 800b54c:	bf00      	nop
 800b54e:	e7fe      	b.n	800b54e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b554:	1e5a      	subs	r2, r3, #1
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b562:	429a      	cmp	r2, r3
 800b564:	d02c      	beq.n	800b5c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d128      	bne.n	800b5c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	3304      	adds	r3, #4
 800b572:	4618      	mov	r0, r3
 800b574:	f7fe f964 	bl	8009840 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b590:	4b0f      	ldr	r3, [pc, #60]	; (800b5d0 <xTaskPriorityDisinherit+0xd4>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	429a      	cmp	r2, r3
 800b596:	d903      	bls.n	800b5a0 <xTaskPriorityDisinherit+0xa4>
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59c:	4a0c      	ldr	r2, [pc, #48]	; (800b5d0 <xTaskPriorityDisinherit+0xd4>)
 800b59e:	6013      	str	r3, [r2, #0]
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4a09      	ldr	r2, [pc, #36]	; (800b5d4 <xTaskPriorityDisinherit+0xd8>)
 800b5ae:	441a      	add	r2, r3
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f7fe f8e5 	bl	8009786 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b5c0:	697b      	ldr	r3, [r7, #20]
	}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3718      	adds	r7, #24
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	200058e4 	.word	0x200058e4
 800b5d0:	20005dc0 	.word	0x20005dc0
 800b5d4:	200058e8 	.word	0x200058e8

0800b5d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b5e2:	4b21      	ldr	r3, [pc, #132]	; (800b668 <prvAddCurrentTaskToDelayedList+0x90>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5e8:	4b20      	ldr	r3, [pc, #128]	; (800b66c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe f926 	bl	8009840 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5fa:	d10a      	bne.n	800b612 <prvAddCurrentTaskToDelayedList+0x3a>
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d007      	beq.n	800b612 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b602:	4b1a      	ldr	r3, [pc, #104]	; (800b66c <prvAddCurrentTaskToDelayedList+0x94>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3304      	adds	r3, #4
 800b608:	4619      	mov	r1, r3
 800b60a:	4819      	ldr	r0, [pc, #100]	; (800b670 <prvAddCurrentTaskToDelayedList+0x98>)
 800b60c:	f7fe f8bb 	bl	8009786 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b610:	e026      	b.n	800b660 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4413      	add	r3, r2
 800b618:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b61a:	4b14      	ldr	r3, [pc, #80]	; (800b66c <prvAddCurrentTaskToDelayedList+0x94>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	429a      	cmp	r2, r3
 800b628:	d209      	bcs.n	800b63e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b62a:	4b12      	ldr	r3, [pc, #72]	; (800b674 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	4b0f      	ldr	r3, [pc, #60]	; (800b66c <prvAddCurrentTaskToDelayedList+0x94>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3304      	adds	r3, #4
 800b634:	4619      	mov	r1, r3
 800b636:	4610      	mov	r0, r2
 800b638:	f7fe f8c9 	bl	80097ce <vListInsert>
}
 800b63c:	e010      	b.n	800b660 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b63e:	4b0e      	ldr	r3, [pc, #56]	; (800b678 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <prvAddCurrentTaskToDelayedList+0x94>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3304      	adds	r3, #4
 800b648:	4619      	mov	r1, r3
 800b64a:	4610      	mov	r0, r2
 800b64c:	f7fe f8bf 	bl	80097ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b650:	4b0a      	ldr	r3, [pc, #40]	; (800b67c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	429a      	cmp	r2, r3
 800b658:	d202      	bcs.n	800b660 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b65a:	4a08      	ldr	r2, [pc, #32]	; (800b67c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	6013      	str	r3, [r2, #0]
}
 800b660:	bf00      	nop
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	20005dbc 	.word	0x20005dbc
 800b66c:	200058e4 	.word	0x200058e4
 800b670:	20005da4 	.word	0x20005da4
 800b674:	20005d74 	.word	0x20005d74
 800b678:	20005d70 	.word	0x20005d70
 800b67c:	20005dd8 	.word	0x20005dd8

0800b680 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b08a      	sub	sp, #40	; 0x28
 800b684:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b686:	2300      	movs	r3, #0
 800b688:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b68a:	f000 fb07 	bl	800bc9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b68e:	4b1c      	ldr	r3, [pc, #112]	; (800b700 <xTimerCreateTimerTask+0x80>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d021      	beq.n	800b6da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b696:	2300      	movs	r3, #0
 800b698:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b69a:	2300      	movs	r3, #0
 800b69c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b69e:	1d3a      	adds	r2, r7, #4
 800b6a0:	f107 0108 	add.w	r1, r7, #8
 800b6a4:	f107 030c 	add.w	r3, r7, #12
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7fd fe3b 	bl	8009324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	68fa      	ldr	r2, [r7, #12]
 800b6b4:	9202      	str	r2, [sp, #8]
 800b6b6:	9301      	str	r3, [sp, #4]
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	460a      	mov	r2, r1
 800b6c0:	4910      	ldr	r1, [pc, #64]	; (800b704 <xTimerCreateTimerTask+0x84>)
 800b6c2:	4811      	ldr	r0, [pc, #68]	; (800b708 <xTimerCreateTimerTask+0x88>)
 800b6c4:	f7ff f8de 	bl	800a884 <xTaskCreateStatic>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	4a10      	ldr	r2, [pc, #64]	; (800b70c <xTimerCreateTimerTask+0x8c>)
 800b6cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b6ce:	4b0f      	ldr	r3, [pc, #60]	; (800b70c <xTimerCreateTimerTask+0x8c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d001      	beq.n	800b6da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10a      	bne.n	800b6f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	613b      	str	r3, [r7, #16]
}
 800b6f2:	bf00      	nop
 800b6f4:	e7fe      	b.n	800b6f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b6f6:	697b      	ldr	r3, [r7, #20]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	20005e14 	.word	0x20005e14
 800b704:	0800ebf0 	.word	0x0800ebf0
 800b708:	0800b845 	.word	0x0800b845
 800b70c:	20005e18 	.word	0x20005e18

0800b710 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b08a      	sub	sp, #40	; 0x28
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
 800b71c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b71e:	2300      	movs	r3, #0
 800b720:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10a      	bne.n	800b73e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72c:	f383 8811 	msr	BASEPRI, r3
 800b730:	f3bf 8f6f 	isb	sy
 800b734:	f3bf 8f4f 	dsb	sy
 800b738:	623b      	str	r3, [r7, #32]
}
 800b73a:	bf00      	nop
 800b73c:	e7fe      	b.n	800b73c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b73e:	4b1a      	ldr	r3, [pc, #104]	; (800b7a8 <xTimerGenericCommand+0x98>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d02a      	beq.n	800b79c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	2b05      	cmp	r3, #5
 800b756:	dc18      	bgt.n	800b78a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b758:	f7ff feb2 	bl	800b4c0 <xTaskGetSchedulerState>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d109      	bne.n	800b776 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b762:	4b11      	ldr	r3, [pc, #68]	; (800b7a8 <xTimerGenericCommand+0x98>)
 800b764:	6818      	ldr	r0, [r3, #0]
 800b766:	f107 0110 	add.w	r1, r7, #16
 800b76a:	2300      	movs	r3, #0
 800b76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b76e:	f7fe fc21 	bl	8009fb4 <xQueueGenericSend>
 800b772:	6278      	str	r0, [r7, #36]	; 0x24
 800b774:	e012      	b.n	800b79c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b776:	4b0c      	ldr	r3, [pc, #48]	; (800b7a8 <xTimerGenericCommand+0x98>)
 800b778:	6818      	ldr	r0, [r3, #0]
 800b77a:	f107 0110 	add.w	r1, r7, #16
 800b77e:	2300      	movs	r3, #0
 800b780:	2200      	movs	r2, #0
 800b782:	f7fe fc17 	bl	8009fb4 <xQueueGenericSend>
 800b786:	6278      	str	r0, [r7, #36]	; 0x24
 800b788:	e008      	b.n	800b79c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b78a:	4b07      	ldr	r3, [pc, #28]	; (800b7a8 <xTimerGenericCommand+0x98>)
 800b78c:	6818      	ldr	r0, [r3, #0]
 800b78e:	f107 0110 	add.w	r1, r7, #16
 800b792:	2300      	movs	r3, #0
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	f7fe fd0b 	bl	800a1b0 <xQueueGenericSendFromISR>
 800b79a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3728      	adds	r7, #40	; 0x28
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20005e14 	.word	0x20005e14

0800b7ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b088      	sub	sp, #32
 800b7b0:	af02      	add	r7, sp, #8
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7b6:	4b22      	ldr	r3, [pc, #136]	; (800b840 <prvProcessExpiredTimer+0x94>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7fe f83b 	bl	8009840 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7d0:	f003 0304 	and.w	r3, r3, #4
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d022      	beq.n	800b81e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	699a      	ldr	r2, [r3, #24]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	18d1      	adds	r1, r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	6978      	ldr	r0, [r7, #20]
 800b7e6:	f000 f8d1 	bl	800b98c <prvInsertTimerInActiveList>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d01f      	beq.n	800b830 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	6978      	ldr	r0, [r7, #20]
 800b7fc:	f7ff ff88 	bl	800b710 <xTimerGenericCommand>
 800b800:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d113      	bne.n	800b830 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80c:	f383 8811 	msr	BASEPRI, r3
 800b810:	f3bf 8f6f 	isb	sy
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	60fb      	str	r3, [r7, #12]
}
 800b81a:	bf00      	nop
 800b81c:	e7fe      	b.n	800b81c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b824:	f023 0301 	bic.w	r3, r3, #1
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	6a1b      	ldr	r3, [r3, #32]
 800b834:	6978      	ldr	r0, [r7, #20]
 800b836:	4798      	blx	r3
}
 800b838:	bf00      	nop
 800b83a:	3718      	adds	r7, #24
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20005e0c 	.word	0x20005e0c

0800b844 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b84c:	f107 0308 	add.w	r3, r7, #8
 800b850:	4618      	mov	r0, r3
 800b852:	f000 f857 	bl	800b904 <prvGetNextExpireTime>
 800b856:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	4619      	mov	r1, r3
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 f803 	bl	800b868 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b862:	f000 f8d5 	bl	800ba10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b866:	e7f1      	b.n	800b84c <prvTimerTask+0x8>

0800b868 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b872:	f7ff fa43 	bl	800acfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b876:	f107 0308 	add.w	r3, r7, #8
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 f866 	bl	800b94c <prvSampleTimeNow>
 800b880:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d130      	bne.n	800b8ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10a      	bne.n	800b8a4 <prvProcessTimerOrBlockTask+0x3c>
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	429a      	cmp	r2, r3
 800b894:	d806      	bhi.n	800b8a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b896:	f7ff fa3f 	bl	800ad18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b89a:	68f9      	ldr	r1, [r7, #12]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff ff85 	bl	800b7ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b8a2:	e024      	b.n	800b8ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d008      	beq.n	800b8bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b8aa:	4b13      	ldr	r3, [pc, #76]	; (800b8f8 <prvProcessTimerOrBlockTask+0x90>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <prvProcessTimerOrBlockTask+0x50>
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e000      	b.n	800b8ba <prvProcessTimerOrBlockTask+0x52>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b8bc:	4b0f      	ldr	r3, [pc, #60]	; (800b8fc <prvProcessTimerOrBlockTask+0x94>)
 800b8be:	6818      	ldr	r0, [r3, #0]
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	f7fe ffa7 	bl	800a81c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b8ce:	f7ff fa23 	bl	800ad18 <xTaskResumeAll>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10a      	bne.n	800b8ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b8d8:	4b09      	ldr	r3, [pc, #36]	; (800b900 <prvProcessTimerOrBlockTask+0x98>)
 800b8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8de:	601a      	str	r2, [r3, #0]
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	f3bf 8f6f 	isb	sy
}
 800b8e8:	e001      	b.n	800b8ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b8ea:	f7ff fa15 	bl	800ad18 <xTaskResumeAll>
}
 800b8ee:	bf00      	nop
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20005e10 	.word	0x20005e10
 800b8fc:	20005e14 	.word	0x20005e14
 800b900:	e000ed04 	.word	0xe000ed04

0800b904 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b90c:	4b0e      	ldr	r3, [pc, #56]	; (800b948 <prvGetNextExpireTime+0x44>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d101      	bne.n	800b91a <prvGetNextExpireTime+0x16>
 800b916:	2201      	movs	r2, #1
 800b918:	e000      	b.n	800b91c <prvGetNextExpireTime+0x18>
 800b91a:	2200      	movs	r2, #0
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d105      	bne.n	800b934 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b928:	4b07      	ldr	r3, [pc, #28]	; (800b948 <prvGetNextExpireTime+0x44>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	e001      	b.n	800b938 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b938:	68fb      	ldr	r3, [r7, #12]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	20005e0c 	.word	0x20005e0c

0800b94c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b954:	f7ff fa7e 	bl	800ae54 <xTaskGetTickCount>
 800b958:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b95a:	4b0b      	ldr	r3, [pc, #44]	; (800b988 <prvSampleTimeNow+0x3c>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	429a      	cmp	r2, r3
 800b962:	d205      	bcs.n	800b970 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b964:	f000 f936 	bl	800bbd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	601a      	str	r2, [r3, #0]
 800b96e:	e002      	b.n	800b976 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b976:	4a04      	ldr	r2, [pc, #16]	; (800b988 <prvSampleTimeNow+0x3c>)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b97c:	68fb      	ldr	r3, [r7, #12]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	20005e1c 	.word	0x20005e1c

0800b98c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
 800b998:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b99a:	2300      	movs	r3, #0
 800b99c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d812      	bhi.n	800b9d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	1ad2      	subs	r2, r2, r3
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d302      	bcc.n	800b9c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	617b      	str	r3, [r7, #20]
 800b9c4:	e01b      	b.n	800b9fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b9c6:	4b10      	ldr	r3, [pc, #64]	; (800ba08 <prvInsertTimerInActiveList+0x7c>)
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4610      	mov	r0, r2
 800b9d2:	f7fd fefc 	bl	80097ce <vListInsert>
 800b9d6:	e012      	b.n	800b9fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d206      	bcs.n	800b9ee <prvInsertTimerInActiveList+0x62>
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d302      	bcc.n	800b9ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	617b      	str	r3, [r7, #20]
 800b9ec:	e007      	b.n	800b9fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9ee:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <prvInsertTimerInActiveList+0x80>)
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	f7fd fee8 	bl	80097ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b9fe:	697b      	ldr	r3, [r7, #20]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3718      	adds	r7, #24
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	20005e10 	.word	0x20005e10
 800ba0c:	20005e0c 	.word	0x20005e0c

0800ba10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b08e      	sub	sp, #56	; 0x38
 800ba14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba16:	e0ca      	b.n	800bbae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	da18      	bge.n	800ba50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba1e:	1d3b      	adds	r3, r7, #4
 800ba20:	3304      	adds	r3, #4
 800ba22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10a      	bne.n	800ba40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	61fb      	str	r3, [r7, #28]
}
 800ba3c:	bf00      	nop
 800ba3e:	e7fe      	b.n	800ba3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba46:	6850      	ldr	r0, [r2, #4]
 800ba48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba4a:	6892      	ldr	r2, [r2, #8]
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f2c0 80ab 	blt.w	800bbae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d004      	beq.n	800ba6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	3304      	adds	r3, #4
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fd fee9 	bl	8009840 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba6e:	463b      	mov	r3, r7
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7ff ff6b 	bl	800b94c <prvSampleTimeNow>
 800ba76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b09      	cmp	r3, #9
 800ba7c:	f200 8096 	bhi.w	800bbac <prvProcessReceivedCommands+0x19c>
 800ba80:	a201      	add	r2, pc, #4	; (adr r2, 800ba88 <prvProcessReceivedCommands+0x78>)
 800ba82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba86:	bf00      	nop
 800ba88:	0800bab1 	.word	0x0800bab1
 800ba8c:	0800bab1 	.word	0x0800bab1
 800ba90:	0800bab1 	.word	0x0800bab1
 800ba94:	0800bb25 	.word	0x0800bb25
 800ba98:	0800bb39 	.word	0x0800bb39
 800ba9c:	0800bb83 	.word	0x0800bb83
 800baa0:	0800bab1 	.word	0x0800bab1
 800baa4:	0800bab1 	.word	0x0800bab1
 800baa8:	0800bb25 	.word	0x0800bb25
 800baac:	0800bb39 	.word	0x0800bb39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bab6:	f043 0301 	orr.w	r3, r3, #1
 800baba:	b2da      	uxtb	r2, r3
 800babc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	18d1      	adds	r1, r2, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bad0:	f7ff ff5c 	bl	800b98c <prvInsertTimerInActiveList>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d069      	beq.n	800bbae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bae0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bae8:	f003 0304 	and.w	r3, r3, #4
 800baec:	2b00      	cmp	r3, #0
 800baee:	d05e      	beq.n	800bbae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	441a      	add	r2, r3
 800baf8:	2300      	movs	r3, #0
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	2300      	movs	r3, #0
 800bafe:	2100      	movs	r1, #0
 800bb00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb02:	f7ff fe05 	bl	800b710 <xTimerGenericCommand>
 800bb06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d14f      	bne.n	800bbae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	61bb      	str	r3, [r7, #24]
}
 800bb20:	bf00      	nop
 800bb22:	e7fe      	b.n	800bb22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb2a:	f023 0301 	bic.w	r3, r3, #1
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bb36:	e03a      	b.n	800bbae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb3e:	f043 0301 	orr.w	r3, r3, #1
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10a      	bne.n	800bb6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	617b      	str	r3, [r7, #20]
}
 800bb6a:	bf00      	nop
 800bb6c:	e7fe      	b.n	800bb6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb70:	699a      	ldr	r2, [r3, #24]
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	18d1      	adds	r1, r2, r3
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb7c:	f7ff ff06 	bl	800b98c <prvInsertTimerInActiveList>
					break;
 800bb80:	e015      	b.n	800bbae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb88:	f003 0302 	and.w	r3, r3, #2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d103      	bne.n	800bb98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bb90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb92:	f7fd fcad 	bl	80094f0 <vPortFree>
 800bb96:	e00a      	b.n	800bbae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb9e:	f023 0301 	bic.w	r3, r3, #1
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bbaa:	e000      	b.n	800bbae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bbac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbae:	4b08      	ldr	r3, [pc, #32]	; (800bbd0 <prvProcessReceivedCommands+0x1c0>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	1d39      	adds	r1, r7, #4
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe fb96 	bl	800a2e8 <xQueueReceive>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f47f af2a 	bne.w	800ba18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bbc4:	bf00      	nop
 800bbc6:	bf00      	nop
 800bbc8:	3730      	adds	r7, #48	; 0x30
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	20005e14 	.word	0x20005e14

0800bbd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbda:	e048      	b.n	800bc6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbdc:	4b2d      	ldr	r3, [pc, #180]	; (800bc94 <prvSwitchTimerLists+0xc0>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68db      	ldr	r3, [r3, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbe6:	4b2b      	ldr	r3, [pc, #172]	; (800bc94 <prvSwitchTimerLists+0xc0>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fd fe23 	bl	8009840 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc08:	f003 0304 	and.w	r3, r3, #4
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d02e      	beq.n	800bc6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	4413      	add	r3, r2
 800bc18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d90e      	bls.n	800bc40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc2e:	4b19      	ldr	r3, [pc, #100]	; (800bc94 <prvSwitchTimerLists+0xc0>)
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	3304      	adds	r3, #4
 800bc36:	4619      	mov	r1, r3
 800bc38:	4610      	mov	r0, r2
 800bc3a:	f7fd fdc8 	bl	80097ce <vListInsert>
 800bc3e:	e016      	b.n	800bc6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc40:	2300      	movs	r3, #0
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	2300      	movs	r3, #0
 800bc46:	693a      	ldr	r2, [r7, #16]
 800bc48:	2100      	movs	r1, #0
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f7ff fd60 	bl	800b710 <xTimerGenericCommand>
 800bc50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10a      	bne.n	800bc6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	603b      	str	r3, [r7, #0]
}
 800bc6a:	bf00      	nop
 800bc6c:	e7fe      	b.n	800bc6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc6e:	4b09      	ldr	r3, [pc, #36]	; (800bc94 <prvSwitchTimerLists+0xc0>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1b1      	bne.n	800bbdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bc78:	4b06      	ldr	r3, [pc, #24]	; (800bc94 <prvSwitchTimerLists+0xc0>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bc7e:	4b06      	ldr	r3, [pc, #24]	; (800bc98 <prvSwitchTimerLists+0xc4>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a04      	ldr	r2, [pc, #16]	; (800bc94 <prvSwitchTimerLists+0xc0>)
 800bc84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bc86:	4a04      	ldr	r2, [pc, #16]	; (800bc98 <prvSwitchTimerLists+0xc4>)
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	6013      	str	r3, [r2, #0]
}
 800bc8c:	bf00      	nop
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	20005e0c 	.word	0x20005e0c
 800bc98:	20005e10 	.word	0x20005e10

0800bc9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bca2:	f7fd ff27 	bl	8009af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bca6:	4b15      	ldr	r3, [pc, #84]	; (800bcfc <prvCheckForValidListAndQueue+0x60>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d120      	bne.n	800bcf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bcae:	4814      	ldr	r0, [pc, #80]	; (800bd00 <prvCheckForValidListAndQueue+0x64>)
 800bcb0:	f7fd fd3c 	bl	800972c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bcb4:	4813      	ldr	r0, [pc, #76]	; (800bd04 <prvCheckForValidListAndQueue+0x68>)
 800bcb6:	f7fd fd39 	bl	800972c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bcba:	4b13      	ldr	r3, [pc, #76]	; (800bd08 <prvCheckForValidListAndQueue+0x6c>)
 800bcbc:	4a10      	ldr	r2, [pc, #64]	; (800bd00 <prvCheckForValidListAndQueue+0x64>)
 800bcbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bcc0:	4b12      	ldr	r3, [pc, #72]	; (800bd0c <prvCheckForValidListAndQueue+0x70>)
 800bcc2:	4a10      	ldr	r2, [pc, #64]	; (800bd04 <prvCheckForValidListAndQueue+0x68>)
 800bcc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	4b11      	ldr	r3, [pc, #68]	; (800bd10 <prvCheckForValidListAndQueue+0x74>)
 800bccc:	4a11      	ldr	r2, [pc, #68]	; (800bd14 <prvCheckForValidListAndQueue+0x78>)
 800bcce:	2110      	movs	r1, #16
 800bcd0:	200a      	movs	r0, #10
 800bcd2:	f7fe f899 	bl	8009e08 <xQueueGenericCreateStatic>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	4a08      	ldr	r2, [pc, #32]	; (800bcfc <prvCheckForValidListAndQueue+0x60>)
 800bcda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bcdc:	4b07      	ldr	r3, [pc, #28]	; (800bcfc <prvCheckForValidListAndQueue+0x60>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d005      	beq.n	800bcf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bce4:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <prvCheckForValidListAndQueue+0x60>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	490b      	ldr	r1, [pc, #44]	; (800bd18 <prvCheckForValidListAndQueue+0x7c>)
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe fd6c 	bl	800a7c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcf0:	f7fd ff30 	bl	8009b54 <vPortExitCritical>
}
 800bcf4:	bf00      	nop
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20005e14 	.word	0x20005e14
 800bd00:	20005de4 	.word	0x20005de4
 800bd04:	20005df8 	.word	0x20005df8
 800bd08:	20005e0c 	.word	0x20005e0c
 800bd0c:	20005e10 	.word	0x20005e10
 800bd10:	20005ec0 	.word	0x20005ec0
 800bd14:	20005e20 	.word	0x20005e20
 800bd18:	0800ebf8 	.word	0x0800ebf8

0800bd1c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bd1c:	b590      	push	{r4, r7, lr}
 800bd1e:	b089      	sub	sp, #36	; 0x24
 800bd20:	af04      	add	r7, sp, #16
 800bd22:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bd24:	2301      	movs	r3, #1
 800bd26:	2202      	movs	r2, #2
 800bd28:	2102      	movs	r1, #2
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fcd1 	bl	800c6d2 <USBH_FindInterface>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	2bff      	cmp	r3, #255	; 0xff
 800bd38:	d002      	beq.n	800bd40 <USBH_CDC_InterfaceInit+0x24>
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d901      	bls.n	800bd44 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bd40:	2302      	movs	r3, #2
 800bd42:	e13d      	b.n	800bfc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
 800bd46:	4619      	mov	r1, r3
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fca6 	bl	800c69a <USBH_SelectInterface>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bd52:	7bbb      	ldrb	r3, [r7, #14]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d001      	beq.n	800bd5c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bd58:	2302      	movs	r3, #2
 800bd5a:	e131      	b.n	800bfc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800bd62:	2050      	movs	r0, #80	; 0x50
 800bd64:	f002 fdcc 	bl	800e900 <malloc>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd72:	69db      	ldr	r3, [r3, #28]
 800bd74:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	e11f      	b.n	800bfc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800bd80:	2250      	movs	r2, #80	; 0x50
 800bd82:	2100      	movs	r1, #0
 800bd84:	68b8      	ldr	r0, [r7, #8]
 800bd86:	f002 fe77 	bl	800ea78 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	211a      	movs	r1, #26
 800bd90:	fb01 f303 	mul.w	r3, r1, r3
 800bd94:	4413      	add	r3, r2
 800bd96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	b25b      	sxtb	r3, r3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	da15      	bge.n	800bdce <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bda2:	7bfb      	ldrb	r3, [r7, #15]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	211a      	movs	r1, #26
 800bda8:	fb01 f303 	mul.w	r3, r1, r3
 800bdac:	4413      	add	r3, r2
 800bdae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bdb2:	781a      	ldrb	r2, [r3, #0]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bdb8:	7bfb      	ldrb	r3, [r7, #15]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	211a      	movs	r1, #26
 800bdbe:	fb01 f303 	mul.w	r3, r1, r3
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bdc8:	881a      	ldrh	r2, [r3, #0]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	785b      	ldrb	r3, [r3, #1]
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f002 fa26 	bl	800e226 <USBH_AllocPipe>
 800bdda:	4603      	mov	r3, r0
 800bddc:	461a      	mov	r2, r3
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	7819      	ldrb	r1, [r3, #0]
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	7858      	ldrb	r0, [r3, #1]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	8952      	ldrh	r2, [r2, #10]
 800bdfa:	9202      	str	r2, [sp, #8]
 800bdfc:	2203      	movs	r2, #3
 800bdfe:	9201      	str	r2, [sp, #4]
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	4623      	mov	r3, r4
 800be04:	4602      	mov	r2, r0
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f002 f9de 	bl	800e1c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	2200      	movs	r2, #0
 800be12:	4619      	mov	r1, r3
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f002 fced 	bl	800e7f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800be1a:	2300      	movs	r3, #0
 800be1c:	2200      	movs	r2, #0
 800be1e:	210a      	movs	r1, #10
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fc56 	bl	800c6d2 <USBH_FindInterface>
 800be26:	4603      	mov	r3, r0
 800be28:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800be2a:	7bfb      	ldrb	r3, [r7, #15]
 800be2c:	2bff      	cmp	r3, #255	; 0xff
 800be2e:	d002      	beq.n	800be36 <USBH_CDC_InterfaceInit+0x11a>
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d901      	bls.n	800be3a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800be36:	2302      	movs	r3, #2
 800be38:	e0c2      	b.n	800bfc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	211a      	movs	r1, #26
 800be40:	fb01 f303 	mul.w	r3, r1, r3
 800be44:	4413      	add	r3, r2
 800be46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	b25b      	sxtb	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	da16      	bge.n	800be80 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	211a      	movs	r1, #26
 800be58:	fb01 f303 	mul.w	r3, r1, r3
 800be5c:	4413      	add	r3, r2
 800be5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800be62:	781a      	ldrb	r2, [r3, #0]
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be68:	7bfb      	ldrb	r3, [r7, #15]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	211a      	movs	r1, #26
 800be6e:	fb01 f303 	mul.w	r3, r1, r3
 800be72:	4413      	add	r3, r2
 800be74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800be78:	881a      	ldrh	r2, [r3, #0]
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	835a      	strh	r2, [r3, #26]
 800be7e:	e015      	b.n	800beac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	211a      	movs	r1, #26
 800be86:	fb01 f303 	mul.w	r3, r1, r3
 800be8a:	4413      	add	r3, r2
 800be8c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800be90:	781a      	ldrb	r2, [r3, #0]
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be96:	7bfb      	ldrb	r3, [r7, #15]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	211a      	movs	r1, #26
 800be9c:	fb01 f303 	mul.w	r3, r1, r3
 800bea0:	4413      	add	r3, r2
 800bea2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bea6:	881a      	ldrh	r2, [r3, #0]
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	211a      	movs	r1, #26
 800beb2:	fb01 f303 	mul.w	r3, r1, r3
 800beb6:	4413      	add	r3, r2
 800beb8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	b25b      	sxtb	r3, r3
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	da16      	bge.n	800bef2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	211a      	movs	r1, #26
 800beca:	fb01 f303 	mul.w	r3, r1, r3
 800bece:	4413      	add	r3, r2
 800bed0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bed4:	781a      	ldrb	r2, [r3, #0]
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	211a      	movs	r1, #26
 800bee0:	fb01 f303 	mul.w	r3, r1, r3
 800bee4:	4413      	add	r3, r2
 800bee6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800beea:	881a      	ldrh	r2, [r3, #0]
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	835a      	strh	r2, [r3, #26]
 800bef0:	e015      	b.n	800bf1e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bef2:	7bfb      	ldrb	r3, [r7, #15]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	211a      	movs	r1, #26
 800bef8:	fb01 f303 	mul.w	r3, r1, r3
 800befc:	4413      	add	r3, r2
 800befe:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bf02:	781a      	ldrb	r2, [r3, #0]
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bf08:	7bfb      	ldrb	r3, [r7, #15]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	211a      	movs	r1, #26
 800bf0e:	fb01 f303 	mul.w	r3, r1, r3
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bf18:	881a      	ldrh	r2, [r3, #0]
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	7b9b      	ldrb	r3, [r3, #14]
 800bf22:	4619      	mov	r1, r3
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f002 f97e 	bl	800e226 <USBH_AllocPipe>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	7bdb      	ldrb	r3, [r3, #15]
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f002 f974 	bl	800e226 <USBH_AllocPipe>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	461a      	mov	r2, r3
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	7b59      	ldrb	r1, [r3, #13]
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	7b98      	ldrb	r0, [r3, #14]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	8b12      	ldrh	r2, [r2, #24]
 800bf5e:	9202      	str	r2, [sp, #8]
 800bf60:	2202      	movs	r2, #2
 800bf62:	9201      	str	r2, [sp, #4]
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	4623      	mov	r3, r4
 800bf68:	4602      	mov	r2, r0
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f002 f92c 	bl	800e1c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	7b19      	ldrb	r1, [r3, #12]
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	7bd8      	ldrb	r0, [r3, #15]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	8b52      	ldrh	r2, [r2, #26]
 800bf88:	9202      	str	r2, [sp, #8]
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	9201      	str	r2, [sp, #4]
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	4623      	mov	r3, r4
 800bf92:	4602      	mov	r2, r0
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f002 f917 	bl	800e1c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	7b5b      	ldrb	r3, [r3, #13]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f002 fc22 	bl	800e7f4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	7b1b      	ldrb	r3, [r3, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f002 fc1b 	bl	800e7f4 <USBH_LL_SetToggle>

  return USBH_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd90      	pop	{r4, r7, pc}

0800bfc8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfd6:	69db      	ldr	r3, [r3, #28]
 800bfd8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00e      	beq.n	800c000 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f002 f90c 	bl	800e206 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	4619      	mov	r1, r3
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f002 f937 	bl	800e268 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	7b1b      	ldrb	r3, [r3, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00e      	beq.n	800c026 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	7b1b      	ldrb	r3, [r3, #12]
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f002 f8f9 	bl	800e206 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	7b1b      	ldrb	r3, [r3, #12]
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f002 f924 	bl	800e268 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2200      	movs	r2, #0
 800c024:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	7b5b      	ldrb	r3, [r3, #13]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00e      	beq.n	800c04c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	7b5b      	ldrb	r3, [r3, #13]
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f002 f8e6 	bl	800e206 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	7b5b      	ldrb	r3, [r3, #13]
 800c03e:	4619      	mov	r1, r3
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f002 f911 	bl	800e268 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c052:	69db      	ldr	r3, [r3, #28]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00b      	beq.n	800c070 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c05e:	69db      	ldr	r3, [r3, #28]
 800c060:	4618      	mov	r0, r3
 800c062:	f002 fc55 	bl	800e910 <free>
    phost->pActiveClass->pData = 0U;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c06c:	2200      	movs	r2, #0
 800c06e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b084      	sub	sp, #16
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c088:	69db      	ldr	r3, [r3, #28]
 800c08a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3340      	adds	r3, #64	; 0x40
 800c090:	4619      	mov	r1, r3
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f8b1 	bl	800c1fa <GetLineCoding>
 800c098:	4603      	mov	r3, r0
 800c09a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c09c:	7afb      	ldrb	r3, [r7, #11]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d105      	bne.n	800c0ae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c0a8:	2102      	movs	r1, #2
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c0ae:	7afb      	ldrb	r3, [r7, #11]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0ce:	69db      	ldr	r3, [r3, #28]
 800c0d0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	d877      	bhi.n	800c1cc <USBH_CDC_Process+0x114>
 800c0dc:	a201      	add	r2, pc, #4	; (adr r2, 800c0e4 <USBH_CDC_Process+0x2c>)
 800c0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e2:	bf00      	nop
 800c0e4:	0800c0f9 	.word	0x0800c0f9
 800c0e8:	0800c0ff 	.word	0x0800c0ff
 800c0ec:	0800c12f 	.word	0x0800c12f
 800c0f0:	0800c1a3 	.word	0x0800c1a3
 800c0f4:	0800c1b1 	.word	0x0800c1b1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c0fc:	e06d      	b.n	800c1da <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f897 	bl	800c238 <SetLineCoding>
 800c10a:	4603      	mov	r3, r0
 800c10c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c10e:	7bbb      	ldrb	r3, [r7, #14]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d104      	bne.n	800c11e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2202      	movs	r2, #2
 800c118:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c11c:	e058      	b.n	800c1d0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c11e:	7bbb      	ldrb	r3, [r7, #14]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d055      	beq.n	800c1d0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2204      	movs	r2, #4
 800c128:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c12c:	e050      	b.n	800c1d0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	3340      	adds	r3, #64	; 0x40
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f860 	bl	800c1fa <GetLineCoding>
 800c13a:	4603      	mov	r3, r0
 800c13c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c13e:	7bbb      	ldrb	r3, [r7, #14]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d126      	bne.n	800c192 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c156:	791b      	ldrb	r3, [r3, #4]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d13b      	bne.n	800c1d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c166:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c168:	429a      	cmp	r2, r3
 800c16a:	d133      	bne.n	800c1d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c176:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c178:	429a      	cmp	r2, r3
 800c17a:	d12b      	bne.n	800c1d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c184:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c186:	429a      	cmp	r2, r3
 800c188:	d124      	bne.n	800c1d4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f982 	bl	800c494 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c190:	e020      	b.n	800c1d4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d01d      	beq.n	800c1d4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2204      	movs	r2, #4
 800c19c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c1a0:	e018      	b.n	800c1d4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f867 	bl	800c276 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 f8f6 	bl	800c39a <CDC_ProcessReception>
      break;
 800c1ae:	e014      	b.n	800c1da <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f001 f98a 	bl	800d4cc <USBH_ClrFeature>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c1bc:	7bbb      	ldrb	r3, [r7, #14]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10a      	bne.n	800c1d8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c1ca:	e005      	b.n	800c1d8 <USBH_CDC_Process+0x120>

    default:
      break;
 800c1cc:	bf00      	nop
 800c1ce:	e004      	b.n	800c1da <USBH_CDC_Process+0x122>
      break;
 800c1d0:	bf00      	nop
 800c1d2:	e002      	b.n	800c1da <USBH_CDC_Process+0x122>
      break;
 800c1d4:	bf00      	nop
 800c1d6:	e000      	b.n	800c1da <USBH_CDC_Process+0x122>
      break;
 800c1d8:	bf00      	nop

  }

  return status;
 800c1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	370c      	adds	r7, #12
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b082      	sub	sp, #8
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	22a1      	movs	r2, #161	; 0xa1
 800c208:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2221      	movs	r2, #33	; 0x21
 800c20e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2207      	movs	r2, #7
 800c220:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	2207      	movs	r2, #7
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f001 fc8b 	bl	800db44 <USBH_CtlReq>
 800c22e:	4603      	mov	r3, r0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2221      	movs	r2, #33	; 0x21
 800c246:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2220      	movs	r2, #32
 800c24c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2207      	movs	r2, #7
 800c25e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	2207      	movs	r2, #7
 800c264:	4619      	mov	r1, r3
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f001 fc6c 	bl	800db44 <USBH_CtlReq>
 800c26c:	4603      	mov	r3, r0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b086      	sub	sp, #24
 800c27a:	af02      	add	r7, sp, #8
 800c27c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c284:	69db      	ldr	r3, [r3, #28]
 800c286:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c288:	2300      	movs	r3, #0
 800c28a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c292:	2b01      	cmp	r3, #1
 800c294:	d002      	beq.n	800c29c <CDC_ProcessTransmission+0x26>
 800c296:	2b02      	cmp	r3, #2
 800c298:	d023      	beq.n	800c2e2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c29a:	e07a      	b.n	800c392 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	8b12      	ldrh	r2, [r2, #24]
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d90b      	bls.n	800c2c0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	69d9      	ldr	r1, [r3, #28]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	8b1a      	ldrh	r2, [r3, #24]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	7b5b      	ldrb	r3, [r3, #13]
 800c2b4:	2001      	movs	r0, #1
 800c2b6:	9000      	str	r0, [sp, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 ff42 	bl	800e142 <USBH_BulkSendData>
 800c2be:	e00b      	b.n	800c2d8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	7b5b      	ldrb	r3, [r3, #13]
 800c2ce:	2001      	movs	r0, #1
 800c2d0:	9000      	str	r0, [sp, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f001 ff35 	bl	800e142 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2202      	movs	r2, #2
 800c2dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c2e0:	e057      	b.n	800c392 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	7b5b      	ldrb	r3, [r3, #13]
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f002 fa59 	bl	800e7a0 <USBH_LL_GetURBState>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c2f2:	7afb      	ldrb	r3, [r7, #11]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d136      	bne.n	800c366 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	8b12      	ldrh	r2, [r2, #24]
 800c300:	4293      	cmp	r3, r2
 800c302:	d90e      	bls.n	800c322 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	8b12      	ldrh	r2, [r2, #24]
 800c30c:	1a9a      	subs	r2, r3, r2
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	69db      	ldr	r3, [r3, #28]
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	8b12      	ldrh	r2, [r2, #24]
 800c31a:	441a      	add	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	61da      	str	r2, [r3, #28]
 800c320:	e002      	b.n	800c328 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2200      	movs	r2, #0
 800c326:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d004      	beq.n	800c33a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c338:	e006      	b.n	800c348 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2200      	movs	r2, #0
 800c33e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f892 	bl	800c46c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2204      	movs	r2, #4
 800c34c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c35c:	2300      	movs	r3, #0
 800c35e:	2200      	movs	r2, #0
 800c360:	f7fc ff08 	bl	8009174 <osMessageQueuePut>
      break;
 800c364:	e014      	b.n	800c390 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d111      	bne.n	800c390 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2201      	movs	r2, #1
 800c370:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2204      	movs	r2, #4
 800c378:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c388:	2300      	movs	r3, #0
 800c38a:	2200      	movs	r2, #0
 800c38c:	f7fc fef2 	bl	8009174 <osMessageQueuePut>
      break;
 800c390:	bf00      	nop
  }
}
 800c392:	bf00      	nop
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b086      	sub	sp, #24
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3a8:	69db      	ldr	r3, [r3, #28]
 800c3aa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	d002      	beq.n	800c3c0 <CDC_ProcessReception+0x26>
 800c3ba:	2b04      	cmp	r3, #4
 800c3bc:	d00e      	beq.n	800c3dc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c3be:	e051      	b.n	800c464 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	6a19      	ldr	r1, [r3, #32]
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	8b5a      	ldrh	r2, [r3, #26]
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	7b1b      	ldrb	r3, [r3, #12]
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f001 fedd 	bl	800e18c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	2204      	movs	r2, #4
 800c3d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c3da:	e043      	b.n	800c464 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	7b1b      	ldrb	r3, [r3, #12]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f002 f9dc 	bl	800e7a0 <USBH_LL_GetURBState>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c3ec:	7cfb      	ldrb	r3, [r7, #19]
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d137      	bne.n	800c462 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	7b1b      	ldrb	r3, [r3, #12]
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f002 f93f 	bl	800e67c <USBH_LL_GetLastXferSize>
 800c3fe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	429a      	cmp	r2, r3
 800c408:	d016      	beq.n	800c438 <CDC_ProcessReception+0x9e>
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	8b5b      	ldrh	r3, [r3, #26]
 800c40e:	461a      	mov	r2, r3
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4293      	cmp	r3, r2
 800c414:	d910      	bls.n	800c438 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	1ad2      	subs	r2, r2, r3
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	6a1a      	ldr	r2, [r3, #32]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	441a      	add	r2, r3
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2203      	movs	r2, #3
 800c432:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c436:	e006      	b.n	800c446 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f81d 	bl	800c480 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2204      	movs	r2, #4
 800c44a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c45a:	2300      	movs	r3, #0
 800c45c:	2200      	movs	r2, #0
 800c45e:	f7fc fe89 	bl	8009174 <osMessageQueuePut>
      break;
 800c462:	bf00      	nop
  }
}
 800c464:	bf00      	nop
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c488:	bf00      	nop
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d101      	bne.n	800c4c0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c4bc:	2302      	movs	r3, #2
 800c4be:	e044      	b.n	800c54a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	79fa      	ldrb	r2, [r7, #7]
 800c4c4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f000 f841 	bl	800c560 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d003      	beq.n	800c50c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c50c:	2200      	movs	r2, #0
 800c50e:	2104      	movs	r1, #4
 800c510:	2010      	movs	r0, #16
 800c512:	f7fc fdbc 	bl	800908e <osMessageQueueNew>
 800c516:	4602      	mov	r2, r0
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800c51e:	4b0d      	ldr	r3, [pc, #52]	; (800c554 <USBH_Init+0xac>)
 800c520:	4a0d      	ldr	r2, [pc, #52]	; (800c558 <USBH_Init+0xb0>)
 800c522:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800c524:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <USBH_Init+0xac>)
 800c526:	2280      	movs	r2, #128	; 0x80
 800c528:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c52a:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <USBH_Init+0xac>)
 800c52c:	2218      	movs	r2, #24
 800c52e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800c530:	4a08      	ldr	r2, [pc, #32]	; (800c554 <USBH_Init+0xac>)
 800c532:	68f9      	ldr	r1, [r7, #12]
 800c534:	4809      	ldr	r0, [pc, #36]	; (800c55c <USBH_Init+0xb4>)
 800c536:	f7fc fcfd 	bl	8008f34 <osThreadNew>
 800c53a:	4602      	mov	r2, r0
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f001 ffdc 	bl	800e500 <USBH_LL_Init>

  return USBH_OK;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	20005f10 	.word	0x20005f10
 800c558:	0800ec04 	.word	0x0800ec04
 800c55c:	0800d21d 	.word	0x0800d21d

0800c560 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c568:	2300      	movs	r3, #0
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c56c:	2300      	movs	r3, #0
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	e009      	b.n	800c586 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	33e0      	adds	r3, #224	; 0xe0
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	4413      	add	r3, r2
 800c57c:	2200      	movs	r2, #0
 800c57e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3301      	adds	r3, #1
 800c584:	60fb      	str	r3, [r7, #12]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2b0f      	cmp	r3, #15
 800c58a:	d9f2      	bls.n	800c572 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c58c:	2300      	movs	r3, #0
 800c58e:	60fb      	str	r3, [r7, #12]
 800c590:	e009      	b.n	800c5a6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4413      	add	r3, r2
 800c598:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c59c:	2200      	movs	r2, #0
 800c59e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	60fb      	str	r3, [r7, #12]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5ac:	d3f1      	bcc.n	800c592 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2240      	movs	r2, #64	; 0x40
 800c5d2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	331c      	adds	r3, #28
 800c5fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c602:	2100      	movs	r1, #0
 800c604:	4618      	mov	r0, r3
 800c606:	f002 fa37 	bl	800ea78 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c610:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c614:	2100      	movs	r1, #0
 800c616:	4618      	mov	r0, r3
 800c618:	f002 fa2e 	bl	800ea78 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800c622:	2212      	movs	r2, #18
 800c624:	2100      	movs	r1, #0
 800c626:	4618      	mov	r0, r3
 800c628:	f002 fa26 	bl	800ea78 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c632:	223e      	movs	r2, #62	; 0x3e
 800c634:	2100      	movs	r1, #0
 800c636:	4618      	mov	r0, r3
 800c638:	f002 fa1e 	bl	800ea78 <memset>

  return USBH_OK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c646:	b480      	push	{r7}
 800c648:	b085      	sub	sp, #20
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d016      	beq.n	800c688 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10e      	bne.n	800c682 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c66a:	1c59      	adds	r1, r3, #1
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	33de      	adds	r3, #222	; 0xde
 800c676:	6839      	ldr	r1, [r7, #0]
 800c678:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c67c:	2300      	movs	r3, #0
 800c67e:	73fb      	strb	r3, [r7, #15]
 800c680:	e004      	b.n	800c68c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c682:	2302      	movs	r3, #2
 800c684:	73fb      	strb	r3, [r7, #15]
 800c686:	e001      	b.n	800c68c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c688:	2302      	movs	r3, #2
 800c68a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3714      	adds	r7, #20
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c69a:	b480      	push	{r7}
 800c69c:	b085      	sub	sp, #20
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c6b0:	78fa      	ldrb	r2, [r7, #3]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d204      	bcs.n	800c6c0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	78fa      	ldrb	r2, [r7, #3]
 800c6ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c6be:	e001      	b.n	800c6c4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c6c0:	2302      	movs	r3, #2
 800c6c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3714      	adds	r7, #20
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr

0800c6d2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c6d2:	b480      	push	{r7}
 800c6d4:	b087      	sub	sp, #28
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	4608      	mov	r0, r1
 800c6dc:	4611      	mov	r1, r2
 800c6de:	461a      	mov	r2, r3
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	70fb      	strb	r3, [r7, #3]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	70bb      	strb	r3, [r7, #2]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c6fa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c6fc:	e025      	b.n	800c74a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c6fe:	7dfb      	ldrb	r3, [r7, #23]
 800c700:	221a      	movs	r2, #26
 800c702:	fb02 f303 	mul.w	r3, r2, r3
 800c706:	3308      	adds	r3, #8
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	4413      	add	r3, r2
 800c70c:	3302      	adds	r3, #2
 800c70e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	795b      	ldrb	r3, [r3, #5]
 800c714:	78fa      	ldrb	r2, [r7, #3]
 800c716:	429a      	cmp	r2, r3
 800c718:	d002      	beq.n	800c720 <USBH_FindInterface+0x4e>
 800c71a:	78fb      	ldrb	r3, [r7, #3]
 800c71c:	2bff      	cmp	r3, #255	; 0xff
 800c71e:	d111      	bne.n	800c744 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c724:	78ba      	ldrb	r2, [r7, #2]
 800c726:	429a      	cmp	r2, r3
 800c728:	d002      	beq.n	800c730 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c72a:	78bb      	ldrb	r3, [r7, #2]
 800c72c:	2bff      	cmp	r3, #255	; 0xff
 800c72e:	d109      	bne.n	800c744 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c734:	787a      	ldrb	r2, [r7, #1]
 800c736:	429a      	cmp	r2, r3
 800c738:	d002      	beq.n	800c740 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c73a:	787b      	ldrb	r3, [r7, #1]
 800c73c:	2bff      	cmp	r3, #255	; 0xff
 800c73e:	d101      	bne.n	800c744 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c740:	7dfb      	ldrb	r3, [r7, #23]
 800c742:	e006      	b.n	800c752 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c744:	7dfb      	ldrb	r3, [r7, #23]
 800c746:	3301      	adds	r3, #1
 800c748:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c74a:	7dfb      	ldrb	r3, [r7, #23]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d9d6      	bls.n	800c6fe <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c750:	23ff      	movs	r3, #255	; 0xff
}
 800c752:	4618      	mov	r0, r3
 800c754:	371c      	adds	r7, #28
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr

0800c75e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f001 ff10 	bl	800e58c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c76c:	2101      	movs	r1, #1
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f002 f829 	bl	800e7c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3708      	adds	r7, #8
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
	...

0800c780 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af04      	add	r7, sp, #16
 800c786:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c788:	2302      	movs	r3, #2
 800c78a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c78c:	2300      	movs	r3, #0
 800c78e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c796:	b2db      	uxtb	r3, r3
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d102      	bne.n	800c7a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2203      	movs	r2, #3
 800c7a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	2b0b      	cmp	r3, #11
 800c7aa:	f200 8247 	bhi.w	800cc3c <USBH_Process+0x4bc>
 800c7ae:	a201      	add	r2, pc, #4	; (adr r2, 800c7b4 <USBH_Process+0x34>)
 800c7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b4:	0800c7e5 	.word	0x0800c7e5
 800c7b8:	0800c833 	.word	0x0800c833
 800c7bc:	0800c8b7 	.word	0x0800c8b7
 800c7c0:	0800cbbb 	.word	0x0800cbbb
 800c7c4:	0800cc3d 	.word	0x0800cc3d
 800c7c8:	0800c977 	.word	0x0800c977
 800c7cc:	0800cb45 	.word	0x0800cb45
 800c7d0:	0800c9c9 	.word	0x0800c9c9
 800c7d4:	0800ca05 	.word	0x0800ca05
 800c7d8:	0800ca3f 	.word	0x0800ca3f
 800c7dc:	0800ca9d 	.word	0x0800ca9d
 800c7e0:	0800cba3 	.word	0x0800cba3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f000 8227 	beq.w	800cc40 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c7f8:	20c8      	movs	r0, #200	; 0xc8
 800c7fa:	f002 f82e 	bl	800e85a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f001 ff21 	bl	800e646 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c828:	2300      	movs	r3, #0
 800c82a:	2200      	movs	r2, #0
 800c82c:	f7fc fca2 	bl	8009174 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c830:	e206      	b.n	800cc40 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d107      	bne.n	800c84c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2202      	movs	r2, #2
 800c848:	701a      	strb	r2, [r3, #0]
 800c84a:	e025      	b.n	800c898 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c856:	d914      	bls.n	800c882 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c85e:	3301      	adds	r3, #1
 800c860:	b2da      	uxtb	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c86e:	2b03      	cmp	r3, #3
 800c870:	d903      	bls.n	800c87a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	220d      	movs	r2, #13
 800c876:	701a      	strb	r2, [r3, #0]
 800c878:	e00e      	b.n	800c898 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	701a      	strb	r2, [r3, #0]
 800c880:	e00a      	b.n	800c898 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c888:	f103 020a 	add.w	r2, r3, #10
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c892:	200a      	movs	r0, #10
 800c894:	f001 ffe1 	bl	800e85a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f7fc fc60 	bl	8009174 <osMessageQueuePut>
#endif
#endif
      break;
 800c8b4:	e1cb      	b.n	800cc4e <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d005      	beq.n	800c8cc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8c6:	2104      	movs	r1, #4
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c8cc:	2064      	movs	r0, #100	; 0x64
 800c8ce:	f001 ffc4 	bl	800e85a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f001 fe90 	bl	800e5f8 <USBH_LL_GetSpeed>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	461a      	mov	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2205      	movs	r2, #5
 800c8e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f001 fc9b 	bl	800e226 <USBH_AllocPipe>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c8f8:	2180      	movs	r1, #128	; 0x80
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f001 fc93 	bl	800e226 <USBH_AllocPipe>
 800c900:	4603      	mov	r3, r0
 800c902:	461a      	mov	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	7919      	ldrb	r1, [r3, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c91c:	b292      	uxth	r2, r2
 800c91e:	9202      	str	r2, [sp, #8]
 800c920:	2200      	movs	r2, #0
 800c922:	9201      	str	r2, [sp, #4]
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	4603      	mov	r3, r0
 800c928:	2280      	movs	r2, #128	; 0x80
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f001 fc4c 	bl	800e1c8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	7959      	ldrb	r1, [r3, #5]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c944:	b292      	uxth	r2, r2
 800c946:	9202      	str	r2, [sp, #8]
 800c948:	2200      	movs	r2, #0
 800c94a:	9201      	str	r2, [sp, #4]
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	4603      	mov	r3, r0
 800c950:	2200      	movs	r2, #0
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f001 fc38 	bl	800e1c8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c96c:	2300      	movs	r3, #0
 800c96e:	2200      	movs	r2, #0
 800c970:	f7fc fc00 	bl	8009174 <osMessageQueuePut>
#endif
#endif
      break;
 800c974:	e16b      	b.n	800cc4e <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f96e 	bl	800cc58 <USBH_HandleEnum>
 800c97c:	4603      	mov	r3, r0
 800c97e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c980:	7bbb      	ldrb	r3, [r7, #14]
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b00      	cmp	r3, #0
 800c986:	f040 815d 	bne.w	800cc44 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d103      	bne.n	800c9a4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2208      	movs	r2, #8
 800c9a0:	701a      	strb	r2, [r3, #0]
 800c9a2:	e002      	b.n	800c9aa <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2207      	movs	r2, #7
 800c9a8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2205      	movs	r2, #5
 800c9ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c9be:	2300      	movs	r3, #0
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f7fc fbd7 	bl	8009174 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c9c6:	e13d      	b.n	800cc44 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f000 813a 	beq.w	800cc48 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9da:	2101      	movs	r1, #1
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2208      	movs	r2, #8
 800c9e4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2205      	movs	r2, #5
 800c9ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f7fc fbb9 	bl	8009174 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800ca02:	e121      	b.n	800cc48 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 fd15 	bl	800d43e <USBH_SetCfg>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d102      	bne.n	800ca20 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2209      	movs	r2, #9
 800ca1e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2201      	movs	r2, #1
 800ca24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca34:	2300      	movs	r3, #0
 800ca36:	2200      	movs	r2, #0
 800ca38:	f7fc fb9c 	bl	8009174 <osMessageQueuePut>
#endif
#endif
      break;
 800ca3c:	e107      	b.n	800cc4e <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ca44:	f003 0320 	and.w	r3, r3, #32
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d015      	beq.n	800ca78 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 fd18 	bl	800d484 <USBH_SetFeature>
 800ca54:	4603      	mov	r3, r0
 800ca56:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ca58:	7bbb      	ldrb	r3, [r7, #14]
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d103      	bne.n	800ca68 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	220a      	movs	r2, #10
 800ca64:	701a      	strb	r2, [r3, #0]
 800ca66:	e00a      	b.n	800ca7e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b03      	cmp	r3, #3
 800ca6e:	d106      	bne.n	800ca7e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	220a      	movs	r2, #10
 800ca74:	701a      	strb	r2, [r3, #0]
 800ca76:	e002      	b.n	800ca7e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	220a      	movs	r2, #10
 800ca7c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2201      	movs	r2, #1
 800ca82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca92:	2300      	movs	r3, #0
 800ca94:	2200      	movs	r2, #0
 800ca96:	f7fc fb6d 	bl	8009174 <osMessageQueuePut>
#endif
#endif
      break;
 800ca9a:	e0d8      	b.n	800cc4e <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d03f      	beq.n	800cb26 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800caae:	2300      	movs	r3, #0
 800cab0:	73fb      	strb	r3, [r7, #15]
 800cab2:	e016      	b.n	800cae2 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cab4:	7bfa      	ldrb	r2, [r7, #15]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	32de      	adds	r2, #222	; 0xde
 800caba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cabe:	791a      	ldrb	r2, [r3, #4]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d108      	bne.n	800cadc <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800caca:	7bfa      	ldrb	r2, [r7, #15]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	32de      	adds	r2, #222	; 0xde
 800cad0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cada:	e005      	b.n	800cae8 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	3301      	adds	r3, #1
 800cae0:	73fb      	strb	r3, [r7, #15]
 800cae2:	7bfb      	ldrb	r3, [r7, #15]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d0e5      	beq.n	800cab4 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d016      	beq.n	800cb20 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	4798      	blx	r3
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d109      	bne.n	800cb18 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2206      	movs	r2, #6
 800cb08:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb10:	2103      	movs	r1, #3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	4798      	blx	r3
 800cb16:	e006      	b.n	800cb26 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	220d      	movs	r2, #13
 800cb1c:	701a      	strb	r2, [r3, #0]
 800cb1e:	e002      	b.n	800cb26 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	220d      	movs	r2, #13
 800cb24:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2205      	movs	r2, #5
 800cb2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f7fc fb19 	bl	8009174 <osMessageQueuePut>
#endif
#endif
      break;
 800cb42:	e084      	b.n	800cc4e <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d017      	beq.n	800cb7e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb54:	691b      	ldr	r3, [r3, #16]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	4798      	blx	r3
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cb5e:	7bbb      	ldrb	r3, [r7, #14]
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d103      	bne.n	800cb6e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	220b      	movs	r2, #11
 800cb6a:	701a      	strb	r2, [r3, #0]
 800cb6c:	e00a      	b.n	800cb84 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800cb6e:	7bbb      	ldrb	r3, [r7, #14]
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	2b02      	cmp	r3, #2
 800cb74:	d106      	bne.n	800cb84 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	220d      	movs	r2, #13
 800cb7a:	701a      	strb	r2, [r3, #0]
 800cb7c:	e002      	b.n	800cb84 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	220d      	movs	r2, #13
 800cb82:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2205      	movs	r2, #5
 800cb88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb98:	2300      	movs	r3, #0
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f7fc faea 	bl	8009174 <osMessageQueuePut>
#endif
#endif
      break;
 800cba0:	e055      	b.n	800cc4e <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d04f      	beq.n	800cc4c <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbb2:	695b      	ldr	r3, [r3, #20]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	4798      	blx	r3
      }
      break;
 800cbb8:	e048      	b.n	800cc4c <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff fccc 	bl	800c560 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d009      	beq.n	800cbe6 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d005      	beq.n	800cbfc <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cbf6:	2105      	movs	r1, #5
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d107      	bne.n	800cc18 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f7ff fda4 	bl	800c75e <USBH_Start>
 800cc16:	e002      	b.n	800cc1e <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f001 fcb7 	bl	800e58c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc32:	2300      	movs	r3, #0
 800cc34:	2200      	movs	r2, #0
 800cc36:	f7fc fa9d 	bl	8009174 <osMessageQueuePut>
#endif
#endif
      break;
 800cc3a:	e008      	b.n	800cc4e <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800cc3c:	bf00      	nop
 800cc3e:	e006      	b.n	800cc4e <USBH_Process+0x4ce>
      break;
 800cc40:	bf00      	nop
 800cc42:	e004      	b.n	800cc4e <USBH_Process+0x4ce>
      break;
 800cc44:	bf00      	nop
 800cc46:	e002      	b.n	800cc4e <USBH_Process+0x4ce>
    break;
 800cc48:	bf00      	nop
 800cc4a:	e000      	b.n	800cc4e <USBH_Process+0x4ce>
      break;
 800cc4c:	bf00      	nop
  }
  return USBH_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b088      	sub	sp, #32
 800cc5c:	af04      	add	r7, sp, #16
 800cc5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cc60:	2301      	movs	r3, #1
 800cc62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cc64:	2301      	movs	r3, #1
 800cc66:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	785b      	ldrb	r3, [r3, #1]
 800cc6c:	2b07      	cmp	r3, #7
 800cc6e:	f200 8208 	bhi.w	800d082 <USBH_HandleEnum+0x42a>
 800cc72:	a201      	add	r2, pc, #4	; (adr r2, 800cc78 <USBH_HandleEnum+0x20>)
 800cc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc78:	0800cc99 	.word	0x0800cc99
 800cc7c:	0800cd57 	.word	0x0800cd57
 800cc80:	0800cdc1 	.word	0x0800cdc1
 800cc84:	0800ce4f 	.word	0x0800ce4f
 800cc88:	0800ceb9 	.word	0x0800ceb9
 800cc8c:	0800cf29 	.word	0x0800cf29
 800cc90:	0800cfc5 	.word	0x0800cfc5
 800cc94:	0800d043 	.word	0x0800d043
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cc98:	2108      	movs	r1, #8
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 faec 	bl	800d278 <USBH_Get_DevDesc>
 800cca0:	4603      	mov	r3, r0
 800cca2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cca4:	7bbb      	ldrb	r3, [r7, #14]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d130      	bne.n	800cd0c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	7919      	ldrb	r1, [r3, #4]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ccce:	b292      	uxth	r2, r2
 800ccd0:	9202      	str	r2, [sp, #8]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	9201      	str	r2, [sp, #4]
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2280      	movs	r2, #128	; 0x80
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f001 fa73 	bl	800e1c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	7959      	ldrb	r1, [r3, #5]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ccf6:	b292      	uxth	r2, r2
 800ccf8:	9202      	str	r2, [sp, #8]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	9201      	str	r2, [sp, #4]
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	4603      	mov	r3, r0
 800cd02:	2200      	movs	r2, #0
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f001 fa5f 	bl	800e1c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cd0a:	e1bc      	b.n	800d086 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd0c:	7bbb      	ldrb	r3, [r7, #14]
 800cd0e:	2b03      	cmp	r3, #3
 800cd10:	f040 81b9 	bne.w	800d086 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd2a:	2b03      	cmp	r3, #3
 800cd2c:	d903      	bls.n	800cd36 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	220d      	movs	r2, #13
 800cd32:	701a      	strb	r2, [r3, #0]
      break;
 800cd34:	e1a7      	b.n	800d086 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	795b      	ldrb	r3, [r3, #5]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f001 fa93 	bl	800e268 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	791b      	ldrb	r3, [r3, #4]
 800cd46:	4619      	mov	r1, r3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f001 fa8d 	bl	800e268 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	701a      	strb	r2, [r3, #0]
      break;
 800cd54:	e197      	b.n	800d086 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cd56:	2112      	movs	r1, #18
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 fa8d 	bl	800d278 <USBH_Get_DevDesc>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd62:	7bbb      	ldrb	r3, [r7, #14]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d103      	bne.n	800cd70 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cd6e:	e18c      	b.n	800d08a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd70:	7bbb      	ldrb	r3, [r7, #14]
 800cd72:	2b03      	cmp	r3, #3
 800cd74:	f040 8189 	bne.w	800d08a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd7e:	3301      	adds	r3, #1
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd8e:	2b03      	cmp	r3, #3
 800cd90:	d903      	bls.n	800cd9a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	220d      	movs	r2, #13
 800cd96:	701a      	strb	r2, [r3, #0]
      break;
 800cd98:	e177      	b.n	800d08a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	795b      	ldrb	r3, [r3, #5]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f001 fa61 	bl	800e268 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	791b      	ldrb	r3, [r3, #4]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f001 fa5b 	bl	800e268 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	701a      	strb	r2, [r3, #0]
      break;
 800cdbe:	e164      	b.n	800d08a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fb17 	bl	800d3f6 <USBH_SetAddress>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cdcc:	7bbb      	ldrb	r3, [r7, #14]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d132      	bne.n	800ce38 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cdd2:	2002      	movs	r0, #2
 800cdd4:	f001 fd41 	bl	800e85a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2201      	movs	r2, #1
 800cddc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2203      	movs	r2, #3
 800cde4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	7919      	ldrb	r1, [r3, #4]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cdfa:	b292      	uxth	r2, r2
 800cdfc:	9202      	str	r2, [sp, #8]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	9201      	str	r2, [sp, #4]
 800ce02:	9300      	str	r3, [sp, #0]
 800ce04:	4603      	mov	r3, r0
 800ce06:	2280      	movs	r2, #128	; 0x80
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f001 f9dd 	bl	800e1c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	7959      	ldrb	r1, [r3, #5]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce22:	b292      	uxth	r2, r2
 800ce24:	9202      	str	r2, [sp, #8]
 800ce26:	2200      	movs	r2, #0
 800ce28:	9201      	str	r2, [sp, #4]
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2200      	movs	r2, #0
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 f9c9 	bl	800e1c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ce36:	e12a      	b.n	800d08e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce38:	7bbb      	ldrb	r3, [r7, #14]
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	f040 8127 	bne.w	800d08e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	220d      	movs	r2, #13
 800ce44:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	705a      	strb	r2, [r3, #1]
      break;
 800ce4c:	e11f      	b.n	800d08e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ce4e:	2109      	movs	r1, #9
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 fa3d 	bl	800d2d0 <USBH_Get_CfgDesc>
 800ce56:	4603      	mov	r3, r0
 800ce58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce5a:	7bbb      	ldrb	r3, [r7, #14]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d103      	bne.n	800ce68 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2204      	movs	r2, #4
 800ce64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ce66:	e114      	b.n	800d092 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce68:	7bbb      	ldrb	r3, [r7, #14]
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	f040 8111 	bne.w	800d092 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce76:	3301      	adds	r3, #1
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d903      	bls.n	800ce92 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	220d      	movs	r2, #13
 800ce8e:	701a      	strb	r2, [r3, #0]
      break;
 800ce90:	e0ff      	b.n	800d092 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	795b      	ldrb	r3, [r3, #5]
 800ce96:	4619      	mov	r1, r3
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f001 f9e5 	bl	800e268 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	791b      	ldrb	r3, [r3, #4]
 800cea2:	4619      	mov	r1, r3
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f001 f9df 	bl	800e268 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	701a      	strb	r2, [r3, #0]
      break;
 800ceb6:	e0ec      	b.n	800d092 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cebe:	4619      	mov	r1, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 fa05 	bl	800d2d0 <USBH_Get_CfgDesc>
 800cec6:	4603      	mov	r3, r0
 800cec8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ceca:	7bbb      	ldrb	r3, [r7, #14]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d103      	bne.n	800ced8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2205      	movs	r2, #5
 800ced4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ced6:	e0de      	b.n	800d096 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ced8:	7bbb      	ldrb	r3, [r7, #14]
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	f040 80db 	bne.w	800d096 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cee6:	3301      	adds	r3, #1
 800cee8:	b2da      	uxtb	r2, r3
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	d903      	bls.n	800cf02 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	220d      	movs	r2, #13
 800cefe:	701a      	strb	r2, [r3, #0]
      break;
 800cf00:	e0c9      	b.n	800d096 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	795b      	ldrb	r3, [r3, #5]
 800cf06:	4619      	mov	r1, r3
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f001 f9ad 	bl	800e268 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	791b      	ldrb	r3, [r3, #4]
 800cf12:	4619      	mov	r1, r3
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f001 f9a7 	bl	800e268 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	701a      	strb	r2, [r3, #0]
      break;
 800cf26:	e0b6      	b.n	800d096 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d036      	beq.n	800cfa0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cf3e:	23ff      	movs	r3, #255	; 0xff
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 f9ef 	bl	800d324 <USBH_Get_StringDesc>
 800cf46:	4603      	mov	r3, r0
 800cf48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cf4a:	7bbb      	ldrb	r3, [r7, #14]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d111      	bne.n	800cf74 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2206      	movs	r2, #6
 800cf54:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2205      	movs	r2, #5
 800cf5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f7fc f901 	bl	8009174 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cf72:	e092      	b.n	800d09a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf74:	7bbb      	ldrb	r3, [r7, #14]
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	f040 808f 	bne.w	800d09a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2206      	movs	r2, #6
 800cf80:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2205      	movs	r2, #5
 800cf86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf96:	2300      	movs	r3, #0
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f7fc f8eb 	bl	8009174 <osMessageQueuePut>
      break;
 800cf9e:	e07c      	b.n	800d09a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2206      	movs	r2, #6
 800cfa4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2205      	movs	r2, #5
 800cfaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfba:	2300      	movs	r3, #0
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f7fc f8d9 	bl	8009174 <osMessageQueuePut>
      break;
 800cfc2:	e06a      	b.n	800d09a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d027      	beq.n	800d01e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cfda:	23ff      	movs	r3, #255	; 0xff
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f9a1 	bl	800d324 <USBH_Get_StringDesc>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cfe6:	7bbb      	ldrb	r3, [r7, #14]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d103      	bne.n	800cff4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2207      	movs	r2, #7
 800cff0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cff2:	e054      	b.n	800d09e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cff4:	7bbb      	ldrb	r3, [r7, #14]
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d151      	bne.n	800d09e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2207      	movs	r2, #7
 800cffe:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2205      	movs	r2, #5
 800d004:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d014:	2300      	movs	r3, #0
 800d016:	2200      	movs	r2, #0
 800d018:	f7fc f8ac 	bl	8009174 <osMessageQueuePut>
      break;
 800d01c:	e03f      	b.n	800d09e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2207      	movs	r2, #7
 800d022:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2205      	movs	r2, #5
 800d028:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d038:	2300      	movs	r3, #0
 800d03a:	2200      	movs	r2, #0
 800d03c:	f7fc f89a 	bl	8009174 <osMessageQueuePut>
      break;
 800d040:	e02d      	b.n	800d09e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d017      	beq.n	800d07c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d058:	23ff      	movs	r3, #255	; 0xff
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f962 	bl	800d324 <USBH_Get_StringDesc>
 800d060:	4603      	mov	r3, r0
 800d062:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d064:	7bbb      	ldrb	r3, [r7, #14]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d102      	bne.n	800d070 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d06a:	2300      	movs	r3, #0
 800d06c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d06e:	e018      	b.n	800d0a2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d070:	7bbb      	ldrb	r3, [r7, #14]
 800d072:	2b03      	cmp	r3, #3
 800d074:	d115      	bne.n	800d0a2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	73fb      	strb	r3, [r7, #15]
      break;
 800d07a:	e012      	b.n	800d0a2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d07c:	2300      	movs	r3, #0
 800d07e:	73fb      	strb	r3, [r7, #15]
      break;
 800d080:	e00f      	b.n	800d0a2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800d082:	bf00      	nop
 800d084:	e00e      	b.n	800d0a4 <USBH_HandleEnum+0x44c>
      break;
 800d086:	bf00      	nop
 800d088:	e00c      	b.n	800d0a4 <USBH_HandleEnum+0x44c>
      break;
 800d08a:	bf00      	nop
 800d08c:	e00a      	b.n	800d0a4 <USBH_HandleEnum+0x44c>
      break;
 800d08e:	bf00      	nop
 800d090:	e008      	b.n	800d0a4 <USBH_HandleEnum+0x44c>
      break;
 800d092:	bf00      	nop
 800d094:	e006      	b.n	800d0a4 <USBH_HandleEnum+0x44c>
      break;
 800d096:	bf00      	nop
 800d098:	e004      	b.n	800d0a4 <USBH_HandleEnum+0x44c>
      break;
 800d09a:	bf00      	nop
 800d09c:	e002      	b.n	800d0a4 <USBH_HandleEnum+0x44c>
      break;
 800d09e:	bf00      	nop
 800d0a0:	e000      	b.n	800d0a4 <USBH_HandleEnum+0x44c>
      break;
 800d0a2:	bf00      	nop
  }
  return Status;
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop

0800d0b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d0c2:	bf00      	nop
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b082      	sub	sp, #8
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d0dc:	1c5a      	adds	r2, r3, #1
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f804 	bl	800d0f2 <USBH_HandleSof>
}
 800d0ea:	bf00      	nop
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b082      	sub	sp, #8
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	2b0b      	cmp	r3, #11
 800d102:	d10a      	bne.n	800d11a <USBH_HandleSof+0x28>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d005      	beq.n	800d11a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d114:	699b      	ldr	r3, [r3, #24]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	4798      	blx	r3
  }
}
 800d11a:	bf00      	nop
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b082      	sub	sp, #8
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2201      	movs	r2, #1
 800d12e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2201      	movs	r2, #1
 800d136:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d146:	2300      	movs	r3, #0
 800d148:	2200      	movs	r2, #0
 800d14a:	f7fc f813 	bl	8009174 <osMessageQueuePut>
#endif
#endif

  return;
 800d14e:	bf00      	nop
}
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d156:	b480      	push	{r7}
 800d158:	b083      	sub	sp, #12
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d166:	bf00      	nop
}
 800d168:	370c      	adds	r7, #12
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr

0800d172 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b082      	sub	sp, #8
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2201      	movs	r2, #1
 800d17e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2201      	movs	r2, #1
 800d196:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f7fb ffe3 	bl	8009174 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f001 f9f2 	bl	800e5c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	791b      	ldrb	r3, [r3, #4]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f001 f83f 	bl	800e268 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	795b      	ldrb	r3, [r3, #5]
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f001 f839 	bl	800e268 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d20a:	2300      	movs	r3, #0
 800d20c:	2200      	movs	r2, #0
 800d20e:	f7fb ffb1 	bl	8009174 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d230:	f04f 33ff 	mov.w	r3, #4294967295
 800d234:	2200      	movs	r2, #0
 800d236:	f7fb fffd 	bl	8009234 <osMessageQueueGet>
 800d23a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1f0      	bne.n	800d224 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7ff fa9c 	bl	800c780 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d248:	e7ec      	b.n	800d224 <USBH_Process_OS+0x8>

0800d24a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b082      	sub	sp, #8
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2201      	movs	r2, #1
 800d256:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d266:	2300      	movs	r3, #0
 800d268:	2200      	movs	r2, #0
 800d26a:	f7fb ff83 	bl	8009174 <osMessageQueuePut>
#endif

  return USBH_OK;
 800d26e:	2300      	movs	r3, #0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af02      	add	r7, sp, #8
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	460b      	mov	r3, r1
 800d282:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d284:	887b      	ldrh	r3, [r7, #2]
 800d286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d28a:	d901      	bls.n	800d290 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d28c:	2303      	movs	r3, #3
 800d28e:	e01b      	b.n	800d2c8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d296:	887b      	ldrh	r3, [r7, #2]
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	4613      	mov	r3, r2
 800d29c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f872 	bl	800d38c <USBH_GetDescriptor>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d2ac:	7bfb      	ldrb	r3, [r7, #15]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d109      	bne.n	800d2c6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d2b8:	887a      	ldrh	r2, [r7, #2]
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f929 	bl	800d514 <USBH_ParseDevDesc>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3710      	adds	r7, #16
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af02      	add	r7, sp, #8
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	460b      	mov	r3, r1
 800d2da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	331c      	adds	r3, #28
 800d2e0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d2e2:	887b      	ldrh	r3, [r7, #2]
 800d2e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2e8:	d901      	bls.n	800d2ee <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d2ea:	2303      	movs	r3, #3
 800d2ec:	e016      	b.n	800d31c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d2ee:	887b      	ldrh	r3, [r7, #2]
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f846 	bl	800d38c <USBH_GetDescriptor>
 800d300:	4603      	mov	r3, r0
 800d302:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d304:	7bfb      	ldrb	r3, [r7, #15]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d107      	bne.n	800d31a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d30a:	887b      	ldrh	r3, [r7, #2]
 800d30c:	461a      	mov	r2, r3
 800d30e:	68b9      	ldr	r1, [r7, #8]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 f9b3 	bl	800d67c <USBH_ParseCfgDesc>
 800d316:	4603      	mov	r3, r0
 800d318:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3710      	adds	r7, #16
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b088      	sub	sp, #32
 800d328:	af02      	add	r7, sp, #8
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	607a      	str	r2, [r7, #4]
 800d32e:	461a      	mov	r2, r3
 800d330:	460b      	mov	r3, r1
 800d332:	72fb      	strb	r3, [r7, #11]
 800d334:	4613      	mov	r3, r2
 800d336:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d338:	893b      	ldrh	r3, [r7, #8]
 800d33a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d33e:	d802      	bhi.n	800d346 <USBH_Get_StringDesc+0x22>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d101      	bne.n	800d34a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d346:	2303      	movs	r3, #3
 800d348:	e01c      	b.n	800d384 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d34a:	7afb      	ldrb	r3, [r7, #11]
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d352:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d35a:	893b      	ldrh	r3, [r7, #8]
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	460b      	mov	r3, r1
 800d360:	2100      	movs	r1, #0
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f000 f812 	bl	800d38c <USBH_GetDescriptor>
 800d368:	4603      	mov	r3, r0
 800d36a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d36c:	7dfb      	ldrb	r3, [r7, #23]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d107      	bne.n	800d382 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d378:	893a      	ldrh	r2, [r7, #8]
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f000 fb93 	bl	800daa8 <USBH_ParseStringDesc>
  }

  return status;
 800d382:	7dfb      	ldrb	r3, [r7, #23]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3718      	adds	r7, #24
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	607b      	str	r3, [r7, #4]
 800d396:	460b      	mov	r3, r1
 800d398:	72fb      	strb	r3, [r7, #11]
 800d39a:	4613      	mov	r3, r2
 800d39c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	789b      	ldrb	r3, [r3, #2]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d11c      	bne.n	800d3e0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d3a6:	7afb      	ldrb	r3, [r7, #11]
 800d3a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d3ac:	b2da      	uxtb	r2, r3
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2206      	movs	r2, #6
 800d3b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	893a      	ldrh	r2, [r7, #8]
 800d3bc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d3be:	893b      	ldrh	r3, [r7, #8]
 800d3c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d3c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d3c8:	d104      	bne.n	800d3d4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f240 4209 	movw	r2, #1033	; 0x409
 800d3d0:	829a      	strh	r2, [r3, #20]
 800d3d2:	e002      	b.n	800d3da <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	8b3a      	ldrh	r2, [r7, #24]
 800d3de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d3e0:	8b3b      	ldrh	r3, [r7, #24]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	6879      	ldr	r1, [r7, #4]
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f000 fbac 	bl	800db44 <USBH_CtlReq>
 800d3ec:	4603      	mov	r3, r0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	460b      	mov	r3, r1
 800d400:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	789b      	ldrb	r3, [r3, #2]
 800d406:	2b01      	cmp	r3, #1
 800d408:	d10f      	bne.n	800d42a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2205      	movs	r2, #5
 800d414:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d416:	78fb      	ldrb	r3, [r7, #3]
 800d418:	b29a      	uxth	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2200      	movs	r2, #0
 800d422:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d42a:	2200      	movs	r2, #0
 800d42c:	2100      	movs	r1, #0
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fb88 	bl	800db44 <USBH_CtlReq>
 800d434:	4603      	mov	r3, r0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3708      	adds	r7, #8
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	b082      	sub	sp, #8
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
 800d446:	460b      	mov	r3, r1
 800d448:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	789b      	ldrb	r3, [r3, #2]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d10e      	bne.n	800d470 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2209      	movs	r2, #9
 800d45c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	887a      	ldrh	r2, [r7, #2]
 800d462:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d470:	2200      	movs	r2, #0
 800d472:	2100      	movs	r1, #0
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 fb65 	bl	800db44 <USBH_CtlReq>
 800d47a:	4603      	mov	r3, r0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	460b      	mov	r3, r1
 800d48e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	789b      	ldrb	r3, [r3, #2]
 800d494:	2b01      	cmp	r3, #1
 800d496:	d10f      	bne.n	800d4b8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2203      	movs	r2, #3
 800d4a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d4a4:	78fb      	ldrb	r3, [r7, #3]
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 fb41 	bl	800db44 <USBH_CtlReq>
 800d4c2:	4603      	mov	r3, r0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	789b      	ldrb	r3, [r3, #2]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d10f      	bne.n	800d500 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2202      	movs	r2, #2
 800d4e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d4f2:	78fb      	ldrb	r3, [r7, #3]
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d500:	2200      	movs	r2, #0
 800d502:	2100      	movs	r1, #0
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 fb1d 	bl	800db44 <USBH_CtlReq>
 800d50a:	4603      	mov	r3, r0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d514:	b480      	push	{r7}
 800d516:	b087      	sub	sp, #28
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	4613      	mov	r3, r2
 800d520:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f203 3326 	addw	r3, r3, #806	; 0x326
 800d528:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d52a:	2300      	movs	r3, #0
 800d52c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d534:	2302      	movs	r3, #2
 800d536:	e098      	b.n	800d66a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	781a      	ldrb	r2, [r3, #0]
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	785a      	ldrb	r2, [r3, #1]
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	3302      	adds	r3, #2
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	b29a      	uxth	r2, r3
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	3303      	adds	r3, #3
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	b29b      	uxth	r3, r3
 800d558:	021b      	lsls	r3, r3, #8
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	4313      	orrs	r3, r2
 800d55e:	b29a      	uxth	r2, r3
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	791a      	ldrb	r2, [r3, #4]
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	795a      	ldrb	r2, [r3, #5]
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	799a      	ldrb	r2, [r3, #6]
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	79da      	ldrb	r2, [r3, #7]
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d004      	beq.n	800d598 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d594:	2b01      	cmp	r3, #1
 800d596:	d11b      	bne.n	800d5d0 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	79db      	ldrb	r3, [r3, #7]
 800d59c:	2b20      	cmp	r3, #32
 800d59e:	dc0f      	bgt.n	800d5c0 <USBH_ParseDevDesc+0xac>
 800d5a0:	2b08      	cmp	r3, #8
 800d5a2:	db0f      	blt.n	800d5c4 <USBH_ParseDevDesc+0xb0>
 800d5a4:	3b08      	subs	r3, #8
 800d5a6:	4a34      	ldr	r2, [pc, #208]	; (800d678 <USBH_ParseDevDesc+0x164>)
 800d5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d5ac:	f003 0301 	and.w	r3, r3, #1
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	bf14      	ite	ne
 800d5b4:	2301      	movne	r3, #1
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d106      	bne.n	800d5cc <USBH_ParseDevDesc+0xb8>
 800d5be:	e001      	b.n	800d5c4 <USBH_ParseDevDesc+0xb0>
 800d5c0:	2b40      	cmp	r3, #64	; 0x40
 800d5c2:	d003      	beq.n	800d5cc <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	2208      	movs	r2, #8
 800d5c8:	71da      	strb	r2, [r3, #7]
        break;
 800d5ca:	e000      	b.n	800d5ce <USBH_ParseDevDesc+0xba>
        break;
 800d5cc:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d5ce:	e00e      	b.n	800d5ee <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	d107      	bne.n	800d5ea <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	79db      	ldrb	r3, [r3, #7]
 800d5de:	2b08      	cmp	r3, #8
 800d5e0:	d005      	beq.n	800d5ee <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	2208      	movs	r2, #8
 800d5e6:	71da      	strb	r2, [r3, #7]
 800d5e8:	e001      	b.n	800d5ee <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d5ee:	88fb      	ldrh	r3, [r7, #6]
 800d5f0:	2b08      	cmp	r3, #8
 800d5f2:	d939      	bls.n	800d668 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	3308      	adds	r3, #8
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	3309      	adds	r3, #9
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	b29b      	uxth	r3, r3
 800d604:	021b      	lsls	r3, r3, #8
 800d606:	b29b      	uxth	r3, r3
 800d608:	4313      	orrs	r3, r2
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	330a      	adds	r3, #10
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	b29a      	uxth	r2, r3
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	330b      	adds	r3, #11
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	b29b      	uxth	r3, r3
 800d620:	021b      	lsls	r3, r3, #8
 800d622:	b29b      	uxth	r3, r3
 800d624:	4313      	orrs	r3, r2
 800d626:	b29a      	uxth	r2, r3
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	330c      	adds	r3, #12
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	b29a      	uxth	r2, r3
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	330d      	adds	r3, #13
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	021b      	lsls	r3, r3, #8
 800d63e:	b29b      	uxth	r3, r3
 800d640:	4313      	orrs	r3, r2
 800d642:	b29a      	uxth	r2, r3
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	7b9a      	ldrb	r2, [r3, #14]
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	7bda      	ldrb	r2, [r3, #15]
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	7c1a      	ldrb	r2, [r3, #16]
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	7c5a      	ldrb	r2, [r3, #17]
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d668:	7dfb      	ldrb	r3, [r7, #23]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	371c      	adds	r7, #28
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	01000101 	.word	0x01000101

0800d67c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b08c      	sub	sp, #48	; 0x30
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	4613      	mov	r3, r2
 800d688:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d690:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d698:	2300      	movs	r3, #0
 800d69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d6aa:	2302      	movs	r3, #2
 800d6ac:	e0db      	b.n	800d866 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	781a      	ldrb	r2, [r3, #0]
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	785a      	ldrb	r2, [r3, #1]
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	3302      	adds	r3, #2
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	3303      	adds	r3, #3
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	021b      	lsls	r3, r3, #8
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6de:	bf28      	it	cs
 800d6e0:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	791a      	ldrb	r2, [r3, #4]
 800d6ee:	6a3b      	ldr	r3, [r7, #32]
 800d6f0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	795a      	ldrb	r2, [r3, #5]
 800d6f6:	6a3b      	ldr	r3, [r7, #32]
 800d6f8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	799a      	ldrb	r2, [r3, #6]
 800d6fe:	6a3b      	ldr	r3, [r7, #32]
 800d700:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	79da      	ldrb	r2, [r3, #7]
 800d706:	6a3b      	ldr	r3, [r7, #32]
 800d708:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	7a1a      	ldrb	r2, [r3, #8]
 800d70e:	6a3b      	ldr	r3, [r7, #32]
 800d710:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d712:	6a3b      	ldr	r3, [r7, #32]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b09      	cmp	r3, #9
 800d718:	d002      	beq.n	800d720 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	2209      	movs	r2, #9
 800d71e:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d720:	88fb      	ldrh	r3, [r7, #6]
 800d722:	2b09      	cmp	r3, #9
 800d724:	f240 809d 	bls.w	800d862 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800d728:	2309      	movs	r3, #9
 800d72a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d72c:	2300      	movs	r3, #0
 800d72e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d730:	e081      	b.n	800d836 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d732:	f107 0316 	add.w	r3, r7, #22
 800d736:	4619      	mov	r1, r3
 800d738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d73a:	f000 f9e8 	bl	800db0e <USBH_GetNextDesc>
 800d73e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d742:	785b      	ldrb	r3, [r3, #1]
 800d744:	2b04      	cmp	r3, #4
 800d746:	d176      	bne.n	800d836 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	2b09      	cmp	r3, #9
 800d74e:	d002      	beq.n	800d756 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	2209      	movs	r2, #9
 800d754:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d75a:	221a      	movs	r2, #26
 800d75c:	fb02 f303 	mul.w	r3, r2, r3
 800d760:	3308      	adds	r3, #8
 800d762:	6a3a      	ldr	r2, [r7, #32]
 800d764:	4413      	add	r3, r2
 800d766:	3302      	adds	r3, #2
 800d768:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d76a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d76c:	69f8      	ldr	r0, [r7, #28]
 800d76e:	f000 f87e 	bl	800d86e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d772:	2300      	movs	r3, #0
 800d774:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d778:	2300      	movs	r3, #0
 800d77a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d77c:	e043      	b.n	800d806 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d77e:	f107 0316 	add.w	r3, r7, #22
 800d782:	4619      	mov	r1, r3
 800d784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d786:	f000 f9c2 	bl	800db0e <USBH_GetNextDesc>
 800d78a:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78e:	785b      	ldrb	r3, [r3, #1]
 800d790:	2b05      	cmp	r3, #5
 800d792:	d138      	bne.n	800d806 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	795b      	ldrb	r3, [r3, #5]
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d113      	bne.n	800d7c4 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d7a0:	2b02      	cmp	r3, #2
 800d7a2:	d003      	beq.n	800d7ac <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	799b      	ldrb	r3, [r3, #6]
 800d7a8:	2b03      	cmp	r3, #3
 800d7aa:	d10b      	bne.n	800d7c4 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	79db      	ldrb	r3, [r3, #7]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d10b      	bne.n	800d7cc <USBH_ParseCfgDesc+0x150>
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	2b09      	cmp	r3, #9
 800d7ba:	d007      	beq.n	800d7cc <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800d7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7be:	2209      	movs	r2, #9
 800d7c0:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d7c2:	e003      	b.n	800d7cc <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	2207      	movs	r2, #7
 800d7c8:	701a      	strb	r2, [r3, #0]
 800d7ca:	e000      	b.n	800d7ce <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d7cc:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d7ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d7d6:	3201      	adds	r2, #1
 800d7d8:	00d2      	lsls	r2, r2, #3
 800d7da:	211a      	movs	r1, #26
 800d7dc:	fb01 f303 	mul.w	r3, r1, r3
 800d7e0:	4413      	add	r3, r2
 800d7e2:	3308      	adds	r3, #8
 800d7e4:	6a3a      	ldr	r2, [r7, #32]
 800d7e6:	4413      	add	r3, r2
 800d7e8:	3304      	adds	r3, #4
 800d7ea:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ee:	69b9      	ldr	r1, [r7, #24]
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f000 f870 	bl	800d8d6 <USBH_ParseEPDesc>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800d7fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d800:	3301      	adds	r3, #1
 800d802:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	791b      	ldrb	r3, [r3, #4]
 800d80a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d80e:	429a      	cmp	r2, r3
 800d810:	d204      	bcs.n	800d81c <USBH_ParseCfgDesc+0x1a0>
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	885a      	ldrh	r2, [r3, #2]
 800d816:	8afb      	ldrh	r3, [r7, #22]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d8b0      	bhi.n	800d77e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	791b      	ldrb	r3, [r3, #4]
 800d820:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d824:	429a      	cmp	r2, r3
 800d826:	d201      	bcs.n	800d82c <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800d828:	2303      	movs	r3, #3
 800d82a:	e01c      	b.n	800d866 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800d82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d830:	3301      	adds	r3, #1
 800d832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d805      	bhi.n	800d84a <USBH_ParseCfgDesc+0x1ce>
 800d83e:	6a3b      	ldr	r3, [r7, #32]
 800d840:	885a      	ldrh	r2, [r3, #2]
 800d842:	8afb      	ldrh	r3, [r7, #22]
 800d844:	429a      	cmp	r2, r3
 800d846:	f63f af74 	bhi.w	800d732 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d84a:	6a3b      	ldr	r3, [r7, #32]
 800d84c:	791b      	ldrb	r3, [r3, #4]
 800d84e:	2b02      	cmp	r3, #2
 800d850:	bf28      	it	cs
 800d852:	2302      	movcs	r3, #2
 800d854:	b2db      	uxtb	r3, r3
 800d856:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d201      	bcs.n	800d862 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800d85e:	2303      	movs	r3, #3
 800d860:	e001      	b.n	800d866 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800d862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d866:	4618      	mov	r0, r3
 800d868:	3730      	adds	r7, #48	; 0x30
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d86e:	b480      	push	{r7}
 800d870:	b083      	sub	sp, #12
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	781a      	ldrb	r2, [r3, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	785a      	ldrb	r2, [r3, #1]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	789a      	ldrb	r2, [r3, #2]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	78da      	ldrb	r2, [r3, #3]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	3304      	adds	r3, #4
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	bf28      	it	cs
 800d8a2:	2302      	movcs	r3, #2
 800d8a4:	b2da      	uxtb	r2, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	795a      	ldrb	r2, [r3, #5]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	799a      	ldrb	r2, [r3, #6]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	79da      	ldrb	r2, [r3, #7]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	7a1a      	ldrb	r2, [r3, #8]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	721a      	strb	r2, [r3, #8]
}
 800d8ca:	bf00      	nop
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b087      	sub	sp, #28
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	60f8      	str	r0, [r7, #12]
 800d8de:	60b9      	str	r1, [r7, #8]
 800d8e0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	781a      	ldrb	r2, [r3, #0]
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	785a      	ldrb	r2, [r3, #1]
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	789a      	ldrb	r2, [r3, #2]
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	78da      	ldrb	r2, [r3, #3]
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	3304      	adds	r3, #4
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	3305      	adds	r3, #5
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	b29b      	uxth	r3, r3
 800d916:	021b      	lsls	r3, r3, #8
 800d918:	b29b      	uxth	r3, r3
 800d91a:	4313      	orrs	r3, r2
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	799a      	ldrb	r2, [r3, #6]
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	889b      	ldrh	r3, [r3, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d009      	beq.n	800d946 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d93a:	d804      	bhi.n	800d946 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d944:	d901      	bls.n	800d94a <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800d946:	2303      	movs	r3, #3
 800d948:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d950:	2b00      	cmp	r3, #0
 800d952:	d136      	bne.n	800d9c2 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	78db      	ldrb	r3, [r3, #3]
 800d958:	f003 0303 	and.w	r3, r3, #3
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d108      	bne.n	800d972 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	889b      	ldrh	r3, [r3, #4]
 800d964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d968:	f240 8097 	bls.w	800da9a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d96c:	2303      	movs	r3, #3
 800d96e:	75fb      	strb	r3, [r7, #23]
 800d970:	e093      	b.n	800da9a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	78db      	ldrb	r3, [r3, #3]
 800d976:	f003 0303 	and.w	r3, r3, #3
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d107      	bne.n	800d98e <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	889b      	ldrh	r3, [r3, #4]
 800d982:	2b40      	cmp	r3, #64	; 0x40
 800d984:	f240 8089 	bls.w	800da9a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d988:	2303      	movs	r3, #3
 800d98a:	75fb      	strb	r3, [r7, #23]
 800d98c:	e085      	b.n	800da9a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	78db      	ldrb	r3, [r3, #3]
 800d992:	f003 0303 	and.w	r3, r3, #3
 800d996:	2b01      	cmp	r3, #1
 800d998:	d005      	beq.n	800d9a6 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	78db      	ldrb	r3, [r3, #3]
 800d99e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d9a2:	2b03      	cmp	r3, #3
 800d9a4:	d10a      	bne.n	800d9bc <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	799b      	ldrb	r3, [r3, #6]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d003      	beq.n	800d9b6 <USBH_ParseEPDesc+0xe0>
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	799b      	ldrb	r3, [r3, #6]
 800d9b2:	2b10      	cmp	r3, #16
 800d9b4:	d970      	bls.n	800da98 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d9b6:	2303      	movs	r3, #3
 800d9b8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d9ba:	e06d      	b.n	800da98 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d9bc:	2303      	movs	r3, #3
 800d9be:	75fb      	strb	r3, [r7, #23]
 800d9c0:	e06b      	b.n	800da9a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d13c      	bne.n	800da46 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	78db      	ldrb	r3, [r3, #3]
 800d9d0:	f003 0303 	and.w	r3, r3, #3
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d005      	beq.n	800d9e4 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	78db      	ldrb	r3, [r3, #3]
 800d9dc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d106      	bne.n	800d9f2 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	889b      	ldrh	r3, [r3, #4]
 800d9e8:	2b40      	cmp	r3, #64	; 0x40
 800d9ea:	d956      	bls.n	800da9a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d9ec:	2303      	movs	r3, #3
 800d9ee:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d9f0:	e053      	b.n	800da9a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	78db      	ldrb	r3, [r3, #3]
 800d9f6:	f003 0303 	and.w	r3, r3, #3
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d10e      	bne.n	800da1c <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	799b      	ldrb	r3, [r3, #6]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d007      	beq.n	800da16 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800da0a:	2b10      	cmp	r3, #16
 800da0c:	d803      	bhi.n	800da16 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800da12:	2b40      	cmp	r3, #64	; 0x40
 800da14:	d941      	bls.n	800da9a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800da16:	2303      	movs	r3, #3
 800da18:	75fb      	strb	r3, [r7, #23]
 800da1a:	e03e      	b.n	800da9a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	78db      	ldrb	r3, [r3, #3]
 800da20:	f003 0303 	and.w	r3, r3, #3
 800da24:	2b03      	cmp	r3, #3
 800da26:	d10b      	bne.n	800da40 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	799b      	ldrb	r3, [r3, #6]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d004      	beq.n	800da3a <USBH_ParseEPDesc+0x164>
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	889b      	ldrh	r3, [r3, #4]
 800da34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da38:	d32f      	bcc.n	800da9a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800da3a:	2303      	movs	r3, #3
 800da3c:	75fb      	strb	r3, [r7, #23]
 800da3e:	e02c      	b.n	800da9a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800da40:	2303      	movs	r3, #3
 800da42:	75fb      	strb	r3, [r7, #23]
 800da44:	e029      	b.n	800da9a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d120      	bne.n	800da92 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	78db      	ldrb	r3, [r3, #3]
 800da54:	f003 0303 	and.w	r3, r3, #3
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d106      	bne.n	800da6a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	889b      	ldrh	r3, [r3, #4]
 800da60:	2b08      	cmp	r3, #8
 800da62:	d01a      	beq.n	800da9a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800da64:	2303      	movs	r3, #3
 800da66:	75fb      	strb	r3, [r7, #23]
 800da68:	e017      	b.n	800da9a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	78db      	ldrb	r3, [r3, #3]
 800da6e:	f003 0303 	and.w	r3, r3, #3
 800da72:	2b03      	cmp	r3, #3
 800da74:	d10a      	bne.n	800da8c <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	799b      	ldrb	r3, [r3, #6]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d003      	beq.n	800da86 <USBH_ParseEPDesc+0x1b0>
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	889b      	ldrh	r3, [r3, #4]
 800da82:	2b08      	cmp	r3, #8
 800da84:	d909      	bls.n	800da9a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800da86:	2303      	movs	r3, #3
 800da88:	75fb      	strb	r3, [r7, #23]
 800da8a:	e006      	b.n	800da9a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800da8c:	2303      	movs	r3, #3
 800da8e:	75fb      	strb	r3, [r7, #23]
 800da90:	e003      	b.n	800da9a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800da92:	2303      	movs	r3, #3
 800da94:	75fb      	strb	r3, [r7, #23]
 800da96:	e000      	b.n	800da9a <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800da98:	bf00      	nop
  }

  return status;
 800da9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	371c      	adds	r7, #28
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b087      	sub	sp, #28
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	4613      	mov	r3, r2
 800dab4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	3301      	adds	r3, #1
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	2b03      	cmp	r3, #3
 800dabe:	d120      	bne.n	800db02 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	1e9a      	subs	r2, r3, #2
 800dac6:	88fb      	ldrh	r3, [r7, #6]
 800dac8:	4293      	cmp	r3, r2
 800daca:	bf28      	it	cs
 800dacc:	4613      	movcs	r3, r2
 800dace:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	3302      	adds	r3, #2
 800dad4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dad6:	2300      	movs	r3, #0
 800dad8:	82fb      	strh	r3, [r7, #22]
 800dada:	e00b      	b.n	800daf4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dadc:	8afb      	ldrh	r3, [r7, #22]
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	4413      	add	r3, r2
 800dae2:	781a      	ldrb	r2, [r3, #0]
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	3301      	adds	r3, #1
 800daec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800daee:	8afb      	ldrh	r3, [r7, #22]
 800daf0:	3302      	adds	r3, #2
 800daf2:	82fb      	strh	r3, [r7, #22]
 800daf4:	8afa      	ldrh	r2, [r7, #22]
 800daf6:	8abb      	ldrh	r3, [r7, #20]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d3ef      	bcc.n	800dadc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	2200      	movs	r2, #0
 800db00:	701a      	strb	r2, [r3, #0]
  }
}
 800db02:	bf00      	nop
 800db04:	371c      	adds	r7, #28
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr

0800db0e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800db0e:	b480      	push	{r7}
 800db10:	b085      	sub	sp, #20
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	881a      	ldrh	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	b29b      	uxth	r3, r3
 800db22:	4413      	add	r3, r2
 800db24:	b29a      	uxth	r2, r3
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4413      	add	r3, r2
 800db34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800db36:	68fb      	ldr	r3, [r7, #12]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3714      	adds	r7, #20
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b086      	sub	sp, #24
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	4613      	mov	r3, r2
 800db50:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800db52:	2301      	movs	r3, #1
 800db54:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	789b      	ldrb	r3, [r3, #2]
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d002      	beq.n	800db64 <USBH_CtlReq+0x20>
 800db5e:	2b02      	cmp	r3, #2
 800db60:	d01d      	beq.n	800db9e <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800db62:	e043      	b.n	800dbec <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	68ba      	ldr	r2, [r7, #8]
 800db68:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	88fa      	ldrh	r2, [r7, #6]
 800db6e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2201      	movs	r2, #1
 800db74:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2202      	movs	r2, #2
 800db7a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800db7c:	2301      	movs	r3, #1
 800db7e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2203      	movs	r2, #3
 800db84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db94:	2300      	movs	r3, #0
 800db96:	2200      	movs	r2, #0
 800db98:	f7fb faec 	bl	8009174 <osMessageQueuePut>
      break;
 800db9c:	e026      	b.n	800dbec <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f000 f82a 	bl	800dbf8 <USBH_HandleControl>
 800dba4:	4603      	mov	r3, r0
 800dba6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d002      	beq.n	800dbb4 <USBH_CtlReq+0x70>
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
 800dbb0:	2b03      	cmp	r3, #3
 800dbb2:	d106      	bne.n	800dbc2 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	761a      	strb	r2, [r3, #24]
 800dbc0:	e005      	b.n	800dbce <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800dbc2:	7dfb      	ldrb	r3, [r7, #23]
 800dbc4:	2b02      	cmp	r3, #2
 800dbc6:	d102      	bne.n	800dbce <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2203      	movs	r2, #3
 800dbd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f7fb fac5 	bl	8009174 <osMessageQueuePut>
      break;
 800dbea:	bf00      	nop
  }
  return status;
 800dbec:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3718      	adds	r7, #24
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
	...

0800dbf8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b086      	sub	sp, #24
 800dbfc:	af02      	add	r7, sp, #8
 800dbfe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800dc00:	2301      	movs	r3, #1
 800dc02:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dc04:	2300      	movs	r3, #0
 800dc06:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	7e1b      	ldrb	r3, [r3, #24]
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	2b0a      	cmp	r3, #10
 800dc10:	f200 8229 	bhi.w	800e066 <USBH_HandleControl+0x46e>
 800dc14:	a201      	add	r2, pc, #4	; (adr r2, 800dc1c <USBH_HandleControl+0x24>)
 800dc16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1a:	bf00      	nop
 800dc1c:	0800dc49 	.word	0x0800dc49
 800dc20:	0800dc63 	.word	0x0800dc63
 800dc24:	0800dd05 	.word	0x0800dd05
 800dc28:	0800dd2b 	.word	0x0800dd2b
 800dc2c:	0800ddb7 	.word	0x0800ddb7
 800dc30:	0800dde1 	.word	0x0800dde1
 800dc34:	0800dea3 	.word	0x0800dea3
 800dc38:	0800dec5 	.word	0x0800dec5
 800dc3c:	0800df57 	.word	0x0800df57
 800dc40:	0800df7d 	.word	0x0800df7d
 800dc44:	0800e00f 	.word	0x0800e00f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f103 0110 	add.w	r1, r3, #16
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	795b      	ldrb	r3, [r3, #5]
 800dc52:	461a      	mov	r2, r3
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fa17 	bl	800e088 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2202      	movs	r2, #2
 800dc5e:	761a      	strb	r2, [r3, #24]
      break;
 800dc60:	e20c      	b.n	800e07c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	795b      	ldrb	r3, [r3, #5]
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 fd99 	bl	800e7a0 <USBH_LL_GetURBState>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800dc72:	7bbb      	ldrb	r3, [r7, #14]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d12c      	bne.n	800dcd2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	7c1b      	ldrb	r3, [r3, #16]
 800dc7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dc80:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	8adb      	ldrh	r3, [r3, #22]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d00a      	beq.n	800dca0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800dc8a:	7b7b      	ldrb	r3, [r7, #13]
 800dc8c:	2b80      	cmp	r3, #128	; 0x80
 800dc8e:	d103      	bne.n	800dc98 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2203      	movs	r2, #3
 800dc94:	761a      	strb	r2, [r3, #24]
 800dc96:	e00d      	b.n	800dcb4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2205      	movs	r2, #5
 800dc9c:	761a      	strb	r2, [r3, #24]
 800dc9e:	e009      	b.n	800dcb4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800dca0:	7b7b      	ldrb	r3, [r7, #13]
 800dca2:	2b80      	cmp	r3, #128	; 0x80
 800dca4:	d103      	bne.n	800dcae <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2209      	movs	r2, #9
 800dcaa:	761a      	strb	r2, [r3, #24]
 800dcac:	e002      	b.n	800dcb4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2207      	movs	r2, #7
 800dcb2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2203      	movs	r2, #3
 800dcb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dcc8:	2300      	movs	r3, #0
 800dcca:	2200      	movs	r2, #0
 800dccc:	f7fb fa52 	bl	8009174 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dcd0:	e1cb      	b.n	800e06a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800dcd2:	7bbb      	ldrb	r3, [r7, #14]
 800dcd4:	2b04      	cmp	r3, #4
 800dcd6:	d003      	beq.n	800dce0 <USBH_HandleControl+0xe8>
 800dcd8:	7bbb      	ldrb	r3, [r7, #14]
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	f040 81c5 	bne.w	800e06a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	220b      	movs	r2, #11
 800dce4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2203      	movs	r2, #3
 800dcea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	f7fb fa39 	bl	8009174 <osMessageQueuePut>
      break;
 800dd02:	e1b2      	b.n	800e06a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6899      	ldr	r1, [r3, #8]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	899a      	ldrh	r2, [r3, #12]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	791b      	ldrb	r3, [r3, #4]
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f000 f9f2 	bl	800e106 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2204      	movs	r2, #4
 800dd26:	761a      	strb	r2, [r3, #24]
      break;
 800dd28:	e1a8      	b.n	800e07c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	791b      	ldrb	r3, [r3, #4]
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 fd35 	bl	800e7a0 <USBH_LL_GetURBState>
 800dd36:	4603      	mov	r3, r0
 800dd38:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dd3a:	7bbb      	ldrb	r3, [r7, #14]
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d110      	bne.n	800dd62 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2209      	movs	r2, #9
 800dd44:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2203      	movs	r2, #3
 800dd4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	f7fb fa09 	bl	8009174 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dd62:	7bbb      	ldrb	r3, [r7, #14]
 800dd64:	2b05      	cmp	r3, #5
 800dd66:	d110      	bne.n	800dd8a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2203      	movs	r2, #3
 800dd70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd80:	2300      	movs	r3, #0
 800dd82:	2200      	movs	r2, #0
 800dd84:	f7fb f9f6 	bl	8009174 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dd88:	e171      	b.n	800e06e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800dd8a:	7bbb      	ldrb	r3, [r7, #14]
 800dd8c:	2b04      	cmp	r3, #4
 800dd8e:	f040 816e 	bne.w	800e06e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	220b      	movs	r2, #11
 800dd96:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2203      	movs	r2, #3
 800dd9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ddac:	2300      	movs	r3, #0
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f7fb f9e0 	bl	8009174 <osMessageQueuePut>
      break;
 800ddb4:	e15b      	b.n	800e06e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6899      	ldr	r1, [r3, #8]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	899a      	ldrh	r2, [r3, #12]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	795b      	ldrb	r3, [r3, #5]
 800ddc2:	2001      	movs	r0, #1
 800ddc4:	9000      	str	r0, [sp, #0]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 f978 	bl	800e0bc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2206      	movs	r2, #6
 800dddc:	761a      	strb	r2, [r3, #24]
      break;
 800ddde:	e14d      	b.n	800e07c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	795b      	ldrb	r3, [r3, #5]
 800dde4:	4619      	mov	r1, r3
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fcda 	bl	800e7a0 <USBH_LL_GetURBState>
 800ddec:	4603      	mov	r3, r0
 800ddee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ddf0:	7bbb      	ldrb	r3, [r7, #14]
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d111      	bne.n	800de1a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2207      	movs	r2, #7
 800ddfa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2203      	movs	r2, #3
 800de00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de10:	2300      	movs	r3, #0
 800de12:	2200      	movs	r2, #0
 800de14:	f7fb f9ae 	bl	8009174 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800de18:	e12b      	b.n	800e072 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	2b05      	cmp	r3, #5
 800de1e:	d113      	bne.n	800de48 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	220c      	movs	r2, #12
 800de24:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800de26:	2303      	movs	r3, #3
 800de28:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2203      	movs	r2, #3
 800de2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de3e:	2300      	movs	r3, #0
 800de40:	2200      	movs	r2, #0
 800de42:	f7fb f997 	bl	8009174 <osMessageQueuePut>
      break;
 800de46:	e114      	b.n	800e072 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	d111      	bne.n	800de72 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2205      	movs	r2, #5
 800de52:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2203      	movs	r2, #3
 800de58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de68:	2300      	movs	r3, #0
 800de6a:	2200      	movs	r2, #0
 800de6c:	f7fb f982 	bl	8009174 <osMessageQueuePut>
      break;
 800de70:	e0ff      	b.n	800e072 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800de72:	7bbb      	ldrb	r3, [r7, #14]
 800de74:	2b04      	cmp	r3, #4
 800de76:	f040 80fc 	bne.w	800e072 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	220b      	movs	r2, #11
 800de7e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800de80:	2302      	movs	r3, #2
 800de82:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2203      	movs	r2, #3
 800de88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de98:	2300      	movs	r3, #0
 800de9a:	2200      	movs	r2, #0
 800de9c:	f7fb f96a 	bl	8009174 <osMessageQueuePut>
      break;
 800dea0:	e0e7      	b.n	800e072 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	791b      	ldrb	r3, [r3, #4]
 800dea6:	2200      	movs	r2, #0
 800dea8:	2100      	movs	r1, #0
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f92b 	bl	800e106 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800deb6:	b29a      	uxth	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2208      	movs	r2, #8
 800dec0:	761a      	strb	r2, [r3, #24]

      break;
 800dec2:	e0db      	b.n	800e07c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	791b      	ldrb	r3, [r3, #4]
 800dec8:	4619      	mov	r1, r3
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fc68 	bl	800e7a0 <USBH_LL_GetURBState>
 800ded0:	4603      	mov	r3, r0
 800ded2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ded4:	7bbb      	ldrb	r3, [r7, #14]
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d113      	bne.n	800df02 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	220d      	movs	r2, #13
 800dede:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dee0:	2300      	movs	r3, #0
 800dee2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2203      	movs	r2, #3
 800dee8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800def8:	2300      	movs	r3, #0
 800defa:	2200      	movs	r2, #0
 800defc:	f7fb f93a 	bl	8009174 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800df00:	e0b9      	b.n	800e076 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800df02:	7bbb      	ldrb	r3, [r7, #14]
 800df04:	2b04      	cmp	r3, #4
 800df06:	d111      	bne.n	800df2c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	220b      	movs	r2, #11
 800df0c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2203      	movs	r2, #3
 800df12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df22:	2300      	movs	r3, #0
 800df24:	2200      	movs	r2, #0
 800df26:	f7fb f925 	bl	8009174 <osMessageQueuePut>
      break;
 800df2a:	e0a4      	b.n	800e076 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800df2c:	7bbb      	ldrb	r3, [r7, #14]
 800df2e:	2b05      	cmp	r3, #5
 800df30:	f040 80a1 	bne.w	800e076 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800df34:	2303      	movs	r3, #3
 800df36:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2203      	movs	r2, #3
 800df3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df4c:	2300      	movs	r3, #0
 800df4e:	2200      	movs	r2, #0
 800df50:	f7fb f910 	bl	8009174 <osMessageQueuePut>
      break;
 800df54:	e08f      	b.n	800e076 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	795b      	ldrb	r3, [r3, #5]
 800df5a:	2201      	movs	r2, #1
 800df5c:	9200      	str	r2, [sp, #0]
 800df5e:	2200      	movs	r2, #0
 800df60:	2100      	movs	r1, #0
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 f8aa 	bl	800e0bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800df6e:	b29a      	uxth	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	220a      	movs	r2, #10
 800df78:	761a      	strb	r2, [r3, #24]
      break;
 800df7a:	e07f      	b.n	800e07c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	795b      	ldrb	r3, [r3, #5]
 800df80:	4619      	mov	r1, r3
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 fc0c 	bl	800e7a0 <USBH_LL_GetURBState>
 800df88:	4603      	mov	r3, r0
 800df8a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800df8c:	7bbb      	ldrb	r3, [r7, #14]
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d113      	bne.n	800dfba <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800df92:	2300      	movs	r3, #0
 800df94:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	220d      	movs	r2, #13
 800df9a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2203      	movs	r2, #3
 800dfa0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f7fb f8de 	bl	8009174 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dfb8:	e05f      	b.n	800e07a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dfba:	7bbb      	ldrb	r3, [r7, #14]
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	d111      	bne.n	800dfe4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2209      	movs	r2, #9
 800dfc4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2203      	movs	r2, #3
 800dfca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dfda:	2300      	movs	r3, #0
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f7fb f8c9 	bl	8009174 <osMessageQueuePut>
      break;
 800dfe2:	e04a      	b.n	800e07a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800dfe4:	7bbb      	ldrb	r3, [r7, #14]
 800dfe6:	2b04      	cmp	r3, #4
 800dfe8:	d147      	bne.n	800e07a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	220b      	movs	r2, #11
 800dfee:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2203      	movs	r2, #3
 800dff4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e004:	2300      	movs	r3, #0
 800e006:	2200      	movs	r2, #0
 800e008:	f7fb f8b4 	bl	8009174 <osMessageQueuePut>
      break;
 800e00c:	e035      	b.n	800e07a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	7e5b      	ldrb	r3, [r3, #25]
 800e012:	3301      	adds	r3, #1
 800e014:	b2da      	uxtb	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	765a      	strb	r2, [r3, #25]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	7e5b      	ldrb	r3, [r3, #25]
 800e01e:	2b02      	cmp	r3, #2
 800e020:	d806      	bhi.n	800e030 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2201      	movs	r2, #1
 800e026:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2201      	movs	r2, #1
 800e02c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e02e:	e025      	b.n	800e07c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e036:	2106      	movs	r1, #6
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2200      	movs	r2, #0
 800e040:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	795b      	ldrb	r3, [r3, #5]
 800e046:	4619      	mov	r1, r3
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 f90d 	bl	800e268 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	791b      	ldrb	r3, [r3, #4]
 800e052:	4619      	mov	r1, r3
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f000 f907 	bl	800e268 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e060:	2302      	movs	r3, #2
 800e062:	73fb      	strb	r3, [r7, #15]
      break;
 800e064:	e00a      	b.n	800e07c <USBH_HandleControl+0x484>

    default:
      break;
 800e066:	bf00      	nop
 800e068:	e008      	b.n	800e07c <USBH_HandleControl+0x484>
      break;
 800e06a:	bf00      	nop
 800e06c:	e006      	b.n	800e07c <USBH_HandleControl+0x484>
      break;
 800e06e:	bf00      	nop
 800e070:	e004      	b.n	800e07c <USBH_HandleControl+0x484>
      break;
 800e072:	bf00      	nop
 800e074:	e002      	b.n	800e07c <USBH_HandleControl+0x484>
      break;
 800e076:	bf00      	nop
 800e078:	e000      	b.n	800e07c <USBH_HandleControl+0x484>
      break;
 800e07a:	bf00      	nop
  }

  return status;
 800e07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3710      	adds	r7, #16
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop

0800e088 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b088      	sub	sp, #32
 800e08c:	af04      	add	r7, sp, #16
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	4613      	mov	r3, r2
 800e094:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e096:	79f9      	ldrb	r1, [r7, #7]
 800e098:	2300      	movs	r3, #0
 800e09a:	9303      	str	r3, [sp, #12]
 800e09c:	2308      	movs	r3, #8
 800e09e:	9302      	str	r3, [sp, #8]
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	68f8      	ldr	r0, [r7, #12]
 800e0ae:	f000 fb46 	bl	800e73e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e0b2:	2300      	movs	r3, #0
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b088      	sub	sp, #32
 800e0c0:	af04      	add	r7, sp, #16
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	4611      	mov	r1, r2
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	80fb      	strh	r3, [r7, #6]
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e0e0:	7979      	ldrb	r1, [r7, #5]
 800e0e2:	7e3b      	ldrb	r3, [r7, #24]
 800e0e4:	9303      	str	r3, [sp, #12]
 800e0e6:	88fb      	ldrh	r3, [r7, #6]
 800e0e8:	9302      	str	r3, [sp, #8]
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	9301      	str	r3, [sp, #4]
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	9300      	str	r3, [sp, #0]
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f000 fb21 	bl	800e73e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e0fc:	2300      	movs	r3, #0
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e106:	b580      	push	{r7, lr}
 800e108:	b088      	sub	sp, #32
 800e10a:	af04      	add	r7, sp, #16
 800e10c:	60f8      	str	r0, [r7, #12]
 800e10e:	60b9      	str	r1, [r7, #8]
 800e110:	4611      	mov	r1, r2
 800e112:	461a      	mov	r2, r3
 800e114:	460b      	mov	r3, r1
 800e116:	80fb      	strh	r3, [r7, #6]
 800e118:	4613      	mov	r3, r2
 800e11a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e11c:	7979      	ldrb	r1, [r7, #5]
 800e11e:	2300      	movs	r3, #0
 800e120:	9303      	str	r3, [sp, #12]
 800e122:	88fb      	ldrh	r3, [r7, #6]
 800e124:	9302      	str	r3, [sp, #8]
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	9301      	str	r3, [sp, #4]
 800e12a:	2301      	movs	r3, #1
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	2300      	movs	r3, #0
 800e130:	2201      	movs	r2, #1
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f000 fb03 	bl	800e73e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e138:	2300      	movs	r3, #0

}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3710      	adds	r7, #16
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b088      	sub	sp, #32
 800e146:	af04      	add	r7, sp, #16
 800e148:	60f8      	str	r0, [r7, #12]
 800e14a:	60b9      	str	r1, [r7, #8]
 800e14c:	4611      	mov	r1, r2
 800e14e:	461a      	mov	r2, r3
 800e150:	460b      	mov	r3, r1
 800e152:	80fb      	strh	r3, [r7, #6]
 800e154:	4613      	mov	r3, r2
 800e156:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d001      	beq.n	800e166 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e162:	2300      	movs	r3, #0
 800e164:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e166:	7979      	ldrb	r1, [r7, #5]
 800e168:	7e3b      	ldrb	r3, [r7, #24]
 800e16a:	9303      	str	r3, [sp, #12]
 800e16c:	88fb      	ldrh	r3, [r7, #6]
 800e16e:	9302      	str	r3, [sp, #8]
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	9301      	str	r3, [sp, #4]
 800e174:	2301      	movs	r3, #1
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	2302      	movs	r3, #2
 800e17a:	2200      	movs	r2, #0
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f000 fade 	bl	800e73e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b088      	sub	sp, #32
 800e190:	af04      	add	r7, sp, #16
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	4611      	mov	r1, r2
 800e198:	461a      	mov	r2, r3
 800e19a:	460b      	mov	r3, r1
 800e19c:	80fb      	strh	r3, [r7, #6]
 800e19e:	4613      	mov	r3, r2
 800e1a0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e1a2:	7979      	ldrb	r1, [r7, #5]
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	9303      	str	r3, [sp, #12]
 800e1a8:	88fb      	ldrh	r3, [r7, #6]
 800e1aa:	9302      	str	r3, [sp, #8]
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	9301      	str	r3, [sp, #4]
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	9300      	str	r3, [sp, #0]
 800e1b4:	2302      	movs	r3, #2
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f000 fac0 	bl	800e73e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e1be:	2300      	movs	r3, #0
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3710      	adds	r7, #16
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b086      	sub	sp, #24
 800e1cc:	af04      	add	r7, sp, #16
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	4608      	mov	r0, r1
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	70fb      	strb	r3, [r7, #3]
 800e1da:	460b      	mov	r3, r1
 800e1dc:	70bb      	strb	r3, [r7, #2]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e1e2:	7878      	ldrb	r0, [r7, #1]
 800e1e4:	78ba      	ldrb	r2, [r7, #2]
 800e1e6:	78f9      	ldrb	r1, [r7, #3]
 800e1e8:	8b3b      	ldrh	r3, [r7, #24]
 800e1ea:	9302      	str	r3, [sp, #8]
 800e1ec:	7d3b      	ldrb	r3, [r7, #20]
 800e1ee:	9301      	str	r3, [sp, #4]
 800e1f0:	7c3b      	ldrb	r3, [r7, #16]
 800e1f2:	9300      	str	r3, [sp, #0]
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 fa53 	bl	800e6a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b082      	sub	sp, #8
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	460b      	mov	r3, r1
 800e210:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e212:	78fb      	ldrb	r3, [r7, #3]
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fa72 	bl	800e700 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e226:	b580      	push	{r7, lr}
 800e228:	b084      	sub	sp, #16
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	460b      	mov	r3, r1
 800e230:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 f836 	bl	800e2a4 <USBH_GetFreePipe>
 800e238:	4603      	mov	r3, r0
 800e23a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e23c:	89fb      	ldrh	r3, [r7, #14]
 800e23e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e242:	4293      	cmp	r3, r2
 800e244:	d00a      	beq.n	800e25c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e246:	78fa      	ldrb	r2, [r7, #3]
 800e248:	89fb      	ldrh	r3, [r7, #14]
 800e24a:	f003 030f 	and.w	r3, r3, #15
 800e24e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e252:	6879      	ldr	r1, [r7, #4]
 800e254:	33e0      	adds	r3, #224	; 0xe0
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	440b      	add	r3, r1
 800e25a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e25c:	89fb      	ldrh	r3, [r7, #14]
 800e25e:	b2db      	uxtb	r3, r3
}
 800e260:	4618      	mov	r0, r3
 800e262:	3710      	adds	r7, #16
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	460b      	mov	r3, r1
 800e272:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e274:	78fb      	ldrb	r3, [r7, #3]
 800e276:	2b0f      	cmp	r3, #15
 800e278:	d80d      	bhi.n	800e296 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e27a:	78fb      	ldrb	r3, [r7, #3]
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	33e0      	adds	r3, #224	; 0xe0
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4413      	add	r3, r2
 800e284:	685a      	ldr	r2, [r3, #4]
 800e286:	78fb      	ldrb	r3, [r7, #3]
 800e288:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e28c:	6879      	ldr	r1, [r7, #4]
 800e28e:	33e0      	adds	r3, #224	; 0xe0
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	440b      	add	r3, r1
 800e294:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e296:	2300      	movs	r3, #0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	370c      	adds	r7, #12
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	73fb      	strb	r3, [r7, #15]
 800e2b4:	e00f      	b.n	800e2d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e2b6:	7bfb      	ldrb	r3, [r7, #15]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	33e0      	adds	r3, #224	; 0xe0
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4413      	add	r3, r2
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d102      	bne.n	800e2d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e2ca:	7bfb      	ldrb	r3, [r7, #15]
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	e007      	b.n	800e2e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e2d0:	7bfb      	ldrb	r3, [r7, #15]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	73fb      	strb	r3, [r7, #15]
 800e2d6:	7bfb      	ldrb	r3, [r7, #15]
 800e2d8:	2b0f      	cmp	r3, #15
 800e2da:	d9ec      	bls.n	800e2b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e2dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3714      	adds	r7, #20
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	490e      	ldr	r1, [pc, #56]	; (800e32c <MX_USB_HOST_Init+0x40>)
 800e2f4:	480e      	ldr	r0, [pc, #56]	; (800e330 <MX_USB_HOST_Init+0x44>)
 800e2f6:	f7fe f8d7 	bl	800c4a8 <USBH_Init>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d001      	beq.n	800e304 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e300:	f7f2 fd3a 	bl	8000d78 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800e304:	490b      	ldr	r1, [pc, #44]	; (800e334 <MX_USB_HOST_Init+0x48>)
 800e306:	480a      	ldr	r0, [pc, #40]	; (800e330 <MX_USB_HOST_Init+0x44>)
 800e308:	f7fe f99d 	bl	800c646 <USBH_RegisterClass>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e312:	f7f2 fd31 	bl	8000d78 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800e316:	4806      	ldr	r0, [pc, #24]	; (800e330 <MX_USB_HOST_Init+0x44>)
 800e318:	f7fe fa21 	bl	800c75e <USBH_Start>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e322:	f7f2 fd29 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e326:	bf00      	nop
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	0800e339 	.word	0x0800e339
 800e330:	20005f34 	.word	0x20005f34
 800e334:	20000010 	.word	0x20000010

0800e338 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	460b      	mov	r3, r1
 800e342:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e344:	78fb      	ldrb	r3, [r7, #3]
 800e346:	3b01      	subs	r3, #1
 800e348:	2b04      	cmp	r3, #4
 800e34a:	d819      	bhi.n	800e380 <USBH_UserProcess+0x48>
 800e34c:	a201      	add	r2, pc, #4	; (adr r2, 800e354 <USBH_UserProcess+0x1c>)
 800e34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e352:	bf00      	nop
 800e354:	0800e381 	.word	0x0800e381
 800e358:	0800e371 	.word	0x0800e371
 800e35c:	0800e381 	.word	0x0800e381
 800e360:	0800e379 	.word	0x0800e379
 800e364:	0800e369 	.word	0x0800e369
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e368:	4b09      	ldr	r3, [pc, #36]	; (800e390 <USBH_UserProcess+0x58>)
 800e36a:	2203      	movs	r2, #3
 800e36c:	701a      	strb	r2, [r3, #0]
  break;
 800e36e:	e008      	b.n	800e382 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e370:	4b07      	ldr	r3, [pc, #28]	; (800e390 <USBH_UserProcess+0x58>)
 800e372:	2202      	movs	r2, #2
 800e374:	701a      	strb	r2, [r3, #0]
  break;
 800e376:	e004      	b.n	800e382 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e378:	4b05      	ldr	r3, [pc, #20]	; (800e390 <USBH_UserProcess+0x58>)
 800e37a:	2201      	movs	r2, #1
 800e37c:	701a      	strb	r2, [r3, #0]
  break;
 800e37e:	e000      	b.n	800e382 <USBH_UserProcess+0x4a>

  default:
  break;
 800e380:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e382:	bf00      	nop
 800e384:	370c      	adds	r7, #12
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	20006318 	.word	0x20006318

0800e394 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b08a      	sub	sp, #40	; 0x28
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e39c:	f107 0314 	add.w	r3, r7, #20
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	601a      	str	r2, [r3, #0]
 800e3a4:	605a      	str	r2, [r3, #4]
 800e3a6:	609a      	str	r2, [r3, #8]
 800e3a8:	60da      	str	r2, [r3, #12]
 800e3aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a24      	ldr	r2, [pc, #144]	; (800e444 <HAL_HCD_MspInit+0xb0>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d141      	bne.n	800e43a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	613b      	str	r3, [r7, #16]
 800e3ba:	4b23      	ldr	r3, [pc, #140]	; (800e448 <HAL_HCD_MspInit+0xb4>)
 800e3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3be:	4a22      	ldr	r2, [pc, #136]	; (800e448 <HAL_HCD_MspInit+0xb4>)
 800e3c0:	f043 0302 	orr.w	r3, r3, #2
 800e3c4:	6313      	str	r3, [r2, #48]	; 0x30
 800e3c6:	4b20      	ldr	r3, [pc, #128]	; (800e448 <HAL_HCD_MspInit+0xb4>)
 800e3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ca:	f003 0302 	and.w	r3, r3, #2
 800e3ce:	613b      	str	r3, [r7, #16]
 800e3d0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800e3d2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800e3d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3d8:	2302      	movs	r3, #2
 800e3da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e3e4:	230c      	movs	r3, #12
 800e3e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e3e8:	f107 0314 	add.w	r3, r7, #20
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	4817      	ldr	r0, [pc, #92]	; (800e44c <HAL_HCD_MspInit+0xb8>)
 800e3f0:	f7f3 fffc 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800e3f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e3f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3fe:	2300      	movs	r3, #0
 800e400:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800e402:	f107 0314 	add.w	r3, r7, #20
 800e406:	4619      	mov	r1, r3
 800e408:	4810      	ldr	r0, [pc, #64]	; (800e44c <HAL_HCD_MspInit+0xb8>)
 800e40a:	f7f3 ffef 	bl	80023ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e40e:	2300      	movs	r3, #0
 800e410:	60fb      	str	r3, [r7, #12]
 800e412:	4b0d      	ldr	r3, [pc, #52]	; (800e448 <HAL_HCD_MspInit+0xb4>)
 800e414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e416:	4a0c      	ldr	r2, [pc, #48]	; (800e448 <HAL_HCD_MspInit+0xb4>)
 800e418:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e41c:	6313      	str	r3, [r2, #48]	; 0x30
 800e41e:	4b0a      	ldr	r3, [pc, #40]	; (800e448 <HAL_HCD_MspInit+0xb4>)
 800e420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e426:	60fb      	str	r3, [r7, #12]
 800e428:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e42a:	2200      	movs	r2, #0
 800e42c:	2105      	movs	r1, #5
 800e42e:	204d      	movs	r0, #77	; 0x4d
 800e430:	f7f3 fd18 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e434:	204d      	movs	r0, #77	; 0x4d
 800e436:	f7f3 fd31 	bl	8001e9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e43a:	bf00      	nop
 800e43c:	3728      	adds	r7, #40	; 0x28
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	40040000 	.word	0x40040000
 800e448:	40023800 	.word	0x40023800
 800e44c:	40020400 	.word	0x40020400

0800e450 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fe fe35 	bl	800d0ce <USBH_LL_IncTimer>
}
 800e464:	bf00      	nop
 800e466:	3708      	adds	r7, #8
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fe fe79 	bl	800d172 <USBH_LL_Connect>
}
 800e480:	bf00      	nop
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e496:	4618      	mov	r0, r3
 800e498:	f7fe fe8e 	bl	800d1b8 <USBH_LL_Disconnect>
}
 800e49c:	bf00      	nop
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	70fb      	strb	r3, [r7, #3]
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe fec5 	bl	800d24a <USBH_LL_NotifyURBChange>
#endif
}
 800e4c0:	bf00      	nop
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe fe23 	bl	800d122 <USBH_LL_PortEnabled>
}
 800e4dc:	bf00      	nop
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fe fe2f 	bl	800d156 <USBH_LL_PortDisabled>
}
 800e4f8:	bf00      	nop
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d132      	bne.n	800e578 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800e512:	4a1c      	ldr	r2, [pc, #112]	; (800e584 <USBH_LL_Init+0x84>)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4a19      	ldr	r2, [pc, #100]	; (800e584 <USBH_LL_Init+0x84>)
 800e51e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e522:	4b18      	ldr	r3, [pc, #96]	; (800e584 <USBH_LL_Init+0x84>)
 800e524:	4a18      	ldr	r2, [pc, #96]	; (800e588 <USBH_LL_Init+0x88>)
 800e526:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800e528:	4b16      	ldr	r3, [pc, #88]	; (800e584 <USBH_LL_Init+0x84>)
 800e52a:	220c      	movs	r2, #12
 800e52c:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800e52e:	4b15      	ldr	r3, [pc, #84]	; (800e584 <USBH_LL_Init+0x84>)
 800e530:	2201      	movs	r2, #1
 800e532:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e534:	4b13      	ldr	r3, [pc, #76]	; (800e584 <USBH_LL_Init+0x84>)
 800e536:	2200      	movs	r2, #0
 800e538:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e53a:	4b12      	ldr	r3, [pc, #72]	; (800e584 <USBH_LL_Init+0x84>)
 800e53c:	2202      	movs	r2, #2
 800e53e:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e540:	4b10      	ldr	r3, [pc, #64]	; (800e584 <USBH_LL_Init+0x84>)
 800e542:	2200      	movs	r2, #0
 800e544:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e546:	4b0f      	ldr	r3, [pc, #60]	; (800e584 <USBH_LL_Init+0x84>)
 800e548:	2200      	movs	r2, #0
 800e54a:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e54c:	4b0d      	ldr	r3, [pc, #52]	; (800e584 <USBH_LL_Init+0x84>)
 800e54e:	2200      	movs	r2, #0
 800e550:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e552:	4b0c      	ldr	r3, [pc, #48]	; (800e584 <USBH_LL_Init+0x84>)
 800e554:	2200      	movs	r2, #0
 800e556:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800e558:	480a      	ldr	r0, [pc, #40]	; (800e584 <USBH_LL_Init+0x84>)
 800e55a:	f7f4 f90c 	bl	8002776 <HAL_HCD_Init>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d001      	beq.n	800e568 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800e564:	f7f2 fc08 	bl	8000d78 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800e568:	4806      	ldr	r0, [pc, #24]	; (800e584 <USBH_LL_Init+0x84>)
 800e56a:	f7f4 fd6d 	bl	8003048 <HAL_HCD_GetCurrentFrame>
 800e56e:	4603      	mov	r3, r0
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f7fe fd9c 	bl	800d0b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e578:	2300      	movs	r3, #0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	2000631c 	.word	0x2000631c
 800e588:	40040000 	.word	0x40040000

0800e58c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e594:	2300      	movs	r3, #0
 800e596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e598:	2300      	movs	r3, #0
 800e59a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7f4 fcd8 	bl	8002f58 <HAL_HCD_Start>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e5ac:	7bfb      	ldrb	r3, [r7, #15]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f000 f95e 	bl	800e870 <USBH_Get_USB_Status>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b084      	sub	sp, #16
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7f4 fce0 	bl	8002f9e <HAL_HCD_Stop>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e5e2:	7bfb      	ldrb	r3, [r7, #15]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f000 f943 	bl	800e870 <USBH_Get_USB_Status>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3710      	adds	r7, #16
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e600:	2301      	movs	r3, #1
 800e602:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7f4 fd2a 	bl	8003064 <HAL_HCD_GetCurrentSpeed>
 800e610:	4603      	mov	r3, r0
 800e612:	2b02      	cmp	r3, #2
 800e614:	d00c      	beq.n	800e630 <USBH_LL_GetSpeed+0x38>
 800e616:	2b02      	cmp	r3, #2
 800e618:	d80d      	bhi.n	800e636 <USBH_LL_GetSpeed+0x3e>
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d002      	beq.n	800e624 <USBH_LL_GetSpeed+0x2c>
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d003      	beq.n	800e62a <USBH_LL_GetSpeed+0x32>
 800e622:	e008      	b.n	800e636 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e624:	2300      	movs	r3, #0
 800e626:	73fb      	strb	r3, [r7, #15]
    break;
 800e628:	e008      	b.n	800e63c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e62a:	2301      	movs	r3, #1
 800e62c:	73fb      	strb	r3, [r7, #15]
    break;
 800e62e:	e005      	b.n	800e63c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e630:	2302      	movs	r3, #2
 800e632:	73fb      	strb	r3, [r7, #15]
    break;
 800e634:	e002      	b.n	800e63c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e636:	2301      	movs	r3, #1
 800e638:	73fb      	strb	r3, [r7, #15]
    break;
 800e63a:	bf00      	nop
  }
  return  speed;
 800e63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b084      	sub	sp, #16
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e64e:	2300      	movs	r3, #0
 800e650:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e652:	2300      	movs	r3, #0
 800e654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7f4 fcbb 	bl	8002fd8 <HAL_HCD_ResetPort>
 800e662:	4603      	mov	r3, r0
 800e664:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e666:	7bfb      	ldrb	r3, [r7, #15]
 800e668:	4618      	mov	r0, r3
 800e66a:	f000 f901 	bl	800e870 <USBH_Get_USB_Status>
 800e66e:	4603      	mov	r3, r0
 800e670:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e672:	7bbb      	ldrb	r3, [r7, #14]
}
 800e674:	4618      	mov	r0, r3
 800e676:	3710      	adds	r7, #16
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	460b      	mov	r3, r1
 800e686:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e68e:	78fa      	ldrb	r2, [r7, #3]
 800e690:	4611      	mov	r1, r2
 800e692:	4618      	mov	r0, r3
 800e694:	f7f4 fcc3 	bl	800301e <HAL_HCD_HC_GetXferCount>
 800e698:	4603      	mov	r3, r0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e6a2:	b590      	push	{r4, r7, lr}
 800e6a4:	b089      	sub	sp, #36	; 0x24
 800e6a6:	af04      	add	r7, sp, #16
 800e6a8:	6078      	str	r0, [r7, #4]
 800e6aa:	4608      	mov	r0, r1
 800e6ac:	4611      	mov	r1, r2
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	70fb      	strb	r3, [r7, #3]
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	70bb      	strb	r3, [r7, #2]
 800e6b8:	4613      	mov	r3, r2
 800e6ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e6ca:	787c      	ldrb	r4, [r7, #1]
 800e6cc:	78ba      	ldrb	r2, [r7, #2]
 800e6ce:	78f9      	ldrb	r1, [r7, #3]
 800e6d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e6d2:	9302      	str	r3, [sp, #8]
 800e6d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e6d8:	9301      	str	r3, [sp, #4]
 800e6da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	4623      	mov	r3, r4
 800e6e2:	f7f4 f8af 	bl	8002844 <HAL_HCD_HC_Init>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e6ea:	7bfb      	ldrb	r3, [r7, #15]
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f000 f8bf 	bl	800e870 <USBH_Get_USB_Status>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3714      	adds	r7, #20
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd90      	pop	{r4, r7, pc}

0800e700 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	460b      	mov	r3, r1
 800e70a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e70c:	2300      	movs	r3, #0
 800e70e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e710:	2300      	movs	r3, #0
 800e712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e71a:	78fa      	ldrb	r2, [r7, #3]
 800e71c:	4611      	mov	r1, r2
 800e71e:	4618      	mov	r0, r3
 800e720:	f7f4 f948 	bl	80029b4 <HAL_HCD_HC_Halt>
 800e724:	4603      	mov	r3, r0
 800e726:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e728:	7bfb      	ldrb	r3, [r7, #15]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f000 f8a0 	bl	800e870 <USBH_Get_USB_Status>
 800e730:	4603      	mov	r3, r0
 800e732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e734:	7bbb      	ldrb	r3, [r7, #14]
}
 800e736:	4618      	mov	r0, r3
 800e738:	3710      	adds	r7, #16
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e73e:	b590      	push	{r4, r7, lr}
 800e740:	b089      	sub	sp, #36	; 0x24
 800e742:	af04      	add	r7, sp, #16
 800e744:	6078      	str	r0, [r7, #4]
 800e746:	4608      	mov	r0, r1
 800e748:	4611      	mov	r1, r2
 800e74a:	461a      	mov	r2, r3
 800e74c:	4603      	mov	r3, r0
 800e74e:	70fb      	strb	r3, [r7, #3]
 800e750:	460b      	mov	r3, r1
 800e752:	70bb      	strb	r3, [r7, #2]
 800e754:	4613      	mov	r3, r2
 800e756:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e758:	2300      	movs	r3, #0
 800e75a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e75c:	2300      	movs	r3, #0
 800e75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e766:	787c      	ldrb	r4, [r7, #1]
 800e768:	78ba      	ldrb	r2, [r7, #2]
 800e76a:	78f9      	ldrb	r1, [r7, #3]
 800e76c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e770:	9303      	str	r3, [sp, #12]
 800e772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e774:	9302      	str	r3, [sp, #8]
 800e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e778:	9301      	str	r3, [sp, #4]
 800e77a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e77e:	9300      	str	r3, [sp, #0]
 800e780:	4623      	mov	r3, r4
 800e782:	f7f4 f93b 	bl	80029fc <HAL_HCD_HC_SubmitRequest>
 800e786:	4603      	mov	r3, r0
 800e788:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e78a:	7bfb      	ldrb	r3, [r7, #15]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 f86f 	bl	800e870 <USBH_Get_USB_Status>
 800e792:	4603      	mov	r3, r0
 800e794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e796:	7bbb      	ldrb	r3, [r7, #14]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3714      	adds	r7, #20
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd90      	pop	{r4, r7, pc}

0800e7a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e7b2:	78fa      	ldrb	r2, [r7, #3]
 800e7b4:	4611      	mov	r1, r2
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7f4 fc1c 	bl	8002ff4 <HAL_HCD_HC_GetURBState>
 800e7bc:	4603      	mov	r3, r0
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b082      	sub	sp, #8
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d103      	bne.n	800e7e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800e7dc:	78fb      	ldrb	r3, [r7, #3]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f000 f872 	bl	800e8c8 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e7e4:	20c8      	movs	r0, #200	; 0xc8
 800e7e6:	f7f2 ffef 	bl	80017c8 <HAL_Delay>
  return USBH_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	70fb      	strb	r3, [r7, #3]
 800e800:	4613      	mov	r3, r2
 800e802:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e80a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e80c:	78fa      	ldrb	r2, [r7, #3]
 800e80e:	68f9      	ldr	r1, [r7, #12]
 800e810:	4613      	mov	r3, r2
 800e812:	011b      	lsls	r3, r3, #4
 800e814:	1a9b      	subs	r3, r3, r2
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	440b      	add	r3, r1
 800e81a:	3317      	adds	r3, #23
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d00a      	beq.n	800e838 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e822:	78fa      	ldrb	r2, [r7, #3]
 800e824:	68f9      	ldr	r1, [r7, #12]
 800e826:	4613      	mov	r3, r2
 800e828:	011b      	lsls	r3, r3, #4
 800e82a:	1a9b      	subs	r3, r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	440b      	add	r3, r1
 800e830:	333c      	adds	r3, #60	; 0x3c
 800e832:	78ba      	ldrb	r2, [r7, #2]
 800e834:	701a      	strb	r2, [r3, #0]
 800e836:	e009      	b.n	800e84c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e838:	78fa      	ldrb	r2, [r7, #3]
 800e83a:	68f9      	ldr	r1, [r7, #12]
 800e83c:	4613      	mov	r3, r2
 800e83e:	011b      	lsls	r3, r3, #4
 800e840:	1a9b      	subs	r3, r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	440b      	add	r3, r1
 800e846:	333d      	adds	r3, #61	; 0x3d
 800e848:	78ba      	ldrb	r2, [r7, #2]
 800e84a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3714      	adds	r7, #20
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b082      	sub	sp, #8
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7f2 ffb0 	bl	80017c8 <HAL_Delay>
}
 800e868:	bf00      	nop
 800e86a:	3708      	adds	r7, #8
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e870:	b480      	push	{r7}
 800e872:	b085      	sub	sp, #20
 800e874:	af00      	add	r7, sp, #0
 800e876:	4603      	mov	r3, r0
 800e878:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e87a:	2300      	movs	r3, #0
 800e87c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e87e:	79fb      	ldrb	r3, [r7, #7]
 800e880:	2b03      	cmp	r3, #3
 800e882:	d817      	bhi.n	800e8b4 <USBH_Get_USB_Status+0x44>
 800e884:	a201      	add	r2, pc, #4	; (adr r2, 800e88c <USBH_Get_USB_Status+0x1c>)
 800e886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e88a:	bf00      	nop
 800e88c:	0800e89d 	.word	0x0800e89d
 800e890:	0800e8a3 	.word	0x0800e8a3
 800e894:	0800e8a9 	.word	0x0800e8a9
 800e898:	0800e8af 	.word	0x0800e8af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e89c:	2300      	movs	r3, #0
 800e89e:	73fb      	strb	r3, [r7, #15]
    break;
 800e8a0:	e00b      	b.n	800e8ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e8a2:	2302      	movs	r3, #2
 800e8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e8a6:	e008      	b.n	800e8ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e8ac:	e005      	b.n	800e8ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e8ae:	2302      	movs	r3, #2
 800e8b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e8b2:	e002      	b.n	800e8ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e8b4:	2302      	movs	r3, #2
 800e8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e8b8:	bf00      	nop
  }
  return usb_status;
 800e8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3714      	adds	r7, #20
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e8d2:	79fb      	ldrb	r3, [r7, #7]
 800e8d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800e8d6:	79fb      	ldrb	r3, [r7, #7]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	73fb      	strb	r3, [r7, #15]
 800e8e0:	e001      	b.n	800e8e6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800e8e6:	7bfb      	ldrb	r3, [r7, #15]
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	2110      	movs	r1, #16
 800e8ec:	4803      	ldr	r0, [pc, #12]	; (800e8fc <MX_DriverVbusHS+0x34>)
 800e8ee:	f7f3 ff29 	bl	8002744 <HAL_GPIO_WritePin>
}
 800e8f2:	bf00      	nop
 800e8f4:	3710      	adds	r7, #16
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	40020800 	.word	0x40020800

0800e900 <malloc>:
 800e900:	4b02      	ldr	r3, [pc, #8]	; (800e90c <malloc+0xc>)
 800e902:	4601      	mov	r1, r0
 800e904:	6818      	ldr	r0, [r3, #0]
 800e906:	f000 b82b 	b.w	800e960 <_malloc_r>
 800e90a:	bf00      	nop
 800e90c:	2000007c 	.word	0x2000007c

0800e910 <free>:
 800e910:	4b02      	ldr	r3, [pc, #8]	; (800e91c <free+0xc>)
 800e912:	4601      	mov	r1, r0
 800e914:	6818      	ldr	r0, [r3, #0]
 800e916:	f000 b901 	b.w	800eb1c <_free_r>
 800e91a:	bf00      	nop
 800e91c:	2000007c 	.word	0x2000007c

0800e920 <sbrk_aligned>:
 800e920:	b570      	push	{r4, r5, r6, lr}
 800e922:	4e0e      	ldr	r6, [pc, #56]	; (800e95c <sbrk_aligned+0x3c>)
 800e924:	460c      	mov	r4, r1
 800e926:	6831      	ldr	r1, [r6, #0]
 800e928:	4605      	mov	r5, r0
 800e92a:	b911      	cbnz	r1, 800e932 <sbrk_aligned+0x12>
 800e92c:	f000 f8ac 	bl	800ea88 <_sbrk_r>
 800e930:	6030      	str	r0, [r6, #0]
 800e932:	4621      	mov	r1, r4
 800e934:	4628      	mov	r0, r5
 800e936:	f000 f8a7 	bl	800ea88 <_sbrk_r>
 800e93a:	1c43      	adds	r3, r0, #1
 800e93c:	d00a      	beq.n	800e954 <sbrk_aligned+0x34>
 800e93e:	1cc4      	adds	r4, r0, #3
 800e940:	f024 0403 	bic.w	r4, r4, #3
 800e944:	42a0      	cmp	r0, r4
 800e946:	d007      	beq.n	800e958 <sbrk_aligned+0x38>
 800e948:	1a21      	subs	r1, r4, r0
 800e94a:	4628      	mov	r0, r5
 800e94c:	f000 f89c 	bl	800ea88 <_sbrk_r>
 800e950:	3001      	adds	r0, #1
 800e952:	d101      	bne.n	800e958 <sbrk_aligned+0x38>
 800e954:	f04f 34ff 	mov.w	r4, #4294967295
 800e958:	4620      	mov	r0, r4
 800e95a:	bd70      	pop	{r4, r5, r6, pc}
 800e95c:	20006700 	.word	0x20006700

0800e960 <_malloc_r>:
 800e960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e964:	1ccd      	adds	r5, r1, #3
 800e966:	f025 0503 	bic.w	r5, r5, #3
 800e96a:	3508      	adds	r5, #8
 800e96c:	2d0c      	cmp	r5, #12
 800e96e:	bf38      	it	cc
 800e970:	250c      	movcc	r5, #12
 800e972:	2d00      	cmp	r5, #0
 800e974:	4607      	mov	r7, r0
 800e976:	db01      	blt.n	800e97c <_malloc_r+0x1c>
 800e978:	42a9      	cmp	r1, r5
 800e97a:	d905      	bls.n	800e988 <_malloc_r+0x28>
 800e97c:	230c      	movs	r3, #12
 800e97e:	603b      	str	r3, [r7, #0]
 800e980:	2600      	movs	r6, #0
 800e982:	4630      	mov	r0, r6
 800e984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e988:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ea5c <_malloc_r+0xfc>
 800e98c:	f000 f868 	bl	800ea60 <__malloc_lock>
 800e990:	f8d8 3000 	ldr.w	r3, [r8]
 800e994:	461c      	mov	r4, r3
 800e996:	bb5c      	cbnz	r4, 800e9f0 <_malloc_r+0x90>
 800e998:	4629      	mov	r1, r5
 800e99a:	4638      	mov	r0, r7
 800e99c:	f7ff ffc0 	bl	800e920 <sbrk_aligned>
 800e9a0:	1c43      	adds	r3, r0, #1
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	d155      	bne.n	800ea52 <_malloc_r+0xf2>
 800e9a6:	f8d8 4000 	ldr.w	r4, [r8]
 800e9aa:	4626      	mov	r6, r4
 800e9ac:	2e00      	cmp	r6, #0
 800e9ae:	d145      	bne.n	800ea3c <_malloc_r+0xdc>
 800e9b0:	2c00      	cmp	r4, #0
 800e9b2:	d048      	beq.n	800ea46 <_malloc_r+0xe6>
 800e9b4:	6823      	ldr	r3, [r4, #0]
 800e9b6:	4631      	mov	r1, r6
 800e9b8:	4638      	mov	r0, r7
 800e9ba:	eb04 0903 	add.w	r9, r4, r3
 800e9be:	f000 f863 	bl	800ea88 <_sbrk_r>
 800e9c2:	4581      	cmp	r9, r0
 800e9c4:	d13f      	bne.n	800ea46 <_malloc_r+0xe6>
 800e9c6:	6821      	ldr	r1, [r4, #0]
 800e9c8:	1a6d      	subs	r5, r5, r1
 800e9ca:	4629      	mov	r1, r5
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	f7ff ffa7 	bl	800e920 <sbrk_aligned>
 800e9d2:	3001      	adds	r0, #1
 800e9d4:	d037      	beq.n	800ea46 <_malloc_r+0xe6>
 800e9d6:	6823      	ldr	r3, [r4, #0]
 800e9d8:	442b      	add	r3, r5
 800e9da:	6023      	str	r3, [r4, #0]
 800e9dc:	f8d8 3000 	ldr.w	r3, [r8]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d038      	beq.n	800ea56 <_malloc_r+0xf6>
 800e9e4:	685a      	ldr	r2, [r3, #4]
 800e9e6:	42a2      	cmp	r2, r4
 800e9e8:	d12b      	bne.n	800ea42 <_malloc_r+0xe2>
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	605a      	str	r2, [r3, #4]
 800e9ee:	e00f      	b.n	800ea10 <_malloc_r+0xb0>
 800e9f0:	6822      	ldr	r2, [r4, #0]
 800e9f2:	1b52      	subs	r2, r2, r5
 800e9f4:	d41f      	bmi.n	800ea36 <_malloc_r+0xd6>
 800e9f6:	2a0b      	cmp	r2, #11
 800e9f8:	d917      	bls.n	800ea2a <_malloc_r+0xca>
 800e9fa:	1961      	adds	r1, r4, r5
 800e9fc:	42a3      	cmp	r3, r4
 800e9fe:	6025      	str	r5, [r4, #0]
 800ea00:	bf18      	it	ne
 800ea02:	6059      	strne	r1, [r3, #4]
 800ea04:	6863      	ldr	r3, [r4, #4]
 800ea06:	bf08      	it	eq
 800ea08:	f8c8 1000 	streq.w	r1, [r8]
 800ea0c:	5162      	str	r2, [r4, r5]
 800ea0e:	604b      	str	r3, [r1, #4]
 800ea10:	4638      	mov	r0, r7
 800ea12:	f104 060b 	add.w	r6, r4, #11
 800ea16:	f000 f829 	bl	800ea6c <__malloc_unlock>
 800ea1a:	f026 0607 	bic.w	r6, r6, #7
 800ea1e:	1d23      	adds	r3, r4, #4
 800ea20:	1af2      	subs	r2, r6, r3
 800ea22:	d0ae      	beq.n	800e982 <_malloc_r+0x22>
 800ea24:	1b9b      	subs	r3, r3, r6
 800ea26:	50a3      	str	r3, [r4, r2]
 800ea28:	e7ab      	b.n	800e982 <_malloc_r+0x22>
 800ea2a:	42a3      	cmp	r3, r4
 800ea2c:	6862      	ldr	r2, [r4, #4]
 800ea2e:	d1dd      	bne.n	800e9ec <_malloc_r+0x8c>
 800ea30:	f8c8 2000 	str.w	r2, [r8]
 800ea34:	e7ec      	b.n	800ea10 <_malloc_r+0xb0>
 800ea36:	4623      	mov	r3, r4
 800ea38:	6864      	ldr	r4, [r4, #4]
 800ea3a:	e7ac      	b.n	800e996 <_malloc_r+0x36>
 800ea3c:	4634      	mov	r4, r6
 800ea3e:	6876      	ldr	r6, [r6, #4]
 800ea40:	e7b4      	b.n	800e9ac <_malloc_r+0x4c>
 800ea42:	4613      	mov	r3, r2
 800ea44:	e7cc      	b.n	800e9e0 <_malloc_r+0x80>
 800ea46:	230c      	movs	r3, #12
 800ea48:	603b      	str	r3, [r7, #0]
 800ea4a:	4638      	mov	r0, r7
 800ea4c:	f000 f80e 	bl	800ea6c <__malloc_unlock>
 800ea50:	e797      	b.n	800e982 <_malloc_r+0x22>
 800ea52:	6025      	str	r5, [r4, #0]
 800ea54:	e7dc      	b.n	800ea10 <_malloc_r+0xb0>
 800ea56:	605b      	str	r3, [r3, #4]
 800ea58:	deff      	udf	#255	; 0xff
 800ea5a:	bf00      	nop
 800ea5c:	200066fc 	.word	0x200066fc

0800ea60 <__malloc_lock>:
 800ea60:	4801      	ldr	r0, [pc, #4]	; (800ea68 <__malloc_lock+0x8>)
 800ea62:	f000 b84b 	b.w	800eafc <__retarget_lock_acquire_recursive>
 800ea66:	bf00      	nop
 800ea68:	20006840 	.word	0x20006840

0800ea6c <__malloc_unlock>:
 800ea6c:	4801      	ldr	r0, [pc, #4]	; (800ea74 <__malloc_unlock+0x8>)
 800ea6e:	f000 b846 	b.w	800eafe <__retarget_lock_release_recursive>
 800ea72:	bf00      	nop
 800ea74:	20006840 	.word	0x20006840

0800ea78 <memset>:
 800ea78:	4402      	add	r2, r0
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d100      	bne.n	800ea82 <memset+0xa>
 800ea80:	4770      	bx	lr
 800ea82:	f803 1b01 	strb.w	r1, [r3], #1
 800ea86:	e7f9      	b.n	800ea7c <memset+0x4>

0800ea88 <_sbrk_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4d06      	ldr	r5, [pc, #24]	; (800eaa4 <_sbrk_r+0x1c>)
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4604      	mov	r4, r0
 800ea90:	4608      	mov	r0, r1
 800ea92:	602b      	str	r3, [r5, #0]
 800ea94:	f7f2 fde4 	bl	8001660 <_sbrk>
 800ea98:	1c43      	adds	r3, r0, #1
 800ea9a:	d102      	bne.n	800eaa2 <_sbrk_r+0x1a>
 800ea9c:	682b      	ldr	r3, [r5, #0]
 800ea9e:	b103      	cbz	r3, 800eaa2 <_sbrk_r+0x1a>
 800eaa0:	6023      	str	r3, [r4, #0]
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	2000683c 	.word	0x2000683c

0800eaa8 <__errno>:
 800eaa8:	4b01      	ldr	r3, [pc, #4]	; (800eab0 <__errno+0x8>)
 800eaaa:	6818      	ldr	r0, [r3, #0]
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	2000007c 	.word	0x2000007c

0800eab4 <__libc_init_array>:
 800eab4:	b570      	push	{r4, r5, r6, lr}
 800eab6:	4d0d      	ldr	r5, [pc, #52]	; (800eaec <__libc_init_array+0x38>)
 800eab8:	4c0d      	ldr	r4, [pc, #52]	; (800eaf0 <__libc_init_array+0x3c>)
 800eaba:	1b64      	subs	r4, r4, r5
 800eabc:	10a4      	asrs	r4, r4, #2
 800eabe:	2600      	movs	r6, #0
 800eac0:	42a6      	cmp	r6, r4
 800eac2:	d109      	bne.n	800ead8 <__libc_init_array+0x24>
 800eac4:	4d0b      	ldr	r5, [pc, #44]	; (800eaf4 <__libc_init_array+0x40>)
 800eac6:	4c0c      	ldr	r4, [pc, #48]	; (800eaf8 <__libc_init_array+0x44>)
 800eac8:	f000 f874 	bl	800ebb4 <_init>
 800eacc:	1b64      	subs	r4, r4, r5
 800eace:	10a4      	asrs	r4, r4, #2
 800ead0:	2600      	movs	r6, #0
 800ead2:	42a6      	cmp	r6, r4
 800ead4:	d105      	bne.n	800eae2 <__libc_init_array+0x2e>
 800ead6:	bd70      	pop	{r4, r5, r6, pc}
 800ead8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eadc:	4798      	blx	r3
 800eade:	3601      	adds	r6, #1
 800eae0:	e7ee      	b.n	800eac0 <__libc_init_array+0xc>
 800eae2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eae6:	4798      	blx	r3
 800eae8:	3601      	adds	r6, #1
 800eaea:	e7f2      	b.n	800ead2 <__libc_init_array+0x1e>
 800eaec:	0800ec78 	.word	0x0800ec78
 800eaf0:	0800ec78 	.word	0x0800ec78
 800eaf4:	0800ec78 	.word	0x0800ec78
 800eaf8:	0800ec7c 	.word	0x0800ec7c

0800eafc <__retarget_lock_acquire_recursive>:
 800eafc:	4770      	bx	lr

0800eafe <__retarget_lock_release_recursive>:
 800eafe:	4770      	bx	lr

0800eb00 <memcpy>:
 800eb00:	440a      	add	r2, r1
 800eb02:	4291      	cmp	r1, r2
 800eb04:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb08:	d100      	bne.n	800eb0c <memcpy+0xc>
 800eb0a:	4770      	bx	lr
 800eb0c:	b510      	push	{r4, lr}
 800eb0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb16:	4291      	cmp	r1, r2
 800eb18:	d1f9      	bne.n	800eb0e <memcpy+0xe>
 800eb1a:	bd10      	pop	{r4, pc}

0800eb1c <_free_r>:
 800eb1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb1e:	2900      	cmp	r1, #0
 800eb20:	d044      	beq.n	800ebac <_free_r+0x90>
 800eb22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb26:	9001      	str	r0, [sp, #4]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	f1a1 0404 	sub.w	r4, r1, #4
 800eb2e:	bfb8      	it	lt
 800eb30:	18e4      	addlt	r4, r4, r3
 800eb32:	f7ff ff95 	bl	800ea60 <__malloc_lock>
 800eb36:	4a1e      	ldr	r2, [pc, #120]	; (800ebb0 <_free_r+0x94>)
 800eb38:	9801      	ldr	r0, [sp, #4]
 800eb3a:	6813      	ldr	r3, [r2, #0]
 800eb3c:	b933      	cbnz	r3, 800eb4c <_free_r+0x30>
 800eb3e:	6063      	str	r3, [r4, #4]
 800eb40:	6014      	str	r4, [r2, #0]
 800eb42:	b003      	add	sp, #12
 800eb44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb48:	f7ff bf90 	b.w	800ea6c <__malloc_unlock>
 800eb4c:	42a3      	cmp	r3, r4
 800eb4e:	d908      	bls.n	800eb62 <_free_r+0x46>
 800eb50:	6825      	ldr	r5, [r4, #0]
 800eb52:	1961      	adds	r1, r4, r5
 800eb54:	428b      	cmp	r3, r1
 800eb56:	bf01      	itttt	eq
 800eb58:	6819      	ldreq	r1, [r3, #0]
 800eb5a:	685b      	ldreq	r3, [r3, #4]
 800eb5c:	1949      	addeq	r1, r1, r5
 800eb5e:	6021      	streq	r1, [r4, #0]
 800eb60:	e7ed      	b.n	800eb3e <_free_r+0x22>
 800eb62:	461a      	mov	r2, r3
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	b10b      	cbz	r3, 800eb6c <_free_r+0x50>
 800eb68:	42a3      	cmp	r3, r4
 800eb6a:	d9fa      	bls.n	800eb62 <_free_r+0x46>
 800eb6c:	6811      	ldr	r1, [r2, #0]
 800eb6e:	1855      	adds	r5, r2, r1
 800eb70:	42a5      	cmp	r5, r4
 800eb72:	d10b      	bne.n	800eb8c <_free_r+0x70>
 800eb74:	6824      	ldr	r4, [r4, #0]
 800eb76:	4421      	add	r1, r4
 800eb78:	1854      	adds	r4, r2, r1
 800eb7a:	42a3      	cmp	r3, r4
 800eb7c:	6011      	str	r1, [r2, #0]
 800eb7e:	d1e0      	bne.n	800eb42 <_free_r+0x26>
 800eb80:	681c      	ldr	r4, [r3, #0]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	6053      	str	r3, [r2, #4]
 800eb86:	440c      	add	r4, r1
 800eb88:	6014      	str	r4, [r2, #0]
 800eb8a:	e7da      	b.n	800eb42 <_free_r+0x26>
 800eb8c:	d902      	bls.n	800eb94 <_free_r+0x78>
 800eb8e:	230c      	movs	r3, #12
 800eb90:	6003      	str	r3, [r0, #0]
 800eb92:	e7d6      	b.n	800eb42 <_free_r+0x26>
 800eb94:	6825      	ldr	r5, [r4, #0]
 800eb96:	1961      	adds	r1, r4, r5
 800eb98:	428b      	cmp	r3, r1
 800eb9a:	bf04      	itt	eq
 800eb9c:	6819      	ldreq	r1, [r3, #0]
 800eb9e:	685b      	ldreq	r3, [r3, #4]
 800eba0:	6063      	str	r3, [r4, #4]
 800eba2:	bf04      	itt	eq
 800eba4:	1949      	addeq	r1, r1, r5
 800eba6:	6021      	streq	r1, [r4, #0]
 800eba8:	6054      	str	r4, [r2, #4]
 800ebaa:	e7ca      	b.n	800eb42 <_free_r+0x26>
 800ebac:	b003      	add	sp, #12
 800ebae:	bd30      	pop	{r4, r5, pc}
 800ebb0:	200066fc 	.word	0x200066fc

0800ebb4 <_init>:
 800ebb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebb6:	bf00      	nop
 800ebb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebba:	bc08      	pop	{r3}
 800ebbc:	469e      	mov	lr, r3
 800ebbe:	4770      	bx	lr

0800ebc0 <_fini>:
 800ebc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc2:	bf00      	nop
 800ebc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebc6:	bc08      	pop	{r3}
 800ebc8:	469e      	mov	lr, r3
 800ebca:	4770      	bx	lr
